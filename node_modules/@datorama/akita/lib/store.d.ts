import { BehaviorSubject, Observable } from 'rxjs';
import { deepFreeze } from './deepFreeze';
import { StoreConfigOptions, UpdatableStoreConfigOptions } from './storeConfig';
import { StoreCache, UpdateStateCallback } from './types';
/**
 *
 * Store for managing any type of data
 *
 * @example
 *
 * export interface SessionState {
 *   token: string;
 *   userDetails: UserDetails
 * }
 *
 * export function createInitialState(): SessionState {
 *  return {
 *    token: '',
 *    userDetails: null
 *  };
 * }
 *
 * @StoreConfig({ name: 'session' })
 * export class SessionStore extends Store<SessionState> {
 *   constructor() {
 *    super(createInitialState());
 *   }
 * }
 */
import * as ɵngcc0 from '@angular/core';
export declare class Store<S = any> {
    protected options: Partial<StoreConfigOptions>;
    private store;
    private storeValue;
    private inTransaction;
    private _initialState;
    protected cache: StoreCache;
    constructor(initialState: Partial<S>, options?: Partial<StoreConfigOptions>);
    /**
     *  Set the loading state
     *
     *  @example
     *
     *  store.setLoading(true)
     *
     */
    setLoading(loading?: boolean): void;
    /**
     *
     * Set whether the data is cached
     *
     * @example
     *
     * store.setHasCache(true)
     * store.setHasCache(false)
     * store.setHasCache(true, { restartTTL: true })
     *
     */
    setHasCache(hasCache: boolean, options?: {
        restartTTL: boolean;
    }): void;
    /**
     *
     * Sometimes we need to access the store value from a store
     *
     * @example middleware
     *
     */
    getValue(): S;
    /**
     *  Set the error state
     *
     *  @example
     *
     *  store.setError({text: 'unable to load data' })
     *
     */
    setError<T>(error: T): void;
    _select<R>(project: (store: S) => R): Observable<R>;
    _value(): S;
    _cache(): BehaviorSubject<boolean>;
    readonly config: StoreConfigOptions;
    readonly storeName: string;
    readonly deepFreeze: typeof deepFreeze;
    readonly cacheConfig: {
        ttl: number;
    };
    readonly _producerFn: (state: any, fn: any) => any;
    readonly resettable: boolean;
    _setState(newState: ((state: Readonly<S>) => S) | S, _dispatchAction?: boolean): void;
    /**
     *
     * Reset the current store back to the initial value
     *
     * @example
     *
     * store.reset()
     *
     */
    reset(): void;
    /**
     *
     * Update the store's value
     *
     * @example
     *
     * this.store.update(state => {
     *   return {...}
     * })
     */
    update(stateCallback: UpdateStateCallback<S>): any;
    /**
     *
     * @example
     *
     *  this.store.update({ token: token })
     */
    update(state: Partial<S>): any;
    updateStoreConfig(newOptions: UpdatableStoreConfigOptions): void;
    akitaPreUpdate(_: Readonly<S>, nextState: Readonly<S>): S;
    ngOnDestroy(): void;
    /**
     *
     * Destroy the store
     *
     * @example
     *
     * store.destroy()
     *
     */
    destroy(): void;
    private onInit;
    private dispatch;
    private watchTransaction;
    private isResettable;
    private handleTransaction;
    private getCacheTTL;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Store<any>, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Store<any>, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuZC50cyIsInNvdXJjZXMiOlsic3RvcmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWVwRnJlZXplIH0gZnJvbSAnLi9kZWVwRnJlZXplJztcbmltcG9ydCB7IFN0b3JlQ29uZmlnT3B0aW9ucywgVXBkYXRhYmxlU3RvcmVDb25maWdPcHRpb25zIH0gZnJvbSAnLi9zdG9yZUNvbmZpZyc7XG5pbXBvcnQgeyBTdG9yZUNhY2hlLCBVcGRhdGVTdGF0ZUNhbGxiYWNrIH0gZnJvbSAnLi90eXBlcyc7XG4vKipcbiAqXG4gKiBTdG9yZSBmb3IgbWFuYWdpbmcgYW55IHR5cGUgb2YgZGF0YVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uU3RhdGUge1xuICogICB0b2tlbjogc3RyaW5nO1xuICogICB1c2VyRGV0YWlsczogVXNlckRldGFpbHNcbiAqIH1cbiAqXG4gKiBleHBvcnQgZnVuY3Rpb24gY3JlYXRlSW5pdGlhbFN0YXRlKCk6IFNlc3Npb25TdGF0ZSB7XG4gKiAgcmV0dXJuIHtcbiAqICAgIHRva2VuOiAnJyxcbiAqICAgIHVzZXJEZXRhaWxzOiBudWxsXG4gKiAgfTtcbiAqIH1cbiAqXG4gKiBAU3RvcmVDb25maWcoeyBuYW1lOiAnc2Vzc2lvbicgfSlcbiAqIGV4cG9ydCBjbGFzcyBTZXNzaW9uU3RvcmUgZXh0ZW5kcyBTdG9yZTxTZXNzaW9uU3RhdGU+IHtcbiAqICAgY29uc3RydWN0b3IoKSB7XG4gKiAgICBzdXBlcihjcmVhdGVJbml0aWFsU3RhdGUoKSk7XG4gKiAgIH1cbiAqIH1cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RvcmU8UyA9IGFueT4ge1xuICAgIHByb3RlY3RlZCBvcHRpb25zOiBQYXJ0aWFsPFN0b3JlQ29uZmlnT3B0aW9ucz47XG4gICAgcHJpdmF0ZSBzdG9yZTtcbiAgICBwcml2YXRlIHN0b3JlVmFsdWU7XG4gICAgcHJpdmF0ZSBpblRyYW5zYWN0aW9uO1xuICAgIHByaXZhdGUgX2luaXRpYWxTdGF0ZTtcbiAgICBwcm90ZWN0ZWQgY2FjaGU6IFN0b3JlQ2FjaGU7XG4gICAgY29uc3RydWN0b3IoaW5pdGlhbFN0YXRlOiBQYXJ0aWFsPFM+LCBvcHRpb25zPzogUGFydGlhbDxTdG9yZUNvbmZpZ09wdGlvbnM+KTtcbiAgICAvKipcbiAgICAgKiAgU2V0IHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKlxuICAgICAqICBzdG9yZS5zZXRMb2FkaW5nKHRydWUpXG4gICAgICpcbiAgICAgKi9cbiAgICBzZXRMb2FkaW5nKGxvYWRpbmc/OiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFNldCB3aGV0aGVyIHRoZSBkYXRhIGlzIGNhY2hlZFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHN0b3JlLnNldEhhc0NhY2hlKHRydWUpXG4gICAgICogc3RvcmUuc2V0SGFzQ2FjaGUoZmFsc2UpXG4gICAgICogc3RvcmUuc2V0SGFzQ2FjaGUodHJ1ZSwgeyByZXN0YXJ0VFRMOiB0cnVlIH0pXG4gICAgICpcbiAgICAgKi9cbiAgICBzZXRIYXNDYWNoZShoYXNDYWNoZTogYm9vbGVhbiwgb3B0aW9ucz86IHtcbiAgICAgICAgcmVzdGFydFRUTDogYm9vbGVhbjtcbiAgICB9KTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFNvbWV0aW1lcyB3ZSBuZWVkIHRvIGFjY2VzcyB0aGUgc3RvcmUgdmFsdWUgZnJvbSBhIHN0b3JlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZSBtaWRkbGV3YXJlXG4gICAgICpcbiAgICAgKi9cbiAgICBnZXRWYWx1ZSgpOiBTO1xuICAgIC8qKlxuICAgICAqICBTZXQgdGhlIGVycm9yIHN0YXRlXG4gICAgICpcbiAgICAgKiAgQGV4YW1wbGVcbiAgICAgKlxuICAgICAqICBzdG9yZS5zZXRFcnJvcih7dGV4dDogJ3VuYWJsZSB0byBsb2FkIGRhdGEnIH0pXG4gICAgICpcbiAgICAgKi9cbiAgICBzZXRFcnJvcjxUPihlcnJvcjogVCk6IHZvaWQ7XG4gICAgX3NlbGVjdDxSPihwcm9qZWN0OiAoc3RvcmU6IFMpID0+IFIpOiBPYnNlcnZhYmxlPFI+O1xuICAgIF92YWx1ZSgpOiBTO1xuICAgIF9jYWNoZSgpOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj47XG4gICAgcmVhZG9ubHkgY29uZmlnOiBTdG9yZUNvbmZpZ09wdGlvbnM7XG4gICAgcmVhZG9ubHkgc3RvcmVOYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZGVlcEZyZWV6ZTogdHlwZW9mIGRlZXBGcmVlemU7XG4gICAgcmVhZG9ubHkgY2FjaGVDb25maWc6IHtcbiAgICAgICAgdHRsOiBudW1iZXI7XG4gICAgfTtcbiAgICByZWFkb25seSBfcHJvZHVjZXJGbjogKHN0YXRlOiBhbnksIGZuOiBhbnkpID0+IGFueTtcbiAgICByZWFkb25seSByZXNldHRhYmxlOiBib29sZWFuO1xuICAgIF9zZXRTdGF0ZShuZXdTdGF0ZTogKChzdGF0ZTogUmVhZG9ubHk8Uz4pID0+IFMpIHwgUywgX2Rpc3BhdGNoQWN0aW9uPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBSZXNldCB0aGUgY3VycmVudCBzdG9yZSBiYWNrIHRvIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogc3RvcmUucmVzZXQoKVxuICAgICAqXG4gICAgICovXG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFVwZGF0ZSB0aGUgc3RvcmUncyB2YWx1ZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHRoaXMuc3RvcmUudXBkYXRlKHN0YXRlID0+IHtcbiAgICAgKiAgIHJldHVybiB7Li4ufVxuICAgICAqIH0pXG4gICAgICovXG4gICAgdXBkYXRlKHN0YXRlQ2FsbGJhY2s6IFVwZGF0ZVN0YXRlQ2FsbGJhY2s8Uz4pOiBhbnk7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogIHRoaXMuc3RvcmUudXBkYXRlKHsgdG9rZW46IHRva2VuIH0pXG4gICAgICovXG4gICAgdXBkYXRlKHN0YXRlOiBQYXJ0aWFsPFM+KTogYW55O1xuICAgIHVwZGF0ZVN0b3JlQ29uZmlnKG5ld09wdGlvbnM6IFVwZGF0YWJsZVN0b3JlQ29uZmlnT3B0aW9ucyk6IHZvaWQ7XG4gICAgYWtpdGFQcmVVcGRhdGUoXzogUmVhZG9ubHk8Uz4sIG5leHRTdGF0ZTogUmVhZG9ubHk8Uz4pOiBTO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBEZXN0cm95IHRoZSBzdG9yZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHN0b3JlLmRlc3Ryb3koKVxuICAgICAqXG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgb25Jbml0O1xuICAgIHByaXZhdGUgZGlzcGF0Y2g7XG4gICAgcHJpdmF0ZSB3YXRjaFRyYW5zYWN0aW9uO1xuICAgIHByaXZhdGUgaXNSZXNldHRhYmxlO1xuICAgIHByaXZhdGUgaGFuZGxlVHJhbnNhY3Rpb247XG4gICAgcHJpdmF0ZSBnZXRDYWNoZVRUTDtcbn1cbiJdfQ==