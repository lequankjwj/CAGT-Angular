import * as tslib_1 from "tslib";
var AkitaNgDevtools_1;
import { APP_INITIALIZER, ModuleWithProviders, NgModule, NgZone, InjectionToken, Inject, Injectable } from '@angular/core';
import { akitaDevtools } from '@datorama/akita';
import * as i0 from "@angular/core";
export const DEVTOOLS_OPTIONS = new InjectionToken('DevtoolsOptions');
let AkitaDevtools = class AkitaDevtools {
    constructor(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        akitaDevtools(this.ngZone, this.options);
    }
};
AkitaDevtools.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DEVTOOLS_OPTIONS,] }] }
];
AkitaDevtools.ɵprov = i0.ɵɵdefineInjectable({ factory: function AkitaDevtools_Factory() { return new AkitaDevtools(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DEVTOOLS_OPTIONS)); }, token: AkitaDevtools, providedIn: "root" });
AkitaDevtools = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(1, Inject(DEVTOOLS_OPTIONS)),
    tslib_1.__metadata("design:paramtypes", [NgZone, Object])
], AkitaDevtools);
export { AkitaDevtools };
// auto initialize the devtools
export function d() { }
export function init(akitaDevtools) {
    return d;
}
let AkitaNgDevtools = AkitaNgDevtools_1 = class AkitaNgDevtools {
    static forRoot(options) {
        return {
            ngModule: AkitaNgDevtools_1,
            providers: [
                {
                    provide: DEVTOOLS_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: init,
                    deps: [AkitaDevtools],
                    multi: true
                }
            ]
        };
    }
};
AkitaNgDevtools = AkitaNgDevtools_1 = tslib_1.__decorate([
    NgModule({})
], AkitaNgDevtools);
export { AkitaNgDevtools };
//# sourceMappingURL=ng-devtools.module.js.map