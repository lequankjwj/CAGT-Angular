/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { IntlService } from '@progress/kendo-angular-intl';
import { Action } from '../models/navigation-action.enum';
import { CellContext } from '../models/cell-context.interface';
import { ViewService } from '../models/view-service.interface';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class MonthViewService implements ViewService {
    private _intlService;
    constructor(_intlService: IntlService);
    addToDate(min: Date, skip: number): Date;
    datesList(start: Date, count: number): Date[];
    data(options: any): CellContext[][];
    isEqual(candidate?: Date, expected?: Date): boolean;
    isInArray(date: Date, dates: Date[]): boolean;
    isInRange(candidate: Date, min: Date, max: Date): boolean;
    beginningOfPeriod(date: Date): Date;
    isRangeStart(value: Date): boolean;
    move(value: Date, action: Action): Date;
    cellTitle(value: Date): string;
    navigationTitle(value?: Date): string;
    title(current: Date): string;
    rowLength(prependCell?: boolean): number;
    skip(value: Date, min: Date): number;
    total(min: Date, max: Date): number;
    value(current: Date): string;
    viewDate(date: Date, max: Date, viewsCount?: number): Date;
    isWeekend(date: Date): boolean;
    private abbrMonthNames;
    private normalize;
    private wideMonthNames;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MonthViewService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MonthViewService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGgtdmlldy5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm1vbnRoLXZpZXcuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi9tb2RlbHMvbmF2aWdhdGlvbi1hY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBDZWxsQ29udGV4dCB9IGZyb20gJy4uL21vZGVscy9jZWxsLWNvbnRleHQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vbW9kZWxzL3ZpZXctc2VydmljZS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vbnRoVmlld1NlcnZpY2UgaW1wbGVtZW50cyBWaWV3U2VydmljZSB7XG4gICAgcHJpdmF0ZSBfaW50bFNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoX2ludGxTZXJ2aWNlOiBJbnRsU2VydmljZSk7XG4gICAgYWRkVG9EYXRlKG1pbjogRGF0ZSwgc2tpcDogbnVtYmVyKTogRGF0ZTtcbiAgICBkYXRlc0xpc3Qoc3RhcnQ6IERhdGUsIGNvdW50OiBudW1iZXIpOiBEYXRlW107XG4gICAgZGF0YShvcHRpb25zOiBhbnkpOiBDZWxsQ29udGV4dFtdW107XG4gICAgaXNFcXVhbChjYW5kaWRhdGU/OiBEYXRlLCBleHBlY3RlZD86IERhdGUpOiBib29sZWFuO1xuICAgIGlzSW5BcnJheShkYXRlOiBEYXRlLCBkYXRlczogRGF0ZVtdKTogYm9vbGVhbjtcbiAgICBpc0luUmFuZ2UoY2FuZGlkYXRlOiBEYXRlLCBtaW46IERhdGUsIG1heDogRGF0ZSk6IGJvb2xlYW47XG4gICAgYmVnaW5uaW5nT2ZQZXJpb2QoZGF0ZTogRGF0ZSk6IERhdGU7XG4gICAgaXNSYW5nZVN0YXJ0KHZhbHVlOiBEYXRlKTogYm9vbGVhbjtcbiAgICBtb3ZlKHZhbHVlOiBEYXRlLCBhY3Rpb246IEFjdGlvbik6IERhdGU7XG4gICAgY2VsbFRpdGxlKHZhbHVlOiBEYXRlKTogc3RyaW5nO1xuICAgIG5hdmlnYXRpb25UaXRsZSh2YWx1ZT86IERhdGUpOiBzdHJpbmc7XG4gICAgdGl0bGUoY3VycmVudDogRGF0ZSk6IHN0cmluZztcbiAgICByb3dMZW5ndGgocHJlcGVuZENlbGw/OiBib29sZWFuKTogbnVtYmVyO1xuICAgIHNraXAodmFsdWU6IERhdGUsIG1pbjogRGF0ZSk6IG51bWJlcjtcbiAgICB0b3RhbChtaW46IERhdGUsIG1heDogRGF0ZSk6IG51bWJlcjtcbiAgICB2YWx1ZShjdXJyZW50OiBEYXRlKTogc3RyaW5nO1xuICAgIHZpZXdEYXRlKGRhdGU6IERhdGUsIG1heDogRGF0ZSwgdmlld3NDb3VudD86IG51bWJlcik6IERhdGU7XG4gICAgaXNXZWVrZW5kKGRhdGU6IERhdGUpOiBib29sZWFuO1xuICAgIHByaXZhdGUgYWJick1vbnRoTmFtZXM7XG4gICAgcHJpdmF0ZSBub3JtYWxpemU7XG4gICAgcHJpdmF0ZSB3aWRlTW9udGhOYW1lcztcbn1cbiJdfQ==