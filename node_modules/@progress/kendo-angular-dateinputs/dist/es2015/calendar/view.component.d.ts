/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, TemplateRef, Renderer2, NgZone, ElementRef } from '@angular/core';
import { CellContext } from './models/cell-context.interface';
import { ViewService } from './models/view-service.interface';
import { CalendarViewEnum } from './models/view.enum';
import { SelectionRangeEnd } from './models/selection-range-end.type';
import { SelectionRange } from './models/selection-range.interface';
import { BusViewService } from './services/bus-view.service';
import { WeekNamesService } from './services/weeknames.service';
import { DisabledDatesService } from './services/disabled-dates.service';
import { IntlService } from '@progress/kendo-angular-intl';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ViewComponent implements OnChanges, OnDestroy {
    bus: BusViewService;
    intl: IntlService;
    private cdr;
    private weekService;
    private element;
    private zone;
    private renderer;
    private disabledDatesService;
    direction: 'horizontal' | 'vertical';
    isActive: boolean;
    activeView: CalendarViewEnum;
    cellUID: string;
    focusedDate: Date;
    selectedDate: Date;
    viewDate: Date;
    activeRangeEnd: SelectionRangeEnd;
    selectionRange: SelectionRange;
    min: Date;
    max: Date;
    weekNumber: boolean;
    viewIndex: number;
    templateRef: TemplateRef<any>;
    weekNumberTemplateRef: TemplateRef<any>;
    change: EventEmitter<Date>;
    cellEnter: EventEmitter<Date>;
    cellLeave: EventEmitter<Date>;
    weekNames: string[];
    colSpan: number;
    data: CellContext[][];
    service: ViewService;
    title: string;
    private subscriptions;
    private showWeekNumbers;
    private domEvents;
    private currentCellIndex;
    constructor(bus: BusViewService, intl: IntlService, cdr: ChangeDetectorRef, weekService: WeekNamesService, element: ElementRef, zone: NgZone, renderer: Renderer2, disabledDatesService: DisabledDatesService);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    isHorizontal(): boolean;
    isMonthView(): boolean;
    firstDate(rowCtx: CellContext[]): Date;
    getWeekNumber(date: Date): number;
    getWeekNumberContext(rowCtx: CellContext[]): CellContext;
    getStyles(context: CellContext): any;
    tableCellIndex(rowIndex: number, cellIndex: number): string;
    private firstWeekDateContext;
    private updateData;
    private intlChange;
    private disabledDatesChange;
    private bindEvents;
    private clickHandler;
    private mouseLeaveHandler;
    private cellMouseoverHandler;
    private closestCell;
    private emitCellLeave;
    private cellByIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ViewComponent, "[kendoCalendarView]", never, { "direction": "direction"; "isActive": "isActive"; "weekNumber": "weekNumber"; "activeView": "activeView"; "cellUID": "cellUID"; "focusedDate": "focusedDate"; "selectedDate": "selectedDate"; "viewDate": "viewDate"; "activeRangeEnd": "activeRangeEnd"; "selectionRange": "selectionRange"; "min": "min"; "max": "max"; "viewIndex": "viewIndex"; "templateRef": "templateRef"; "weekNumberTemplateRef": "weekNumberTemplateRef"; }, { "change": "change"; "cellEnter": "cellEnter"; "cellLeave": "cellLeave"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidmlldy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgUmVuZGVyZXIyLCBOZ1pvbmUsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENlbGxDb250ZXh0IH0gZnJvbSAnLi9tb2RlbHMvY2VsbC1jb250ZXh0LmludGVyZmFjZSc7XG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4vbW9kZWxzL3ZpZXctc2VydmljZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3RW51bSB9IGZyb20gJy4vbW9kZWxzL3ZpZXcuZW51bSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25SYW5nZUVuZCB9IGZyb20gJy4vbW9kZWxzL3NlbGVjdGlvbi1yYW5nZS1lbmQudHlwZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25SYW5nZSB9IGZyb20gJy4vbW9kZWxzL3NlbGVjdGlvbi1yYW5nZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQnVzVmlld1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2J1cy12aWV3LnNlcnZpY2UnO1xuaW1wb3J0IHsgV2Vla05hbWVzU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvd2Vla25hbWVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGlzYWJsZWREYXRlc1NlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2Rpc2FibGVkLWRhdGVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW50bFNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1pbnRsJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIGJ1czogQnVzVmlld1NlcnZpY2U7XG4gICAgaW50bDogSW50bFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgcHJpdmF0ZSB3ZWVrU2VydmljZTtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZERhdGVzU2VydmljZTtcbiAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCc7XG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgYWN0aXZlVmlldzogQ2FsZW5kYXJWaWV3RW51bTtcbiAgICBjZWxsVUlEOiBzdHJpbmc7XG4gICAgZm9jdXNlZERhdGU6IERhdGU7XG4gICAgc2VsZWN0ZWREYXRlOiBEYXRlO1xuICAgIHZpZXdEYXRlOiBEYXRlO1xuICAgIGFjdGl2ZVJhbmdlRW5kOiBTZWxlY3Rpb25SYW5nZUVuZDtcbiAgICBzZWxlY3Rpb25SYW5nZTogU2VsZWN0aW9uUmFuZ2U7XG4gICAgbWluOiBEYXRlO1xuICAgIG1heDogRGF0ZTtcbiAgICB3ZWVrTnVtYmVyOiBib29sZWFuO1xuICAgIHZpZXdJbmRleDogbnVtYmVyO1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHdlZWtOdW1iZXJUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBjZWxsRW50ZXI6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBjZWxsTGVhdmU6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICB3ZWVrTmFtZXM6IHN0cmluZ1tdO1xuICAgIGNvbFNwYW46IG51bWJlcjtcbiAgICBkYXRhOiBDZWxsQ29udGV4dFtdW107XG4gICAgc2VydmljZTogVmlld1NlcnZpY2U7XG4gICAgdGl0bGU6IHN0cmluZztcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgcHJpdmF0ZSBzaG93V2Vla051bWJlcnM7XG4gICAgcHJpdmF0ZSBkb21FdmVudHM7XG4gICAgcHJpdmF0ZSBjdXJyZW50Q2VsbEluZGV4O1xuICAgIGNvbnN0cnVjdG9yKGJ1czogQnVzVmlld1NlcnZpY2UsIGludGw6IEludGxTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCB3ZWVrU2VydmljZTogV2Vla05hbWVzU2VydmljZSwgZWxlbWVudDogRWxlbWVudFJlZiwgem9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyLCBkaXNhYmxlZERhdGVzU2VydmljZTogRGlzYWJsZWREYXRlc1NlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGlzSG9yaXpvbnRhbCgpOiBib29sZWFuO1xuICAgIGlzTW9udGhWaWV3KCk6IGJvb2xlYW47XG4gICAgZmlyc3REYXRlKHJvd0N0eDogQ2VsbENvbnRleHRbXSk6IERhdGU7XG4gICAgZ2V0V2Vla051bWJlcihkYXRlOiBEYXRlKTogbnVtYmVyO1xuICAgIGdldFdlZWtOdW1iZXJDb250ZXh0KHJvd0N0eDogQ2VsbENvbnRleHRbXSk6IENlbGxDb250ZXh0O1xuICAgIGdldFN0eWxlcyhjb250ZXh0OiBDZWxsQ29udGV4dCk6IGFueTtcbiAgICB0YWJsZUNlbGxJbmRleChyb3dJbmRleDogbnVtYmVyLCBjZWxsSW5kZXg6IG51bWJlcik6IHN0cmluZztcbiAgICBwcml2YXRlIGZpcnN0V2Vla0RhdGVDb250ZXh0O1xuICAgIHByaXZhdGUgdXBkYXRlRGF0YTtcbiAgICBwcml2YXRlIGludGxDaGFuZ2U7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZERhdGVzQ2hhbmdlO1xuICAgIHByaXZhdGUgYmluZEV2ZW50cztcbiAgICBwcml2YXRlIGNsaWNrSGFuZGxlcjtcbiAgICBwcml2YXRlIG1vdXNlTGVhdmVIYW5kbGVyO1xuICAgIHByaXZhdGUgY2VsbE1vdXNlb3ZlckhhbmRsZXI7XG4gICAgcHJpdmF0ZSBjbG9zZXN0Q2VsbDtcbiAgICBwcml2YXRlIGVtaXRDZWxsTGVhdmU7XG4gICAgcHJpdmF0ZSBjZWxsQnlJbmRleDtcbn1cbiJdfQ==