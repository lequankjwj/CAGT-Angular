/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, Renderer2, AfterViewChecked, AfterViewInit, TemplateRef } from '@angular/core';
import { IntlService } from '@progress/kendo-angular-intl';
import { BusViewService } from './services/bus-view.service';
import { CalendarDOMService } from './services/dom.service';
import { CalendarView } from './models/view.type';
import { CalendarViewEnum } from './models/view.enum';
import { ViewService } from './models/view-service.interface';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { PageAction, ScrollAction } from '../virtualization/services/scroller.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class NavigationComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {
    private bus;
    private dom;
    private intl;
    private cdr;
    private renderer;
    activeView: CalendarViewEnum;
    min: Date;
    max: Date;
    focusedDate: Date;
    templateRef: TemplateRef<any>;
    valueChange: EventEmitter<Date>;
    pageChange: EventEmitter<any>;
    virtualization: VirtualizationComponent;
    list: ElementRef;
    readonly getComponentClass: boolean;
    activeViewValue: CalendarView;
    service: ViewService;
    dates: Date[];
    style: any;
    take: number;
    skip: number;
    total: number;
    itemHeight: number;
    topOffset: number;
    bottomOffset: number;
    maxViewHeight: number;
    private indexToScroll;
    private intlSubscription;
    constructor(bus: BusViewService, dom: CalendarDOMService, intl: IntlService, cdr: ChangeDetectorRef, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onPageChange({ skip }: PageAction): void;
    scrollChange({ offset }: ScrollAction): void;
    handleDateChange(args: any): void;
    private getTake;
    private intlChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NavigationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NavigationComponent, "kendo-calendar-navigation", never, { "min": "min"; "max": "max"; "focusedDate": "focusedDate"; "activeView": "activeView"; "templateRef": "templateRef"; }, { "valueChange": "valueChange"; "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibmF2aWdhdGlvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW50bFNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1pbnRsJztcbmltcG9ydCB7IEJ1c1ZpZXdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9idXMtdmlldy5zZXJ2aWNlJztcbmltcG9ydCB7IENhbGVuZGFyRE9NU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvZG9tLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3IH0gZnJvbSAnLi9tb2RlbHMvdmlldy50eXBlJztcbmltcG9ydCB7IENhbGVuZGFyVmlld0VudW0gfSBmcm9tICcuL21vZGVscy92aWV3LmVudW0nO1xuaW1wb3J0IHsgVmlld1NlcnZpY2UgfSBmcm9tICcuL21vZGVscy92aWV3LXNlcnZpY2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IFZpcnR1YWxpemF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vdmlydHVhbGl6YXRpb24vdmlydHVhbGl6YXRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IFBhZ2VBY3Rpb24sIFNjcm9sbEFjdGlvbiB9IGZyb20gJy4uL3ZpcnR1YWxpemF0aW9uL3NlcnZpY2VzL3Njcm9sbGVyLnNlcnZpY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5hdmlnYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgcHJpdmF0ZSBidXM7XG4gICAgcHJpdmF0ZSBkb207XG4gICAgcHJpdmF0ZSBpbnRsO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgYWN0aXZlVmlldzogQ2FsZW5kYXJWaWV3RW51bTtcbiAgICBtaW46IERhdGU7XG4gICAgbWF4OiBEYXRlO1xuICAgIGZvY3VzZWREYXRlOiBEYXRlO1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgdmlydHVhbGl6YXRpb246IFZpcnR1YWxpemF0aW9uQ29tcG9uZW50O1xuICAgIGxpc3Q6IEVsZW1lbnRSZWY7XG4gICAgcmVhZG9ubHkgZ2V0Q29tcG9uZW50Q2xhc3M6IGJvb2xlYW47XG4gICAgYWN0aXZlVmlld1ZhbHVlOiBDYWxlbmRhclZpZXc7XG4gICAgc2VydmljZTogVmlld1NlcnZpY2U7XG4gICAgZGF0ZXM6IERhdGVbXTtcbiAgICBzdHlsZTogYW55O1xuICAgIHRha2U6IG51bWJlcjtcbiAgICBza2lwOiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBpdGVtSGVpZ2h0OiBudW1iZXI7XG4gICAgdG9wT2Zmc2V0OiBudW1iZXI7XG4gICAgYm90dG9tT2Zmc2V0OiBudW1iZXI7XG4gICAgbWF4Vmlld0hlaWdodDogbnVtYmVyO1xuICAgIHByaXZhdGUgaW5kZXhUb1Njcm9sbDtcbiAgICBwcml2YXRlIGludGxTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoYnVzOiBCdXNWaWV3U2VydmljZSwgZG9tOiBDYWxlbmRhckRPTVNlcnZpY2UsIGludGw6IEludGxTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBvblBhZ2VDaGFuZ2UoeyBza2lwIH06IFBhZ2VBY3Rpb24pOiB2b2lkO1xuICAgIHNjcm9sbENoYW5nZSh7IG9mZnNldCB9OiBTY3JvbGxBY3Rpb24pOiB2b2lkO1xuICAgIGhhbmRsZURhdGVDaGFuZ2UoYXJnczogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGdldFRha2U7XG4gICAgcHJpdmF0ZSBpbnRsQ2hhbmdlO1xufVxuIl19