/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, Renderer2, AfterViewChecked, AfterViewInit, TemplateRef } from '@angular/core';
import { IntlService } from '@progress/kendo-angular-intl';
import { PageAction, ScrollAction } from '../virtualization/services/scroller.service';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { BusViewService } from './services/bus-view.service';
import { CalendarDOMService } from './services/dom.service';
import { ViewService } from './models/view-service.interface';
import { CalendarViewEnum } from './models/view.enum';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ViewListComponent implements OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {
    private bus;
    private cdr;
    private intl;
    private dom;
    private renderer;
    cellTemplateRef: TemplateRef<any>;
    weekNumberTemplateRef: TemplateRef<any>;
    headerTitleTemplateRef: TemplateRef<any>;
    activeView: CalendarViewEnum;
    cellUID: string;
    focusedDate: Date;
    isActive: boolean;
    min: Date;
    max: Date;
    value: Date;
    weekNumber: boolean;
    activeDateChange: EventEmitter<Date>;
    valueChange: EventEmitter<Date>;
    pageChange: EventEmitter<any>;
    virtualization: VirtualizationComponent;
    list: ElementRef;
    readonly getComponentClass: boolean;
    readonly getComponentMonthClass: boolean;
    readonly getComponentYearClass: boolean;
    readonly getComponentDecadeClass: boolean;
    readonly getComponentCenturyClass: boolean;
    service: ViewService;
    activeDate: Date;
    dates: Date[];
    cols: number[];
    colWidth: number;
    weekNames: string[];
    take: number;
    skip: number;
    total: number;
    bottomOffset: number;
    viewHeight: number;
    viewOffset: number;
    private animateToIndex;
    private indexToScroll;
    private showWeekNumbers;
    private minViewsToRender;
    private intlSubscription;
    constructor(bus: BusViewService, cdr: ChangeDetectorRef, intl: IntlService, dom: CalendarDOMService, renderer: Renderer2);
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onPageChange({ skip }: PageAction): void;
    scrollChange({ offset }: ScrollAction): void;
    setActiveDate(index: number): void;
    handleDateChange(candidate: Date): void;
    isMonthView(): boolean;
    isScrolled(): boolean;
    private getBottomOffset;
    private getScrollableHeight;
    private getTake;
    private getWeekNames;
    private intlChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ViewListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ViewListComponent, "kendo-calendar-viewlist", never, { "isActive": "isActive"; "min": "min"; "max": "max"; "weekNumber": "weekNumber"; "cellTemplateRef": "cellTemplateRef"; "weekNumberTemplateRef": "weekNumberTemplateRef"; "headerTitleTemplateRef": "headerTitleTemplateRef"; "activeView": "activeView"; "cellUID": "cellUID"; "focusedDate": "focusedDate"; "value": "value"; }, { "activeDateChange": "activeDateChange"; "valueChange": "valueChange"; "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1saXN0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ2aWV3LWxpc3QuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBSZW5kZXJlcjIsIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJbnRsU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWludGwnO1xuaW1wb3J0IHsgUGFnZUFjdGlvbiwgU2Nyb2xsQWN0aW9uIH0gZnJvbSAnLi4vdmlydHVhbGl6YXRpb24vc2VydmljZXMvc2Nyb2xsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBWaXJ0dWFsaXphdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL3ZpcnR1YWxpemF0aW9uL3ZpcnR1YWxpemF0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXNWaWV3U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYnVzLXZpZXcuc2VydmljZSc7XG5pbXBvcnQgeyBDYWxlbmRhckRPTVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2RvbS5zZXJ2aWNlJztcbmltcG9ydCB7IFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi9tb2RlbHMvdmlldy1zZXJ2aWNlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDYWxlbmRhclZpZXdFbnVtIH0gZnJvbSAnLi9tb2RlbHMvdmlldy5lbnVtJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBWaWV3TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkIHtcbiAgICBwcml2YXRlIGJ1cztcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIGludGw7XG4gICAgcHJpdmF0ZSBkb207XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBjZWxsVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgd2Vla051bWJlclRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGhlYWRlclRpdGxlVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgYWN0aXZlVmlldzogQ2FsZW5kYXJWaWV3RW51bTtcbiAgICBjZWxsVUlEOiBzdHJpbmc7XG4gICAgZm9jdXNlZERhdGU6IERhdGU7XG4gICAgaXNBY3RpdmU6IGJvb2xlYW47XG4gICAgbWluOiBEYXRlO1xuICAgIG1heDogRGF0ZTtcbiAgICB2YWx1ZTogRGF0ZTtcbiAgICB3ZWVrTnVtYmVyOiBib29sZWFuO1xuICAgIGFjdGl2ZURhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHZpcnR1YWxpemF0aW9uOiBWaXJ0dWFsaXphdGlvbkNvbXBvbmVudDtcbiAgICBsaXN0OiBFbGVtZW50UmVmO1xuICAgIHJlYWRvbmx5IGdldENvbXBvbmVudENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGdldENvbXBvbmVudE1vbnRoQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZ2V0Q29tcG9uZW50WWVhckNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGdldENvbXBvbmVudERlY2FkZUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGdldENvbXBvbmVudENlbnR1cnlDbGFzczogYm9vbGVhbjtcbiAgICBzZXJ2aWNlOiBWaWV3U2VydmljZTtcbiAgICBhY3RpdmVEYXRlOiBEYXRlO1xuICAgIGRhdGVzOiBEYXRlW107XG4gICAgY29sczogbnVtYmVyW107XG4gICAgY29sV2lkdGg6IG51bWJlcjtcbiAgICB3ZWVrTmFtZXM6IHN0cmluZ1tdO1xuICAgIHRha2U6IG51bWJlcjtcbiAgICBza2lwOiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBib3R0b21PZmZzZXQ6IG51bWJlcjtcbiAgICB2aWV3SGVpZ2h0OiBudW1iZXI7XG4gICAgdmlld09mZnNldDogbnVtYmVyO1xuICAgIHByaXZhdGUgYW5pbWF0ZVRvSW5kZXg7XG4gICAgcHJpdmF0ZSBpbmRleFRvU2Nyb2xsO1xuICAgIHByaXZhdGUgc2hvd1dlZWtOdW1iZXJzO1xuICAgIHByaXZhdGUgbWluVmlld3NUb1JlbmRlcjtcbiAgICBwcml2YXRlIGludGxTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoYnVzOiBCdXNWaWV3U2VydmljZSwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgaW50bDogSW50bFNlcnZpY2UsIGRvbTogQ2FsZW5kYXJET01TZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBvblBhZ2VDaGFuZ2UoeyBza2lwIH06IFBhZ2VBY3Rpb24pOiB2b2lkO1xuICAgIHNjcm9sbENoYW5nZSh7IG9mZnNldCB9OiBTY3JvbGxBY3Rpb24pOiB2b2lkO1xuICAgIHNldEFjdGl2ZURhdGUoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgaGFuZGxlRGF0ZUNoYW5nZShjYW5kaWRhdGU6IERhdGUpOiB2b2lkO1xuICAgIGlzTW9udGhWaWV3KCk6IGJvb2xlYW47XG4gICAgaXNTY3JvbGxlZCgpOiBib29sZWFuO1xuICAgIHByaXZhdGUgZ2V0Qm90dG9tT2Zmc2V0O1xuICAgIHByaXZhdGUgZ2V0U2Nyb2xsYWJsZUhlaWdodDtcbiAgICBwcml2YXRlIGdldFRha2U7XG4gICAgcHJpdmF0ZSBnZXRXZWVrTmFtZXM7XG4gICAgcHJpdmF0ZSBpbnRsQ2hhbmdlO1xufVxuIl19