/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ElementRef, InjectionToken, OnChanges, OnDestroy, OnInit, AfterViewInit, Renderer2, NgZone } from '@angular/core';
import { Scrollable } from './models/scrollable.interface';
import { ScrollerService, PageAction, ScrollAction } from './services/scroller.service';
import { Observable } from 'rxjs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare const SCROLLER_FACTORY_TOKEN: InjectionToken<string>;
/**
 * @hidden
 */
export declare function DEFAULT_SCROLLER_FACTORY(observable: Observable<any>): ScrollerService;
/**
 * @hidden
 */
export declare enum ScrollDirection {
    Backward = 0,
    Forward = 1
}
/**
 * @hidden
 */
export declare class VirtualizationComponent implements OnChanges, OnInit, OnDestroy, AfterViewInit, Scrollable {
    container: ElementRef;
    renderer: Renderer2;
    zone: NgZone;
    direction: 'horizontal' | 'vertical';
    itemHeight: number;
    itemWidth: number;
    topOffset: number;
    bottomOffset: number;
    maxScrollDifference: number;
    scrollOffsetSize: number;
    scrollDuration: number;
    skip: number;
    take: number;
    total: number;
    activeIndexChange: EventEmitter<number>;
    pageChange: EventEmitter<PageAction>;
    scrollChange: EventEmitter<ScrollAction>;
    totalSize: number;
    readonly totalVertexLength: any;
    readonly containerOffsetSize: number;
    readonly containerScrollSize: number;
    readonly containerScrollPosition: number;
    private lastActiveIndex;
    private resolvedPromise;
    private scroller;
    private rowHeightService;
    private dispatcher;
    private scrollSubscription;
    private containerScrollSubscription;
    private animationSubscription;
    constructor(scrollerFactory: any, container: ElementRef, renderer: Renderer2, zone: NgZone);
    readonly wrapperClasses: boolean;
    readonly horizontalClass: boolean;
    ngOnChanges(changes: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getContainerProperty(propertyName: string): number;
    activeIndex(): number;
    itemIndex(offset: number): number;
    itemOffset(index: number): number;
    isIndexVisible(index: number): boolean;
    isListScrolled(index: number): boolean;
    scrollTo(value: number): void;
    scrollToIndex(index: number): void;
    scrollToBottom(): void;
    animateToIndex(index: number): void;
    scrollRange(indexOffset: number, direction: ScrollDirection): any;
    scrollStep(start: number, end: number): number;
    scroll$(): Observable<any>;
    private initServices;
    private createRowHeightService;
    private emitActiveIndex;
    private containerMaxScroll;
    private getContainerScrollDirection;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<VirtualizationComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<VirtualizationComponent, "kendo-virtualization", never, { "direction": "direction"; "itemHeight": "itemHeight"; "itemWidth": "itemWidth"; "topOffset": "topOffset"; "bottomOffset": "bottomOffset"; "maxScrollDifference": "maxScrollDifference"; "scrollOffsetSize": "scrollOffsetSize"; "scrollDuration": "scrollDuration"; "skip": "skip"; "take": "take"; "total": "total"; }, { "activeIndexChange": "activeIndexChange"; "pageChange": "pageChange"; "scrollChange": "scrollChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbGl6YXRpb24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInZpcnR1YWxpemF0aW9uLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBBZnRlclZpZXdJbml0LCBSZW5kZXJlcjIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2Nyb2xsYWJsZSB9IGZyb20gJy4vbW9kZWxzL3Njcm9sbGFibGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNjcm9sbGVyU2VydmljZSwgUGFnZUFjdGlvbiwgU2Nyb2xsQWN0aW9uIH0gZnJvbSAnLi9zZXJ2aWNlcy9zY3JvbGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBTQ1JPTExFUl9GQUNUT1JZX1RPS0VOOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIERFRkFVTFRfU0NST0xMRVJfRkFDVE9SWShvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGFueT4pOiBTY3JvbGxlclNlcnZpY2U7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgZW51bSBTY3JvbGxEaXJlY3Rpb24ge1xuICAgIEJhY2t3YXJkID0gMCxcbiAgICBGb3J3YXJkID0gMVxufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFZpcnR1YWxpemF0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgU2Nyb2xsYWJsZSB7XG4gICAgY29udGFpbmVyOiBFbGVtZW50UmVmO1xuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgem9uZTogTmdab25lO1xuICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnIHwgJ3ZlcnRpY2FsJztcbiAgICBpdGVtSGVpZ2h0OiBudW1iZXI7XG4gICAgaXRlbVdpZHRoOiBudW1iZXI7XG4gICAgdG9wT2Zmc2V0OiBudW1iZXI7XG4gICAgYm90dG9tT2Zmc2V0OiBudW1iZXI7XG4gICAgbWF4U2Nyb2xsRGlmZmVyZW5jZTogbnVtYmVyO1xuICAgIHNjcm9sbE9mZnNldFNpemU6IG51bWJlcjtcbiAgICBzY3JvbGxEdXJhdGlvbjogbnVtYmVyO1xuICAgIHNraXA6IG51bWJlcjtcbiAgICB0YWtlOiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICBhY3RpdmVJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgcGFnZUNoYW5nZTogRXZlbnRFbWl0dGVyPFBhZ2VBY3Rpb24+O1xuICAgIHNjcm9sbENoYW5nZTogRXZlbnRFbWl0dGVyPFNjcm9sbEFjdGlvbj47XG4gICAgdG90YWxTaXplOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgdG90YWxWZXJ0ZXhMZW5ndGg6IGFueTtcbiAgICByZWFkb25seSBjb250YWluZXJPZmZzZXRTaXplOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgY29udGFpbmVyU2Nyb2xsU2l6ZTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGNvbnRhaW5lclNjcm9sbFBvc2l0aW9uOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBsYXN0QWN0aXZlSW5kZXg7XG4gICAgcHJpdmF0ZSByZXNvbHZlZFByb21pc2U7XG4gICAgcHJpdmF0ZSBzY3JvbGxlcjtcbiAgICBwcml2YXRlIHJvd0hlaWdodFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkaXNwYXRjaGVyO1xuICAgIHByaXZhdGUgc2Nyb2xsU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgY29udGFpbmVyU2Nyb2xsU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgYW5pbWF0aW9uU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKHNjcm9sbGVyRmFjdG9yeTogYW55LCBjb250YWluZXI6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSk7XG4gICAgcmVhZG9ubHkgd3JhcHBlckNsYXNzZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaG9yaXpvbnRhbENsYXNzOiBib29sZWFuO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGdldENvbnRhaW5lclByb3BlcnR5KHByb3BlcnR5TmFtZTogc3RyaW5nKTogbnVtYmVyO1xuICAgIGFjdGl2ZUluZGV4KCk6IG51bWJlcjtcbiAgICBpdGVtSW5kZXgob2Zmc2V0OiBudW1iZXIpOiBudW1iZXI7XG4gICAgaXRlbU9mZnNldChpbmRleDogbnVtYmVyKTogbnVtYmVyO1xuICAgIGlzSW5kZXhWaXNpYmxlKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIGlzTGlzdFNjcm9sbGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHNjcm9sbFRvKHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIHNjcm9sbFRvSW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2Nyb2xsVG9Cb3R0b20oKTogdm9pZDtcbiAgICBhbmltYXRlVG9JbmRleChpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBzY3JvbGxSYW5nZShpbmRleE9mZnNldDogbnVtYmVyLCBkaXJlY3Rpb246IFNjcm9sbERpcmVjdGlvbik6IGFueTtcbiAgICBzY3JvbGxTdGVwKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogbnVtYmVyO1xuICAgIHNjcm9sbCQoKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHByaXZhdGUgaW5pdFNlcnZpY2VzO1xuICAgIHByaXZhdGUgY3JlYXRlUm93SGVpZ2h0U2VydmljZTtcbiAgICBwcml2YXRlIGVtaXRBY3RpdmVJbmRleDtcbiAgICBwcml2YXRlIGNvbnRhaW5lck1heFNjcm9sbDtcbiAgICBwcml2YXRlIGdldENvbnRhaW5lclNjcm9sbERpcmVjdGlvbjtcbn1cbiJdfQ==