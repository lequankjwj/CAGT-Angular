/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ElementRef, Renderer2, NgZone, Injector, OnChanges, OnInit, OnDestroy } from '@angular/core';
import { DateFormatPart } from '@progress/kendo-angular-intl';
import { VirtualizationComponent } from '../virtualization/virtualization.component';
import { ListItem } from './models/list-item.interface';
import { ListService } from './models/list-service.interface';
import { TimePickerDOMService } from './services/dom.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class TimeListComponent implements OnChanges, OnInit, OnDestroy {
    private element;
    private injector;
    private dom;
    private renderer;
    private zone;
    min: Date;
    max: Date;
    part: DateFormatPart;
    step: number;
    disabled: boolean;
    value: Date;
    valueChange: EventEmitter<Date>;
    virtualization: VirtualizationComponent;
    readonly tabIndex: number;
    componentClass: boolean;
    animateToIndex: boolean;
    isActive: boolean;
    skip: number;
    total: number;
    service: ListService;
    itemHeight: number;
    listHeight: number;
    topOffset: number;
    bottomOffset: number;
    bottomThreshold: number;
    topThreshold: number;
    style: any;
    data: ListItem[];
    private indexToScroll;
    private scrollSubscription;
    private domEvents;
    constructor(element: ElementRef, injector: Injector, dom: TimePickerDOMService, renderer: Renderer2, zone: NgZone);
    ngOnChanges(changes: any): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    handleChange(dataItem: ListItem): void;
    handleItemClick(args: any): void;
    /**
     * Focuses the host element of the TimeList.
     *
     * @example
     * ```ts
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="timelist.focus()">Focus TimeList</button>
     *  <kendo-timelist #timelist></kendo-timelist>
     * `
     * })
     * export class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the TimeList component.
     */
    blur(): void;
    private itemOffset;
    private hasMissingValue;
    private scrollOnce;
    private serviceSettings;
    private selectedIndex;
    private textHasChanged;
    private handleKeyDown;
    private bindEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimeListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimeListComponent, "kendo-timelist", never, { "min": "min"; "max": "max"; "step": "step"; "disabled": "disabled"; "value": "value"; "part": "part"; }, { "valueChange": "valueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpc3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWVsaXN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE5nWm9uZSwgSW5qZWN0b3IsIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVGb3JtYXRQYXJ0IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBWaXJ0dWFsaXphdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL3ZpcnR1YWxpemF0aW9uL3ZpcnR1YWxpemF0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMaXN0SXRlbSB9IGZyb20gJy4vbW9kZWxzL2xpc3QtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTGlzdFNlcnZpY2UgfSBmcm9tICcuL21vZGVscy9saXN0LXNlcnZpY2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRpbWVQaWNrZXJET01TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9kb20uc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGltZUxpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBpbmplY3RvcjtcbiAgICBwcml2YXRlIGRvbTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBtaW46IERhdGU7XG4gICAgbWF4OiBEYXRlO1xuICAgIHBhcnQ6IERhdGVGb3JtYXRQYXJ0O1xuICAgIHN0ZXA6IG51bWJlcjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB2YWx1ZTogRGF0ZTtcbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIHZpcnR1YWxpemF0aW9uOiBWaXJ0dWFsaXphdGlvbkNvbXBvbmVudDtcbiAgICByZWFkb25seSB0YWJJbmRleDogbnVtYmVyO1xuICAgIGNvbXBvbmVudENsYXNzOiBib29sZWFuO1xuICAgIGFuaW1hdGVUb0luZGV4OiBib29sZWFuO1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIHNraXA6IG51bWJlcjtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIHNlcnZpY2U6IExpc3RTZXJ2aWNlO1xuICAgIGl0ZW1IZWlnaHQ6IG51bWJlcjtcbiAgICBsaXN0SGVpZ2h0OiBudW1iZXI7XG4gICAgdG9wT2Zmc2V0OiBudW1iZXI7XG4gICAgYm90dG9tT2Zmc2V0OiBudW1iZXI7XG4gICAgYm90dG9tVGhyZXNob2xkOiBudW1iZXI7XG4gICAgdG9wVGhyZXNob2xkOiBudW1iZXI7XG4gICAgc3R5bGU6IGFueTtcbiAgICBkYXRhOiBMaXN0SXRlbVtdO1xuICAgIHByaXZhdGUgaW5kZXhUb1Njcm9sbDtcbiAgICBwcml2YXRlIHNjcm9sbFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGRvbUV2ZW50cztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBpbmplY3RvcjogSW5qZWN0b3IsIGRvbTogVGltZVBpY2tlckRPTVNlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgaGFuZGxlQ2hhbmdlKGRhdGFJdGVtOiBMaXN0SXRlbSk6IHZvaWQ7XG4gICAgaGFuZGxlSXRlbUNsaWNrKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgaG9zdCBlbGVtZW50IG9mIHRoZSBUaW1lTGlzdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqIHRlbXBsYXRlOiBgXG4gICAgICogIDxidXR0b24gKGNsaWNrKT1cInRpbWVsaXN0LmZvY3VzKClcIj5Gb2N1cyBUaW1lTGlzdDwvYnV0dG9uPlxuICAgICAqICA8a2VuZG8tdGltZWxpc3QgI3RpbWVsaXN0Pjwva2VuZG8tdGltZWxpc3Q+XG4gICAgICogYFxuICAgICAqIH0pXG4gICAgICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7IH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJsdXJzIHRoZSBUaW1lTGlzdCBjb21wb25lbnQuXG4gICAgICovXG4gICAgYmx1cigpOiB2b2lkO1xuICAgIHByaXZhdGUgaXRlbU9mZnNldDtcbiAgICBwcml2YXRlIGhhc01pc3NpbmdWYWx1ZTtcbiAgICBwcml2YXRlIHNjcm9sbE9uY2U7XG4gICAgcHJpdmF0ZSBzZXJ2aWNlU2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZEluZGV4O1xuICAgIHByaXZhdGUgdGV4dEhhc0NoYW5nZWQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVLZXlEb3duO1xuICAgIHByaXZhdGUgYmluZEV2ZW50cztcbn1cbiJdfQ==