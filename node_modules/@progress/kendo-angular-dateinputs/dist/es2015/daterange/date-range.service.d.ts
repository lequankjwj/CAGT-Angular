/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { BehaviorSubject } from 'rxjs';
import { DateInputComponent } from '../dateinput/dateinput.component';
import { DateRangePopupComponent } from './date-range-popup.component';
import { SelectionRangeEnd } from '../calendar/models/selection-range-end.type';
import { SelectionRange } from '../calendar/models/selection-range.interface';
/**
 * A service that handles the communication between the components that are placed inside the DateRangeComponent.
 * For example, the start and end `DateInput` and `DateRangePopup` components.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DateRangeService {
    /**
     * An Observable instance that notifies when the `activeRangeEnd` state is changed.
     */
    activeRangeEnd$: BehaviorSubject<SelectionRangeEnd>;
    /**
     * An Observable instance that notifies when the `focusedDate` is changed.
     */
    focusedDate$: BehaviorSubject<Date>;
    /**
     * An Observable instance that notifies when the end `DateInput` component is changed.
     * For example, when a new end `DateInput` is attached or when the old one is detached.
     */
    endInput$: BehaviorSubject<DateInputComponent>;
    /**
     * An Observable instance that notifies when the start `DateInput` component is changed.
     * For example, when a new start `DateInput` is attached or the old one is detached.
     */
    startInput$: BehaviorSubject<DateInputComponent>;
    /**
     * An Observable instance that notifies when the `DateRangePopup` component is changed.
     */
    dateRangePopup$: BehaviorSubject<DateRangePopupComponent>;
    /**
     * An Observable instance that notifies when the state of the selection range is changed.
     */
    range$: BehaviorSubject<SelectionRange>;
    /**
     * Gets the current `activeRangeEnd` value.
     */
    readonly activeRangeEnd: SelectionRangeEnd;
    /**
     * Gets the current `focusedDate` value.
     */
    readonly focusedDate: Date;
    /**
     * Gets the `min` range value.
     * The `min` value is extracted from the `start` DateInput value or the `min` value of the Calendar.
     */
    readonly min: Date;
    /**
     * Gets the `max` range value.
     * The `max` value is extracted from the `end` DateInput value or the `max` value of the Calendar.
     */
    readonly max: Date;
    /**
     * Gets the current `selectionRange` value.
     */
    readonly selectionRange: SelectionRange;
    /**
     * Activates the registered `DateRangePopup` component.
     * The method opens the popup and focuses the calendar.
     */
    activatePopup(): void;
    /**
     * Deactivates the registered `DateRangePopup` component.
     * The method closes the popup.
     */
    deactivatePopup(): void;
    /**
     * @hidden
     *
     * Deactivates the registered `DateRangePopup` component and fires the `cancel` event.
     * The method closes the popup.
     */
    cancelPopup(): void;
    /**
     * Completes all observables to mitigate possible memory leaks.
     * Calls the method when a component that uses it is destroyed.
     */
    destroy(): void;
    /**
     * Returns `true` when an active component that is placed inside the `DateRangeComponent` is detected.
     * For example, the opened popup or the focused DateInput.
     *
     * @returns `true` if an active component is present.
     */
    hasActiveComponent(): boolean;
    /**
     * Registers a new start `DateInput` component. Notifies all `startInput$` listeners.
     */
    registerStartInput(startInput: DateInputComponent): void;
    /**
     * Registers a new end `DateInput` component. Notifies all `endInput$` listeners.
     */
    registerEndInput(endInput: DateInputComponent): void;
    /**
     * Registers a new `DateRangePopup` component. Notifies all `dateRangePopup$` listeners.
     */
    registerPopup(dateRangePopup: DateRangePopupComponent): void;
    /**
     * Updates the `activeRangeEnd` value. Notifies all `activeRangeEnd$` listeners.
     */
    setActiveRangeEnd(activeRange: SelectionRangeEnd): void;
    /**
     * Updates the focused date. Notifies all `focusedDate$` listeners.
     */
    setFocusedDate(value: Date): void;
    /**
     * Updates the selection range. Notifies all `range$` listeners.
     */
    setRange(range?: SelectionRange): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateRangeService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DateRangeService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtcmFuZ2Uuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERhdGVJbnB1dENvbXBvbmVudCB9IGZyb20gJy4uL2RhdGVpbnB1dC9kYXRlaW5wdXQuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGVSYW5nZVBvcHVwQ29tcG9uZW50IH0gZnJvbSAnLi9kYXRlLXJhbmdlLXBvcHVwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWxlY3Rpb25SYW5nZUVuZCB9IGZyb20gJy4uL2NhbGVuZGFyL21vZGVscy9zZWxlY3Rpb24tcmFuZ2UtZW5kLnR5cGUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uUmFuZ2UgfSBmcm9tICcuLi9jYWxlbmRhci9tb2RlbHMvc2VsZWN0aW9uLXJhbmdlLmludGVyZmFjZSc7XG4vKipcbiAqIEEgc2VydmljZSB0aGF0IGhhbmRsZXMgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgY29tcG9uZW50cyB0aGF0IGFyZSBwbGFjZWQgaW5zaWRlIHRoZSBEYXRlUmFuZ2VDb21wb25lbnQuXG4gKiBGb3IgZXhhbXBsZSwgdGhlIHN0YXJ0IGFuZCBlbmQgYERhdGVJbnB1dGAgYW5kIGBEYXRlUmFuZ2VQb3B1cGAgY29tcG9uZW50cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVJhbmdlU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogQW4gT2JzZXJ2YWJsZSBpbnN0YW5jZSB0aGF0IG5vdGlmaWVzIHdoZW4gdGhlIGBhY3RpdmVSYW5nZUVuZGAgc3RhdGUgaXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBhY3RpdmVSYW5nZUVuZCQ6IEJlaGF2aW9yU3ViamVjdDxTZWxlY3Rpb25SYW5nZUVuZD47XG4gICAgLyoqXG4gICAgICogQW4gT2JzZXJ2YWJsZSBpbnN0YW5jZSB0aGF0IG5vdGlmaWVzIHdoZW4gdGhlIGBmb2N1c2VkRGF0ZWAgaXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBmb2N1c2VkRGF0ZSQ6IEJlaGF2aW9yU3ViamVjdDxEYXRlPjtcbiAgICAvKipcbiAgICAgKiBBbiBPYnNlcnZhYmxlIGluc3RhbmNlIHRoYXQgbm90aWZpZXMgd2hlbiB0aGUgZW5kIGBEYXRlSW5wdXRgIGNvbXBvbmVudCBpcyBjaGFuZ2VkLlxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGEgbmV3IGVuZCBgRGF0ZUlucHV0YCBpcyBhdHRhY2hlZCBvciB3aGVuIHRoZSBvbGQgb25lIGlzIGRldGFjaGVkLlxuICAgICAqL1xuICAgIGVuZElucHV0JDogQmVoYXZpb3JTdWJqZWN0PERhdGVJbnB1dENvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogQW4gT2JzZXJ2YWJsZSBpbnN0YW5jZSB0aGF0IG5vdGlmaWVzIHdoZW4gdGhlIHN0YXJ0IGBEYXRlSW5wdXRgIGNvbXBvbmVudCBpcyBjaGFuZ2VkLlxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGEgbmV3IHN0YXJ0IGBEYXRlSW5wdXRgIGlzIGF0dGFjaGVkIG9yIHRoZSBvbGQgb25lIGlzIGRldGFjaGVkLlxuICAgICAqL1xuICAgIHN0YXJ0SW5wdXQkOiBCZWhhdmlvclN1YmplY3Q8RGF0ZUlucHV0Q29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKiBBbiBPYnNlcnZhYmxlIGluc3RhbmNlIHRoYXQgbm90aWZpZXMgd2hlbiB0aGUgYERhdGVSYW5nZVBvcHVwYCBjb21wb25lbnQgaXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICBkYXRlUmFuZ2VQb3B1cCQ6IEJlaGF2aW9yU3ViamVjdDxEYXRlUmFuZ2VQb3B1cENvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogQW4gT2JzZXJ2YWJsZSBpbnN0YW5jZSB0aGF0IG5vdGlmaWVzIHdoZW4gdGhlIHN0YXRlIG9mIHRoZSBzZWxlY3Rpb24gcmFuZ2UgaXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICByYW5nZSQ6IEJlaGF2aW9yU3ViamVjdDxTZWxlY3Rpb25SYW5nZT47XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBgYWN0aXZlUmFuZ2VFbmRgIHZhbHVlLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGl2ZVJhbmdlRW5kOiBTZWxlY3Rpb25SYW5nZUVuZDtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGBmb2N1c2VkRGF0ZWAgdmFsdWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZm9jdXNlZERhdGU6IERhdGU7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYG1pbmAgcmFuZ2UgdmFsdWUuXG4gICAgICogVGhlIGBtaW5gIHZhbHVlIGlzIGV4dHJhY3RlZCBmcm9tIHRoZSBgc3RhcnRgIERhdGVJbnB1dCB2YWx1ZSBvciB0aGUgYG1pbmAgdmFsdWUgb2YgdGhlIENhbGVuZGFyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1pbjogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgbWF4YCByYW5nZSB2YWx1ZS5cbiAgICAgKiBUaGUgYG1heGAgdmFsdWUgaXMgZXh0cmFjdGVkIGZyb20gdGhlIGBlbmRgIERhdGVJbnB1dCB2YWx1ZSBvciB0aGUgYG1heGAgdmFsdWUgb2YgdGhlIENhbGVuZGFyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG1heDogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IGBzZWxlY3Rpb25SYW5nZWAgdmFsdWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VsZWN0aW9uUmFuZ2U6IFNlbGVjdGlvblJhbmdlO1xuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgcmVnaXN0ZXJlZCBgRGF0ZVJhbmdlUG9wdXBgIGNvbXBvbmVudC5cbiAgICAgKiBUaGUgbWV0aG9kIG9wZW5zIHRoZSBwb3B1cCBhbmQgZm9jdXNlcyB0aGUgY2FsZW5kYXIuXG4gICAgICovXG4gICAgYWN0aXZhdGVQb3B1cCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIERlYWN0aXZhdGVzIHRoZSByZWdpc3RlcmVkIGBEYXRlUmFuZ2VQb3B1cGAgY29tcG9uZW50LlxuICAgICAqIFRoZSBtZXRob2QgY2xvc2VzIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICBkZWFjdGl2YXRlUG9wdXAoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICpcbiAgICAgKiBEZWFjdGl2YXRlcyB0aGUgcmVnaXN0ZXJlZCBgRGF0ZVJhbmdlUG9wdXBgIGNvbXBvbmVudCBhbmQgZmlyZXMgdGhlIGBjYW5jZWxgIGV2ZW50LlxuICAgICAqIFRoZSBtZXRob2QgY2xvc2VzIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICBjYW5jZWxQb3B1cCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbXBsZXRlcyBhbGwgb2JzZXJ2YWJsZXMgdG8gbWl0aWdhdGUgcG9zc2libGUgbWVtb3J5IGxlYWtzLlxuICAgICAqIENhbGxzIHRoZSBtZXRob2Qgd2hlbiBhIGNvbXBvbmVudCB0aGF0IHVzZXMgaXQgaXMgZGVzdHJveWVkLlxuICAgICAqL1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCB3aGVuIGFuIGFjdGl2ZSBjb21wb25lbnQgdGhhdCBpcyBwbGFjZWQgaW5zaWRlIHRoZSBgRGF0ZVJhbmdlQ29tcG9uZW50YCBpcyBkZXRlY3RlZC5cbiAgICAgKiBGb3IgZXhhbXBsZSwgdGhlIG9wZW5lZCBwb3B1cCBvciB0aGUgZm9jdXNlZCBEYXRlSW5wdXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYW4gYWN0aXZlIGNvbXBvbmVudCBpcyBwcmVzZW50LlxuICAgICAqL1xuICAgIGhhc0FjdGl2ZUNvbXBvbmVudCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBzdGFydCBgRGF0ZUlucHV0YCBjb21wb25lbnQuIE5vdGlmaWVzIGFsbCBgc3RhcnRJbnB1dCRgIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICByZWdpc3RlclN0YXJ0SW5wdXQoc3RhcnRJbnB1dDogRGF0ZUlucHV0Q29tcG9uZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYSBuZXcgZW5kIGBEYXRlSW5wdXRgIGNvbXBvbmVudC4gTm90aWZpZXMgYWxsIGBlbmRJbnB1dCRgIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICByZWdpc3RlckVuZElucHV0KGVuZElucHV0OiBEYXRlSW5wdXRDb21wb25lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBhIG5ldyBgRGF0ZVJhbmdlUG9wdXBgIGNvbXBvbmVudC4gTm90aWZpZXMgYWxsIGBkYXRlUmFuZ2VQb3B1cCRgIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICByZWdpc3RlclBvcHVwKGRhdGVSYW5nZVBvcHVwOiBEYXRlUmFuZ2VQb3B1cENvbXBvbmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgYGFjdGl2ZVJhbmdlRW5kYCB2YWx1ZS4gTm90aWZpZXMgYWxsIGBhY3RpdmVSYW5nZUVuZCRgIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBzZXRBY3RpdmVSYW5nZUVuZChhY3RpdmVSYW5nZTogU2VsZWN0aW9uUmFuZ2VFbmQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIGZvY3VzZWQgZGF0ZS4gTm90aWZpZXMgYWxsIGBmb2N1c2VkRGF0ZSRgIGxpc3RlbmVycy5cbiAgICAgKi9cbiAgICBzZXRGb2N1c2VkRGF0ZSh2YWx1ZTogRGF0ZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgc2VsZWN0aW9uIHJhbmdlLiBOb3RpZmllcyBhbGwgYHJhbmdlJGAgbGlzdGVuZXJzLlxuICAgICAqL1xuICAgIHNldFJhbmdlKHJhbmdlPzogU2VsZWN0aW9uUmFuZ2UpOiB2b2lkO1xufVxuIl19