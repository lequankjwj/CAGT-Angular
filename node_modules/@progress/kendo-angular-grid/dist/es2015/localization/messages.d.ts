/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ComponentMessages } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class Messages extends ComponentMessages {
    /**
     * The text for the empty group panel.
     */
    groupPanelEmpty: string;
    /**
     * The no-records text.
     */
    noRecords: string;
    /**
     * The label for the **First page** button.
     */
    pagerFirstPage: string;
    /**
     * The label for the **Last page** button.
     */
    pagerLastPage: string;
    /**
     * The label for the **Previous page** button.
     */
    pagerPreviousPage: string;
    /**
     * The label for the **Next page** button.
     */
    pagerNextPage: string;
    /**
     * The label displayed before the pager input.
     */
    pagerPage: string;
    /**
     * The label displayed after the page-size selector.
     */
    pagerItemsPerPage: string;
    /**
     * The label before the total-page number.
     */
    pagerOf: string;
    /**
     * The label after the total-page number.
     */
    pagerItems: string;
    /**
     * The title attribute of the page number input element.
     */
    pagerPageNumberInputTitle: string;
    /**
     * The label of the filter cell or icon.
     */
    filter: string;
    /**
     * The text of the `Equal` (**Is equal to**) filter operator.
     */
    filterEqOperator: string;
    /**
     * The text of the `NotEqual` (**Is not equal to**) filter operator.
     */
    filterNotEqOperator: string;
    /**
     * The text of the `IsNull` (**Is null**) filter operator.
     */
    filterIsNullOperator: string;
    /**
     * The text of the `IsNotNull` (**Is not null**) filter operator.
     */
    filterIsNotNullOperator: string;
    /**
     * The text of the `IsEmpty` (**Is empty**) filter operator.
     */
    filterIsEmptyOperator: string;
    /**
     * The text of the `IsNotEmpty` (**Is not empty**) filter operator.
     */
    filterIsNotEmptyOperator: string;
    /**
     * The text of the `StartsWith` (**Starts with**) filter operator.
     */
    filterStartsWithOperator: string;
    /**
     * The text of the `Contains` (**Contains**) filter operator.
     */
    filterContainsOperator: string;
    /**
     * The text of the `DoesNotContain` (**Does not contain**) filter operator.
     */
    filterNotContainsOperator: string;
    /**
     * The text of the `EndsWith` (**Ends with**) string filter operator.
     */
    filterEndsWithOperator: string;
    /**
     * The text of the `GreaterOrEqualTo` (**Is greater than or equal to**) numeric filter operator.
     */
    filterGteOperator: string;
    /**
     * The text of the `Greater` (**Is greater than**) numeric filter operator.
     */
    filterGtOperator: string;
    /**
     * The text of the `LessOrEqualTo` (**Is less than or equal to**) numeric filter operator.
     */
    filterLteOperator: string;
    /**
     * The text of the `Less` (**Is less than**) numeric filter operator.
     */
    filterLtOperator: string;
    /**
     * The text of the `IsTrue` Boolean filter option.
     */
    filterIsTrue: string;
    /**
     * The text of the `IsFalse` Boolean filter option.
     */
    filterIsFalse: string;
    /**
     * The text of the `(All)` option for Boolean filter.
     */
    filterBooleanAll: string;
    /**
     * The text of the `AfterOrEqualTo` (**Is after or equal to**) date filter operator.
     */
    filterAfterOrEqualOperator: string;
    /**
     * The text of the `After` (**Is after**) date filter operator.
     */
    filterAfterOperator: string;
    /**
     * The text of the `Before` (**Is before**) date filter operator.
     */
    filterBeforeOperator: string;
    /**
     * The text of the `BeforeOrEqualTo` (**Is before or equal to**) date filter operator.
     */
    filterBeforeOrEqualOperator: string;
    /**
     * The text of the **Filter** button.
     */
    filterFilterButton: string;
    /**
     * The text of the **Clear filter** button.
     */
    filterClearButton: string;
    /**
     * The text of the `And` filter logic.
     */
    filterAndLogic: string;
    /**
     * The text of the `Or` filter logic.
     */
    filterOrLogic: string;
    /**
     * The loading text.
     *
     * > The `loading` property is part of the accessibility support of the Grid.
     * Its value is detectable by screen readers and is not otherwise visible.
     */
    loading: string;
    /**
     * The title of the icon for the column menu.
     */
    columnMenu: string;
    /**
     * The text that is displayed in the column menu for the column items.
     */
    columns: string;
    /**
     * The text that is displayed in the column menu for the lock item.
     */
    lock: string;
    /**
     * The text that is displayed in the column menu for the unlock item.
     */
    unlock: string;
    /**
     * The label of the sort icon.
     */
    sortable: string;
    /**
     * The text that is displayed in the column menu for the ascending sort item.
     */
    sortAscending: string;
    /**
     * The text that is displayed in the column menu for the descending sort item.
     */
    sortDescending: string;
    /**
     * The status announcement when a column is sorted in an ascending order.
     */
    sortedAscending: string;
    /**
     * The status announcement when a column is sorted in a descending order.
     */
    sortedDescending: string;
    /**
     * The status announcement when a column is no longer sorted.
     */
    sortedDefault: string;
    /**
     * The text that is displayed in the column menu or in the column chooser item
     * for the **Apply** button of the columns.
     */
    columnsApply: string;
    /**
     * The text that is displayed in the column menu or in the column chooser item
     * for the **Reset** button of the columns.
     */
    columnsReset: string;
    /**
     * The title of the expand icon of detail rows.
     */
    detailExpand: string;
    /**
     * The title of the collapse icon of detail rows.
     */
    detailCollapse: string;
    /**
     * The text of the Today button of the Date filter.
     */
    filterDateToday: string;
    /**
     * The title of the Toggle button of the Date filter.
     */
    filterDateToggle: string;
    /**
     * The title of the Decrement button of the Numeric filter.
     */
    filterNumericDecrement: string;
    /**
     * The title of the Increment button of the Numeric filter.
     */
    filterNumericIncrement: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Messages, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Messages, never, never, { "groupPanelEmpty": "groupPanelEmpty"; "noRecords": "noRecords"; "pagerFirstPage": "pagerFirstPage"; "pagerLastPage": "pagerLastPage"; "pagerPreviousPage": "pagerPreviousPage"; "pagerNextPage": "pagerNextPage"; "pagerPage": "pagerPage"; "pagerItemsPerPage": "pagerItemsPerPage"; "pagerOf": "pagerOf"; "pagerItems": "pagerItems"; "pagerPageNumberInputTitle": "pagerPageNumberInputTitle"; "filter": "filter"; "filterEqOperator": "filterEqOperator"; "filterNotEqOperator": "filterNotEqOperator"; "filterIsNullOperator": "filterIsNullOperator"; "filterIsNotNullOperator": "filterIsNotNullOperator"; "filterIsEmptyOperator": "filterIsEmptyOperator"; "filterIsNotEmptyOperator": "filterIsNotEmptyOperator"; "filterStartsWithOperator": "filterStartsWithOperator"; "filterContainsOperator": "filterContainsOperator"; "filterNotContainsOperator": "filterNotContainsOperator"; "filterEndsWithOperator": "filterEndsWithOperator"; "filterGteOperator": "filterGteOperator"; "filterGtOperator": "filterGtOperator"; "filterLteOperator": "filterLteOperator"; "filterLtOperator": "filterLtOperator"; "filterIsTrue": "filterIsTrue"; "filterIsFalse": "filterIsFalse"; "filterBooleanAll": "filterBooleanAll"; "filterAfterOrEqualOperator": "filterAfterOrEqualOperator"; "filterAfterOperator": "filterAfterOperator"; "filterBeforeOperator": "filterBeforeOperator"; "filterBeforeOrEqualOperator": "filterBeforeOrEqualOperator"; "filterFilterButton": "filterFilterButton"; "filterClearButton": "filterClearButton"; "filterAndLogic": "filterAndLogic"; "filterOrLogic": "filterOrLogic"; "loading": "loading"; "columnMenu": "columnMenu"; "columns": "columns"; "lock": "lock"; "unlock": "unlock"; "sortable": "sortable"; "sortAscending": "sortAscending"; "sortDescending": "sortDescending"; "sortedAscending": "sortedAscending"; "sortedDescending": "sortedDescending"; "sortedDefault": "sortedDefault"; "columnsApply": "columnsApply"; "columnsReset": "columnsReset"; "detailExpand": "detailExpand"; "detailCollapse": "detailCollapse"; "filterDateToday": "filterDateToday"; "filterDateToggle": "filterDateToggle"; "filterNumericDecrement": "filterNumericDecrement"; "filterNumericIncrement": "filterNumericIncrement"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,