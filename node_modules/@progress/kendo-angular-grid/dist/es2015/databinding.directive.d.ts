/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChange, OnInit, OnDestroy, OnChanges, DoCheck, ChangeDetectorRef } from '@angular/core';
import { State, SortDescriptor, GroupDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { GridComponent } from './grid.component';
import { DataStateChangeEvent } from './data/change-event-args.interface';
import { GridDataResult } from './data/data.collection';
import { LocalDataChangesService } from './editing/local-data-changes.service';
/**
 * A directive which encapsulates the in-memory handling of data operations such as [paging]({% slug paging_grid %}),
 * [sorting]({% slug sorting_grid %}), and [grouping]({% slug groupingbasics_grid %})
 * ([more information and examples]({% slug automaticoperations_grid %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DataBindingDirective implements OnInit, OnDestroy, DoCheck, OnChanges {
    protected grid: GridComponent;
    protected changeDetector?: ChangeDetectorRef;
    protected localDataChangesService?: LocalDataChangesService;
    /**
     * Defines the number of records that will be skipped by the pager.
     */
    skip: number;
    /**
     * Defines the descriptors by which the data will be sorted.
     */
    sort: SortDescriptor[];
    /**
     * Defines the descriptor by which the data will be filtered.
     */
    filter: CompositeFilterDescriptor;
    /**
     * Defines the page size used by the Grid pager.
     */
    pageSize: number;
    /**
     * The descriptors by which the data will be grouped.
     */
    group: GroupDescriptor[];
    /**
     * The array of data which will be used to populate the Grid.
     */
    data: any[];
    protected state: State;
    protected originalData: any[];
    protected dataChanged: boolean;
    private stateChangeSubscription;
    private dataChangedSubscription;
    constructor(grid: GridComponent, changeDetector?: ChangeDetectorRef, localDataChangesService?: LocalDataChangesService);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngDoCheck(): void;
    /**
     * @hidden
     */
    onStateChange(state: DataStateChangeEvent): void;
    /**
     * @hidden
     */
    rebind(): void;
    /**
     * Notifies the Grid that its data has changed.
     */
    notifyDataChange(): void;
    protected process(state: State): GridDataResult;
    protected applyState({ skip, take, sort, group, filter }: State): void;
    protected updateGridData(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataBindingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DataBindingDirective, "[kendoGridBinding]", never, { "skip": "skip"; "sort": "sort"; "filter": "filter"; "pageSize": "pageSize"; "group": "group"; "data": "kendoGridBinding"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJpbmRpbmcuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImRhdGFiaW5kaW5nLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBTaW1wbGVDaGFuZ2UsIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIERvQ2hlY2ssIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdGF0ZSwgU29ydERlc2NyaXB0b3IsIEdyb3VwRGVzY3JpcHRvciwgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IEdyaWRDb21wb25lbnQgfSBmcm9tICcuL2dyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFTdGF0ZUNoYW5nZUV2ZW50IH0gZnJvbSAnLi9kYXRhL2NoYW5nZS1ldmVudC1hcmdzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBHcmlkRGF0YVJlc3VsdCB9IGZyb20gJy4vZGF0YS9kYXRhLmNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UgfSBmcm9tICcuL2VkaXRpbmcvbG9jYWwtZGF0YS1jaGFuZ2VzLnNlcnZpY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBlbmNhcHN1bGF0ZXMgdGhlIGluLW1lbW9yeSBoYW5kbGluZyBvZiBkYXRhIG9wZXJhdGlvbnMgc3VjaCBhcyBbcGFnaW5nXSh7JSBzbHVnIHBhZ2luZ19ncmlkICV9KSxcbiAqIFtzb3J0aW5nXSh7JSBzbHVnIHNvcnRpbmdfZ3JpZCAlfSksIGFuZCBbZ3JvdXBpbmddKHslIHNsdWcgZ3JvdXBpbmdiYXNpY3NfZ3JpZCAlfSlcbiAqIChbbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXNdKHslIHNsdWcgYXV0b21hdGljb3BlcmF0aW9uc19ncmlkICV9KSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGFCaW5kaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIERvQ2hlY2ssIE9uQ2hhbmdlcyB7XG4gICAgcHJvdGVjdGVkIGdyaWQ6IEdyaWRDb21wb25lbnQ7XG4gICAgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yPzogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIGxvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlPzogTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2U7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIHJlY29yZHMgdGhhdCB3aWxsIGJlIHNraXBwZWQgYnkgdGhlIHBhZ2VyLlxuICAgICAqL1xuICAgIHNraXA6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBkZXNjcmlwdG9ycyBieSB3aGljaCB0aGUgZGF0YSB3aWxsIGJlIHNvcnRlZC5cbiAgICAgKi9cbiAgICBzb3J0OiBTb3J0RGVzY3JpcHRvcltdO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGRlc2NyaXB0b3IgYnkgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3I7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcGFnZSBzaXplIHVzZWQgYnkgdGhlIEdyaWQgcGFnZXIuXG4gICAgICovXG4gICAgcGFnZVNpemU6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVzY3JpcHRvcnMgYnkgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBncm91cGVkLlxuICAgICAqL1xuICAgIGdyb3VwOiBHcm91cERlc2NyaXB0b3JbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgZGF0YSB3aGljaCB3aWxsIGJlIHVzZWQgdG8gcG9wdWxhdGUgdGhlIEdyaWQuXG4gICAgICovXG4gICAgZGF0YTogYW55W107XG4gICAgcHJvdGVjdGVkIHN0YXRlOiBTdGF0ZTtcbiAgICBwcm90ZWN0ZWQgb3JpZ2luYWxEYXRhOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgZGF0YUNoYW5nZWQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzdGF0ZUNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGRhdGFDaGFuZ2VkU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGdyaWQ6IEdyaWRDb21wb25lbnQsIGNoYW5nZURldGVjdG9yPzogQ2hhbmdlRGV0ZWN0b3JSZWYsIGxvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlPzogTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25TdGF0ZUNoYW5nZShzdGF0ZTogRGF0YVN0YXRlQ2hhbmdlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWJpbmQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyB0aGUgR3JpZCB0aGF0IGl0cyBkYXRhIGhhcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIG5vdGlmeURhdGFDaGFuZ2UoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcHJvY2VzcyhzdGF0ZTogU3RhdGUpOiBHcmlkRGF0YVJlc3VsdDtcbiAgICBwcm90ZWN0ZWQgYXBwbHlTdGF0ZSh7IHNraXAsIHRha2UsIHNvcnQsIGdyb3VwLCBmaWx0ZXIgfTogU3RhdGUpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVHcmlkRGF0YSgpOiB2b2lkO1xufVxuIl19