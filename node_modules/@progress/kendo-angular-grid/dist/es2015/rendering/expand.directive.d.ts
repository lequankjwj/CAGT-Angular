/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy } from '@angular/core';
import { GridComponent } from '../grid.component';
import { Subscription } from 'rxjs';
import { RowArgs } from './common/row-args';
/**
 * A directive which controls the expanded state of the master detail rows.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpandDetailsDirective implements OnDestroy {
    protected grid: GridComponent;
    /**
     * Fires when the expandedDetailKeys are changed.
     */
    expandedDetailKeysChange: EventEmitter<any[]>;
    /**
     * Defines the item key that will be stored in the `expandedDetailKeys` collection ([see example]({% slug master_detail_expanded_state_grid %}#toc-built-in-directive)).
     */
    expandDetailsKey: string | ((dataItem: any) => any);
    /**
     *
     * @hidden
     * A deprecated alias for setting the `expandDetailsKey` property.
     */
    expandDetailBy: string | ((dataItem: any) => any);
    /**
     * Defines the collection that will store the expanded keys.
     */
    expandedDetailKeys: any[];
    /**
     * Specifies if the items should be initially expanded.
     * @default false
     */
    initiallyExpanded: boolean;
    protected _expandBy: any;
    protected subscriptions: Subscription;
    constructor(grid: GridComponent);
    ngOnDestroy(): void;
    protected readonly keyGetter: any;
    /**
     * @hidden
     */
    isExpanded(args: RowArgs): boolean;
    private toggleState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExpandDetailsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ExpandDetailsDirective, "[kendoGridExpandDetailsBy]", ["kendoGridExpandDetailsBy"], { "expandedDetailKeys": "expandedDetailKeys"; "initiallyExpanded": "initiallyExpanded"; "expandDetailsKey": "kendoGridExpandDetailsBy"; "expandDetailBy": "expandDetailBy"; }, { "expandedDetailKeysChange": "expandedDetailKeysChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJleHBhbmQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSb3dBcmdzIH0gZnJvbSAnLi9jb21tb24vcm93LWFyZ3MnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBjb250cm9scyB0aGUgZXhwYW5kZWQgc3RhdGUgb2YgdGhlIG1hc3RlciBkZXRhaWwgcm93cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhwYW5kRGV0YWlsc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGdyaWQ6IEdyaWRDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZXhwYW5kZWREZXRhaWxLZXlzIGFyZSBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGV4cGFuZGVkRGV0YWlsS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPGFueVtdPjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpdGVtIGtleSB0aGF0IHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgZXhwYW5kZWREZXRhaWxLZXlzYCBjb2xsZWN0aW9uIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgbWFzdGVyX2RldGFpbF9leHBhbmRlZF9zdGF0ZV9ncmlkICV9I3RvYy1idWlsdC1pbi1kaXJlY3RpdmUpKS5cbiAgICAgKi9cbiAgICBleHBhbmREZXRhaWxzS2V5OiBzdHJpbmcgfCAoKGRhdGFJdGVtOiBhbnkpID0+IGFueSk7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICogQSBkZXByZWNhdGVkIGFsaWFzIGZvciBzZXR0aW5nIHRoZSBgZXhwYW5kRGV0YWlsc0tleWAgcHJvcGVydHkuXG4gICAgICovXG4gICAgZXhwYW5kRGV0YWlsQnk6IHN0cmluZyB8ICgoZGF0YUl0ZW06IGFueSkgPT4gYW55KTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2xsZWN0aW9uIHRoYXQgd2lsbCBzdG9yZSB0aGUgZXhwYW5kZWQga2V5cy5cbiAgICAgKi9cbiAgICBleHBhbmRlZERldGFpbEtleXM6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgaXRlbXMgc2hvdWxkIGJlIGluaXRpYWxseSBleHBhbmRlZC5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGluaXRpYWxseUV4cGFuZGVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfZXhwYW5kQnk6IGFueTtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGdyaWQ6IEdyaWRDb21wb25lbnQpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGtleUdldHRlcjogYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc0V4cGFuZGVkKGFyZ3M6IFJvd0FyZ3MpOiBib29sZWFuO1xuICAgIHByaXZhdGUgdG9nZ2xlU3RhdGU7XG59XG4iXX0=