/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChange, NgZone, Renderer2, ElementRef, OnInit, OnDestroy, OnChanges, DoCheck, TrackByFunction } from '@angular/core';
import { GroupDescriptor } from '@progress/kendo-data-query';
import { ColumnBase } from '../columns/column-base';
import { DetailTemplateDirective } from './details/detail-template.directive';
import { GroupsService } from '../grouping/groups.service';
import { ChangeNotificationService } from '../data/change-notification.service';
import { NoRecordsTemplateDirective } from './no-records-template.directive';
import { EditService } from '../editing/edit.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { RowClassFn } from './common/row-class';
import { SelectableSettings } from '../selection/types';
import { DomEventsService } from '../common/dom-events.service';
import { SelectionService } from "../selection/selection.service";
import { ColumnInfoService } from "../common/column-info.service";
import { FilterableSettings } from '../filtering/filterable';
import { NavigationService } from '../navigation/navigation.service';
import { GridItem } from '../data/grid-item.interface';
import { DataItem } from '../data/data-item.interface';
import { DetailsService } from './details/details.service';
import { CellSelectionService } from '../selection/cell-selection.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class TableBodyComponent implements OnInit, OnDestroy, OnChanges, DoCheck {
    detailsService: DetailsService;
    groupsService: GroupsService;
    private changeNotification;
    editService: EditService;
    private localization;
    private ngZone;
    private renderer;
    private element;
    private domEvents;
    selectionService: SelectionService;
    cellSelectionService: CellSelectionService;
    private columnInfoService;
    private navigationService;
    columns: Array<ColumnBase>;
    allColumns: Array<ColumnBase>;
    groups: Array<GroupDescriptor>;
    detailTemplate: DetailTemplateDirective;
    noRecordsTemplate: NoRecordsTemplateDirective;
    data: Array<GridItem>;
    skip: number;
    selectable: SelectableSettings | boolean;
    filterable: FilterableSettings;
    noRecordsText: string;
    isLocked: boolean;
    skipGroupDecoration: boolean;
    showGroupFooters: boolean;
    lockedColumnsCount: number;
    totalColumnsCount: number;
    virtualColumns: boolean;
    trackBy: TrackByFunction<GridItem>;
    groupHeaderSlaveCellsCount: number;
    groupHeaderColumns: any[];
    private clickSubscription;
    private touchSubscription;
    private cellKeydownSubscription;
    private clickTimeout;
    rowClass: RowClassFn;
    constructor(detailsService: DetailsService, groupsService: GroupsService, changeNotification: ChangeNotificationService, editService: EditService, localization: LocalizationService, ngZone: NgZone, renderer: Renderer2, element: ElementRef, domEvents: DomEventsService, selectionService: SelectionService, cellSelectionService: CellSelectionService, columnInfoService: ColumnInfoService, navigationService: NavigationService);
    readonly newDataItem: any;
    readonly unlockedColumnsCount: number;
    isAriaSelected(item: any, column: ColumnBase): string;
    toggleRow(index: number, dataItem: any): boolean;
    isExpanded(viewItem: any): boolean;
    detailButtonStyles(viewItem: any): any;
    detailButtonTitle(viewItem: any): any;
    isGroup(item: GridItem): boolean;
    isDataItem(item: GridItem): boolean;
    isFooter(item: GridItem): boolean;
    isInExpandedGroup(item: DataItem): boolean;
    isParentGroupExpanded(item: any): boolean;
    isOdd(item: any): boolean;
    isSelectable(): boolean;
    isRowSelected(item: any): boolean;
    trackByWrapper(index: number, item: GridItem): any;
    trackByColumns(index: number, item: any): any;
    ngDoCheck(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    logicalRowIndex(rowIndex: number): number;
    addRowLogicalIndex(): number;
    logicalColIndex(column: any): number;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isEditingCell(index: number, column: any): boolean;
    isEditingRow(index: number): boolean;
    readonly hasGroupHeaderColumn: boolean;
    readonly columnsContainer: any;
    readonly columnsSpan: number;
    readonly allColumnsSpan: number;
    readonly colSpan: number;
    readonly footerColumns: ColumnBase[];
    showGroupHeader(item: any): boolean;
    private readonly hasDetailTemplate;
    private clickHandler;
    private emitCellClick;
    private cellKeydownHandler;
    private cellClickArgs;
    private eventTarget;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableBodyComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableBodyComponent, "[kendoGridTableBody]", never, { "columns": "columns"; "groups": "groups"; "skip": "skip"; "noRecordsText": "noRecordsText"; "isLocked": "isLocked"; "skipGroupDecoration": "skipGroupDecoration"; "showGroupFooters": "showGroupFooters"; "lockedColumnsCount": "lockedColumnsCount"; "totalColumnsCount": "totalColumnsCount"; "trackBy": "trackBy"; "rowClass": "rowClass"; "allColumns": "allColumns"; "detailTemplate": "detailTemplate"; "noRecordsTemplate": "noRecordsTemplate"; "data": "data"; "selectable": "selectable"; "filterable": "filterable"; "virtualColumns": "virtualColumns"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUtYm9keS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGFibGUtYm9keS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBTaW1wbGVDaGFuZ2UsIE5nWm9uZSwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBEb0NoZWNrLCBUcmFja0J5RnVuY3Rpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdyb3VwRGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IENvbHVtbkJhc2UgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi1iYXNlJztcbmltcG9ydCB7IERldGFpbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9kZXRhaWxzL2RldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JvdXBzU2VydmljZSB9IGZyb20gJy4uL2dyb3VwaW5nL2dyb3Vwcy5zZXJ2aWNlJztcbmltcG9ydCB7IENoYW5nZU5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9kYXRhL2NoYW5nZS1ub3RpZmljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBOb1JlY29yZHNUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vbm8tcmVjb3Jkcy10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRWRpdFNlcnZpY2UgfSBmcm9tICcuLi9lZGl0aW5nL2VkaXQuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBSb3dDbGFzc0ZuIH0gZnJvbSAnLi9jb21tb24vcm93LWNsYXNzJztcbmltcG9ydCB7IFNlbGVjdGFibGVTZXR0aW5ncyB9IGZyb20gJy4uL3NlbGVjdGlvbi90eXBlcyc7XG5pbXBvcnQgeyBEb21FdmVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL2RvbS1ldmVudHMuc2VydmljZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSBcIi4uL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZVwiO1xuaW1wb3J0IHsgQ29sdW1uSW5mb1NlcnZpY2UgfSBmcm9tIFwiLi4vY29tbW9uL2NvbHVtbi1pbmZvLnNlcnZpY2VcIjtcbmltcG9ydCB7IEZpbHRlcmFibGVTZXR0aW5ncyB9IGZyb20gJy4uL2ZpbHRlcmluZy9maWx0ZXJhYmxlJztcbmltcG9ydCB7IE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgR3JpZEl0ZW0gfSBmcm9tICcuLi9kYXRhL2dyaWQtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGF0YUl0ZW0gfSBmcm9tICcuLi9kYXRhL2RhdGEtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGV0YWlsc1NlcnZpY2UgfSBmcm9tICcuL2RldGFpbHMvZGV0YWlscy5zZXJ2aWNlJztcbmltcG9ydCB7IENlbGxTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VsZWN0aW9uL2NlbGwtc2VsZWN0aW9uLnNlcnZpY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhYmxlQm9keUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIERvQ2hlY2sge1xuICAgIGRldGFpbHNTZXJ2aWNlOiBEZXRhaWxzU2VydmljZTtcbiAgICBncm91cHNTZXJ2aWNlOiBHcm91cHNTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2hhbmdlTm90aWZpY2F0aW9uO1xuICAgIGVkaXRTZXJ2aWNlOiBFZGl0U2VydmljZTtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICBwcml2YXRlIGRvbUV2ZW50cztcbiAgICBzZWxlY3Rpb25TZXJ2aWNlOiBTZWxlY3Rpb25TZXJ2aWNlO1xuICAgIGNlbGxTZWxlY3Rpb25TZXJ2aWNlOiBDZWxsU2VsZWN0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIGNvbHVtbkluZm9TZXJ2aWNlO1xuICAgIHByaXZhdGUgbmF2aWdhdGlvblNlcnZpY2U7XG4gICAgY29sdW1uczogQXJyYXk8Q29sdW1uQmFzZT47XG4gICAgYWxsQ29sdW1uczogQXJyYXk8Q29sdW1uQmFzZT47XG4gICAgZ3JvdXBzOiBBcnJheTxHcm91cERlc2NyaXB0b3I+O1xuICAgIGRldGFpbFRlbXBsYXRlOiBEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBub1JlY29yZHNUZW1wbGF0ZTogTm9SZWNvcmRzVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgZGF0YTogQXJyYXk8R3JpZEl0ZW0+O1xuICAgIHNraXA6IG51bWJlcjtcbiAgICBzZWxlY3RhYmxlOiBTZWxlY3RhYmxlU2V0dGluZ3MgfCBib29sZWFuO1xuICAgIGZpbHRlcmFibGU6IEZpbHRlcmFibGVTZXR0aW5ncztcbiAgICBub1JlY29yZHNUZXh0OiBzdHJpbmc7XG4gICAgaXNMb2NrZWQ6IGJvb2xlYW47XG4gICAgc2tpcEdyb3VwRGVjb3JhdGlvbjogYm9vbGVhbjtcbiAgICBzaG93R3JvdXBGb290ZXJzOiBib29sZWFuO1xuICAgIGxvY2tlZENvbHVtbnNDb3VudDogbnVtYmVyO1xuICAgIHRvdGFsQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgdmlydHVhbENvbHVtbnM6IGJvb2xlYW47XG4gICAgdHJhY2tCeTogVHJhY2tCeUZ1bmN0aW9uPEdyaWRJdGVtPjtcbiAgICBncm91cEhlYWRlclNsYXZlQ2VsbHNDb3VudDogbnVtYmVyO1xuICAgIGdyb3VwSGVhZGVyQ29sdW1uczogYW55W107XG4gICAgcHJpdmF0ZSBjbGlja1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHRvdWNoU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgY2VsbEtleWRvd25TdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBjbGlja1RpbWVvdXQ7XG4gICAgcm93Q2xhc3M6IFJvd0NsYXNzRm47XG4gICAgY29uc3RydWN0b3IoZGV0YWlsc1NlcnZpY2U6IERldGFpbHNTZXJ2aWNlLCBncm91cHNTZXJ2aWNlOiBHcm91cHNTZXJ2aWNlLCBjaGFuZ2VOb3RpZmljYXRpb246IENoYW5nZU5vdGlmaWNhdGlvblNlcnZpY2UsIGVkaXRTZXJ2aWNlOiBFZGl0U2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZWxlbWVudDogRWxlbWVudFJlZiwgZG9tRXZlbnRzOiBEb21FdmVudHNTZXJ2aWNlLCBzZWxlY3Rpb25TZXJ2aWNlOiBTZWxlY3Rpb25TZXJ2aWNlLCBjZWxsU2VsZWN0aW9uU2VydmljZTogQ2VsbFNlbGVjdGlvblNlcnZpY2UsIGNvbHVtbkluZm9TZXJ2aWNlOiBDb2x1bW5JbmZvU2VydmljZSwgbmF2aWdhdGlvblNlcnZpY2U6IE5hdmlnYXRpb25TZXJ2aWNlKTtcbiAgICByZWFkb25seSBuZXdEYXRhSXRlbTogYW55O1xuICAgIHJlYWRvbmx5IHVubG9ja2VkQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgaXNBcmlhU2VsZWN0ZWQoaXRlbTogYW55LCBjb2x1bW46IENvbHVtbkJhc2UpOiBzdHJpbmc7XG4gICAgdG9nZ2xlUm93KGluZGV4OiBudW1iZXIsIGRhdGFJdGVtOiBhbnkpOiBib29sZWFuO1xuICAgIGlzRXhwYW5kZWQodmlld0l0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgZGV0YWlsQnV0dG9uU3R5bGVzKHZpZXdJdGVtOiBhbnkpOiBhbnk7XG4gICAgZGV0YWlsQnV0dG9uVGl0bGUodmlld0l0ZW06IGFueSk6IGFueTtcbiAgICBpc0dyb3VwKGl0ZW06IEdyaWRJdGVtKTogYm9vbGVhbjtcbiAgICBpc0RhdGFJdGVtKGl0ZW06IEdyaWRJdGVtKTogYm9vbGVhbjtcbiAgICBpc0Zvb3RlcihpdGVtOiBHcmlkSXRlbSk6IGJvb2xlYW47XG4gICAgaXNJbkV4cGFuZGVkR3JvdXAoaXRlbTogRGF0YUl0ZW0pOiBib29sZWFuO1xuICAgIGlzUGFyZW50R3JvdXBFeHBhbmRlZChpdGVtOiBhbnkpOiBib29sZWFuO1xuICAgIGlzT2RkKGl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RhYmxlKCk6IGJvb2xlYW47XG4gICAgaXNSb3dTZWxlY3RlZChpdGVtOiBhbnkpOiBib29sZWFuO1xuICAgIHRyYWNrQnlXcmFwcGVyKGluZGV4OiBudW1iZXIsIGl0ZW06IEdyaWRJdGVtKTogYW55O1xuICAgIHRyYWNrQnlDb2x1bW5zKGluZGV4OiBudW1iZXIsIGl0ZW06IGFueSk6IGFueTtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICBsb2dpY2FsUm93SW5kZXgocm93SW5kZXg6IG51bWJlcik6IG51bWJlcjtcbiAgICBhZGRSb3dMb2dpY2FsSW5kZXgoKTogbnVtYmVyO1xuICAgIGxvZ2ljYWxDb2xJbmRleChjb2x1bW46IGFueSk6IG51bWJlcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgaXNFZGl0aW5nQ2VsbChpbmRleDogbnVtYmVyLCBjb2x1bW46IGFueSk6IGJvb2xlYW47XG4gICAgaXNFZGl0aW5nUm93KGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc0dyb3VwSGVhZGVyQ29sdW1uOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbHVtbnNDb250YWluZXI6IGFueTtcbiAgICByZWFkb25seSBjb2x1bW5zU3BhbjogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGFsbENvbHVtbnNTcGFuOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgY29sU3BhbjogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGZvb3RlckNvbHVtbnM6IENvbHVtbkJhc2VbXTtcbiAgICBzaG93R3JvdXBIZWFkZXIoaXRlbTogYW55KTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhhc0RldGFpbFRlbXBsYXRlO1xuICAgIHByaXZhdGUgY2xpY2tIYW5kbGVyO1xuICAgIHByaXZhdGUgZW1pdENlbGxDbGljaztcbiAgICBwcml2YXRlIGNlbGxLZXlkb3duSGFuZGxlcjtcbiAgICBwcml2YXRlIGNlbGxDbGlja0FyZ3M7XG4gICAgcHJpdmF0ZSBldmVudFRhcmdldDtcbn1cbiJdfQ==