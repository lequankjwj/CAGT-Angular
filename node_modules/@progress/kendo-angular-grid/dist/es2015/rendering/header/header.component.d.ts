/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, AfterViewInit, OnChanges, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ColumnComponent } from '../../columns/column.component';
import { ColumnBase } from '../../columns/column-base';
import { DetailTemplateDirective } from '../details/detail-template.directive';
import { SortDescriptor } from '@progress/kendo-data-query';
import { SortSettings } from '../../columns/sort-settings';
import { GroupDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { SinglePopupService } from '../../common/single-popup.service';
import { FilterableSettings } from '../../filtering/filterable';
import { IdService } from '../../common/id.service';
import { DropTargetDirective } from '../../dragdrop/drop-target.directive';
import { DraggableColumnDirective } from '../../dragdrop/draggable-column.directive';
import { DragHintService } from '../../dragdrop/drag-hint.service';
import { DropCueService } from '../../dragdrop/drop-cue.service';
import { ColumnReorderService } from '../../dragdrop/column-reorder.service';
import { SortService } from '../../common/sort.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class HeaderComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {
    private popupService;
    private hint;
    private cue;
    private reorderService;
    private idService;
    private sortService;
    private localization;
    private cd;
    /**
     * @hidden
     */
    totalColumnLevels: number;
    columns: Array<ColumnBase>;
    groups: Array<GroupDescriptor>;
    detailTemplate: DetailTemplateDirective;
    scrollable: boolean;
    filterable: FilterableSettings;
    sort: Array<SortDescriptor>;
    filter: CompositeFilterDescriptor;
    sortable: SortSettings;
    groupable: boolean;
    lockedColumnsCount: number;
    resizable: boolean;
    reorderable: boolean;
    columnMenu: boolean;
    columnMenuTemplate: TemplateRef<any>;
    totalColumnsCount: number;
    sortedFields: any;
    readonly headerClass: boolean;
    readonly sortableLabel: string;
    dropTargets: QueryList<DropTargetDirective>;
    readonly unlockedColumnsCount: number;
    private subscription;
    private targetSubscription;
    private _leafColumns;
    constructor(popupService: SinglePopupService, hint: DragHintService, cue: DropCueService, reorderService: ColumnReorderService, idService: IdService, sortService: SortService, localization: LocalizationService, cd: ChangeDetectorRef);
    sortColumn(column: ColumnComponent): void;
    onSortClick(column: ColumnComponent, event: MouseEvent, link: Element): void;
    onHeaderKeydown(column: ColumnComponent, args: KeyboardEvent): void;
    showSortNumbering(column: ColumnComponent): boolean;
    sortOrder(field: string): number;
    sortIcon(field: string): any;
    sortState(column: ColumnComponent): string;
    sortStatus(column: ColumnComponent): string;
    toggleSort(column: ColumnComponent): Array<SortDescriptor>;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: any): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    selectAllCheckboxId(): string;
    isFirstOnRow(column: ColumnComponent, index: number): boolean;
    logicalColumnIndex(column: any): number;
    readonly showFilterMenu: boolean;
    readonly showFilterRow: boolean;
    showColumnMenu(column: any): boolean;
    isFilterable(column: ColumnComponent): boolean;
    canDrop(draggable: DraggableColumnDirective, target: DropTargetDirective): boolean;
    shouldActivate(column: ColumnBase): boolean;
    isSortable(column: ColumnComponent): boolean;
    isCheckboxColumn(column: any): boolean;
    trackByIndex(index: number, _item: any): any;
    protected toggleDirection(field: string, allowUnsort: boolean, initialDirection: "asc" | "desc"): SortDescriptor;
    columnsForLevel(level: number): Array<ColumnBase>;
    isColumnGroupComponent(column: ColumnBase): boolean;
    readonly columnLevels: Array<number>;
    private sortDescriptor;
    readonly leafColumns: ColumnBase[];
    private attachTargets;
    private normalizeTarget;
    private trackMove;
    private calculateBefore;
    private enter;
    private leave;
    private drop;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeaderComponent, "[kendoGridHeader]", never, { "columns": "columns"; "groups": "groups"; "sort": "sort"; "sortable": "sortable"; "groupable": "groupable"; "lockedColumnsCount": "lockedColumnsCount"; "resizable": "resizable"; "reorderable": "reorderable"; "columnMenu": "columnMenu"; "totalColumnsCount": "totalColumnsCount"; "totalColumnLevels": "totalColumnLevels"; "detailTemplate": "detailTemplate"; "scrollable": "scrollable"; "filterable": "filterable"; "filter": "filter"; "columnMenuTemplate": "columnMenuTemplate"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJoZWFkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi8uLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29sdW1uQmFzZSB9IGZyb20gJy4uLy4uL2NvbHVtbnMvY29sdW1uLWJhc2UnO1xuaW1wb3J0IHsgRGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9kZXRhaWxzL2RldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU29ydERlc2NyaXB0b3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XG5pbXBvcnQgeyBTb3J0U2V0dGluZ3MgfSBmcm9tICcuLi8uLi9jb2x1bW5zL3NvcnQtc2V0dGluZ3MnO1xuaW1wb3J0IHsgR3JvdXBEZXNjcmlwdG9yLCBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xuaW1wb3J0IHsgU2luZ2xlUG9wdXBTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29tbW9uL3NpbmdsZS1wb3B1cC5zZXJ2aWNlJztcbmltcG9ydCB7IEZpbHRlcmFibGVTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2ZpbHRlcmluZy9maWx0ZXJhYmxlJztcbmltcG9ydCB7IElkU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9pZC5zZXJ2aWNlJztcbmltcG9ydCB7IERyb3BUYXJnZXREaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kcmFnZHJvcC9kcm9wLXRhcmdldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHJhZ2dhYmxlQ29sdW1uRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZHJhZ2Ryb3AvZHJhZ2dhYmxlLWNvbHVtbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHJhZ0hpbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZHJhZ2Ryb3AvZHJhZy1oaW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJvcEN1ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9kcmFnZHJvcC9kcm9wLWN1ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvbHVtblJlb3JkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZHJhZ2Ryb3AvY29sdW1uLXJlb3JkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTb3J0U2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9zb3J0LnNlcnZpY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEhlYWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgcG9wdXBTZXJ2aWNlO1xuICAgIHByaXZhdGUgaGludDtcbiAgICBwcml2YXRlIGN1ZTtcbiAgICBwcml2YXRlIHJlb3JkZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgaWRTZXJ2aWNlO1xuICAgIHByaXZhdGUgc29ydFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSBjZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdG90YWxDb2x1bW5MZXZlbHM6IG51bWJlcjtcbiAgICBjb2x1bW5zOiBBcnJheTxDb2x1bW5CYXNlPjtcbiAgICBncm91cHM6IEFycmF5PEdyb3VwRGVzY3JpcHRvcj47XG4gICAgZGV0YWlsVGVtcGxhdGU6IERldGFpbFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIHNjcm9sbGFibGU6IGJvb2xlYW47XG4gICAgZmlsdGVyYWJsZTogRmlsdGVyYWJsZVNldHRpbmdzO1xuICAgIHNvcnQ6IEFycmF5PFNvcnREZXNjcmlwdG9yPjtcbiAgICBmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3I7XG4gICAgc29ydGFibGU6IFNvcnRTZXR0aW5ncztcbiAgICBncm91cGFibGU6IGJvb2xlYW47XG4gICAgbG9ja2VkQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgcmVzaXphYmxlOiBib29sZWFuO1xuICAgIHJlb3JkZXJhYmxlOiBib29sZWFuO1xuICAgIGNvbHVtbk1lbnU6IGJvb2xlYW47XG4gICAgY29sdW1uTWVudVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHRvdGFsQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgc29ydGVkRmllbGRzOiBhbnk7XG4gICAgcmVhZG9ubHkgaGVhZGVyQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc29ydGFibGVMYWJlbDogc3RyaW5nO1xuICAgIGRyb3BUYXJnZXRzOiBRdWVyeUxpc3Q8RHJvcFRhcmdldERpcmVjdGl2ZT47XG4gICAgcmVhZG9ubHkgdW5sb2NrZWRDb2x1bW5zQ291bnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHRhcmdldFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIF9sZWFmQ29sdW1ucztcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlcnZpY2U6IFNpbmdsZVBvcHVwU2VydmljZSwgaGludDogRHJhZ0hpbnRTZXJ2aWNlLCBjdWU6IERyb3BDdWVTZXJ2aWNlLCByZW9yZGVyU2VydmljZTogQ29sdW1uUmVvcmRlclNlcnZpY2UsIGlkU2VydmljZTogSWRTZXJ2aWNlLCBzb3J0U2VydmljZTogU29ydFNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBzb3J0Q29sdW1uKGNvbHVtbjogQ29sdW1uQ29tcG9uZW50KTogdm9pZDtcbiAgICBvblNvcnRDbGljayhjb2x1bW46IENvbHVtbkNvbXBvbmVudCwgZXZlbnQ6IE1vdXNlRXZlbnQsIGxpbms6IEVsZW1lbnQpOiB2b2lkO1xuICAgIG9uSGVhZGVyS2V5ZG93bihjb2x1bW46IENvbHVtbkNvbXBvbmVudCwgYXJnczogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgc2hvd1NvcnROdW1iZXJpbmcoY29sdW1uOiBDb2x1bW5Db21wb25lbnQpOiBib29sZWFuO1xuICAgIHNvcnRPcmRlcihmaWVsZDogc3RyaW5nKTogbnVtYmVyO1xuICAgIHNvcnRJY29uKGZpZWxkOiBzdHJpbmcpOiBhbnk7XG4gICAgc29ydFN0YXRlKGNvbHVtbjogQ29sdW1uQ29tcG9uZW50KTogc3RyaW5nO1xuICAgIHNvcnRTdGF0dXMoY29sdW1uOiBDb2x1bW5Db21wb25lbnQpOiBzdHJpbmc7XG4gICAgdG9nZ2xlU29ydChjb2x1bW46IENvbHVtbkNvbXBvbmVudCk6IEFycmF5PFNvcnREZXNjcmlwdG9yPjtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBzZWxlY3RBbGxDaGVja2JveElkKCk6IHN0cmluZztcbiAgICBpc0ZpcnN0T25Sb3coY29sdW1uOiBDb2x1bW5Db21wb25lbnQsIGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIGxvZ2ljYWxDb2x1bW5JbmRleChjb2x1bW46IGFueSk6IG51bWJlcjtcbiAgICByZWFkb25seSBzaG93RmlsdGVyTWVudTogYm9vbGVhbjtcbiAgICByZWFkb25seSBzaG93RmlsdGVyUm93OiBib29sZWFuO1xuICAgIHNob3dDb2x1bW5NZW51KGNvbHVtbjogYW55KTogYm9vbGVhbjtcbiAgICBpc0ZpbHRlcmFibGUoY29sdW1uOiBDb2x1bW5Db21wb25lbnQpOiBib29sZWFuO1xuICAgIGNhbkRyb3AoZHJhZ2dhYmxlOiBEcmFnZ2FibGVDb2x1bW5EaXJlY3RpdmUsIHRhcmdldDogRHJvcFRhcmdldERpcmVjdGl2ZSk6IGJvb2xlYW47XG4gICAgc2hvdWxkQWN0aXZhdGUoY29sdW1uOiBDb2x1bW5CYXNlKTogYm9vbGVhbjtcbiAgICBpc1NvcnRhYmxlKGNvbHVtbjogQ29sdW1uQ29tcG9uZW50KTogYm9vbGVhbjtcbiAgICBpc0NoZWNrYm94Q29sdW1uKGNvbHVtbjogYW55KTogYm9vbGVhbjtcbiAgICB0cmFja0J5SW5kZXgoaW5kZXg6IG51bWJlciwgX2l0ZW06IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgdG9nZ2xlRGlyZWN0aW9uKGZpZWxkOiBzdHJpbmcsIGFsbG93VW5zb3J0OiBib29sZWFuLCBpbml0aWFsRGlyZWN0aW9uOiBcImFzY1wiIHwgXCJkZXNjXCIpOiBTb3J0RGVzY3JpcHRvcjtcbiAgICBjb2x1bW5zRm9yTGV2ZWwobGV2ZWw6IG51bWJlcik6IEFycmF5PENvbHVtbkJhc2U+O1xuICAgIGlzQ29sdW1uR3JvdXBDb21wb25lbnQoY29sdW1uOiBDb2x1bW5CYXNlKTogYm9vbGVhbjtcbiAgICByZWFkb25seSBjb2x1bW5MZXZlbHM6IEFycmF5PG51bWJlcj47XG4gICAgcHJpdmF0ZSBzb3J0RGVzY3JpcHRvcjtcbiAgICByZWFkb25seSBsZWFmQ29sdW1uczogQ29sdW1uQmFzZVtdO1xuICAgIHByaXZhdGUgYXR0YWNoVGFyZ2V0cztcbiAgICBwcml2YXRlIG5vcm1hbGl6ZVRhcmdldDtcbiAgICBwcml2YXRlIHRyYWNrTW92ZTtcbiAgICBwcml2YXRlIGNhbGN1bGF0ZUJlZm9yZTtcbiAgICBwcml2YXRlIGVudGVyO1xuICAgIHByaXZhdGUgbGVhdmU7XG4gICAgcHJpdmF0ZSBkcm9wO1xufVxuIl19