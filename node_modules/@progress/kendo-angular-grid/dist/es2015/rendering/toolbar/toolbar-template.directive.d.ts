/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
/**
 * Represents the toolbar template of the Grid.
 *
 * The template context has the following field:
 * - `position`&mdash;The position at which the toolbar template is rendered. The possible values are "top" and "bottom".
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *     selector: 'my-app',
 *     template: `
 *       <div class="example-config">
 *         <input type="radio" id="top" name="position" class="k-radio" value="top" checked (click)="positionChange($event)"/>
 *         <label class="k-radio-label" for="top">Top</label><br/>
 *         <input type="radio" id="bottom" name="position" class="k-radio" value="bottom" (click)="positionChange($event)"/>
 *         <label class="k-radio-label" for="bottom">Bottom</label><br/>
 *         <input type="radio" id="both" name="position" value="both" class="k-radio" (click)="positionChange($event)"/>
 *         <label class="k-radio-label" for="both">Both</label><br/>
 *       </div>
 *       <kendo-grid [data]="gridData" style="height: 200px">
 *            <ng-template kendoGridToolbarTemplate [position]="position" let-position="position">
 *                <button (click)="onClick()" class="k-button">Custom action</button>
 *            </ng-template>
 *            <kendo-grid-column field="ProductName">
 *            </kendo-grid-column>
 *            <kendo-grid-column field="UnitPrice">
 *            </kendo-grid-column>
 *        </kendo-grid>
 *     `
 * })
 *
 * class AppComponent {
 *     public position: 'top' | 'bottom' | 'both' = 'top';
 *
 *     public gridData = [{
 *         "ProductID": 1,
 *         "ProductName": "Chai",
 *         "UnitPrice": 18.0000,
 *         "Discontinued": false
 *       }, {
 *         "ProductID": 2,
 *         "ProductName": "Chang",
 *         "UnitPrice": 19.0000,
 *         "Discontinued": true
 *       }
 *     ];
 *
 *     public onClick(): void {
 *         console.log("button was clicked");
 *     }
 *
 *     public positionChange({ target }): void {
 *        this.position = target.value;
 *     }
 * }
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ToolbarTemplateDirective {
    templateRef: TemplateRef<any>;
    _position: 'top' | 'bottom' | 'both';
    /**
     * The position of the toolbar ([see example]({% slug toolbartemplate_grid %})).
     *
     * The possible values are:
     * - `top`&mdash;Positions the toolbar above the group panel or header.
     * - `bottom`&mdash;Positions the toolbar below the pager.
     * - `both`&mdash;Displays two toolbar instances. Positions the first one above
     * the group panel or header and the second one below the pager.
     */
    position: 'top' | 'bottom' | 'both';
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToolbarTemplateDirective, [{ optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ToolbarTemplateDirective, "[kendoGridToolbarTemplate]", never, { "position": "position"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbGJhci10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHRvb2xiYXIgdGVtcGxhdGUgb2YgdGhlIEdyaWQuXG4gKlxuICogVGhlIHRlbXBsYXRlIGNvbnRleHQgaGFzIHRoZSBmb2xsb3dpbmcgZmllbGQ6XG4gKiAtIGBwb3NpdGlvbmAmbWRhc2g7VGhlIHBvc2l0aW9uIGF0IHdoaWNoIHRoZSB0b29sYmFyIHRlbXBsYXRlIGlzIHJlbmRlcmVkLiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZSBcInRvcFwiIGFuZCBcImJvdHRvbVwiLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cy1wcmV2aWV3XG4gKlxuICogX0BDb21wb25lbnQoe1xuICogICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgICB0ZW1wbGF0ZTogYFxuICogICAgICAgPGRpdiBjbGFzcz1cImV4YW1wbGUtY29uZmlnXCI+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwicmFkaW9cIiBpZD1cInRvcFwiIG5hbWU9XCJwb3NpdGlvblwiIGNsYXNzPVwiay1yYWRpb1wiIHZhbHVlPVwidG9wXCIgY2hlY2tlZCAoY2xpY2spPVwicG9zaXRpb25DaGFuZ2UoJGV2ZW50KVwiLz5cbiAqICAgICAgICAgPGxhYmVsIGNsYXNzPVwiay1yYWRpby1sYWJlbFwiIGZvcj1cInRvcFwiPlRvcDwvbGFiZWw+PGJyLz5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGlkPVwiYm90dG9tXCIgbmFtZT1cInBvc2l0aW9uXCIgY2xhc3M9XCJrLXJhZGlvXCIgdmFsdWU9XCJib3R0b21cIiAoY2xpY2spPVwicG9zaXRpb25DaGFuZ2UoJGV2ZW50KVwiLz5cbiAqICAgICAgICAgPGxhYmVsIGNsYXNzPVwiay1yYWRpby1sYWJlbFwiIGZvcj1cImJvdHRvbVwiPkJvdHRvbTwvbGFiZWw+PGJyLz5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGlkPVwiYm90aFwiIG5hbWU9XCJwb3NpdGlvblwiIHZhbHVlPVwiYm90aFwiIGNsYXNzPVwiay1yYWRpb1wiIChjbGljayk9XCJwb3NpdGlvbkNoYW5nZSgkZXZlbnQpXCIvPlxuICogICAgICAgICA8bGFiZWwgY2xhc3M9XCJrLXJhZGlvLWxhYmVsXCIgZm9yPVwiYm90aFwiPkJvdGg8L2xhYmVsPjxici8+XG4gKiAgICAgICA8L2Rpdj5cbiAqICAgICAgIDxrZW5kby1ncmlkIFtkYXRhXT1cImdyaWREYXRhXCIgc3R5bGU9XCJoZWlnaHQ6IDIwMHB4XCI+XG4gKiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0dyaWRUb29sYmFyVGVtcGxhdGUgW3Bvc2l0aW9uXT1cInBvc2l0aW9uXCIgbGV0LXBvc2l0aW9uPVwicG9zaXRpb25cIj5cbiAqICAgICAgICAgICAgICAgIDxidXR0b24gKGNsaWNrKT1cIm9uQ2xpY2soKVwiIGNsYXNzPVwiay1idXR0b25cIj5DdXN0b20gYWN0aW9uPC9idXR0b24+XG4gKiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgICAgICAgIDxrZW5kby1ncmlkLWNvbHVtbiBmaWVsZD1cIlByb2R1Y3ROYW1lXCI+XG4gKiAgICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4+XG4gKiAgICAgICAgICAgIDxrZW5kby1ncmlkLWNvbHVtbiBmaWVsZD1cIlVuaXRQcmljZVwiPlxuICogICAgICAgICAgICA8L2tlbmRvLWdyaWQtY29sdW1uPlxuICogICAgICAgIDwva2VuZG8tZ3JpZD5cbiAqICAgICBgXG4gKiB9KVxuICpcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICAgcHVibGljIHBvc2l0aW9uOiAndG9wJyB8ICdib3R0b20nIHwgJ2JvdGgnID0gJ3RvcCc7XG4gKlxuICogICAgIHB1YmxpYyBncmlkRGF0YSA9IFt7XG4gKiAgICAgICAgIFwiUHJvZHVjdElEXCI6IDEsXG4gKiAgICAgICAgIFwiUHJvZHVjdE5hbWVcIjogXCJDaGFpXCIsXG4gKiAgICAgICAgIFwiVW5pdFByaWNlXCI6IDE4LjAwMDAsXG4gKiAgICAgICAgIFwiRGlzY29udGludWVkXCI6IGZhbHNlXG4gKiAgICAgICB9LCB7XG4gKiAgICAgICAgIFwiUHJvZHVjdElEXCI6IDIsXG4gKiAgICAgICAgIFwiUHJvZHVjdE5hbWVcIjogXCJDaGFuZ1wiLFxuICogICAgICAgICBcIlVuaXRQcmljZVwiOiAxOS4wMDAwLFxuICogICAgICAgICBcIkRpc2NvbnRpbnVlZFwiOiB0cnVlXG4gKiAgICAgICB9XG4gKiAgICAgXTtcbiAqXG4gKiAgICAgcHVibGljIG9uQ2xpY2soKTogdm9pZCB7XG4gKiAgICAgICAgIGNvbnNvbGUubG9nKFwiYnV0dG9uIHdhcyBjbGlja2VkXCIpO1xuICogICAgIH1cbiAqXG4gKiAgICAgcHVibGljIHBvc2l0aW9uQ2hhbmdlKHsgdGFyZ2V0IH0pOiB2b2lkIHtcbiAqICAgICAgICB0aGlzLnBvc2l0aW9uID0gdGFyZ2V0LnZhbHVlO1xuICogICAgIH1cbiAqIH1cbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVG9vbGJhclRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBfcG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbScgfCAnYm90aCc7XG4gICAgLyoqXG4gICAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSB0b29sYmFyIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgdG9vbGJhcnRlbXBsYXRlX2dyaWQgJX0pKS5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqIC0gYHRvcGAmbWRhc2g7UG9zaXRpb25zIHRoZSB0b29sYmFyIGFib3ZlIHRoZSBncm91cCBwYW5lbCBvciBoZWFkZXIuXG4gICAgICogLSBgYm90dG9tYCZtZGFzaDtQb3NpdGlvbnMgdGhlIHRvb2xiYXIgYmVsb3cgdGhlIHBhZ2VyLlxuICAgICAqIC0gYGJvdGhgJm1kYXNoO0Rpc3BsYXlzIHR3byB0b29sYmFyIGluc3RhbmNlcy4gUG9zaXRpb25zIHRoZSBmaXJzdCBvbmUgYWJvdmVcbiAgICAgKiB0aGUgZ3JvdXAgcGFuZWwgb3IgaGVhZGVyIGFuZCB0aGUgc2Vjb25kIG9uZSBiZWxvdyB0aGUgcGFnZXIuXG4gICAgICovXG4gICAgcG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbScgfCAnYm90aCc7XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pO1xufVxuIl19