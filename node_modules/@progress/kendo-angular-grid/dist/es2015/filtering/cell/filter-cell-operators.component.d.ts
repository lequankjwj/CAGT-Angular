/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnInit } from '@angular/core';
import { DropDownListComponent } from '@progress/kendo-angular-dropdowns';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents a component which accommodates the filter operators.
 */
import * as ɵngcc0 from '@angular/core';
export declare class FilterCellOperatorsComponent implements OnInit {
    protected localization: LocalizationService;
    clearText: string;
    /**
     * @hidden
     */
    readonly hostClasses: boolean;
    /**
     * @hidden
     */
    dropdown: DropDownListComponent;
    /**
     * The filter operators that will be displayed.
     */
    operators: Array<{
        text: string;
        value: string;
    }>;
    /**
     * Determines if the **Clear** button will be displayed.
     * @type {boolean}
     */
    showButton: boolean;
    /**
     * Determines if the list of operators will be displayed.
     * @type {boolean}
     */
    showOperators: boolean;
    /**
     * The selected operator.
     * @type {string}
     */
    value: string;
    /**
     * Fires when the operator is selected.
     * @type {EventEmitter<string>}
     */
    valueChange: EventEmitter<string>;
    /**
     * Fires when the **Clear** button is clicked.
     * @type {EventEmitter<{}>}
     */
    clear: EventEmitter<{}>;
    constructor(localization: LocalizationService);
    /**
     * @hidden
     */
    onChange(dataItem: any): void;
    /**
     * @hidden
     */
    clearClick(): boolean;
    /**
     * @hidden
     */
    clearKeydown(args: KeyboardEvent): void;
    /**
     * @hidden
     */
    dropdownKeydown(args: KeyboardEvent): void;
    ngOnInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilterCellOperatorsComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FilterCellOperatorsComponent, "kendo-grid-filter-cell-operators", never, { "operators": "operators"; "showOperators": "showOperators"; "showButton": "showButton"; "value": "value"; }, { "valueChange": "valueChange"; "clear": "clear"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNlbGwtb3BlcmF0b3JzLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJmaWx0ZXItY2VsbC1vcGVyYXRvcnMuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERyb3BEb3duTGlzdENvbXBvbmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWRyb3Bkb3ducyc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb21wb25lbnQgd2hpY2ggYWNjb21tb2RhdGVzIHRoZSBmaWx0ZXIgb3BlcmF0b3JzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaWx0ZXJDZWxsT3BlcmF0b3JzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcm90ZWN0ZWQgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIGNsZWFyVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZHJvcGRvd246IERyb3BEb3duTGlzdENvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgZmlsdGVyIG9wZXJhdG9ycyB0aGF0IHdpbGwgYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIG9wZXJhdG9yczogQXJyYXk8e1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiB0aGUgKipDbGVhcioqIGJ1dHRvbiB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBzaG93QnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGxpc3Qgb2Ygb3BlcmF0b3JzIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNob3dPcGVyYXRvcnM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHNlbGVjdGVkIG9wZXJhdG9yLlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdmFsdWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBvcGVyYXRvciBpcyBzZWxlY3RlZC5cbiAgICAgKiBAdHlwZSB7RXZlbnRFbWl0dGVyPHN0cmluZz59XG4gICAgICovXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlICoqQ2xlYXIqKiBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKiBAdHlwZSB7RXZlbnRFbWl0dGVyPHt9Pn1cbiAgICAgKi9cbiAgICBjbGVhcjogRXZlbnRFbWl0dGVyPHt9PjtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkNoYW5nZShkYXRhSXRlbTogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2xlYXJDbGljaygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjbGVhcktleWRvd24oYXJnczogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGRyb3Bkb3duS2V5ZG93bihhcmdzOiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xufVxuIl19