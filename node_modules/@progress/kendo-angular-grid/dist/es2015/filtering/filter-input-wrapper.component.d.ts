/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChange } from "@angular/core";
import { ColumnComponent } from "../columns/column.component";
import { CompositeFilterDescriptor, FilterDescriptor } from "@progress/kendo-data-query";
import { FilterInputDirective } from "./filter-input.directive";
import { BaseFilterCellComponent } from "./base-filter-cell.component";
import { FilterService } from "./filter.service";
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class FilterInputWrapperComponent extends BaseFilterCellComponent {
    operators: Array<{
        text: string;
        value: string;
    }>;
    column: ColumnComponent;
    filter: CompositeFilterDescriptor;
    input: FilterInputDirective;
    readonly currentFilter: FilterDescriptor;
    currentOperator: string;
    defaultOperator: string;
    private filterInputDisabled;
    private _defaultOperator;
    private _operator;
    private changeSubscription;
    constructor(filterService: FilterService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    onChange(value: any): void;
    onClear(): void;
    protected applyNoValueFilter(operator: string): void;
    protected abstract filterChange(filter: CompositeFilterDescriptor): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilterInputWrapperComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FilterInputWrapperComponent, never, never, { "operators": "operators"; "defaultOperator": "defaultOperator"; "column": "column"; "filter": "filter"; }, {}, ["input"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWlucHV0LXdyYXBwZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImZpbHRlci1pbnB1dC13cmFwcGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFNpbXBsZUNoYW5nZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBDb2x1bW5Db21wb25lbnQgfSBmcm9tIFwiLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50XCI7XG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBGaWx0ZXJEZXNjcmlwdG9yIH0gZnJvbSBcIkBwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5XCI7XG5pbXBvcnQgeyBGaWx0ZXJJbnB1dERpcmVjdGl2ZSB9IGZyb20gXCIuL2ZpbHRlci1pbnB1dC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IEJhc2VGaWx0ZXJDZWxsQ29tcG9uZW50IH0gZnJvbSBcIi4vYmFzZS1maWx0ZXItY2VsbC5jb21wb25lbnRcIjtcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tIFwiLi9maWx0ZXIuc2VydmljZVwiO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIEZpbHRlcklucHV0V3JhcHBlckNvbXBvbmVudCBleHRlbmRzIEJhc2VGaWx0ZXJDZWxsQ29tcG9uZW50IHtcbiAgICBvcGVyYXRvcnM6IEFycmF5PHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0+O1xuICAgIGNvbHVtbjogQ29sdW1uQ29tcG9uZW50O1xuICAgIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbiAgICBpbnB1dDogRmlsdGVySW5wdXREaXJlY3RpdmU7XG4gICAgcmVhZG9ubHkgY3VycmVudEZpbHRlcjogRmlsdGVyRGVzY3JpcHRvcjtcbiAgICBjdXJyZW50T3BlcmF0b3I6IHN0cmluZztcbiAgICBkZWZhdWx0T3BlcmF0b3I6IHN0cmluZztcbiAgICBwcml2YXRlIGZpbHRlcklucHV0RGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfZGVmYXVsdE9wZXJhdG9yO1xuICAgIHByaXZhdGUgX29wZXJhdG9yO1xuICAgIHByaXZhdGUgY2hhbmdlU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2UpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25DaGFuZ2UodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgb25DbGVhcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhcHBseU5vVmFsdWVGaWx0ZXIob3BlcmF0b3I6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGZpbHRlckNoYW5nZShmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3IpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xufVxuIl19