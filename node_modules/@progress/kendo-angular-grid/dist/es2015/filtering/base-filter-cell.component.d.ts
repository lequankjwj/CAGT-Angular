/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { QueryList, AfterContentInit, OnDestroy } from '@angular/core';
import { FilterService } from './filter.service';
import { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';
import { FilterOperatorBase } from './operators/filter-operator.base';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare const setFilter: (index: any, filter: any, field: any, defaultOperator: any) => FilterDescriptor;
/**
 * @hidden
 */
export declare const logicOperators: (localization: LocalizationService) => {
    text: string;
    value: "or" | "and";
}[];
/**
 * @hidden
 */
export declare const flatten: (filter: CompositeFilterDescriptor) => FilterDescriptor[];
/**
 * @hidden
 */
export declare const filtersByField: (filter: CompositeFilterDescriptor, field: string) => FilterDescriptor[];
/**
 * @hidden
 */
export declare const filterByField: (filter: CompositeFilterDescriptor, field: string) => FilterDescriptor;
/**
 * @hidden
 */
export declare const removeFilter: (filter: CompositeFilterDescriptor, field: string) => CompositeFilterDescriptor;
/**
 * @hidden
 */
export declare const localizeOperators: (operators: any) => (localization: any) => {
    text: any;
    value: any;
}[];
/**
 * An abstract base class for the filter-cell component ([see example]({% slug reusablecustomfilters_grid %}#toc-filter-row)).
 */
export declare abstract class BaseFilterCellComponent implements AfterContentInit, OnDestroy {
    protected filterService: FilterService;
    /**
     * @hidden
     */
    readonly hostClasses: boolean;
    operatorList: QueryList<FilterOperatorBase>;
    operators: Array<{
        text: string;
        value: string;
    }>;
    filter: CompositeFilterDescriptor;
    protected defaultOperators: Array<{
        text: string;
        value: string;
    }>;
    private _operators;
    private operationListSubscription;
    constructor(filterService: FilterService);
    /**
     * @hidden
     */
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    protected filterByField(field: string): FilterDescriptor;
    protected filtersByField(field: string): FilterDescriptor[];
    protected removeFilter(field: string): CompositeFilterDescriptor;
    protected updateFilter(filter: FilterDescriptor): CompositeFilterDescriptor;
    protected applyFilter(filter: CompositeFilterDescriptor): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseFilterCellComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseFilterCellComponent, never, never, {}, {}, ["operatorList"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1maWx0ZXItY2VsbC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYmFzZS1maWx0ZXItY2VsbC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWx0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBGaWx0ZXJEZXNjcmlwdG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xuaW1wb3J0IHsgRmlsdGVyT3BlcmF0b3JCYXNlIH0gZnJvbSAnLi9vcGVyYXRvcnMvZmlsdGVyLW9wZXJhdG9yLmJhc2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHNldEZpbHRlcjogKGluZGV4OiBhbnksIGZpbHRlcjogYW55LCBmaWVsZDogYW55LCBkZWZhdWx0T3BlcmF0b3I6IGFueSkgPT4gRmlsdGVyRGVzY3JpcHRvcjtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBsb2dpY09wZXJhdG9yczogKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSkgPT4ge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB2YWx1ZTogXCJvclwiIHwgXCJhbmRcIjtcbn1bXTtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBmbGF0dGVuOiAoZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yKSA9PiBGaWx0ZXJEZXNjcmlwdG9yW107XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgZmlsdGVyc0J5RmllbGQ6IChmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3IsIGZpZWxkOiBzdHJpbmcpID0+IEZpbHRlckRlc2NyaXB0b3JbXTtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBmaWx0ZXJCeUZpZWxkOiAoZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBmaWVsZDogc3RyaW5nKSA9PiBGaWx0ZXJEZXNjcmlwdG9yO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHJlbW92ZUZpbHRlcjogKGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciwgZmllbGQ6IHN0cmluZykgPT4gQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBsb2NhbGl6ZU9wZXJhdG9yczogKG9wZXJhdG9yczogYW55KSA9PiAobG9jYWxpemF0aW9uOiBhbnkpID0+IHtcbiAgICB0ZXh0OiBhbnk7XG4gICAgdmFsdWU6IGFueTtcbn1bXTtcbi8qKlxuICogQW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIGZpbHRlci1jZWxsIGNvbXBvbmVudCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHJldXNhYmxlY3VzdG9tZmlsdGVyc19ncmlkICV9I3RvYy1maWx0ZXItcm93KSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIEJhc2VGaWx0ZXJDZWxsQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaG9zdENsYXNzZXM6IGJvb2xlYW47XG4gICAgb3BlcmF0b3JMaXN0OiBRdWVyeUxpc3Q8RmlsdGVyT3BlcmF0b3JCYXNlPjtcbiAgICBvcGVyYXRvcnM6IEFycmF5PHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0+O1xuICAgIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdE9wZXJhdG9yczogQXJyYXk8e1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBfb3BlcmF0b3JzO1xuICAgIHByaXZhdGUgb3BlcmF0aW9uTGlzdFN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZmlsdGVyQnlGaWVsZChmaWVsZDogc3RyaW5nKTogRmlsdGVyRGVzY3JpcHRvcjtcbiAgICBwcm90ZWN0ZWQgZmlsdGVyc0J5RmllbGQoZmllbGQ6IHN0cmluZyk6IEZpbHRlckRlc2NyaXB0b3JbXTtcbiAgICBwcm90ZWN0ZWQgcmVtb3ZlRmlsdGVyKGZpZWxkOiBzdHJpbmcpOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIHByb3RlY3RlZCB1cGRhdGVGaWx0ZXIoZmlsdGVyOiBGaWx0ZXJEZXNjcmlwdG9yKTogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbiAgICBwcm90ZWN0ZWQgYXBwbHlGaWx0ZXIoZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yKTogdm9pZDtcbn1cbiJdfQ==