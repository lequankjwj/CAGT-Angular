/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ColumnComponent } from '../columns/column.component';
import { FilterService } from './filter.service';
import { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';
import { BaseFilterCellComponent } from './base-filter-cell.component';
import { FilterComponent } from './filter-component.interface';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents a base string filter component.
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class StringFilterComponent extends BaseFilterCellComponent implements FilterComponent {
    protected localization: LocalizationService;
    /**
     * The column with which the filter is associated.
     * @type {ColumnComponent}
     */
    column: ColumnComponent;
    /**
     * The current root filter.
     * @type {CompositeFilterDescriptor}
     */
    filter: CompositeFilterDescriptor;
    /**
     * The default filter operator. Defaults to `contains`.
     * @type {string}
     */
    operator: string;
    /**
     * The current filter for the associated column field.
     * @readonly
     * @type {FilterDescriptor}
     */
    readonly currentFilter: FilterDescriptor;
    /**
     * The current filter operator for the associated column field.
     * @readonly
     * @type {string}
     */
    readonly currentOperator: string;
    protected defaultOperators: Array<{
        text: string;
        value: string;
    }>;
    private subscription;
    constructor(filterService: FilterService, localization: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    protected localizationChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StringFilterComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<StringFilterComponent, never, never, { "operator": "operator"; "column": "column"; "filter": "filter"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLWZpbHRlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RyaW5nLWZpbHRlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9maWx0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBGaWx0ZXJEZXNjcmlwdG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xuaW1wb3J0IHsgQmFzZUZpbHRlckNlbGxDb21wb25lbnQgfSBmcm9tICcuL2Jhc2UtZmlsdGVyLWNlbGwuY29tcG9uZW50JztcbmltcG9ydCB7IEZpbHRlckNvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWNvbXBvbmVudC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzZSBzdHJpbmcgZmlsdGVyIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgU3RyaW5nRmlsdGVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUZpbHRlckNlbGxDb21wb25lbnQgaW1wbGVtZW50cyBGaWx0ZXJDb21wb25lbnQge1xuICAgIHByb3RlY3RlZCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbHVtbiB3aXRoIHdoaWNoIHRoZSBmaWx0ZXIgaXMgYXNzb2NpYXRlZC5cbiAgICAgKiBAdHlwZSB7Q29sdW1uQ29tcG9uZW50fVxuICAgICAqL1xuICAgIGNvbHVtbjogQ29sdW1uQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHJvb3QgZmlsdGVyLlxuICAgICAqIEB0eXBlIHtDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yfVxuICAgICAqL1xuICAgIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVmYXVsdCBmaWx0ZXIgb3BlcmF0b3IuIERlZmF1bHRzIHRvIGBjb250YWluc2AuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBvcGVyYXRvcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGZpbHRlciBmb3IgdGhlIGFzc29jaWF0ZWQgY29sdW1uIGZpZWxkLlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEB0eXBlIHtGaWx0ZXJEZXNjcmlwdG9yfVxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1cnJlbnRGaWx0ZXI6IEZpbHRlckRlc2NyaXB0b3I7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgZmlsdGVyIG9wZXJhdG9yIGZvciB0aGUgYXNzb2NpYXRlZCBjb2x1bW4gZmllbGQuXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICByZWFkb25seSBjdXJyZW50T3BlcmF0b3I6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgZGVmYXVsdE9wZXJhdG9yczogQXJyYXk8e1xuICAgICAgICB0ZXh0OiBzdHJpbmc7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGxvY2FsaXphdGlvbkNoYW5nZSgpOiB2b2lkO1xufVxuIl19