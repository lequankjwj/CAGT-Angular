/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2 as Renderer, NgZone, DoCheck } from '@angular/core';
import { Button } from '@progress/kendo-angular-buttons';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { EditService } from './edit.service';
import { CellContext } from '../rendering/common/cell-context';
/**
 * Represents the `cancel` command of the Grid. You can apply this directive to any `button`
 * element inside a [`CommandColumnComponent`]({% slug api_grid_commandcolumncomponent %}).
 * When an associated button with the directive is clicked, the
 * [`cancel`]({% slug api_grid_gridcomponent %}#toc-cancel) event
 * is triggered ([see example]({% slug editing_grid %})).
 *
 * > When the row is not in the edit mode, the button with the `kendoGridCancelCommand` is automatically hidden.
 *
 * @example
 * ```html-no-run
 * <kendo-grid>
 *   <kendo-grid-command-column title="command">
 *     <ng-template kendoGridCellTemplate>
 *       <button kendoGridCancelCommand>Cancel changes</button>
 *     </ng-template>
 *   </kendo-grid-command-column>
 * </kendo-grid>
 * ```
 *
 * You can control the content of the button based on the state of the row.
 *
 * @example
 * ```html-no-run
 * <kendo-grid>
 *   <kendo-grid-command-column title="command">
 *     <ng-template kendoGridCellTemplate let-isNew="isNew">
 *       <button kendoGridCancelCommand>{{isNew ? 'Discard' : 'Cancel changes'}}</button>
 *     </ng-template>
 *   </kendo-grid-command-column>
 * </kendo-grid>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class CancelCommandDirective extends Button implements DoCheck {
    private editService;
    private cellContext;
    rowIndex: number;
    protected isEdited: boolean;
    /**
     * @hidden
     */
    readonly visible: string;
    /**
     * @hidden
     */
    commandClass: boolean;
    /**
     * @hidden
     */
    onClick(e: any): void;
    constructor(editService: EditService, cellContext: CellContext, element: ElementRef, renderer: Renderer, localization: LocalizationService, ngZone: NgZone);
    ngDoCheck(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CancelCommandDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CancelCommandDirective, "[kendoGridCancelCommand]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLWNvbW1hbmQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNhbmNlbC1jb21tYW5kLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlcjIgYXMgUmVuZGVyZXIsIE5nWm9uZSwgRG9DaGVjayB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItYnV0dG9ucyc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBFZGl0U2VydmljZSB9IGZyb20gJy4vZWRpdC5zZXJ2aWNlJztcbmltcG9ydCB7IENlbGxDb250ZXh0IH0gZnJvbSAnLi4vcmVuZGVyaW5nL2NvbW1vbi9jZWxsLWNvbnRleHQnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBgY2FuY2VsYCBjb21tYW5kIG9mIHRoZSBHcmlkLiBZb3UgY2FuIGFwcGx5IHRoaXMgZGlyZWN0aXZlIHRvIGFueSBgYnV0dG9uYFxuICogZWxlbWVudCBpbnNpZGUgYSBbYENvbW1hbmRDb2x1bW5Db21wb25lbnRgXSh7JSBzbHVnIGFwaV9ncmlkX2NvbW1hbmRjb2x1bW5jb21wb25lbnQgJX0pLlxuICogV2hlbiBhbiBhc3NvY2lhdGVkIGJ1dHRvbiB3aXRoIHRoZSBkaXJlY3RpdmUgaXMgY2xpY2tlZCwgdGhlXG4gKiBbYGNhbmNlbGBdKHslIHNsdWcgYXBpX2dyaWRfZ3JpZGNvbXBvbmVudCAlfSN0b2MtY2FuY2VsKSBldmVudFxuICogaXMgdHJpZ2dlcmVkIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZWRpdGluZ19ncmlkICV9KSkuXG4gKlxuICogPiBXaGVuIHRoZSByb3cgaXMgbm90IGluIHRoZSBlZGl0IG1vZGUsIHRoZSBidXR0b24gd2l0aCB0aGUgYGtlbmRvR3JpZENhbmNlbENvbW1hbmRgIGlzIGF1dG9tYXRpY2FsbHkgaGlkZGVuLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sLW5vLXJ1blxuICogPGtlbmRvLWdyaWQ+XG4gKiAgIDxrZW5kby1ncmlkLWNvbW1hbmQtY29sdW1uIHRpdGxlPVwiY29tbWFuZFwiPlxuICogICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0dyaWRDZWxsVGVtcGxhdGU+XG4gKiAgICAgICA8YnV0dG9uIGtlbmRvR3JpZENhbmNlbENvbW1hbmQ+Q2FuY2VsIGNoYW5nZXM8L2J1dHRvbj5cbiAqICAgICA8L25nLXRlbXBsYXRlPlxuICogICA8L2tlbmRvLWdyaWQtY29tbWFuZC1jb2x1bW4+XG4gKiA8L2tlbmRvLWdyaWQ+XG4gKiBgYGBcbiAqXG4gKiBZb3UgY2FuIGNvbnRyb2wgdGhlIGNvbnRlbnQgb2YgdGhlIGJ1dHRvbiBiYXNlZCBvbiB0aGUgc3RhdGUgb2YgdGhlIHJvdy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbC1uby1ydW5cbiAqIDxrZW5kby1ncmlkPlxuICogICA8a2VuZG8tZ3JpZC1jb21tYW5kLWNvbHVtbiB0aXRsZT1cImNvbW1hbmRcIj5cbiAqICAgICA8bmctdGVtcGxhdGUga2VuZG9HcmlkQ2VsbFRlbXBsYXRlIGxldC1pc05ldz1cImlzTmV3XCI+XG4gKiAgICAgICA8YnV0dG9uIGtlbmRvR3JpZENhbmNlbENvbW1hbmQ+e3tpc05ldyA/ICdEaXNjYXJkJyA6ICdDYW5jZWwgY2hhbmdlcyd9fTwvYnV0dG9uPlxuICogICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgIDwva2VuZG8tZ3JpZC1jb21tYW5kLWNvbHVtbj5cbiAqIDwva2VuZG8tZ3JpZD5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDYW5jZWxDb21tYW5kRGlyZWN0aXZlIGV4dGVuZHMgQnV0dG9uIGltcGxlbWVudHMgRG9DaGVjayB7XG4gICAgcHJpdmF0ZSBlZGl0U2VydmljZTtcbiAgICBwcml2YXRlIGNlbGxDb250ZXh0O1xuICAgIHJvd0luZGV4OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGlzRWRpdGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSB2aXNpYmxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbW1hbmRDbGFzczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25DbGljayhlOiBhbnkpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGVkaXRTZXJ2aWNlOiBFZGl0U2VydmljZSwgY2VsbENvbnRleHQ6IENlbGxDb250ZXh0LCBlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xufVxuIl19