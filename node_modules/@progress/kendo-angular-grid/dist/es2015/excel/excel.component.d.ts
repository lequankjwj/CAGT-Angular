/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, QueryList, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { ExcelExportData, ColumnBase, CellOptions } from '@progress/kendo-angular-excel-export';
import { GridComponent } from '../grid.component';
import { ExcelService } from './excel.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Configures the settings for the export of Grid in Excel ([see example]({% slug excelexport_grid %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExcelComponent implements OnDestroy {
    private localization;
    private zone;
    /**
     * Specifies the file name of the exported Excel file.
     * @default "Export.xlsx"
     */
    fileName: string;
    /**
     * Enables or disables column filtering in the Excel file. This behavior is different from the filtering feature of the Grid.
     */
    filterable: boolean;
    /**
     * The author of the workbook.
     */
    creator?: string;
    /**
     * The date on which the workbook was created. Defaults to `new Date()`.
     */
    date?: Date;
    /**
     * If set to `true`, the content is forwarded to [`proxyURL`](#toc-proxyurl) even if the browser supports the saving of files locally.
     */
    forceProxy: boolean;
    /**
     * The URL of the server-side proxy which streams the file to the end user.
     *
     * Using a proxy is required if the browser is not capable of saving files locally&mdash;for example,
     * Internet Explorer 9 and Safari.
     *
     * Optionally, set up a proxy to reduce memory usage. This avoids copying the file contents in memory,
     * but transmits it over the network instead. For this use case, set [`forceProxy`](#toc-forceproxy) to `true`
     * to skip client-side saving even in browser that support it.
     *
     * In the request body, the proxy receives a POST request with the following parameters:
     * - `contentType`&mdash;The MIME type of the file.
     * - `base64`&mdash;The base-64 encoded file content.
     * - `fileName`&mdash;The file name, as requested by the caller.
     *
     * The proxy returns the decoded file with the `"Content-Disposition"` header set to `attachment; filename="<fileName.xslx>"`.
     *
     * For details on the server-side proxy usage and implementation, see the [File Saver]({% slug overview_filesaver %}) documentation.
     */
    proxyURL: string;
    /**
     * The function that is used to get the exported data options. By default, uses the current data and group of the Grid.
     * To export data that is different from the current Grid data, provide a custom function.
     */
    fetchData: (component: GridComponent) => ExcelExportData | Promise<ExcelExportData> | Observable<ExcelExportData>;
    /**
     * If the data is grouped, the options of the cells that are inserted before the data,
     * group, and footer cells to indicate the group hierarchy.
     */
    paddingCellOptions: CellOptions;
    /**
     * If the data is grouped, the options of the cells that are inserted before the
     * header cells to align the headers and the column values.
     */
    headerPaddingCellOptions: CellOptions;
    /**
     * Specifies if the groups in the Excel file are collapsible.
     */
    collapsible: boolean;
    /**
     * @hidden
     */
    columns: QueryList<ColumnBase>;
    private saveSubscription;
    private dataSubscription;
    constructor(excelService: ExcelService, localization: LocalizationService, zone: NgZone);
    ngOnDestroy(): void;
    protected save(component: GridComponent): void;
    protected exportData(component: GridComponent, result: ExcelExportData): void;
    protected saveFile(options: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ExcelComponent, "kendo-grid-excel", never, { "fileName": "fileName"; "filterable": "filterable"; "creator": "creator"; "date": "date"; "forceProxy": "forceProxy"; "proxyURL": "proxyURL"; "fetchData": "fetchData"; "paddingCellOptions": "paddingCellOptions"; "headerPaddingCellOptions": "headerPaddingCellOptions"; "collapsible": "collapsible"; }, {}, ["columns"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImV4Y2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgT25EZXN0cm95LCBRdWVyeUxpc3QsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRXhjZWxFeHBvcnREYXRhLCBDb2x1bW5CYXNlLCBDZWxsT3B0aW9ucyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWV4Y2VsLWV4cG9ydCc7XG5pbXBvcnQgeyBHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vZ3JpZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXhjZWxTZXJ2aWNlIH0gZnJvbSAnLi9leGNlbC5zZXJ2aWNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbi8qKlxuICogQ29uZmlndXJlcyB0aGUgc2V0dGluZ3MgZm9yIHRoZSBleHBvcnQgb2YgR3JpZCBpbiBFeGNlbCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGV4Y2VsZXhwb3J0X2dyaWQgJX0pKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhjZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGZpbGUgbmFtZSBvZiB0aGUgZXhwb3J0ZWQgRXhjZWwgZmlsZS5cbiAgICAgKiBAZGVmYXVsdCBcIkV4cG9ydC54bHN4XCJcbiAgICAgKi9cbiAgICBmaWxlTmFtZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgY29sdW1uIGZpbHRlcmluZyBpbiB0aGUgRXhjZWwgZmlsZS4gVGhpcyBiZWhhdmlvciBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgZmlsdGVyaW5nIGZlYXR1cmUgb2YgdGhlIEdyaWQuXG4gICAgICovXG4gICAgZmlsdGVyYWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgYXV0aG9yIG9mIHRoZSB3b3JrYm9vay5cbiAgICAgKi9cbiAgICBjcmVhdG9yPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBkYXRlIG9uIHdoaWNoIHRoZSB3b3JrYm9vayB3YXMgY3JlYXRlZC4gRGVmYXVsdHMgdG8gYG5ldyBEYXRlKClgLlxuICAgICAqL1xuICAgIGRhdGU/OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIHRoZSBjb250ZW50IGlzIGZvcndhcmRlZCB0byBbYHByb3h5VVJMYF0oI3RvYy1wcm94eXVybCkgZXZlbiBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgc2F2aW5nIG9mIGZpbGVzIGxvY2FsbHkuXG4gICAgICovXG4gICAgZm9yY2VQcm94eTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgVVJMIG9mIHRoZSBzZXJ2ZXItc2lkZSBwcm94eSB3aGljaCBzdHJlYW1zIHRoZSBmaWxlIHRvIHRoZSBlbmQgdXNlci5cbiAgICAgKlxuICAgICAqIFVzaW5nIGEgcHJveHkgaXMgcmVxdWlyZWQgaWYgdGhlIGJyb3dzZXIgaXMgbm90IGNhcGFibGUgb2Ygc2F2aW5nIGZpbGVzIGxvY2FsbHkmbWRhc2g7Zm9yIGV4YW1wbGUsXG4gICAgICogSW50ZXJuZXQgRXhwbG9yZXIgOSBhbmQgU2FmYXJpLlxuICAgICAqXG4gICAgICogT3B0aW9uYWxseSwgc2V0IHVwIGEgcHJveHkgdG8gcmVkdWNlIG1lbW9yeSB1c2FnZS4gVGhpcyBhdm9pZHMgY29weWluZyB0aGUgZmlsZSBjb250ZW50cyBpbiBtZW1vcnksXG4gICAgICogYnV0IHRyYW5zbWl0cyBpdCBvdmVyIHRoZSBuZXR3b3JrIGluc3RlYWQuIEZvciB0aGlzIHVzZSBjYXNlLCBzZXQgW2Bmb3JjZVByb3h5YF0oI3RvYy1mb3JjZXByb3h5KSB0byBgdHJ1ZWBcbiAgICAgKiB0byBza2lwIGNsaWVudC1zaWRlIHNhdmluZyBldmVuIGluIGJyb3dzZXIgdGhhdCBzdXBwb3J0IGl0LlxuICAgICAqXG4gICAgICogSW4gdGhlIHJlcXVlc3QgYm9keSwgdGhlIHByb3h5IHJlY2VpdmVzIGEgUE9TVCByZXF1ZXN0IHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgICAqIC0gYGNvbnRlbnRUeXBlYCZtZGFzaDtUaGUgTUlNRSB0eXBlIG9mIHRoZSBmaWxlLlxuICAgICAqIC0gYGJhc2U2NGAmbWRhc2g7VGhlIGJhc2UtNjQgZW5jb2RlZCBmaWxlIGNvbnRlbnQuXG4gICAgICogLSBgZmlsZU5hbWVgJm1kYXNoO1RoZSBmaWxlIG5hbWUsIGFzIHJlcXVlc3RlZCBieSB0aGUgY2FsbGVyLlxuICAgICAqXG4gICAgICogVGhlIHByb3h5IHJldHVybnMgdGhlIGRlY29kZWQgZmlsZSB3aXRoIHRoZSBgXCJDb250ZW50LURpc3Bvc2l0aW9uXCJgIGhlYWRlciBzZXQgdG8gYGF0dGFjaG1lbnQ7IGZpbGVuYW1lPVwiPGZpbGVOYW1lLnhzbHg+XCJgLlxuICAgICAqXG4gICAgICogRm9yIGRldGFpbHMgb24gdGhlIHNlcnZlci1zaWRlIHByb3h5IHVzYWdlIGFuZCBpbXBsZW1lbnRhdGlvbiwgc2VlIHRoZSBbRmlsZSBTYXZlcl0oeyUgc2x1ZyBvdmVydmlld19maWxlc2F2ZXIgJX0pIGRvY3VtZW50YXRpb24uXG4gICAgICovXG4gICAgcHJveHlVUkw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIHRvIGdldCB0aGUgZXhwb3J0ZWQgZGF0YSBvcHRpb25zLiBCeSBkZWZhdWx0LCB1c2VzIHRoZSBjdXJyZW50IGRhdGEgYW5kIGdyb3VwIG9mIHRoZSBHcmlkLlxuICAgICAqIFRvIGV4cG9ydCBkYXRhIHRoYXQgaXMgZGlmZmVyZW50IGZyb20gdGhlIGN1cnJlbnQgR3JpZCBkYXRhLCBwcm92aWRlIGEgY3VzdG9tIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZldGNoRGF0YTogKGNvbXBvbmVudDogR3JpZENvbXBvbmVudCkgPT4gRXhjZWxFeHBvcnREYXRhIHwgUHJvbWlzZTxFeGNlbEV4cG9ydERhdGE+IHwgT2JzZXJ2YWJsZTxFeGNlbEV4cG9ydERhdGE+O1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBkYXRhIGlzIGdyb3VwZWQsIHRoZSBvcHRpb25zIG9mIHRoZSBjZWxscyB0aGF0IGFyZSBpbnNlcnRlZCBiZWZvcmUgdGhlIGRhdGEsXG4gICAgICogZ3JvdXAsIGFuZCBmb290ZXIgY2VsbHMgdG8gaW5kaWNhdGUgdGhlIGdyb3VwIGhpZXJhcmNoeS5cbiAgICAgKi9cbiAgICBwYWRkaW5nQ2VsbE9wdGlvbnM6IENlbGxPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIElmIHRoZSBkYXRhIGlzIGdyb3VwZWQsIHRoZSBvcHRpb25zIG9mIHRoZSBjZWxscyB0aGF0IGFyZSBpbnNlcnRlZCBiZWZvcmUgdGhlXG4gICAgICogaGVhZGVyIGNlbGxzIHRvIGFsaWduIHRoZSBoZWFkZXJzIGFuZCB0aGUgY29sdW1uIHZhbHVlcy5cbiAgICAgKi9cbiAgICBoZWFkZXJQYWRkaW5nQ2VsbE9wdGlvbnM6IENlbGxPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgZ3JvdXBzIGluIHRoZSBFeGNlbCBmaWxlIGFyZSBjb2xsYXBzaWJsZS5cbiAgICAgKi9cbiAgICBjb2xsYXBzaWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29sdW1uczogUXVlcnlMaXN0PENvbHVtbkJhc2U+O1xuICAgIHByaXZhdGUgc2F2ZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGRhdGFTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoZXhjZWxTZXJ2aWNlOiBFeGNlbFNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgem9uZTogTmdab25lKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzYXZlKGNvbXBvbmVudDogR3JpZENvbXBvbmVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGV4cG9ydERhdGEoY29tcG9uZW50OiBHcmlkQ29tcG9uZW50LCByZXN1bHQ6IEV4Y2VsRXhwb3J0RGF0YSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNhdmVGaWxlKG9wdGlvbnM6IGFueSk6IHZvaWQ7XG59XG4iXX0=