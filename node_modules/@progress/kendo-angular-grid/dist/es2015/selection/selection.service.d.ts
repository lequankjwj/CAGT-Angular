/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy } from '@angular/core';
import { SelectableSettings, SelectionEvent } from './types';
import { RowSelectedFn } from '../rendering/common/row-class';
import { DomEventsService } from '../common/dom-events.service';
import { LocalDataChangesService } from '../editing/local-data-changes.service';
import { NavigationService } from '../navigation/navigation.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
declare type SelectionServiceSettings = {
    rowSelected: RowSelectedFn;
    selectable: boolean | SelectableSettings;
    view: {
        accessor: Function;
        at: Function;
        length: Number;
    };
};
/**
 * @hidden
 */
export declare class SelectionService implements OnDestroy {
    private domEvents;
    private localDataChangesService?;
    private navigationService?;
    changes: EventEmitter<SelectionEvent>;
    lastSelectionStartIndex: number;
    currentSelection: any[];
    selectAllChecked: boolean;
    settings: SelectionServiceSettings;
    active: boolean;
    readonly enableMarquee: boolean;
    mouseDownEventArgs: any;
    dragging: boolean;
    private cellClickSubscription;
    private mousedownSubscription;
    private dataChangedSubscription;
    private _selectAllState;
    constructor(domEvents: DomEventsService, localDataChangesService?: LocalDataChangesService, navigationService?: NavigationService);
    init(settings: any): void;
    isSelected(index: number): boolean;
    handleClick(item: any, event: any): void;
    toggle(item: any): any;
    toggleByIndex(index: number): any;
    select(item: any): any;
    deselect(removedItem: any): void;
    addAllTo(item: any, ctrlKey: boolean): any;
    updateAll(selectAllChecked: boolean): void;
    selectRange(startIndex: number, endIndex: number): any;
    readonly selectAllState: any;
    readonly selected: number[];
    readonly options: SelectableSettings;
    ngOnDestroy(): void;
    targetArgs(): any;
    addSubscriptions(): void;
    private getIterator;
    private removeSubscriptions;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectionService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<SelectionService>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsic2VsZWN0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2VsZWN0YWJsZVNldHRpbmdzLCBTZWxlY3Rpb25FdmVudCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgUm93U2VsZWN0ZWRGbiB9IGZyb20gJy4uL3JlbmRlcmluZy9jb21tb24vcm93LWNsYXNzJztcbmltcG9ydCB7IERvbUV2ZW50c1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vZG9tLWV2ZW50cy5zZXJ2aWNlJztcbmltcG9ydCB7IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlIH0gZnJvbSAnLi4vZWRpdGluZy9sb2NhbC1kYXRhLWNoYW5nZXMuc2VydmljZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4uL25hdmlnYXRpb24vbmF2aWdhdGlvbi5zZXJ2aWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5kZWNsYXJlIHR5cGUgU2VsZWN0aW9uU2VydmljZVNldHRpbmdzID0ge1xuICAgIHJvd1NlbGVjdGVkOiBSb3dTZWxlY3RlZEZuO1xuICAgIHNlbGVjdGFibGU6IGJvb2xlYW4gfCBTZWxlY3RhYmxlU2V0dGluZ3M7XG4gICAgdmlldzoge1xuICAgICAgICBhY2Nlc3NvcjogRnVuY3Rpb247XG4gICAgICAgIGF0OiBGdW5jdGlvbjtcbiAgICAgICAgbGVuZ3RoOiBOdW1iZXI7XG4gICAgfTtcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VsZWN0aW9uU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBkb21FdmVudHM7XG4gICAgcHJpdmF0ZSBsb2NhbERhdGFDaGFuZ2VzU2VydmljZT87XG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uU2VydmljZT87XG4gICAgY2hhbmdlczogRXZlbnRFbWl0dGVyPFNlbGVjdGlvbkV2ZW50PjtcbiAgICBsYXN0U2VsZWN0aW9uU3RhcnRJbmRleDogbnVtYmVyO1xuICAgIGN1cnJlbnRTZWxlY3Rpb246IGFueVtdO1xuICAgIHNlbGVjdEFsbENoZWNrZWQ6IGJvb2xlYW47XG4gICAgc2V0dGluZ3M6IFNlbGVjdGlvblNlcnZpY2VTZXR0aW5ncztcbiAgICBhY3RpdmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZW5hYmxlTWFycXVlZTogYm9vbGVhbjtcbiAgICBtb3VzZURvd25FdmVudEFyZ3M6IGFueTtcbiAgICBkcmFnZ2luZzogYm9vbGVhbjtcbiAgICBwcml2YXRlIGNlbGxDbGlja1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIG1vdXNlZG93blN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGRhdGFDaGFuZ2VkU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX3NlbGVjdEFsbFN0YXRlO1xuICAgIGNvbnN0cnVjdG9yKGRvbUV2ZW50czogRG9tRXZlbnRzU2VydmljZSwgbG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2U/OiBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSwgbmF2aWdhdGlvblNlcnZpY2U/OiBOYXZpZ2F0aW9uU2VydmljZSk7XG4gICAgaW5pdChzZXR0aW5nczogYW55KTogdm9pZDtcbiAgICBpc1NlbGVjdGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIGhhbmRsZUNsaWNrKGl0ZW06IGFueSwgZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgdG9nZ2xlKGl0ZW06IGFueSk6IGFueTtcbiAgICB0b2dnbGVCeUluZGV4KGluZGV4OiBudW1iZXIpOiBhbnk7XG4gICAgc2VsZWN0KGl0ZW06IGFueSk6IGFueTtcbiAgICBkZXNlbGVjdChyZW1vdmVkSXRlbTogYW55KTogdm9pZDtcbiAgICBhZGRBbGxUbyhpdGVtOiBhbnksIGN0cmxLZXk6IGJvb2xlYW4pOiBhbnk7XG4gICAgdXBkYXRlQWxsKHNlbGVjdEFsbENoZWNrZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHNlbGVjdFJhbmdlKHN0YXJ0SW5kZXg6IG51bWJlciwgZW5kSW5kZXg6IG51bWJlcik6IGFueTtcbiAgICByZWFkb25seSBzZWxlY3RBbGxTdGF0ZTogYW55O1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkOiBudW1iZXJbXTtcbiAgICByZWFkb25seSBvcHRpb25zOiBTZWxlY3RhYmxlU2V0dGluZ3M7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICB0YXJnZXRBcmdzKCk6IGFueTtcbiAgICBhZGRTdWJzY3JpcHRpb25zKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRJdGVyYXRvcjtcbiAgICBwcml2YXRlIHJlbW92ZVN1YnNjcmlwdGlvbnM7XG59XG5leHBvcnQge307XG4iXX0=