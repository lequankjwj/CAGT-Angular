/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ChangeDetectorRef } from '@angular/core';
import { GridComponent } from "../grid.component";
import { Subscription } from "rxjs";
import { RowArgs } from "../rendering/common/row-args";
import { SelectionEvent, CellSelectionItem } from "./types";
import { ColumnComponent } from '../columns/column.component';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class Selection {
    protected grid: GridComponent;
    protected cd: ChangeDetectorRef;
    /**
     * Defines the collection that will store the selected item keys.
     */
    selectedKeys: any[];
    /**
     * Defines the item key that will be stored in the `selectedKeys` collection.
     */
    selectionKey: string | ((context: RowArgs) => any);
    /**
     * Defines a function that determines the column key of a data cell.
     *
     * The function should return an unique value for each column.
     * By default, the Grid uses the column index as a column key.
     */
    columnKey: string | ((column: any, columnIndex: number) => any);
    /**
     * Fires when the `selectedKeys` collection has been updated.
     */
    selectedKeysChange: EventEmitter<any[]>;
    protected selectionChangeSubscription: Subscription;
    constructor(grid: GridComponent, cd: ChangeDetectorRef);
    protected init(): void;
    /**
     * @hidden
     */
    destroy(): void;
    /**
     * @hidden
     */
    reset(): void;
    protected getItemKey(row: RowArgs): any;
    protected getSelectionItem(row: RowArgs, col: ColumnComponent, colIndex: number): CellSelectionItem;
    protected onSelectionChange(selection: SelectionEvent): void;
    private getCellSelectionItemIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Selection, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<Selection, never, never, { "selectedKeys": "selectedKeys"; "selectionKey": "kendoGridSelectBy"; "columnKey": "columnKey"; }, { "selectedKeysChange": "selectedKeysChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLWRlZmF1bHQuZC50cyIsInNvdXJjZXMiOlsic2VsZWN0aW9uLWRlZmF1bHQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBHcmlkQ29tcG9uZW50IH0gZnJvbSBcIi4uL2dyaWQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUm93QXJncyB9IGZyb20gXCIuLi9yZW5kZXJpbmcvY29tbW9uL3Jvdy1hcmdzXCI7XG5pbXBvcnQgeyBTZWxlY3Rpb25FdmVudCwgQ2VsbFNlbGVjdGlvbkl0ZW0gfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnLi4vY29sdW1ucy9jb2x1bW4uY29tcG9uZW50Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWxlY3Rpb24ge1xuICAgIHByb3RlY3RlZCBncmlkOiBHcmlkQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29sbGVjdGlvbiB0aGF0IHdpbGwgc3RvcmUgdGhlIHNlbGVjdGVkIGl0ZW0ga2V5cy5cbiAgICAgKi9cbiAgICBzZWxlY3RlZEtleXM6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGl0ZW0ga2V5IHRoYXQgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBzZWxlY3RlZEtleXNgIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgc2VsZWN0aW9uS2V5OiBzdHJpbmcgfCAoKGNvbnRleHQ6IFJvd0FyZ3MpID0+IGFueSk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgZGV0ZXJtaW5lcyB0aGUgY29sdW1uIGtleSBvZiBhIGRhdGEgY2VsbC5cbiAgICAgKlxuICAgICAqIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIGFuIHVuaXF1ZSB2YWx1ZSBmb3IgZWFjaCBjb2x1bW4uXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIEdyaWQgdXNlcyB0aGUgY29sdW1uIGluZGV4IGFzIGEgY29sdW1uIGtleS5cbiAgICAgKi9cbiAgICBjb2x1bW5LZXk6IHN0cmluZyB8ICgoY29sdW1uOiBhbnksIGNvbHVtbkluZGV4OiBudW1iZXIpID0+IGFueSk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgYHNlbGVjdGVkS2V5c2AgY29sbGVjdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgICAqL1xuICAgIHNlbGVjdGVkS2V5c0NoYW5nZTogRXZlbnRFbWl0dGVyPGFueVtdPjtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IoZ3JpZDogR3JpZENvbXBvbmVudCwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBwcm90ZWN0ZWQgaW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlc2V0KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGdldEl0ZW1LZXkocm93OiBSb3dBcmdzKTogYW55O1xuICAgIHByb3RlY3RlZCBnZXRTZWxlY3Rpb25JdGVtKHJvdzogUm93QXJncywgY29sOiBDb2x1bW5Db21wb25lbnQsIGNvbEluZGV4OiBudW1iZXIpOiBDZWxsU2VsZWN0aW9uSXRlbTtcbiAgICBwcm90ZWN0ZWQgb25TZWxlY3Rpb25DaGFuZ2Uoc2VsZWN0aW9uOiBTZWxlY3Rpb25FdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRDZWxsU2VsZWN0aW9uSXRlbUluZGV4O1xufVxuIl19