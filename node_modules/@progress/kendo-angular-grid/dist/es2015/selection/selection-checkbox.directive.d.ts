/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterContentChecked, ElementRef, Renderer2, OnDestroy, NgZone } from '@angular/core';
import { SelectionService } from './selection.service';
/**
 * Represents the row-selection checkbox of the Grid. The directive expects the
 * index of the current row as an input parameter. Inside the
 * [`CheckboxColumnComponent`]({% slug api_grid_checkboxcolumncomponent %}), apply the
 * directive to an `input` element. When the user clicks the checkbox that is associated
 * with the directive, a [`selectionChange`]({% slug api_grid_gridcomponent %}#toc-selectionChange)
 * event is triggered.
 *
 * @example
 * ```ts-preview
 *
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-grid [data]="gridData" [selectable]="{enabled: true, checkboxOnly: true}">
 *          <kendo-grid-checkbox-column title="Custom checkbox">
 *            <ng-template kendoGridCellTemplate let-idx="rowIndex">
 *              Select row <input [kendoGridSelectionCheckbox]="idx" />
 *            </ng-template>
 *          </kendo-grid-checkbox-column>
 *          <kendo-grid-column field="ProductID" title="Product ID" width="120">
 *          </kendo-grid-column>
 *          <kendo-grid-column field="ProductName" title="Product Name">
 *          </kendo-grid-column>
 *        </kendo-grid>
 *    `
 * })
 *
 * class AppComponent {
 *    public gridData: any[];
 *
 *    constructor() {
 *        this.gridData = products;
 *    }
 * }
 *
 * const products = [{
 *    "ProductID": 1,
 *    "ProductName": "Chai",
 *    "UnitPrice": 18.0000,
 *    "Discontinued": true
 *  }, {
 *    "ProductID": 2,
 *    "ProductName": "Chang",
 *    "UnitPrice": 19.0000,
 *    "Discontinued": false
 *  }
 * ];
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class SelectionCheckboxDirective implements AfterContentChecked, OnDestroy {
    private selectionService;
    private el;
    private renderer;
    private ngZone;
    /**
     * The current index of the `dataItem` that will be selected.
     */
    itemIndex: number;
    type: string;
    private destroyClick;
    private destroyKeyDown;
    ngAfterContentChecked(): void;
    constructor(selectionService: SelectionService, el: ElementRef, renderer: Renderer2, ngZone: NgZone);
    ngOnDestroy(): void;
    private onClick;
    private onKeyDown;
    private setCheckedState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectionCheckboxDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectionCheckboxDirective, "[kendoGridSelectionCheckbox]", never, { "itemIndex": "kendoGridSelectionCheckbox"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLWNoZWNrYm94LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZWxlY3Rpb24tY2hlY2tib3guZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRDaGVja2VkLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZWxlY3Rpb24uc2VydmljZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHJvdy1zZWxlY3Rpb24gY2hlY2tib3ggb2YgdGhlIEdyaWQuIFRoZSBkaXJlY3RpdmUgZXhwZWN0cyB0aGVcbiAqIGluZGV4IG9mIHRoZSBjdXJyZW50IHJvdyBhcyBhbiBpbnB1dCBwYXJhbWV0ZXIuIEluc2lkZSB0aGVcbiAqIFtgQ2hlY2tib3hDb2x1bW5Db21wb25lbnRgXSh7JSBzbHVnIGFwaV9ncmlkX2NoZWNrYm94Y29sdW1uY29tcG9uZW50ICV9KSwgYXBwbHkgdGhlXG4gKiBkaXJlY3RpdmUgdG8gYW4gYGlucHV0YCBlbGVtZW50LiBXaGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgY2hlY2tib3ggdGhhdCBpcyBhc3NvY2lhdGVkXG4gKiB3aXRoIHRoZSBkaXJlY3RpdmUsIGEgW2BzZWxlY3Rpb25DaGFuZ2VgXSh7JSBzbHVnIGFwaV9ncmlkX2dyaWRjb21wb25lbnQgJX0jdG9jLXNlbGVjdGlvbkNoYW5nZSlcbiAqIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMtcHJldmlld1xuICpcbiAqIF9AQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgICAgPGtlbmRvLWdyaWQgW2RhdGFdPVwiZ3JpZERhdGFcIiBbc2VsZWN0YWJsZV09XCJ7ZW5hYmxlZDogdHJ1ZSwgY2hlY2tib3hPbmx5OiB0cnVlfVwiPlxuICogICAgICAgICAgPGtlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uIHRpdGxlPVwiQ3VzdG9tIGNoZWNrYm94XCI+XG4gKiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0dyaWRDZWxsVGVtcGxhdGUgbGV0LWlkeD1cInJvd0luZGV4XCI+XG4gKiAgICAgICAgICAgICAgU2VsZWN0IHJvdyA8aW5wdXQgW2tlbmRvR3JpZFNlbGVjdGlvbkNoZWNrYm94XT1cImlkeFwiIC8+XG4gKiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgICAgICA8L2tlbmRvLWdyaWQtY2hlY2tib3gtY29sdW1uPlxuICogICAgICAgICAgPGtlbmRvLWdyaWQtY29sdW1uIGZpZWxkPVwiUHJvZHVjdElEXCIgdGl0bGU9XCJQcm9kdWN0IElEXCIgd2lkdGg9XCIxMjBcIj5cbiAqICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4+XG4gKiAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW4gZmllbGQ9XCJQcm9kdWN0TmFtZVwiIHRpdGxlPVwiUHJvZHVjdCBOYW1lXCI+XG4gKiAgICAgICAgICA8L2tlbmRvLWdyaWQtY29sdW1uPlxuICogICAgICAgIDwva2VuZG8tZ3JpZD5cbiAqICAgIGBcbiAqIH0pXG4gKlxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBncmlkRGF0YTogYW55W107XG4gKlxuICogICAgY29uc3RydWN0b3IoKSB7XG4gKiAgICAgICAgdGhpcy5ncmlkRGF0YSA9IHByb2R1Y3RzO1xuICogICAgfVxuICogfVxuICpcbiAqIGNvbnN0IHByb2R1Y3RzID0gW3tcbiAqICAgIFwiUHJvZHVjdElEXCI6IDEsXG4gKiAgICBcIlByb2R1Y3ROYW1lXCI6IFwiQ2hhaVwiLFxuICogICAgXCJVbml0UHJpY2VcIjogMTguMDAwMCxcbiAqICAgIFwiRGlzY29udGludWVkXCI6IHRydWVcbiAqICB9LCB7XG4gKiAgICBcIlByb2R1Y3RJRFwiOiAyLFxuICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYW5nXCIsXG4gKiAgICBcIlVuaXRQcmljZVwiOiAxOS4wMDAwLFxuICogICAgXCJEaXNjb250aW51ZWRcIjogZmFsc2VcbiAqICB9XG4gKiBdO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWxlY3Rpb25DaGVja2JveERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgZWw7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBpbmRleCBvZiB0aGUgYGRhdGFJdGVtYCB0aGF0IHdpbGwgYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgaXRlbUluZGV4OiBudW1iZXI7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHByaXZhdGUgZGVzdHJveUNsaWNrO1xuICAgIHByaXZhdGUgZGVzdHJveUtleURvd247XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0aW9uU2VydmljZTogU2VsZWN0aW9uU2VydmljZSwgZWw6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG5nWm9uZTogTmdab25lKTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgb25DbGljaztcbiAgICBwcml2YXRlIG9uS2V5RG93bjtcbiAgICBwcml2YXRlIHNldENoZWNrZWRTdGF0ZTtcbn1cbiJdfQ==