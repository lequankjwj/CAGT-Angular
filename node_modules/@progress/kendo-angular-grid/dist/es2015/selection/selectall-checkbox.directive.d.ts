/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Renderer2, ElementRef, OnDestroy, AfterContentChecked, OnChanges, EventEmitter, NgZone } from '@angular/core';
import { SelectionService } from './selection.service';
import { SelectAllCheckboxState } from "./types";
/**
 * Represents the select-all checkbox feature of the Grid ([see example]({% slug selection_grid %}#toc-select-all-feature)).
 */
import * as ɵngcc0 from '@angular/core';
export declare class SelectAllCheckboxDirective implements AfterContentChecked, OnDestroy, OnChanges {
    private selectionService;
    private el;
    private renderer;
    private ngZone;
    /**
     * Explicitly overrides the state of the select-all checkbox.
     */
    state: SelectAllCheckboxState;
    /**
     * Fires when the user clicks the `kendoGridSelectAllCheckbox` select-all checkbox
     * ([see example]({% slug selection_grid %}#toc-select-all-feature)).
     */
    selectAllChange: EventEmitter<SelectAllCheckboxState>;
    type: string;
    private destroyClick;
    private stateSet;
    ngAfterContentChecked(): void;
    ngOnChanges(): void;
    constructor(selectionService: SelectionService, el: ElementRef, renderer: Renderer2, ngZone: NgZone);
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onClick(): void;
    /**
     * @hidden
     */
    private setState;
    /**
     * @hidden
     */
    private stateToBool;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectAllCheckboxDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectAllCheckboxDirective, "[kendoGridSelectAllCheckbox]", never, { "state": "state"; }, { "selectAllChange": "selectAllChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0YWxsLWNoZWNrYm94LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZWxlY3RhbGwtY2hlY2tib3guZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBBZnRlckNvbnRlbnRDaGVja2VkLCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZWxlY3Rpb24uc2VydmljZSc7XG5pbXBvcnQgeyBTZWxlY3RBbGxDaGVja2JveFN0YXRlIH0gZnJvbSBcIi4vdHlwZXNcIjtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgc2VsZWN0LWFsbCBjaGVja2JveCBmZWF0dXJlIG9mIHRoZSBHcmlkIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2VsZWN0aW9uX2dyaWQgJX0jdG9jLXNlbGVjdC1hbGwtZmVhdHVyZSkpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTZWxlY3RBbGxDaGVja2JveERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHNlbGVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIC8qKlxuICAgICAqIEV4cGxpY2l0bHkgb3ZlcnJpZGVzIHRoZSBzdGF0ZSBvZiB0aGUgc2VsZWN0LWFsbCBjaGVja2JveC5cbiAgICAgKi9cbiAgICBzdGF0ZTogU2VsZWN0QWxsQ2hlY2tib3hTdGF0ZTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgYGtlbmRvR3JpZFNlbGVjdEFsbENoZWNrYm94YCBzZWxlY3QtYWxsIGNoZWNrYm94XG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzZWxlY3Rpb25fZ3JpZCAlfSN0b2Mtc2VsZWN0LWFsbC1mZWF0dXJlKSkuXG4gICAgICovXG4gICAgc2VsZWN0QWxsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8U2VsZWN0QWxsQ2hlY2tib3hTdGF0ZT47XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHByaXZhdGUgZGVzdHJveUNsaWNrO1xuICAgIHByaXZhdGUgc3RhdGVTZXQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rpb25TZXJ2aWNlOiBTZWxlY3Rpb25TZXJ2aWNlLCBlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uQ2xpY2soKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRTdGF0ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0ZVRvQm9vbDtcbn1cbiJdfQ==