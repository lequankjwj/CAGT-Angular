/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef } from '@angular/core';
import { DataBindingDirective } from "../databinding.directive";
import { GridComponent } from "../grid.component";
import { CompositeFilterDescriptor, GroupDescriptor, SortDescriptor, State } from "@progress/kendo-data-query";
import { GridDataResult } from "../data/data.collection";
import { VirtualGroupResult } from "./virtual-group-result.interface";
import { LocalDataChangesService } from "../editing/local-data-changes.service";
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare const count: (groups: any[], includeFooters?: boolean) => any;
/**
 * @hidden
 */
export declare const slice: (groups: any[], skip: number, take: number, includeFooters?: boolean) => VirtualGroupResult[];
/**
 * A directive which encapsulates the in-memory handling of grouping with virtual scrolling.
 */
export declare class GroupBindingDirective extends DataBindingDirective {
    /**
     * The array of data which will be used to populate the Grid.
     */
    kendoGridGroupBinding: any[];
    /**
     * @hidden
     */
    data: any[];
    /**
     * Defines the descriptors by which the data will be sorted.
     */
    sort: SortDescriptor[];
    /**
     * Defines the descriptor by which the data will be filtered.
     */
    filter: CompositeFilterDescriptor;
    /**
     * Defines the descriptors by which the data will be grouped.
     */
    group: GroupDescriptor[];
    private groups;
    constructor(grid: GridComponent, changeDetector: ChangeDetectorRef, localDataChangesService: LocalDataChangesService);
    /**
     * @hidden
     */
    ngOnInit(): void;
    protected groupExpand({ groupIndex }: any): void;
    protected groupCollapse({ groupIndex }: any): void;
    protected process(state: State): GridDataResult;
    protected processGroups(state: State): GridDataResult;
    protected dataResult(skip: number, take: number): GridDataResult;
    protected applyState({ skip, take, sort, group, filter }: State): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GroupBindingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GroupBindingDirective, "[kendoGridGroupBinding]", never, { "kendoGridGroupBinding": "kendoGridGroupBinding"; "sort": "sort"; "filter": "filter"; "group": "group"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtc2Nyb2xsLWJpbmRpbmcuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImdyb3VwLXNjcm9sbC1iaW5kaW5nLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGF0YUJpbmRpbmdEaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGF0YWJpbmRpbmcuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBHcmlkQ29tcG9uZW50IH0gZnJvbSBcIi4uL2dyaWQuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBHcm91cERlc2NyaXB0b3IsIFNvcnREZXNjcmlwdG9yLCBTdGF0ZSB9IGZyb20gXCJAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeVwiO1xuaW1wb3J0IHsgR3JpZERhdGFSZXN1bHQgfSBmcm9tIFwiLi4vZGF0YS9kYXRhLmNvbGxlY3Rpb25cIjtcbmltcG9ydCB7IFZpcnR1YWxHcm91cFJlc3VsdCB9IGZyb20gXCIuL3ZpcnR1YWwtZ3JvdXAtcmVzdWx0LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UgfSBmcm9tIFwiLi4vZWRpdGluZy9sb2NhbC1kYXRhLWNoYW5nZXMuc2VydmljZVwiO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGNvdW50OiAoZ3JvdXBzOiBhbnlbXSwgaW5jbHVkZUZvb3RlcnM/OiBib29sZWFuKSA9PiBhbnk7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgc2xpY2U6IChncm91cHM6IGFueVtdLCBza2lwOiBudW1iZXIsIHRha2U6IG51bWJlciwgaW5jbHVkZUZvb3RlcnM/OiBib29sZWFuKSA9PiBWaXJ0dWFsR3JvdXBSZXN1bHRbXTtcbi8qKlxuICogQSBkaXJlY3RpdmUgd2hpY2ggZW5jYXBzdWxhdGVzIHRoZSBpbi1tZW1vcnkgaGFuZGxpbmcgb2YgZ3JvdXBpbmcgd2l0aCB2aXJ0dWFsIHNjcm9sbGluZy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR3JvdXBCaW5kaW5nRGlyZWN0aXZlIGV4dGVuZHMgRGF0YUJpbmRpbmdEaXJlY3RpdmUge1xuICAgIC8qKlxuICAgICAqIFRoZSBhcnJheSBvZiBkYXRhIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBwb3B1bGF0ZSB0aGUgR3JpZC5cbiAgICAgKi9cbiAgICBrZW5kb0dyaWRHcm91cEJpbmRpbmc6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkYXRhOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBkZXNjcmlwdG9ycyBieSB3aGljaCB0aGUgZGF0YSB3aWxsIGJlIHNvcnRlZC5cbiAgICAgKi9cbiAgICBzb3J0OiBTb3J0RGVzY3JpcHRvcltdO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGRlc2NyaXB0b3IgYnkgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3I7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZGVzY3JpcHRvcnMgYnkgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBncm91cGVkLlxuICAgICAqL1xuICAgIGdyb3VwOiBHcm91cERlc2NyaXB0b3JbXTtcbiAgICBwcml2YXRlIGdyb3VwcztcbiAgICBjb25zdHJ1Y3RvcihncmlkOiBHcmlkQ29tcG9uZW50LCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGxvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlOiBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGdyb3VwRXhwYW5kKHsgZ3JvdXBJbmRleCB9OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBncm91cENvbGxhcHNlKHsgZ3JvdXBJbmRleCB9OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBwcm9jZXNzKHN0YXRlOiBTdGF0ZSk6IEdyaWREYXRhUmVzdWx0O1xuICAgIHByb3RlY3RlZCBwcm9jZXNzR3JvdXBzKHN0YXRlOiBTdGF0ZSk6IEdyaWREYXRhUmVzdWx0O1xuICAgIHByb3RlY3RlZCBkYXRhUmVzdWx0KHNraXA6IG51bWJlciwgdGFrZTogbnVtYmVyKTogR3JpZERhdGFSZXN1bHQ7XG4gICAgcHJvdGVjdGVkIGFwcGx5U3RhdGUoeyBza2lwLCB0YWtlLCBzb3J0LCBncm91cCwgZmlsdGVyIH06IFN0YXRlKTogdm9pZDtcbn1cbiJdfQ==