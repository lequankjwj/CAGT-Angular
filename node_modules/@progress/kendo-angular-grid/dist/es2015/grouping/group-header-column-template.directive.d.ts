/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
/**
 * Represents the group-header column template of the Grid which helps to customize the content of the group headers.
 * To define the group header template, nest an `<ng-template>` tag with the `kendoGridGroupHeaderColumnTemplate`
 * directive inside `<kendo-grid-column>`. ([See example]({% slug groupable_grid_with_aggregates %})).
 *
 * The template context is set to the current data item and the following additional fields are passed:
 * - `group`&mdash;The current group item.
 * - `field`&mdash;The name of the field by which data is grouped.
 * - `value`&mdash;The current group value.
 * - `aggregates`&mdash;All aggregate values for the current group.
 *
 * @example
 * ```ts
 * <kendo-grid-column field="ProductName" title="Product Name">
 *     <ng-template kendoGridGroupHeaderColumnTemplate let-group="group" let-aggregates="aggregates">
 *         <span title="Group Header Column Template for ProductName">
 *             Count: {{ aggregates.Discontinued.count }}
 *         </span>
 *     </ng-template>
 * </kendo-grid-column>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class GroupHeaderColumnTemplateDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GroupHeaderColumnTemplateDirective, [{ optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<GroupHeaderColumnTemplateDirective, "[kendoGridGroupHeaderColumnTemplate]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtaGVhZGVyLWNvbHVtbi10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZ3JvdXAtaGVhZGVyLWNvbHVtbi10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGdyb3VwLWhlYWRlciBjb2x1bW4gdGVtcGxhdGUgb2YgdGhlIEdyaWQgd2hpY2ggaGVscHMgdG8gY3VzdG9taXplIHRoZSBjb250ZW50IG9mIHRoZSBncm91cCBoZWFkZXJzLlxuICogVG8gZGVmaW5lIHRoZSBncm91cCBoZWFkZXIgdGVtcGxhdGUsIG5lc3QgYW4gYDxuZy10ZW1wbGF0ZT5gIHRhZyB3aXRoIHRoZSBga2VuZG9HcmlkR3JvdXBIZWFkZXJDb2x1bW5UZW1wbGF0ZWBcbiAqIGRpcmVjdGl2ZSBpbnNpZGUgYDxrZW5kby1ncmlkLWNvbHVtbj5gLiAoW1NlZSBleGFtcGxlXSh7JSBzbHVnIGdyb3VwYWJsZV9ncmlkX3dpdGhfYWdncmVnYXRlcyAlfSkpLlxuICpcbiAqIFRoZSB0ZW1wbGF0ZSBjb250ZXh0IGlzIHNldCB0byB0aGUgY3VycmVudCBkYXRhIGl0ZW0gYW5kIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBmaWVsZHMgYXJlIHBhc3NlZDpcbiAqIC0gYGdyb3VwYCZtZGFzaDtUaGUgY3VycmVudCBncm91cCBpdGVtLlxuICogLSBgZmllbGRgJm1kYXNoO1RoZSBuYW1lIG9mIHRoZSBmaWVsZCBieSB3aGljaCBkYXRhIGlzIGdyb3VwZWQuXG4gKiAtIGB2YWx1ZWAmbWRhc2g7VGhlIGN1cnJlbnQgZ3JvdXAgdmFsdWUuXG4gKiAtIGBhZ2dyZWdhdGVzYCZtZGFzaDtBbGwgYWdncmVnYXRlIHZhbHVlcyBmb3IgdGhlIGN1cnJlbnQgZ3JvdXAuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiA8a2VuZG8tZ3JpZC1jb2x1bW4gZmllbGQ9XCJQcm9kdWN0TmFtZVwiIHRpdGxlPVwiUHJvZHVjdCBOYW1lXCI+XG4gKiAgICAgPG5nLXRlbXBsYXRlIGtlbmRvR3JpZEdyb3VwSGVhZGVyQ29sdW1uVGVtcGxhdGUgbGV0LWdyb3VwPVwiZ3JvdXBcIiBsZXQtYWdncmVnYXRlcz1cImFnZ3JlZ2F0ZXNcIj5cbiAqICAgICAgICAgPHNwYW4gdGl0bGU9XCJHcm91cCBIZWFkZXIgQ29sdW1uIFRlbXBsYXRlIGZvciBQcm9kdWN0TmFtZVwiPlxuICogICAgICAgICAgICAgQ291bnQ6IHt7IGFnZ3JlZ2F0ZXMuRGlzY29udGludWVkLmNvdW50IH19XG4gKiAgICAgICAgIDwvc3Bhbj5cbiAqICAgICA8L25nLXRlbXBsYXRlPlxuICogPC9rZW5kby1ncmlkLWNvbHVtbj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHcm91cEhlYWRlckNvbHVtblRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pik7XG59XG4iXX0=