/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SelectionDirective } from './selection/selection.directive';
import { CellSelectedFn, SelectableSettings, SelectionEvent } from './selection/types';
import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, QueryList, SimpleChange, NgZone, ChangeDetectorRef, TemplateRef, TrackByFunction } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { SortDescriptor, GroupDescriptor, GroupResult, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { DetailTemplateDirective } from './rendering/details/detail-template.directive';
import { ScrollMode } from './scrolling/scrollmode';
import { SortSettings } from './columns/sort-settings';
import { PagerSettings } from './pager/pager-settings';
import { BrowserSupportService } from './layout/browser-support.service';
import { GridDataResult, DataCollection } from './data/data.collection';
import { SelectionService } from './selection/selection.service';
import { EditService } from './editing/edit.service';
import { PageChangeEvent, DataStateChangeEvent } from './data/change-event-args.interface';
import { DetailsService } from './rendering/details/details.service';
import { DetailExpandEvent } from './rendering/details/detail-expand-event';
import { DetailCollapseEvent } from './rendering/details/detail-collapse-event';
import { GroupsService } from './grouping/groups.service';
import { ColumnsContainer } from './columns/columns-container';
import { GroupInfoService } from './grouping/group-info.service';
import { GroupableSettings } from './grouping/group-settings';
import { ChangeNotificationService } from './data/change-notification.service';
import { NoRecordsTemplateDirective } from './rendering/no-records-template.directive';
import { ColumnBase } from './columns/column-base';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { FilterService } from './filtering/filter.service';
import { PagerTemplateDirective } from './pager/pager-template.directive';
import { PDFService } from './pdf/pdf.service';
import { PDFExportEvent } from './pdf/pdf-export-event';
import { ResponsiveService } from "./layout/responsive.service";
import { ExcelService } from './excel/excel.service';
import { ExcelExportEvent } from './excel/excel-export-event';
import { ColumnList } from './columns/column-list';
import { RowClassFn, RowSelectedFn } from './rendering/common/row-class';
import { ToolbarTemplateDirective } from "./rendering/toolbar/toolbar-template.directive";
import { EditEvent } from "./editing/edit-event-args.interface";
import { RemoveEvent } from "./editing/remove-event-args.interface";
import { SaveEvent } from "./editing/save-event-args.interface";
import { CancelEvent } from "./editing/cancel-event-args.interface";
import { AddEvent } from "./editing/add-event-args.interface";
import { CellCloseEvent } from './editing/cell-close-event';
import { EditRowOptions } from './editing/edit-row-options.interface';
import { CellClickEvent } from './common/cell-click-event-args.interface';
import { ScrollSyncService } from "./scrolling/scroll-sync.service";
import { DomEventsService } from './common/dom-events.service';
import { ColumnResizingService } from "./column-resizing/column-resizing.service";
import { ColumnResizeArgs } from './column-resizing/column-resize.interface';
import { FilterableSettings } from './filtering/filterable';
import { ColumnReorderService } from './dragdrop/column-reorder.service';
import { ColumnReorderEvent } from './dragdrop/column-reorder-event';
import { ColumnReorderConfig } from './dragdrop/column-reorder-config';
import { NavigationService } from './navigation/navigation.service';
import { NavigationCell } from './navigation/navigation-cell.interface';
import { NavigationRow } from './navigation/navigation-row.interface';
import { ColumnInfoService } from "./common/column-info.service";
import { ScrollRequestService, ScrollRequest } from './scrolling/scroll-request.service';
import { SortService } from './common/sort.service';
import { ColumnMenuTemplateDirective } from './column-menu/column-menu-template.directive';
import { ColumnMenuSettings } from './column-menu/column-menu-settings.interface';
import { ColumnVisibilityChangeEvent } from './column-menu/column-visibility-change-event';
import { ColumnLockedChangeEvent } from './column-menu/column-locked-change-event';
import { ScrollBottomEvent } from './scrolling/scroll-bottom-event';
import { ContentScrollEvent } from './scrolling/content-scroll-event';
import { GridItem } from './data/grid-item.interface';
import { RowArgs } from './rendering/common/row-args';
import { CellSelectionService } from './selection/cell-selection.service';
/**
 * Represents the Kendo UI Grid component for Angular.
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-grid [data]="gridData">
 *        </kendo-grid>
 *    `
 * })
 * class AppComponent {
 *    public gridData: any[] = products;
 * }
 *
 * const products = [{
 *    "ProductID": 1,
 *    "ProductName": "Chai",
 *    "UnitPrice": 18.0000,
 *    "Discontinued": true
 *  }, {
 *    "ProductID": 2,
 *    "ProductName": "Chang",
 *    "UnitPrice": 19.0000,
 *    "Discontinued": false
 *  }
 * ];
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class GridComponent implements AfterContentInit, AfterViewInit, OnDestroy, OnChanges, OnInit {
    private supportService;
    private selectionService;
    private cellSelectionService;
    wrapper: ElementRef;
    private groupInfoService;
    private groupsService;
    private changeNotification;
    private detailsService;
    private editService;
    private filterService;
    private pdfService;
    private responsiveService;
    private renderer;
    private excelService;
    private ngZone;
    private scrollSyncService;
    private domEvents;
    private columnResizingService;
    private changeDetectorRef;
    private columnReorderService;
    private columnInfoService;
    private navigationService;
    private sortService;
    private scrollRequestService;
    /**
     * Sets the data of the Grid. If an array is provided, the Grid automatically gets the total count
     * ([more information and example]({% slug databinding_grid %})).
     */
    data: Array<any> | GridDataResult;
    /**
     * Defines the page size used by the Grid pager.
     * Required by the [paging]({% slug paging_grid %}) functionality.
     */
    pageSize: number;
    /**
     * Defines the height (in pixels) that is used when the `scrollable` option of the Grid is set.
     * To set the height of the Grid, you can also use `style.height`. The `style.height`
     * option supports units such as `px`, `%`, `em`, `rem`, and others.
     */
    height: number;
    /**
     * Defines the row height that is used when the `scrollable` option of the Grid is set to `virtual`.
     * Required by the [virtual scrolling functionality]({% slug scrollmmodes_grid %}).
     */
    rowHeight: number;
    /**
     * Defines the detail row height that is used when the `scrollable` option of the Grid is set to `virtual`.
     * Required by the [virtual scrolling functionality]({% slug scrollmmodes_grid %}).
     */
    detailRowHeight: number;
    /**
     * Defines the number of records to be skipped by the pager.
     * Required by the [paging]({% slug paging_grid %}) functionality.
     */
    skip: number;
    /**
     * Defines the scroll mode used by the Grid.
     *
     * The available options are:
     *  - `none`&mdash;Renders no scrollbar.
     *  - `scrollable`&mdash;The default scroll mode. It requires the setting of the `height` option.
     *  - `virtual`&mdash;Displays no pager and renders a portion of the data (optimized rendering) while the user is scrolling the content.
     */
    scrollable: ScrollMode;
    /**
     * Enables the single-row [selection]({% slug selection_grid %}) of the Grid.
     */
    selectable: SelectableSettings | boolean;
    /**
     * The descriptors by which the data will be sorted ([see example]({% slug sorting_grid %})).
     */
    sort: Array<SortDescriptor>;
    /**
     * A function that defines how to track changes for the data rows.
     *
     * By default, the Grid tracks changes by the index of the data item.
     * Edited rows are tracked by reference.
     * In some cases, you might need to override the default behavior,
     * for example, when you implement editing with immutable data items.
     *
     * The following example demonstrates how to track items only by index.
     *
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     * import { GridItem } from '@progress/kendo-angular-grid';
     *
     * _@Component({
     *    selector: 'my-app',
     *    template: `
     *        <kendo-grid [data]="gridData" [trackBy]="trackBy">
     *        </kendo-grid>
     *    `
     * })
     * class AppComponent {
     *    public gridData: any[] = products;
     *
     *    public trackBy(index: number, item: GridItem): any {
     *        console.log(item);
     *        return index;
     *    }
     * }
     *
     * const products = [{
     *    "ProductID": 1,
     *    "ProductName": "Chai",
     *    "UnitPrice": 18.0000,
     *    "Discontinued": true
     *  }, {
     *    "ProductID": 2,
     *    "ProductName": "Chang",
     *    "UnitPrice": 19.0000,
     *    "Discontinued": false
     *  }
     * ];
     * ```
     */
    trackBy: TrackByFunction<GridItem>;
    /**
     * The descriptor by which the data will be filtered ([see examples]({% slug filtering_grid %})).
     */
    filter: CompositeFilterDescriptor;
    /**
     * The descriptors by which the data will be grouped ([see example]({% slug groupingbasics_grid %})).
     */
    /**
    */
    group: Array<GroupDescriptor>;
    /**
     * If set to `true`, the grid will render only the columns in the current viewport.
     */
    virtualColumns: boolean;
    /**
     * @hidden
     */
    readonly showTopToolbar: boolean;
    /**
     * @hidden
     */
    readonly showBottomToolbar: boolean;
    /**
     * @hidden
     */
    readonly isLocked: boolean;
    /**
     * @hidden
     */
    readonly showPager: boolean;
    /**
     * @hidden
     */
    readonly showGroupPanel: boolean;
    /**
     * @hidden
     */
    readonly groupableEmptyText: string;
    /**
     * @hidden
     */
    readonly marqueeSelection: boolean;
    /**
     * Enables the [filtering]({% slug filtering_grid %}) of the Grid columns that have their `field` option set.
     */
    filterable: FilterableSettings;
    /**
     * Enables the [sorting]({% slug sorting_grid %}) of the Grid columns that have their `field` option set.
     */
    sortable: SortSettings;
    /**
     * Configures the pager of the Grid ([see example]({% slug paging_grid %})).
     *
     * The available options are:
     * - `buttonCount: Number`&mdash;Sets the maximum numeric buttons count before the buttons are collapsed.
     * - `info: Boolean`&mdash;Toggles the information about the current page and the total number of records.
     * - `type: PagerType`&mdash;Accepts the `numeric` (buttons with numbers) and `input` (input for typing the page number) values.
     * - `pageSizes: Boolean` or `Array<number>`&mdash;Shows a menu for selecting the page size.
     * - `previousNext: Boolean`&mdash;Toggles the **Previous** and **Next** buttons.
     */
    pageable: PagerSettings | boolean;
    /**
     * If set to `true`, the user can group the Grid by dragging the column header cells.
     * By default, grouping is disabled ([see example]({% slug groupingbasics_grid %})).
     */
    groupable: GroupableSettings | boolean;
    /**
     * If set to `true`, the user can use dedicated shortcuts to interact with the Grid.
     * By default, navigation is disabled and the Grid content is accessible in the normal tab sequence.
     */
    navigable: boolean;
    /**
     * @hidden
     *
     * An alias for `navigable` for users who migrate from Kendo UI for jQuery.
     */
    /**
    * @hidden
    */
    navigatable: boolean;
    /**
     * Indicates whether the Grid columns will be resized during initialization so that
     * they fit their headers and row content. Defaults to `false`.
     * Columns with `autoSize` set to `false` are excluded.
     * To dynamically update the column width to match the new content,
     * refer to [this example]({% slug resizing_columns_grid %}).
     */
    autoSize: boolean;
    /**
     * Defines a function that is executed for every data row in the component.
     *
     * @example
     * ```ts
     * import { Component, ViewEncapsulation } from '@angular/core';
     * import { RowClassArgs } from '@progress/kendo-angular-grid';
     *
     * _@Component({
     *    selector: 'my-app',
     *    encapsulation: ViewEncapsulation.None,
     *    styles: [`
     *        .k-grid tr.even { background-color: #f45c42; }
     *        .k-grid tr.odd { background-color: #41f4df; }
     *    `],
     *    template: `
     *        <kendo-grid [data]="gridData" [rowClass]="rowCallback">
     *        </kendo-grid>
     *    `
     * })
     * class AppComponent {
     *    public gridData: any[] = products;
     *
     *    public rowCallback(context: RowClassArgs) {
     *        const isEven = context.index % 2 == 0;
     *        return {
     *            even: isEven,
     *            odd: !isEven
     *        };
     *    }
     * }
     *
     * const products = [{
     *    "ProductID": 1,
     *    "ProductName": "Chai",
     *    "UnitPrice": 18.0000,
     *    "Discontinued": true
     *  }, {
     *    "ProductID": 2,
     *    "ProductName": "Chang",
     *    "UnitPrice": 19.0000,
     *    "Discontinued": false
     *  }
     * ];
     * ```
     */
    rowClass: RowClassFn;
    /**
     * Defines a Boolean function that is executed for each data row in the component
     * ([see example]({% slug selection_grid %}#toc-setting-the-selected-rows)).
     * Determines whether the row will be selected.
     */
    rowSelected: RowSelectedFn;
    /**
     * Defines a function that determines the selected state of a data cell.
     * Returns an object with `selected` and `item` properties.
     * The cell is marked as selected only if the `selected` property equals `true`.
     *
     * The function is executed for each data cell and may be called more than once
     * as part of a change detection cycle. ([see example]({% slug grid_selection_custom %}toc-setting-the-selected-cells))
     */
    cellSelected: CellSelectedFn;
    /**
     * Returns the currently focused cell (if any).
     */
    readonly activeCell: NavigationCell;
    /**
     * Returns the currently focused row (if any).
     */
    readonly activeRow: NavigationRow;
    /**
     * If set to `true`, the user can resize columns by dragging the edges (resize handles) of their header cells
     * ([see example]({% slug resizing_columns_grid %})).
     *
     * @default false
     */
    resizable: boolean;
    /**
     * If set to `true`, the user can reorder columns by dragging their header cells
     * ([see example]({% slug reordering_columns_grid %})).
     *
     * @default false
     */
    reorderable: boolean;
    /**
     * Specifies if the loading indicator of the Grid will be displayed ([see example]({% slug databinding_grid %})).
     *
     * @default false
     */
    loading: boolean;
    /**
     * Specifies if the column menu of the columns will be displayed ([see example]({% slug columnmenu_grid %})).
     *
     * @default false
     */
    columnMenu: boolean | ColumnMenuSettings;
    /**
     * Specifies if the header of the grid will be hidden. The header is visible by default.
     *
     * > The header includes column headers and the [filter row]({% slug filtering_grid %}#toc-filter-row).
     */
    hideHeader: boolean;
    /**
     * Fires when the Grid filter is modified through the UI.
     * You have to handle the event yourself and filter the data.
     */
    filterChange: EventEmitter<CompositeFilterDescriptor>;
    /**
     * Fires when the page of the Grid is changed ([see example]({% slug paging_grid %})).
     * You have to handle the event yourself and page the data.
     */
    pageChange: EventEmitter<PageChangeEvent>;
    /**
     * Fires when the grouping of the Grid is changed.
     * You have to handle the event yourself and group the data ([see example]({% slug groupingbasics_grid %})).
     */
    groupChange: EventEmitter<Array<GroupDescriptor>>;
    /**
     * Fires when the sorting of the Grid is changed ([see example]({% slug sorting_grid %})).
     * You have to handle the event yourself and sort the data.
     */
    sortChange: EventEmitter<Array<SortDescriptor>>;
    /**
     * Fires when the user selects a Grid row.
     * Emits the [`SelectionEvent`]({% slug api_grid_selectionevent %}#toc-selectionchange).
     */
    selectionChange: EventEmitter<SelectionEvent>;
    /**
     * Fires when the data state of the Grid is changed.
     */
    dataStateChange: EventEmitter<DataStateChangeEvent>;
    /**
     * Fires when the user expands a group header.
     */
    groupExpand: EventEmitter<{
        group: GroupResult;
        groupIndex: string;
    }>;
    /**
     * Fires when the user collapses a group header.
     */
    groupCollapse: EventEmitter<{
        group: GroupResult;
        groupIndex: string;
    }>;
    /**
     * Fires when the user expands a master row.
     */
    detailExpand: EventEmitter<DetailExpandEvent>;
    /**
     * Fires when the user collapses a master row.
     */
    detailCollapse: EventEmitter<DetailCollapseEvent>;
    /**
     * Fires when the user clicks the **Edit** command button to edit a row
     * ([see example]({% slug editing_template_forms_grid %}#toc-editing-records)).
     */
    edit: EventEmitter<EditEvent>;
    /**
     * Fires when the user clicks the **Cancel** command button to close a row
     * ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).
     */
    cancel: EventEmitter<CancelEvent>;
    /**
     * Fires when the user clicks the **Save** command button to save changes in a row
     * ([see example]({% slug editing_template_forms_grid %}#toc-saving-records)).
     */
    save: EventEmitter<SaveEvent>;
    /**
     * Fires when the user clicks the **Remove** command button to remove a row
     * ([see example]({% slug editing_template_forms_grid %}#toc-removing-records)).
     */
    remove: EventEmitter<RemoveEvent>;
    /**
     * Fires when the user clicks the **Add** command button to add a new row
     * ([see example]({% slug editing_template_forms_grid %}#toc-adding-records)).
     */
    add: EventEmitter<AddEvent>;
    /**
     * Fires when the user leaves an edited cell ([see example]({% slug editing_incell_grid %}#toc-basic-concepts)).
     */
    cellClose: EventEmitter<CellCloseEvent>;
    /**
     * Fires when the user clicks a cell ([see example]({% slug editing_incell_grid %}#toc-basic-concepts)).
     */
    cellClick: EventEmitter<CellClickEvent>;
    /**
     * Fires when the user clicks the **Export to PDF** command button.
     */
    pdfExport: EventEmitter<PDFExportEvent>;
    /**
     * Fires when the user clicks the **Export to Excel** command button.
     */
    excelExport: EventEmitter<ExcelExportEvent>;
    /**
     * Fires when the user completes the resizing of the column.
     */
    columnResize: EventEmitter<Array<ColumnResizeArgs>>;
    /**
     * Fires when the user completes the reordering of the column.
     */
    columnReorder: EventEmitter<ColumnReorderEvent>;
    /**
     * Fires when the user changes the visibility of the columns from the column menu or column chooser.
     */
    columnVisibilityChange: EventEmitter<ColumnVisibilityChangeEvent>;
    /**
     * Fires when the user changes the locked state of the columns from the column menu or by reordering the columns.
     */
    columnLockedChange: EventEmitter<ColumnLockedChangeEvent>;
    /**
     * Fires when the user scrolls to the last record on the page and enables endless scrolling
     * ([see example]({% slug scrollmmodes_grid %}#toc-endless-scrolling)).
     * You have to handle the event yourself and page the data.
     */
    scrollBottom: EventEmitter<ScrollBottomEvent>;
    /**
     * Fires when the grid content is scrolled.
     * For performance reasons, the event is triggered outside the Angular zone. Enter the Angular zone if you make any changes that require change detection.
     */
    contentScroll: EventEmitter<ContentScrollEvent>;
    /**
     * A query list of all declared columns.
     */
    columns: QueryList<ColumnBase>;
    readonly dir: string;
    readonly hostClasses: boolean;
    readonly lockedClasses: boolean;
    readonly virtualClasses: boolean;
    readonly noScrollbarClass: boolean;
    detailTemplateChildren: QueryList<DetailTemplateDirective>;
    detailTemplate: DetailTemplateDirective;
    noRecordsTemplateChildren: QueryList<NoRecordsTemplateDirective>;
    noRecordsTemplate: NoRecordsTemplateDirective;
    pagerTemplateChildren: QueryList<PagerTemplateDirective>;
    pagerTemplate: PagerTemplateDirective;
    toolbarTemplateChildren: QueryList<ToolbarTemplateDirective>;
    toolbarTemplate: ToolbarTemplateDirective;
    columnMenuTemplates: QueryList<ColumnMenuTemplateDirective>;
    lockedHeader: any;
    header: any;
    footer: QueryList<any>;
    ariaRoot: ElementRef;
    readonly scrollbarWidth: number;
    readonly headerPadding: any;
    columnMenuOptions: any;
    columnList: ColumnList;
    selectionDirective: boolean | SelectionDirective;
    columnsContainer: ColumnsContainer;
    view: DataCollection;
    readonly hasGroupFooters: boolean;
    readonly showFooter: boolean;
    readonly showGroupFooters: boolean;
    readonly ariaRowCount: number;
    readonly ariaColCount: number;
    private shouldGenerateColumns;
    private direction;
    private _sort;
    private _group;
    private _skip;
    private cachedWindowWidth;
    private defaultSelection;
    private _rowSelected;
    private _cellSelected;
    private _customDetailTemplate;
    private _customNoRecordsTemplate;
    private _customPagerTemplate;
    private _customToolbarTemplate;
    private leafViewportColumns;
    private viewportColumns;
    readonly isVirtual: boolean;
    readonly isScrollable: boolean;
    readonly visibleColumns: QueryList<ColumnBase>;
    readonly lockedColumns: QueryList<ColumnBase>;
    readonly nonLockedColumns: QueryList<ColumnBase>;
    readonly lockedLeafColumns: QueryList<ColumnBase>;
    readonly nonLockedLeafColumns: QueryList<ColumnBase>;
    readonly leafColumns: QueryList<ColumnBase>;
    readonly totalColumnLevels: number;
    readonly headerColumns: any;
    readonly headerLeafColumns: any;
    readonly lockedWidth: number;
    readonly nonLockedWidth: number;
    readonly selectableSettings: SelectableSettings;
    readonly columnMenuTemplate: TemplateRef<any>;
    readonly totalCount: number;
    private selectionSubscription;
    private stateChangeSubscription;
    private groupExpandCollapseSubscription;
    private editServiceSubscription;
    private detailsServiceSubscription;
    private filterSubscription;
    private sortSubscription;
    private columnsChangeSubscription;
    private pdfSubscription;
    private excelSubscription;
    private columnsContainerChangeSubscription;
    private cellClickSubscription;
    private footerChangeSubscription;
    private columnResizingSubscription;
    private columnReorderSubscription;
    private detachElementEventHandlers;
    private localizationSubscription;
    private columnVisibilityChangeSubscription;
    private columnLockedChangeSubscription;
    private focusElementSubscription;
    private columnRangeChangeSubscription;
    private rtl;
    constructor(supportService: BrowserSupportService, selectionService: SelectionService, cellSelectionService: CellSelectionService, wrapper: ElementRef, groupInfoService: GroupInfoService, groupsService: GroupsService, changeNotification: ChangeNotificationService, detailsService: DetailsService, editService: EditService, filterService: FilterService, pdfService: PDFService, responsiveService: ResponsiveService, renderer: Renderer2, excelService: ExcelService, ngZone: NgZone, scrollSyncService: ScrollSyncService, domEvents: DomEventsService, columnResizingService: ColumnResizingService, changeDetectorRef: ChangeDetectorRef, columnReorderService: ColumnReorderService, columnInfoService: ColumnInfoService, navigationService: NavigationService, sortService: SortService, scrollRequestService: ScrollRequestService, localization: LocalizationService);
    /**
     * Expands the specified master row ([see example]({% slug hierarchy_grid %})).
     *
     * This method is provided only for backwards-compatibility with legacy versions.
     * These versions tracked the expanded state internally using the data row index.
     *
     * For new development, use the [`kendoGridDetailsExpandBy` directive]({% slug api_grid_expanddetailsdirective %})
     * or provide an isDetailExpanded callback. See [Controlling the Expanded State]({% slug master_detail_expanded_state_grid %})
     * for examples on how to control the expanded state.
     *
     * @param index - The data row index of the master row.
     */
    expandRow(index: number): void;
    /**
     * Collapses the specified master row ([see example]({% slug hierarchy_grid %})).
     *
     * This method is provided only for backwards-compatibility with legacy versions.
     * These versions tracked the expanded state internally using the data row index.
     *
     * For new development, use the [`kendoGridDetailsExpandBy` directive]({% slug api_grid_expanddetailsdirective %})
     * or provide an isDetailExpanded callback. See [Controlling the Expanded State]({% slug master_detail_expanded_state_grid %})
     * for examples on how to control the expanded state.
     *
     * @param index - The data row index of the master row.
     */
    collapseRow(index: number): void;
    /**
     * Expands a group header item for the given index. For example,
     * `0_1` expands the second inner group of the first master group.
     *
     * > * When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,
     * > the `expandGroup` method is not supported.
     * > * When a Grid is pageable, the indexes of the groups are offset by the current Grid [`skip`]({% slug api_grid_gridcomponent %}#toc-skip).
     *
     * @param {string} index - The underscore separated hierarchical index of the group.
     */
    expandGroup(index: string): void;
    /**
     * Collapses a group header item for the given index. For example,
     * `0_1` collapses the second inner group of the first master group.
     *
     * > * When you use the [`kendoGridGroupBinding`]({% slug api_grid_groupbindingdirective %}) directive,
     * > the `collapseGroup` method is not supported.
     * > * When a Grid is pageable, the indexes of the groups are offset by the current Grid [`skip`]({% slug api_grid_gridcomponent %}#toc-skip).
     *
     * @param {string} index - The underscore separated hierarchical index of the group.
     */
    collapseGroup(index: string): void;
    /**
     * @hidden
     */
    resetGroupsState(): void;
    /**
     * @hidden
     */
    expandGroupChildren(groupIndex: string): void;
    /**
     * @hidden
     */
    onDataChange(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    ngAfterContentInit(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    attachScrollSync(): void;
    /**
     * Switches the specified table row in the edit mode ([see example]({% slug editing_template_forms_grid %}#toc-editing-records)).
     *
     * @param rowIndex - The data row index that will be switched in the edit mode.
     * @param group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})
     * that describes the edit form.
     * @param options - Additional options configuring the focus target once the editor opens.
     */
    editRow(rowIndex: number, group?: FormGroup, options?: EditRowOptions): void;
    /**
     * Closes the editor for a given row ([see example]({% slug editing_template_forms_grid %}#toc-cancelling-editing)).
     *
     * @param {number} index - The row index that will be switched out of the edit mode. If no index is provided, it is assumed
     * that the new item editor will be closed.
     */
    closeRow(index?: number): void;
    /**
     * Creates a new row editor ([see example]({% slug editing_template_forms_grid %}#toc-adding-records)).
     *
     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }}) that describes
     * the edit form. If called with a data item, it will build the `FormGroup` from the data item fields.
     */
    addRow(group: any): void;
    /**
     * Puts the cell that is specified by the table row and column in edit mode.
     *
     * @param {number} rowIndex - The data row index that will be switched in the edit mode.
     * @param {number|string|any} column - The leaf column index, or the field name or the column instance that should be edited.
     * @param {FormGroup} group - The [`FormGroup`]({{ site.data.urls.angular['formgroupapi'] }})
     * that describes the edit form.
     */
    editCell(rowIndex: number, column: number | string | any, group?: any): void;
    /**
     * Closes the current cell in edit mode and fires
     * the [`cellClose`]({% slug api_grid_gridcomponent %}#toc-cellclose) event.
     *
     * @return {boolean} Indicates whether the edited cell was closed.
     * A `false` value indicates that the
     * [`cellClose`]({% slug api_grid_gridcomponent %}#toc-cellclose) event was prevented.
     */
    closeCell(): boolean;
    /**
     * Closes the current cell in edit mode.
     */
    cancelCell(): void;
    /**
     * Returns a flag which indicates if a row or a cell is currently edited.
     *
     * @return {boolean} A flag which indicates if a row or a cell is currently edited.
     */
    isEditing(): boolean;
    /**
     * Returns a flag which indicates if a cell is currently edited.
     *
     * @return {boolean} A flag which indicates if a cell is currently being edited.
     */
    isEditingCell(): boolean;
    /**
     * Initiates the PDF export ([see example]({% slug pdfexport_grid %})).
     */
    saveAsPDF(): void;
    /**
     * Exports the Grid element to a Drawing [`Group`]({% slug api_kendo-drawing_group %}) by using the `kendo-grid-pdf` component options.
     * ([see example]({% slug pdfexport_grid %}#toc-exporting-multiple-grids-to-the-same-pdf)).
     *
     * @return {Promise} - A promise that will be resolved with the Drawing `Group`.
     */
    drawPDF(): Promise<any>;
    /**
     * Initiates the Excel export ([see example]({% slug excelexport_grid %})).
     */
    saveAsExcel(): void;
    /**
     * Applies the minimum possible width for the specified column,
     * so that the whole text fits without wrapping. This method expects the Grid
     * to be resizable (set `resizable` to `true`).
     * Makes sense to execute this method only
     * after the Grid is already populated with data.
     *
     * @example
     * ```ts
     * _@Component({
     *    selector: 'my-app',
     *    template: `
     *        <kendo-grid
     *            #grid
     *            [data]="gridData"
     *            [resizable]="true"
     *            style="height: 300px">
     *            <ng-template kendoGridToolbarTemplate>
     *                 <button class="k-button" (click)="grid.autoFitColumn(groupColumn)">
     *                     Auto-fit the group column
     *                 </button>
     *            </ng-template>
     *            <kendo-grid-column-group #groupColumn title="Product Info">
     *                <kendo-grid-column
     *                    field="ProductID"
     *                    [width]="50"
     *                    [minResizableWidth]="30"
     *                    title="ID">
     *                </kendo-grid-column>
     *
     *                <kendo-grid-column
     *                    field="ProductName"
     *                    title="Product Name">
     *                </kendo-grid-column>
     *            </kendo-grid-column-group>
     *
     *            <kendo-grid-column
     *                field="UnitPrice"
     *                title="Unit Price"
     *                [width]="180"
     *                filter="numeric"
     *                format="{0:c}">
     *            </kendo-grid-column>
     *        </kendo-grid>
     *    `
     * })
     * class AppComponent {
     *    public gridData: any[] = products;
     * }
     *
     * const products = [{
     *    "ProductID": 1,
     *    "ProductName": "Chai",
     *    "UnitPrice": 18.0000,
     *    "Discontinued": true
     *  }, {
     *    "ProductID": 2,
     *    "ProductName": "Chang",
     *    "UnitPrice": 19.0000,
     *    "Discontinued": false
     *  }
     * ];
     * ```
     */
    autoFitColumn(column: ColumnBase): void;
    /**
     * Adjusts the width of the specified columns to fit the entire content, including headers, without wrapping.
     * If no columns are specified, `autoFitColumns` is applied to all columns.
     *
     * This method requires the Grid to be resizable (set `resizable` to `true`).
     *
     * @example
     * ```ts
     * _@Component({
     *    selector: 'my-app',
     *    template: `
     *      <kendo-grid
     *          #grid
     *          [data]="gridData"
     *          [resizable]="true"
     *          style="height: 300px">
     *          <ng-template kendoGridToolbarTemplate>
     *              <button class="k-button" (click)="grid.autoFitColumns([firstColumn, lastColumn])">
     *                  Auto-fit the first and last column
     *              </button>
     *              <button class="k-button" (click)="grid.autoFitColumns()">
     *                  Auto-fit all columns
     *              </button>
     *          </ng-template>
     *          <kendo-grid-column-group title="Product Info">
     *              <kendo-grid-column
     *                  #firstColumn
     *                  field="ProductID"
     *                  [width]="50"
     *                  [minResizableWidth]="30"
     *                  title="ID">
     *              </kendo-grid-column>
     *
     *              <kendo-grid-column
     *                  field="ProductName"
     *                  title="Product Name"
     *                  >
     *              </kendo-grid-column>
     *          </kendo-grid-column-group>
     *
     *          <kendo-grid-column
     *              #lastColumn
     *              field="UnitPrice"
     *              title="Unit Price"
     *              [width]="180"
     *              filter="numeric"
     *              format="{0:c}">
     *          </kendo-grid-column>
     *      </kendo-grid>
     *    `
     * })
     * class AppComponent {
     *    public gridData: any[] = products;
     * }
     *
     * const products = [{
     *    "ProductID": 1,
     *    "ProductName": "Chai",
     *    "UnitPrice": 18.0000,
     *    "Discontinued": true
     *  }, {
     *    "ProductID": 2,
     *    "ProductName": "Chang",
     *    "UnitPrice": 19.0000,
     *    "Discontinued": false
     *  }
     * ];
     * ```
     */
    autoFitColumns(columns?: Array<ColumnBase> | QueryList<ColumnBase>): void;
    /**
     * @hidden
     */
    notifyPageChange(source: string, event: any): void;
    /**
     * @hidden
     */
    notifyScrollBottom(): void;
    /**
     * @hidden
     */
    focusEditElement(containerSelector: string): void;
    /**
     * Focuses the last active or the first cell of the Grid.
     *
     * @returns {NavigationCell} The focused cell.
     */
    focus(): NavigationCell;
    /**
     * Focuses the cell with the specified row and column index.
     *
     * The row index is based on the logical structure of the Grid and does not correspond to the data item index:
     * * Header rows are included, starting at index 0.
     * * Group headers and footers are included.
     * * The row indexing is absolute and does not change with paging.
     *
     * If the Grid is configured for scrolling, including virtual scrolling, the scroll position will be updated.
     * If the row is not present on the current page, the method will have no effect.
     *
     * @param rowIndex - The logical row index to focus. The top header row has an index 0.
     * @param colIndex - The column index to focus.
     * @returns {NavigationCell} The focused cell.
     *
     */
    focusCell(rowIndex: number, colIndex: number): NavigationCell;
    /**
     * Focuses the next cell, optionally wrapping to the next row.
     *
     * @param wrap - A Boolean value which indicates if the focus will move to the next row. Defaults to `true`.
     * @returns {NavigationCell} The focused cell. If the focus is already on the last cell, returns `null`.
     */
    focusNextCell(wrap?: boolean): NavigationCell;
    /**
     * Focuses the previous cell. Optionally wraps to the previous row.
     *
     * @param wrap - A Boolean value which indicates if the focus will move to the next row. Defaults to `true`.
     * @returns {NavigationCell} The focused cell. If the focus is already on the first cell, returns `null`.
     */
    focusPrevCell(wrap?: boolean): NavigationCell;
    /**
     * Scrolls to the specified row and column
     */
    scrollTo(request: ScrollRequest): void;
    /**
     * Changes the position of the specified column.
     * The reordering of columns operates only on the level
     * which is inferred by the source column.
     * For the `reorderColumn` method to work properly,
     * the `source` column has to be visible.
     *
     * @param {ColumnBase} source - The column whose position will be changed.
     * @param {number} destIndex - The new position of the column.
     * @param {ColumnReorderConfig} options - Additional options.
     *
     * @example
     * ```ts
     * _@Component({
     *    selector: 'my-app',
     *    template: `
     *        <kendo-grid
     *            #grid
     *            [data]="gridData"
     *            [reorderable]="true"
     *            style="height: 300px">
     *            <ng-template kendoGridToolbarTemplate>
     *                 <button class="k-button"
     *                     (click)="grid.reorderColumn(groupColumn, 2, { before: true })">
     *                     Move the group column before the last one.
     *                 </button>
     *            </ng-template>
     *            <kendo-grid-column-group #groupColumn title="Product Info">
     *                <kendo-grid-column
     *                    field="ProductID"
     *                    [width]="50"
     *                    title="ID">
     *                </kendo-grid-column>
     *
     *                <kendo-grid-column
     *                    field="ProductName"
     *                    title="Product Name">
     *                </kendo-grid-column>
     *            </kendo-grid-column-group>
     *
     *            <kendo-grid-column
     *                field="UnitPrice"
     *                title="Unit Price"
     *                [width]="180"
     *                format="{0:c}">
     *            </kendo-grid-column>
     *
     *            <kendo-grid-column
     *                field="Discontinued"
     *                title="Discontinued"
     *                [width]="100">
     *            </kendo-grid-column>
     *        </kendo-grid>
     *    `
     * })
     * class AppComponent {
     *    public gridData: any[] = products;
     * }
     *
     * const products = [{
     *    "ProductID": 1,
     *    "ProductName": "Chai",
     *    "UnitPrice": 18.0000,
     *    "Discontinued": true
     *  }, {
     *    "ProductID": 2,
     *    "ProductName": "Chang",
     *    "UnitPrice": 19.0000,
     *    "Discontinued": false
     *  }
     * ];
     * ```
     */
    reorderColumn(source: ColumnBase, destIndex: number, options?: ColumnReorderConfig): void;
    /**
     * A function which determines if a specific row is expanded.
     */
    isDetailExpanded: (args: RowArgs) => boolean;
    /**
     * @hidden
     */
    private reorder;
    private updateColumnIndices;
    private updateIndicesForLevel;
    private columnsForLevel;
    private initSelectionService;
    private setEditFocus;
    private columnInstance;
    private verifySettings;
    private autoGenerateColumns;
    private attachStateChangesEmitter;
    private attachEditHandlers;
    private emitCRUDEvent;
    private attachDomEventHandlers;
    private attachElementEventHandlers;
    private matchesMedia;
    private resizeCheck;
    private emitPDFExportEvent;
    private syncHeaderHeight;
    private columnsContainerChange;
    private handleColumnResize;
    private notifyResize;
    private assertNavigable;
    private _rowClass;
    private navigationMetadata;
    private updateNavigationMetadata;
    private applyAutoSize;
    private onColumnRangeChange;
    private toggleDetailRowLegacy;
    private shouldResetSelection;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GridComponent, "kendo-grid", ["kendoGrid"], { "data": "data"; "scrollable": "scrollable"; "selectable": "selectable"; "trackBy": "trackBy"; "virtualColumns": "virtualColumns"; "filterable": "filterable"; "sortable": "sortable"; "pageable": "pageable"; "groupable": "groupable"; "navigable": "navigable"; "autoSize": "autoSize"; "resizable": "resizable"; "reorderable": "reorderable"; "loading": "loading"; "columnMenu": "columnMenu"; "hideHeader": "hideHeader"; "skip": "skip"; "sort": "sort"; "group": "group"; "navigatable": "navigatable"; "rowClass": "rowClass"; "rowSelected": "rowSelected"; "cellSelected": "cellSelected"; "isDetailExpanded": "isDetailExpanded"; "pageSize": "pageSize"; "height": "height"; "rowHeight": "rowHeight"; "detailRowHeight": "detailRowHeight"; "filter": "filter"; }, { "filterChange": "filterChange"; "pageChange": "pageChange"; "groupChange": "groupChange"; "sortChange": "sortChange"; "selectionChange": "selectionChange"; "dataStateChange": "dataStateChange"; "groupExpand": "groupExpand"; "groupCollapse": "groupCollapse"; "detailExpand": "detailExpand"; "detailCollapse": "detailCollapse"; "edit": "edit"; "cancel": "cancel"; "save": "save"; "remove": "remove"; "add": "add"; "cellClose": "cellClose"; "cellClick": "cellClick"; "pdfExport": "pdfExport"; "excelExport": "excelExport"; "columnResize": "columnResize"; "columnReorder": "columnReorder"; "columnVisibilityChange": "columnVisibilityChange"; "columnLockedChange": "columnLockedChange"; "scrollBottom": "scrollBottom"; "contentScroll": "contentScroll"; }, ["columns", "detailTemplateChildren", "noRecordsTemplateChildren", "pagerTemplateChildren", "toolbarTemplateChildren", "columnMenuTemplates"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ3JpZC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBTZWxlY3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuL3NlbGVjdGlvbi9zZWxlY3Rpb24uZGlyZWN0aXZlJztcbmltcG9ydCB7IENlbGxTZWxlY3RlZEZuLCBTZWxlY3RhYmxlU2V0dGluZ3MsIFNlbGVjdGlvbkV2ZW50IH0gZnJvbSAnLi9zZWxlY3Rpb24vdHlwZXMnO1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlLCBOZ1pvbmUsIENoYW5nZURldGVjdG9yUmVmLCBUZW1wbGF0ZVJlZiwgVHJhY2tCeUZ1bmN0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTb3J0RGVzY3JpcHRvciwgR3JvdXBEZXNjcmlwdG9yLCBHcm91cFJlc3VsdCwgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IERldGFpbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9yZW5kZXJpbmcvZGV0YWlscy9kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFNjcm9sbE1vZGUgfSBmcm9tICcuL3Njcm9sbGluZy9zY3JvbGxtb2RlJztcbmltcG9ydCB7IFNvcnRTZXR0aW5ncyB9IGZyb20gJy4vY29sdW1ucy9zb3J0LXNldHRpbmdzJztcbmltcG9ydCB7IFBhZ2VyU2V0dGluZ3MgfSBmcm9tICcuL3BhZ2VyL3BhZ2VyLXNldHRpbmdzJztcbmltcG9ydCB7IEJyb3dzZXJTdXBwb3J0U2VydmljZSB9IGZyb20gJy4vbGF5b3V0L2Jyb3dzZXItc3VwcG9ydC5zZXJ2aWNlJztcbmltcG9ydCB7IEdyaWREYXRhUmVzdWx0LCBEYXRhQ29sbGVjdGlvbiB9IGZyb20gJy4vZGF0YS9kYXRhLmNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEVkaXRTZXJ2aWNlIH0gZnJvbSAnLi9lZGl0aW5nL2VkaXQuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdlQ2hhbmdlRXZlbnQsIERhdGFTdGF0ZUNoYW5nZUV2ZW50IH0gZnJvbSAnLi9kYXRhL2NoYW5nZS1ldmVudC1hcmdzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEZXRhaWxzU2VydmljZSB9IGZyb20gJy4vcmVuZGVyaW5nL2RldGFpbHMvZGV0YWlscy5zZXJ2aWNlJztcbmltcG9ydCB7IERldGFpbEV4cGFuZEV2ZW50IH0gZnJvbSAnLi9yZW5kZXJpbmcvZGV0YWlscy9kZXRhaWwtZXhwYW5kLWV2ZW50JztcbmltcG9ydCB7IERldGFpbENvbGxhcHNlRXZlbnQgfSBmcm9tICcuL3JlbmRlcmluZy9kZXRhaWxzL2RldGFpbC1jb2xsYXBzZS1ldmVudCc7XG5pbXBvcnQgeyBHcm91cHNTZXJ2aWNlIH0gZnJvbSAnLi9ncm91cGluZy9ncm91cHMuc2VydmljZSc7XG5pbXBvcnQgeyBDb2x1bW5zQ29udGFpbmVyIH0gZnJvbSAnLi9jb2x1bW5zL2NvbHVtbnMtY29udGFpbmVyJztcbmltcG9ydCB7IEdyb3VwSW5mb1NlcnZpY2UgfSBmcm9tICcuL2dyb3VwaW5nL2dyb3VwLWluZm8uc2VydmljZSc7XG5pbXBvcnQgeyBHcm91cGFibGVTZXR0aW5ncyB9IGZyb20gJy4vZ3JvdXBpbmcvZ3JvdXAtc2V0dGluZ3MnO1xuaW1wb3J0IHsgQ2hhbmdlTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vZGF0YS9jaGFuZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm9SZWNvcmRzVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3JlbmRlcmluZy9uby1yZWNvcmRzLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBDb2x1bW5CYXNlIH0gZnJvbSAnLi9jb2x1bW5zL2NvbHVtbi1iYXNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tICcuL2ZpbHRlcmluZy9maWx0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdlclRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wYWdlci9wYWdlci10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUERGU2VydmljZSB9IGZyb20gJy4vcGRmL3BkZi5zZXJ2aWNlJztcbmltcG9ydCB7IFBERkV4cG9ydEV2ZW50IH0gZnJvbSAnLi9wZGYvcGRmLWV4cG9ydC1ldmVudCc7XG5pbXBvcnQgeyBSZXNwb25zaXZlU2VydmljZSB9IGZyb20gXCIuL2xheW91dC9yZXNwb25zaXZlLnNlcnZpY2VcIjtcbmltcG9ydCB7IEV4Y2VsU2VydmljZSB9IGZyb20gJy4vZXhjZWwvZXhjZWwuc2VydmljZSc7XG5pbXBvcnQgeyBFeGNlbEV4cG9ydEV2ZW50IH0gZnJvbSAnLi9leGNlbC9leGNlbC1leHBvcnQtZXZlbnQnO1xuaW1wb3J0IHsgQ29sdW1uTGlzdCB9IGZyb20gJy4vY29sdW1ucy9jb2x1bW4tbGlzdCc7XG5pbXBvcnQgeyBSb3dDbGFzc0ZuLCBSb3dTZWxlY3RlZEZuIH0gZnJvbSAnLi9yZW5kZXJpbmcvY29tbW9uL3Jvdy1jbGFzcyc7XG5pbXBvcnQgeyBUb29sYmFyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tIFwiLi9yZW5kZXJpbmcvdG9vbGJhci90b29sYmFyLXRlbXBsYXRlLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgRWRpdEV2ZW50IH0gZnJvbSBcIi4vZWRpdGluZy9lZGl0LWV2ZW50LWFyZ3MuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBSZW1vdmVFdmVudCB9IGZyb20gXCIuL2VkaXRpbmcvcmVtb3ZlLWV2ZW50LWFyZ3MuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBTYXZlRXZlbnQgfSBmcm9tIFwiLi9lZGl0aW5nL3NhdmUtZXZlbnQtYXJncy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IENhbmNlbEV2ZW50IH0gZnJvbSBcIi4vZWRpdGluZy9jYW5jZWwtZXZlbnQtYXJncy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IEFkZEV2ZW50IH0gZnJvbSBcIi4vZWRpdGluZy9hZGQtZXZlbnQtYXJncy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IENlbGxDbG9zZUV2ZW50IH0gZnJvbSAnLi9lZGl0aW5nL2NlbGwtY2xvc2UtZXZlbnQnO1xuaW1wb3J0IHsgRWRpdFJvd09wdGlvbnMgfSBmcm9tICcuL2VkaXRpbmcvZWRpdC1yb3ctb3B0aW9ucy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2VsbENsaWNrRXZlbnQgfSBmcm9tICcuL2NvbW1vbi9jZWxsLWNsaWNrLWV2ZW50LWFyZ3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IFNjcm9sbFN5bmNTZXJ2aWNlIH0gZnJvbSBcIi4vc2Nyb2xsaW5nL3Njcm9sbC1zeW5jLnNlcnZpY2VcIjtcbmltcG9ydCB7IERvbUV2ZW50c1NlcnZpY2UgfSBmcm9tICcuL2NvbW1vbi9kb20tZXZlbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sdW1uUmVzaXppbmdTZXJ2aWNlIH0gZnJvbSBcIi4vY29sdW1uLXJlc2l6aW5nL2NvbHVtbi1yZXNpemluZy5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBDb2x1bW5SZXNpemVBcmdzIH0gZnJvbSAnLi9jb2x1bW4tcmVzaXppbmcvY29sdW1uLXJlc2l6ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRmlsdGVyYWJsZVNldHRpbmdzIH0gZnJvbSAnLi9maWx0ZXJpbmcvZmlsdGVyYWJsZSc7XG5pbXBvcnQgeyBDb2x1bW5SZW9yZGVyU2VydmljZSB9IGZyb20gJy4vZHJhZ2Ryb3AvY29sdW1uLXJlb3JkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBDb2x1bW5SZW9yZGVyRXZlbnQgfSBmcm9tICcuL2RyYWdkcm9wL2NvbHVtbi1yZW9yZGVyLWV2ZW50JztcbmltcG9ydCB7IENvbHVtblJlb3JkZXJDb25maWcgfSBmcm9tICcuL2RyYWdkcm9wL2NvbHVtbi1yZW9yZGVyLWNvbmZpZyc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkNlbGwgfSBmcm9tICcuL25hdmlnYXRpb24vbmF2aWdhdGlvbi1jZWxsLmludGVyZmFjZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uUm93IH0gZnJvbSAnLi9uYXZpZ2F0aW9uL25hdmlnYXRpb24tcm93LmludGVyZmFjZSc7XG5pbXBvcnQgeyBDb2x1bW5JbmZvU2VydmljZSB9IGZyb20gXCIuL2NvbW1vbi9jb2x1bW4taW5mby5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBTY3JvbGxSZXF1ZXN0U2VydmljZSwgU2Nyb2xsUmVxdWVzdCB9IGZyb20gJy4vc2Nyb2xsaW5nL3Njcm9sbC1yZXF1ZXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgU29ydFNlcnZpY2UgfSBmcm9tICcuL2NvbW1vbi9zb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sdW1uTWVudVRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb2x1bW4tbWVudS9jb2x1bW4tbWVudS10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ29sdW1uTWVudVNldHRpbmdzIH0gZnJvbSAnLi9jb2x1bW4tbWVudS9jb2x1bW4tbWVudS1zZXR0aW5ncy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ29sdW1uVmlzaWJpbGl0eUNoYW5nZUV2ZW50IH0gZnJvbSAnLi9jb2x1bW4tbWVudS9jb2x1bW4tdmlzaWJpbGl0eS1jaGFuZ2UtZXZlbnQnO1xuaW1wb3J0IHsgQ29sdW1uTG9ja2VkQ2hhbmdlRXZlbnQgfSBmcm9tICcuL2NvbHVtbi1tZW51L2NvbHVtbi1sb2NrZWQtY2hhbmdlLWV2ZW50JztcbmltcG9ydCB7IFNjcm9sbEJvdHRvbUV2ZW50IH0gZnJvbSAnLi9zY3JvbGxpbmcvc2Nyb2xsLWJvdHRvbS1ldmVudCc7XG5pbXBvcnQgeyBDb250ZW50U2Nyb2xsRXZlbnQgfSBmcm9tICcuL3Njcm9sbGluZy9jb250ZW50LXNjcm9sbC1ldmVudCc7XG5pbXBvcnQgeyBHcmlkSXRlbSB9IGZyb20gJy4vZGF0YS9ncmlkLWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFJvd0FyZ3MgfSBmcm9tICcuL3JlbmRlcmluZy9jb21tb24vcm93LWFyZ3MnO1xuaW1wb3J0IHsgQ2VsbFNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuL3NlbGVjdGlvbi9jZWxsLXNlbGVjdGlvbi5zZXJ2aWNlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgS2VuZG8gVUkgR3JpZCBjb21wb25lbnQgZm9yIEFuZ3VsYXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzLXByZXZpZXdcbiAqIF9AQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgICAgPGtlbmRvLWdyaWQgW2RhdGFdPVwiZ3JpZERhdGFcIj5cbiAqICAgICAgICA8L2tlbmRvLWdyaWQ+XG4gKiAgICBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBncmlkRGF0YTogYW55W10gPSBwcm9kdWN0cztcbiAqIH1cbiAqXG4gKiBjb25zdCBwcm9kdWN0cyA9IFt7XG4gKiAgICBcIlByb2R1Y3RJRFwiOiAxLFxuICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYWlcIixcbiAqICAgIFwiVW5pdFByaWNlXCI6IDE4LjAwMDAsXG4gKiAgICBcIkRpc2NvbnRpbnVlZFwiOiB0cnVlXG4gKiAgfSwge1xuICogICAgXCJQcm9kdWN0SURcIjogMixcbiAqICAgIFwiUHJvZHVjdE5hbWVcIjogXCJDaGFuZ1wiLFxuICogICAgXCJVbml0UHJpY2VcIjogMTkuMDAwMCxcbiAqICAgIFwiRGlzY29udGludWVkXCI6IGZhbHNlXG4gKiAgfVxuICogXTtcbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHcmlkQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBzdXBwb3J0U2VydmljZTtcbiAgICBwcml2YXRlIHNlbGVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZWxsU2VsZWN0aW9uU2VydmljZTtcbiAgICB3cmFwcGVyOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgZ3JvdXBJbmZvU2VydmljZTtcbiAgICBwcml2YXRlIGdyb3Vwc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBjaGFuZ2VOb3RpZmljYXRpb247XG4gICAgcHJpdmF0ZSBkZXRhaWxzU2VydmljZTtcbiAgICBwcml2YXRlIGVkaXRTZXJ2aWNlO1xuICAgIHByaXZhdGUgZmlsdGVyU2VydmljZTtcbiAgICBwcml2YXRlIHBkZlNlcnZpY2U7XG4gICAgcHJpdmF0ZSByZXNwb25zaXZlU2VydmljZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZXhjZWxTZXJ2aWNlO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgc2Nyb2xsU3luY1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBkb21FdmVudHM7XG4gICAgcHJpdmF0ZSBjb2x1bW5SZXNpemluZ1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcml2YXRlIGNvbHVtblJlb3JkZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29sdW1uSW5mb1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIHNvcnRTZXJ2aWNlO1xuICAgIHByaXZhdGUgc2Nyb2xsUmVxdWVzdFNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0YSBvZiB0aGUgR3JpZC4gSWYgYW4gYXJyYXkgaXMgcHJvdmlkZWQsIHRoZSBHcmlkIGF1dG9tYXRpY2FsbHkgZ2V0cyB0aGUgdG90YWwgY291bnRcbiAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVdKHslIHNsdWcgZGF0YWJpbmRpbmdfZ3JpZCAlfSkpLlxuICAgICAqL1xuICAgIGRhdGE6IEFycmF5PGFueT4gfCBHcmlkRGF0YVJlc3VsdDtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBwYWdlIHNpemUgdXNlZCBieSB0aGUgR3JpZCBwYWdlci5cbiAgICAgKiBSZXF1aXJlZCBieSB0aGUgW3BhZ2luZ10oeyUgc2x1ZyBwYWdpbmdfZ3JpZCAlfSkgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBwYWdlU2l6ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGhlaWdodCAoaW4gcGl4ZWxzKSB0aGF0IGlzIHVzZWQgd2hlbiB0aGUgYHNjcm9sbGFibGVgIG9wdGlvbiBvZiB0aGUgR3JpZCBpcyBzZXQuXG4gICAgICogVG8gc2V0IHRoZSBoZWlnaHQgb2YgdGhlIEdyaWQsIHlvdSBjYW4gYWxzbyB1c2UgYHN0eWxlLmhlaWdodGAuIFRoZSBgc3R5bGUuaGVpZ2h0YFxuICAgICAqIG9wdGlvbiBzdXBwb3J0cyB1bml0cyBzdWNoIGFzIGBweGAsIGAlYCwgYGVtYCwgYHJlbWAsIGFuZCBvdGhlcnMuXG4gICAgICovXG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgcm93IGhlaWdodCB0aGF0IGlzIHVzZWQgd2hlbiB0aGUgYHNjcm9sbGFibGVgIG9wdGlvbiBvZiB0aGUgR3JpZCBpcyBzZXQgdG8gYHZpcnR1YWxgLlxuICAgICAqIFJlcXVpcmVkIGJ5IHRoZSBbdmlydHVhbCBzY3JvbGxpbmcgZnVuY3Rpb25hbGl0eV0oeyUgc2x1ZyBzY3JvbGxtbW9kZXNfZ3JpZCAlfSkuXG4gICAgICovXG4gICAgcm93SGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZGV0YWlsIHJvdyBoZWlnaHQgdGhhdCBpcyB1c2VkIHdoZW4gdGhlIGBzY3JvbGxhYmxlYCBvcHRpb24gb2YgdGhlIEdyaWQgaXMgc2V0IHRvIGB2aXJ0dWFsYC5cbiAgICAgKiBSZXF1aXJlZCBieSB0aGUgW3ZpcnR1YWwgc2Nyb2xsaW5nIGZ1bmN0aW9uYWxpdHldKHslIHNsdWcgc2Nyb2xsbW1vZGVzX2dyaWQgJX0pLlxuICAgICAqL1xuICAgIGRldGFpbFJvd0hlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIG51bWJlciBvZiByZWNvcmRzIHRvIGJlIHNraXBwZWQgYnkgdGhlIHBhZ2VyLlxuICAgICAqIFJlcXVpcmVkIGJ5IHRoZSBbcGFnaW5nXSh7JSBzbHVnIHBhZ2luZ19ncmlkICV9KSBmdW5jdGlvbmFsaXR5LlxuICAgICAqL1xuICAgIHNraXA6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBzY3JvbGwgbW9kZSB1c2VkIGJ5IHRoZSBHcmlkLlxuICAgICAqXG4gICAgICogVGhlIGF2YWlsYWJsZSBvcHRpb25zIGFyZTpcbiAgICAgKiAgLSBgbm9uZWAmbWRhc2g7UmVuZGVycyBubyBzY3JvbGxiYXIuXG4gICAgICogIC0gYHNjcm9sbGFibGVgJm1kYXNoO1RoZSBkZWZhdWx0IHNjcm9sbCBtb2RlLiBJdCByZXF1aXJlcyB0aGUgc2V0dGluZyBvZiB0aGUgYGhlaWdodGAgb3B0aW9uLlxuICAgICAqICAtIGB2aXJ0dWFsYCZtZGFzaDtEaXNwbGF5cyBubyBwYWdlciBhbmQgcmVuZGVycyBhIHBvcnRpb24gb2YgdGhlIGRhdGEgKG9wdGltaXplZCByZW5kZXJpbmcpIHdoaWxlIHRoZSB1c2VyIGlzIHNjcm9sbGluZyB0aGUgY29udGVudC5cbiAgICAgKi9cbiAgICBzY3JvbGxhYmxlOiBTY3JvbGxNb2RlO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHNpbmdsZS1yb3cgW3NlbGVjdGlvbl0oeyUgc2x1ZyBzZWxlY3Rpb25fZ3JpZCAlfSkgb2YgdGhlIEdyaWQuXG4gICAgICovXG4gICAgc2VsZWN0YWJsZTogU2VsZWN0YWJsZVNldHRpbmdzIHwgYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVzY3JpcHRvcnMgYnkgd2hpY2ggdGhlIGRhdGEgd2lsbCBiZSBzb3J0ZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzb3J0aW5nX2dyaWQgJX0pKS5cbiAgICAgKi9cbiAgICBzb3J0OiBBcnJheTxTb3J0RGVzY3JpcHRvcj47XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGRlZmluZXMgaG93IHRvIHRyYWNrIGNoYW5nZXMgZm9yIHRoZSBkYXRhIHJvd3MuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgR3JpZCB0cmFja3MgY2hhbmdlcyBieSB0aGUgaW5kZXggb2YgdGhlIGRhdGEgaXRlbS5cbiAgICAgKiBFZGl0ZWQgcm93cyBhcmUgdHJhY2tlZCBieSByZWZlcmVuY2UuXG4gICAgICogSW4gc29tZSBjYXNlcywgeW91IG1pZ2h0IG5lZWQgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmVoYXZpb3IsXG4gICAgICogZm9yIGV4YW1wbGUsIHdoZW4geW91IGltcGxlbWVudCBlZGl0aW5nIHdpdGggaW1tdXRhYmxlIGRhdGEgaXRlbXMuXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgZGVtb25zdHJhdGVzIGhvdyB0byB0cmFjayBpdGVtcyBvbmx5IGJ5IGluZGV4LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICAgICAqIGltcG9ydCB7IEdyaWRJdGVtIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZ3JpZCc7XG4gICAgICpcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgIHRlbXBsYXRlOiBgXG4gICAgICogICAgICAgIDxrZW5kby1ncmlkIFtkYXRhXT1cImdyaWREYXRhXCIgW3RyYWNrQnldPVwidHJhY2tCeVwiPlxuICAgICAqICAgICAgICA8L2tlbmRvLWdyaWQ+XG4gICAgICogICAgYFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICAgKiAgICBwdWJsaWMgZ3JpZERhdGE6IGFueVtdID0gcHJvZHVjdHM7XG4gICAgICpcbiAgICAgKiAgICBwdWJsaWMgdHJhY2tCeShpbmRleDogbnVtYmVyLCBpdGVtOiBHcmlkSXRlbSk6IGFueSB7XG4gICAgICogICAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xuICAgICAqICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICogICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGNvbnN0IHByb2R1Y3RzID0gW3tcbiAgICAgKiAgICBcIlByb2R1Y3RJRFwiOiAxLFxuICAgICAqICAgIFwiUHJvZHVjdE5hbWVcIjogXCJDaGFpXCIsXG4gICAgICogICAgXCJVbml0UHJpY2VcIjogMTguMDAwMCxcbiAgICAgKiAgICBcIkRpc2NvbnRpbnVlZFwiOiB0cnVlXG4gICAgICogIH0sIHtcbiAgICAgKiAgICBcIlByb2R1Y3RJRFwiOiAyLFxuICAgICAqICAgIFwiUHJvZHVjdE5hbWVcIjogXCJDaGFuZ1wiLFxuICAgICAqICAgIFwiVW5pdFByaWNlXCI6IDE5LjAwMDAsXG4gICAgICogICAgXCJEaXNjb250aW51ZWRcIjogZmFsc2VcbiAgICAgKiAgfVxuICAgICAqIF07XG4gICAgICogYGBgXG4gICAgICovXG4gICAgdHJhY2tCeTogVHJhY2tCeUZ1bmN0aW9uPEdyaWRJdGVtPjtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVzY3JpcHRvciBieSB3aGljaCB0aGUgZGF0YSB3aWxsIGJlIGZpbHRlcmVkIChbc2VlIGV4YW1wbGVzXSh7JSBzbHVnIGZpbHRlcmluZ19ncmlkICV9KSkuXG4gICAgICovXG4gICAgZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIC8qKlxuICAgICAqIFRoZSBkZXNjcmlwdG9ycyBieSB3aGljaCB0aGUgZGF0YSB3aWxsIGJlIGdyb3VwZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBncm91cGluZ2Jhc2ljc19ncmlkICV9KSkuXG4gICAgICovXG4gICAgLyoqXG4gICAgKi9cbiAgICBncm91cDogQXJyYXk8R3JvdXBEZXNjcmlwdG9yPjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgZ3JpZCB3aWxsIHJlbmRlciBvbmx5IHRoZSBjb2x1bW5zIGluIHRoZSBjdXJyZW50IHZpZXdwb3J0LlxuICAgICAqL1xuICAgIHZpcnR1YWxDb2x1bW5zOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBzaG93VG9wVG9vbGJhcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2hvd0JvdHRvbVRvb2xiYXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzTG9ja2VkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBzaG93UGFnZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNob3dHcm91cFBhbmVsOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBncm91cGFibGVFbXB0eVRleHQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbWFycXVlZVNlbGVjdGlvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBbZmlsdGVyaW5nXSh7JSBzbHVnIGZpbHRlcmluZ19ncmlkICV9KSBvZiB0aGUgR3JpZCBjb2x1bW5zIHRoYXQgaGF2ZSB0aGVpciBgZmllbGRgIG9wdGlvbiBzZXQuXG4gICAgICovXG4gICAgZmlsdGVyYWJsZTogRmlsdGVyYWJsZVNldHRpbmdzO1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFtzb3J0aW5nXSh7JSBzbHVnIHNvcnRpbmdfZ3JpZCAlfSkgb2YgdGhlIEdyaWQgY29sdW1ucyB0aGF0IGhhdmUgdGhlaXIgYGZpZWxkYCBvcHRpb24gc2V0LlxuICAgICAqL1xuICAgIHNvcnRhYmxlOiBTb3J0U2V0dGluZ3M7XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlcyB0aGUgcGFnZXIgb2YgdGhlIEdyaWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwYWdpbmdfZ3JpZCAlfSkpLlxuICAgICAqXG4gICAgICogVGhlIGF2YWlsYWJsZSBvcHRpb25zIGFyZTpcbiAgICAgKiAtIGBidXR0b25Db3VudDogTnVtYmVyYCZtZGFzaDtTZXRzIHRoZSBtYXhpbXVtIG51bWVyaWMgYnV0dG9ucyBjb3VudCBiZWZvcmUgdGhlIGJ1dHRvbnMgYXJlIGNvbGxhcHNlZC5cbiAgICAgKiAtIGBpbmZvOiBCb29sZWFuYCZtZGFzaDtUb2dnbGVzIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBwYWdlIGFuZCB0aGUgdG90YWwgbnVtYmVyIG9mIHJlY29yZHMuXG4gICAgICogLSBgdHlwZTogUGFnZXJUeXBlYCZtZGFzaDtBY2NlcHRzIHRoZSBgbnVtZXJpY2AgKGJ1dHRvbnMgd2l0aCBudW1iZXJzKSBhbmQgYGlucHV0YCAoaW5wdXQgZm9yIHR5cGluZyB0aGUgcGFnZSBudW1iZXIpIHZhbHVlcy5cbiAgICAgKiAtIGBwYWdlU2l6ZXM6IEJvb2xlYW5gIG9yIGBBcnJheTxudW1iZXI+YCZtZGFzaDtTaG93cyBhIG1lbnUgZm9yIHNlbGVjdGluZyB0aGUgcGFnZSBzaXplLlxuICAgICAqIC0gYHByZXZpb3VzTmV4dDogQm9vbGVhbmAmbWRhc2g7VG9nZ2xlcyB0aGUgKipQcmV2aW91cyoqIGFuZCAqKk5leHQqKiBidXR0b25zLlxuICAgICAqL1xuICAgIHBhZ2VhYmxlOiBQYWdlclNldHRpbmdzIHwgYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdXNlciBjYW4gZ3JvdXAgdGhlIEdyaWQgYnkgZHJhZ2dpbmcgdGhlIGNvbHVtbiBoZWFkZXIgY2VsbHMuXG4gICAgICogQnkgZGVmYXVsdCwgZ3JvdXBpbmcgaXMgZGlzYWJsZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBncm91cGluZ2Jhc2ljc19ncmlkICV9KSkuXG4gICAgICovXG4gICAgZ3JvdXBhYmxlOiBHcm91cGFibGVTZXR0aW5ncyB8IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHVzZXIgY2FuIHVzZSBkZWRpY2F0ZWQgc2hvcnRjdXRzIHRvIGludGVyYWN0IHdpdGggdGhlIEdyaWQuXG4gICAgICogQnkgZGVmYXVsdCwgbmF2aWdhdGlvbiBpcyBkaXNhYmxlZCBhbmQgdGhlIEdyaWQgY29udGVudCBpcyBhY2Nlc3NpYmxlIGluIHRoZSBub3JtYWwgdGFiIHNlcXVlbmNlLlxuICAgICAqL1xuICAgIG5hdmlnYWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICpcbiAgICAgKiBBbiBhbGlhcyBmb3IgYG5hdmlnYWJsZWAgZm9yIHVzZXJzIHdobyBtaWdyYXRlIGZyb20gS2VuZG8gVUkgZm9yIGpRdWVyeS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAqIEBoaWRkZW5cbiAgICAqL1xuICAgIG5hdmlnYXRhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBHcmlkIGNvbHVtbnMgd2lsbCBiZSByZXNpemVkIGR1cmluZyBpbml0aWFsaXphdGlvbiBzbyB0aGF0XG4gICAgICogdGhleSBmaXQgdGhlaXIgaGVhZGVycyBhbmQgcm93IGNvbnRlbnQuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAgICogQ29sdW1ucyB3aXRoIGBhdXRvU2l6ZWAgc2V0IHRvIGBmYWxzZWAgYXJlIGV4Y2x1ZGVkLlxuICAgICAqIFRvIGR5bmFtaWNhbGx5IHVwZGF0ZSB0aGUgY29sdW1uIHdpZHRoIHRvIG1hdGNoIHRoZSBuZXcgY29udGVudCxcbiAgICAgKiByZWZlciB0byBbdGhpcyBleGFtcGxlXSh7JSBzbHVnIHJlc2l6aW5nX2NvbHVtbnNfZ3JpZCAlfSkuXG4gICAgICovXG4gICAgYXV0b1NpemU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGV2ZXJ5IGRhdGEgcm93IGluIHRoZSBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICAgICAqIGltcG9ydCB7IFJvd0NsYXNzQXJncyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWdyaWQnO1xuICAgICAqXG4gICAgICogX0BDb21wb25lbnQoe1xuICAgICAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAgICAgKiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICAgICAqICAgIHN0eWxlczogW2BcbiAgICAgKiAgICAgICAgLmstZ3JpZCB0ci5ldmVuIHsgYmFja2dyb3VuZC1jb2xvcjogI2Y0NWM0MjsgfVxuICAgICAqICAgICAgICAuay1ncmlkIHRyLm9kZCB7IGJhY2tncm91bmQtY29sb3I6ICM0MWY0ZGY7IH1cbiAgICAgKiAgICBgXSxcbiAgICAgKiAgICB0ZW1wbGF0ZTogYFxuICAgICAqICAgICAgICA8a2VuZG8tZ3JpZCBbZGF0YV09XCJncmlkRGF0YVwiIFtyb3dDbGFzc109XCJyb3dDYWxsYmFja1wiPlxuICAgICAqICAgICAgICA8L2tlbmRvLWdyaWQ+XG4gICAgICogICAgYFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICAgKiAgICBwdWJsaWMgZ3JpZERhdGE6IGFueVtdID0gcHJvZHVjdHM7XG4gICAgICpcbiAgICAgKiAgICBwdWJsaWMgcm93Q2FsbGJhY2soY29udGV4dDogUm93Q2xhc3NBcmdzKSB7XG4gICAgICogICAgICAgIGNvbnN0IGlzRXZlbiA9IGNvbnRleHQuaW5kZXggJSAyID09IDA7XG4gICAgICogICAgICAgIHJldHVybiB7XG4gICAgICogICAgICAgICAgICBldmVuOiBpc0V2ZW4sXG4gICAgICogICAgICAgICAgICBvZGQ6ICFpc0V2ZW5cbiAgICAgKiAgICAgICAgfTtcbiAgICAgKiAgICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogY29uc3QgcHJvZHVjdHMgPSBbe1xuICAgICAqICAgIFwiUHJvZHVjdElEXCI6IDEsXG4gICAgICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYWlcIixcbiAgICAgKiAgICBcIlVuaXRQcmljZVwiOiAxOC4wMDAwLFxuICAgICAqICAgIFwiRGlzY29udGludWVkXCI6IHRydWVcbiAgICAgKiAgfSwge1xuICAgICAqICAgIFwiUHJvZHVjdElEXCI6IDIsXG4gICAgICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYW5nXCIsXG4gICAgICogICAgXCJVbml0UHJpY2VcIjogMTkuMDAwMCxcbiAgICAgKiAgICBcIkRpc2NvbnRpbnVlZFwiOiBmYWxzZVxuICAgICAqICB9XG4gICAgICogXTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByb3dDbGFzczogUm93Q2xhc3NGbjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgQm9vbGVhbiBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGZvciBlYWNoIGRhdGEgcm93IGluIHRoZSBjb21wb25lbnRcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHNlbGVjdGlvbl9ncmlkICV9I3RvYy1zZXR0aW5nLXRoZS1zZWxlY3RlZC1yb3dzKSkuXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSByb3cgd2lsbCBiZSBzZWxlY3RlZC5cbiAgICAgKi9cbiAgICByb3dTZWxlY3RlZDogUm93U2VsZWN0ZWRGbjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIHRoZSBzZWxlY3RlZCBzdGF0ZSBvZiBhIGRhdGEgY2VsbC5cbiAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIGBzZWxlY3RlZGAgYW5kIGBpdGVtYCBwcm9wZXJ0aWVzLlxuICAgICAqIFRoZSBjZWxsIGlzIG1hcmtlZCBhcyBzZWxlY3RlZCBvbmx5IGlmIHRoZSBgc2VsZWN0ZWRgIHByb3BlcnR5IGVxdWFscyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZm9yIGVhY2ggZGF0YSBjZWxsIGFuZCBtYXkgYmUgY2FsbGVkIG1vcmUgdGhhbiBvbmNlXG4gICAgICogYXMgcGFydCBvZiBhIGNoYW5nZSBkZXRlY3Rpb24gY3ljbGUuIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZ3JpZF9zZWxlY3Rpb25fY3VzdG9tICV9dG9jLXNldHRpbmctdGhlLXNlbGVjdGVkLWNlbGxzKSlcbiAgICAgKi9cbiAgICBjZWxsU2VsZWN0ZWQ6IENlbGxTZWxlY3RlZEZuO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGNlbGwgKGlmIGFueSkuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWN0aXZlQ2VsbDogTmF2aWdhdGlvbkNlbGw7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudGx5IGZvY3VzZWQgcm93IChpZiBhbnkpLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFjdGl2ZVJvdzogTmF2aWdhdGlvblJvdztcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdXNlciBjYW4gcmVzaXplIGNvbHVtbnMgYnkgZHJhZ2dpbmcgdGhlIGVkZ2VzIChyZXNpemUgaGFuZGxlcykgb2YgdGhlaXIgaGVhZGVyIGNlbGxzXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyByZXNpemluZ19jb2x1bW5zX2dyaWQgJX0pKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgcmVzaXphYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIHRoZSB1c2VyIGNhbiByZW9yZGVyIGNvbHVtbnMgYnkgZHJhZ2dpbmcgdGhlaXIgaGVhZGVyIGNlbGxzXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyByZW9yZGVyaW5nX2NvbHVtbnNfZ3JpZCAlfSkpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICByZW9yZGVyYWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGxvYWRpbmcgaW5kaWNhdG9yIG9mIHRoZSBHcmlkIHdpbGwgYmUgZGlzcGxheWVkIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGF0YWJpbmRpbmdfZ3JpZCAlfSkpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgY29sdW1uIG1lbnUgb2YgdGhlIGNvbHVtbnMgd2lsbCBiZSBkaXNwbGF5ZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjb2x1bW5tZW51X2dyaWQgJX0pKS5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgY29sdW1uTWVudTogYm9vbGVhbiB8IENvbHVtbk1lbnVTZXR0aW5ncztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGhlYWRlciBvZiB0aGUgZ3JpZCB3aWxsIGJlIGhpZGRlbi4gVGhlIGhlYWRlciBpcyB2aXNpYmxlIGJ5IGRlZmF1bHQuXG4gICAgICpcbiAgICAgKiA+IFRoZSBoZWFkZXIgaW5jbHVkZXMgY29sdW1uIGhlYWRlcnMgYW5kIHRoZSBbZmlsdGVyIHJvd10oeyUgc2x1ZyBmaWx0ZXJpbmdfZ3JpZCAlfSN0b2MtZmlsdGVyLXJvdykuXG4gICAgICovXG4gICAgaGlkZUhlYWRlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBHcmlkIGZpbHRlciBpcyBtb2RpZmllZCB0aHJvdWdoIHRoZSBVSS5cbiAgICAgKiBZb3UgaGF2ZSB0byBoYW5kbGUgdGhlIGV2ZW50IHlvdXJzZWxmIGFuZCBmaWx0ZXIgdGhlIGRhdGEuXG4gICAgICovXG4gICAgZmlsdGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcj47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgcGFnZSBvZiB0aGUgR3JpZCBpcyBjaGFuZ2VkIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcGFnaW5nX2dyaWQgJX0pKS5cbiAgICAgKiBZb3UgaGF2ZSB0byBoYW5kbGUgdGhlIGV2ZW50IHlvdXJzZWxmIGFuZCBwYWdlIHRoZSBkYXRhLlxuICAgICAqL1xuICAgIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxQYWdlQ2hhbmdlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGdyb3VwaW5nIG9mIHRoZSBHcmlkIGlzIGNoYW5nZWQuXG4gICAgICogWW91IGhhdmUgdG8gaGFuZGxlIHRoZSBldmVudCB5b3Vyc2VsZiBhbmQgZ3JvdXAgdGhlIGRhdGEgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBncm91cGluZ2Jhc2ljc19ncmlkICV9KSkuXG4gICAgICovXG4gICAgZ3JvdXBDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxHcm91cERlc2NyaXB0b3I+PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBzb3J0aW5nIG9mIHRoZSBHcmlkIGlzIGNoYW5nZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzb3J0aW5nX2dyaWQgJX0pKS5cbiAgICAgKiBZb3UgaGF2ZSB0byBoYW5kbGUgdGhlIGV2ZW50IHlvdXJzZWxmIGFuZCBzb3J0IHRoZSBkYXRhLlxuICAgICAqL1xuICAgIHNvcnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxTb3J0RGVzY3JpcHRvcj4+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhIEdyaWQgcm93LlxuICAgICAqIEVtaXRzIHRoZSBbYFNlbGVjdGlvbkV2ZW50YF0oeyUgc2x1ZyBhcGlfZ3JpZF9zZWxlY3Rpb25ldmVudCAlfSN0b2Mtc2VsZWN0aW9uY2hhbmdlKS5cbiAgICAgKi9cbiAgICBzZWxlY3Rpb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxTZWxlY3Rpb25FdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZGF0YSBzdGF0ZSBvZiB0aGUgR3JpZCBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIGRhdGFTdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGFTdGF0ZUNoYW5nZUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGV4cGFuZHMgYSBncm91cCBoZWFkZXIuXG4gICAgICovXG4gICAgZ3JvdXBFeHBhbmQ6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGdyb3VwOiBHcm91cFJlc3VsdDtcbiAgICAgICAgZ3JvdXBJbmRleDogc3RyaW5nO1xuICAgIH0+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY29sbGFwc2VzIGEgZ3JvdXAgaGVhZGVyLlxuICAgICAqL1xuICAgIGdyb3VwQ29sbGFwc2U6IEV2ZW50RW1pdHRlcjx7XG4gICAgICAgIGdyb3VwOiBHcm91cFJlc3VsdDtcbiAgICAgICAgZ3JvdXBJbmRleDogc3RyaW5nO1xuICAgIH0+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgZXhwYW5kcyBhIG1hc3RlciByb3cuXG4gICAgICovXG4gICAgZGV0YWlsRXhwYW5kOiBFdmVudEVtaXR0ZXI8RGV0YWlsRXhwYW5kRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY29sbGFwc2VzIGEgbWFzdGVyIHJvdy5cbiAgICAgKi9cbiAgICBkZXRhaWxDb2xsYXBzZTogRXZlbnRFbWl0dGVyPERldGFpbENvbGxhcHNlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSAqKkVkaXQqKiBjb21tYW5kIGJ1dHRvbiB0byBlZGl0IGEgcm93XG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBlZGl0aW5nX3RlbXBsYXRlX2Zvcm1zX2dyaWQgJX0jdG9jLWVkaXRpbmctcmVjb3JkcykpLlxuICAgICAqL1xuICAgIGVkaXQ6IEV2ZW50RW1pdHRlcjxFZGl0RXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSAqKkNhbmNlbCoqIGNvbW1hbmQgYnV0dG9uIHRvIGNsb3NlIGEgcm93XG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBlZGl0aW5nX3RlbXBsYXRlX2Zvcm1zX2dyaWQgJX0jdG9jLWNhbmNlbGxpbmctZWRpdGluZykpLlxuICAgICAqL1xuICAgIGNhbmNlbDogRXZlbnRFbWl0dGVyPENhbmNlbEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgKipTYXZlKiogY29tbWFuZCBidXR0b24gdG8gc2F2ZSBjaGFuZ2VzIGluIGEgcm93XG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBlZGl0aW5nX3RlbXBsYXRlX2Zvcm1zX2dyaWQgJX0jdG9jLXNhdmluZy1yZWNvcmRzKSkuXG4gICAgICovXG4gICAgc2F2ZTogRXZlbnRFbWl0dGVyPFNhdmVFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlICoqUmVtb3ZlKiogY29tbWFuZCBidXR0b24gdG8gcmVtb3ZlIGEgcm93XG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBlZGl0aW5nX3RlbXBsYXRlX2Zvcm1zX2dyaWQgJX0jdG9jLXJlbW92aW5nLXJlY29yZHMpKS5cbiAgICAgKi9cbiAgICByZW1vdmU6IEV2ZW50RW1pdHRlcjxSZW1vdmVFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlICoqQWRkKiogY29tbWFuZCBidXR0b24gdG8gYWRkIGEgbmV3IHJvd1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZWRpdGluZ190ZW1wbGF0ZV9mb3Jtc19ncmlkICV9I3RvYy1hZGRpbmctcmVjb3JkcykpLlxuICAgICAqL1xuICAgIGFkZDogRXZlbnRFbWl0dGVyPEFkZEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGxlYXZlcyBhbiBlZGl0ZWQgY2VsbCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGVkaXRpbmdfaW5jZWxsX2dyaWQgJX0jdG9jLWJhc2ljLWNvbmNlcHRzKSkuXG4gICAgICovXG4gICAgY2VsbENsb3NlOiBFdmVudEVtaXR0ZXI8Q2VsbENsb3NlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGEgY2VsbCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGVkaXRpbmdfaW5jZWxsX2dyaWQgJX0jdG9jLWJhc2ljLWNvbmNlcHRzKSkuXG4gICAgICovXG4gICAgY2VsbENsaWNrOiBFdmVudEVtaXR0ZXI8Q2VsbENsaWNrRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSAqKkV4cG9ydCB0byBQREYqKiBjb21tYW5kIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBwZGZFeHBvcnQ6IEV2ZW50RW1pdHRlcjxQREZFeHBvcnRFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjbGlja3MgdGhlICoqRXhwb3J0IHRvIEV4Y2VsKiogY29tbWFuZCBidXR0b24uXG4gICAgICovXG4gICAgZXhjZWxFeHBvcnQ6IEV2ZW50RW1pdHRlcjxFeGNlbEV4cG9ydEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNvbXBsZXRlcyB0aGUgcmVzaXppbmcgb2YgdGhlIGNvbHVtbi5cbiAgICAgKi9cbiAgICBjb2x1bW5SZXNpemU6IEV2ZW50RW1pdHRlcjxBcnJheTxDb2x1bW5SZXNpemVBcmdzPj47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjb21wbGV0ZXMgdGhlIHJlb3JkZXJpbmcgb2YgdGhlIGNvbHVtbi5cbiAgICAgKi9cbiAgICBjb2x1bW5SZW9yZGVyOiBFdmVudEVtaXR0ZXI8Q29sdW1uUmVvcmRlckV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGNvbHVtbnMgZnJvbSB0aGUgY29sdW1uIG1lbnUgb3IgY29sdW1uIGNob29zZXIuXG4gICAgICovXG4gICAgY29sdW1uVmlzaWJpbGl0eUNoYW5nZTogRXZlbnRFbWl0dGVyPENvbHVtblZpc2liaWxpdHlDaGFuZ2VFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBsb2NrZWQgc3RhdGUgb2YgdGhlIGNvbHVtbnMgZnJvbSB0aGUgY29sdW1uIG1lbnUgb3IgYnkgcmVvcmRlcmluZyB0aGUgY29sdW1ucy5cbiAgICAgKi9cbiAgICBjb2x1bW5Mb2NrZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxDb2x1bW5Mb2NrZWRDaGFuZ2VFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBzY3JvbGxzIHRvIHRoZSBsYXN0IHJlY29yZCBvbiB0aGUgcGFnZSBhbmQgZW5hYmxlcyBlbmRsZXNzIHNjcm9sbGluZ1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2Nyb2xsbW1vZGVzX2dyaWQgJX0jdG9jLWVuZGxlc3Mtc2Nyb2xsaW5nKSkuXG4gICAgICogWW91IGhhdmUgdG8gaGFuZGxlIHRoZSBldmVudCB5b3Vyc2VsZiBhbmQgcGFnZSB0aGUgZGF0YS5cbiAgICAgKi9cbiAgICBzY3JvbGxCb3R0b206IEV2ZW50RW1pdHRlcjxTY3JvbGxCb3R0b21FdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgZ3JpZCBjb250ZW50IGlzIHNjcm9sbGVkLlxuICAgICAqIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkIG91dHNpZGUgdGhlIEFuZ3VsYXIgem9uZS4gRW50ZXIgdGhlIEFuZ3VsYXIgem9uZSBpZiB5b3UgbWFrZSBhbnkgY2hhbmdlcyB0aGF0IHJlcXVpcmUgY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgKi9cbiAgICBjb250ZW50U2Nyb2xsOiBFdmVudEVtaXR0ZXI8Q29udGVudFNjcm9sbEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBBIHF1ZXJ5IGxpc3Qgb2YgYWxsIGRlY2xhcmVkIGNvbHVtbnMuXG4gICAgICovXG4gICAgY29sdW1uczogUXVlcnlMaXN0PENvbHVtbkJhc2U+O1xuICAgIHJlYWRvbmx5IGRpcjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGhvc3RDbGFzc2VzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGxvY2tlZENsYXNzZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdmlydHVhbENsYXNzZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbm9TY3JvbGxiYXJDbGFzczogYm9vbGVhbjtcbiAgICBkZXRhaWxUZW1wbGF0ZUNoaWxkcmVuOiBRdWVyeUxpc3Q8RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIGRldGFpbFRlbXBsYXRlOiBEZXRhaWxUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBub1JlY29yZHNUZW1wbGF0ZUNoaWxkcmVuOiBRdWVyeUxpc3Q8Tm9SZWNvcmRzVGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIG5vUmVjb3Jkc1RlbXBsYXRlOiBOb1JlY29yZHNUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBwYWdlclRlbXBsYXRlQ2hpbGRyZW46IFF1ZXJ5TGlzdDxQYWdlclRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICBwYWdlclRlbXBsYXRlOiBQYWdlclRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIHRvb2xiYXJUZW1wbGF0ZUNoaWxkcmVuOiBRdWVyeUxpc3Q8VG9vbGJhclRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICB0b29sYmFyVGVtcGxhdGU6IFRvb2xiYXJUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBjb2x1bW5NZW51VGVtcGxhdGVzOiBRdWVyeUxpc3Q8Q29sdW1uTWVudVRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICBsb2NrZWRIZWFkZXI6IGFueTtcbiAgICBoZWFkZXI6IGFueTtcbiAgICBmb290ZXI6IFF1ZXJ5TGlzdDxhbnk+O1xuICAgIGFyaWFSb290OiBFbGVtZW50UmVmO1xuICAgIHJlYWRvbmx5IHNjcm9sbGJhcldpZHRoOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaGVhZGVyUGFkZGluZzogYW55O1xuICAgIGNvbHVtbk1lbnVPcHRpb25zOiBhbnk7XG4gICAgY29sdW1uTGlzdDogQ29sdW1uTGlzdDtcbiAgICBzZWxlY3Rpb25EaXJlY3RpdmU6IGJvb2xlYW4gfCBTZWxlY3Rpb25EaXJlY3RpdmU7XG4gICAgY29sdW1uc0NvbnRhaW5lcjogQ29sdW1uc0NvbnRhaW5lcjtcbiAgICB2aWV3OiBEYXRhQ29sbGVjdGlvbjtcbiAgICByZWFkb25seSBoYXNHcm91cEZvb3RlcnM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc2hvd0Zvb3RlcjogYm9vbGVhbjtcbiAgICByZWFkb25seSBzaG93R3JvdXBGb290ZXJzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGFyaWFSb3dDb3VudDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGFyaWFDb2xDb3VudDogbnVtYmVyO1xuICAgIHByaXZhdGUgc2hvdWxkR2VuZXJhdGVDb2x1bW5zO1xuICAgIHByaXZhdGUgZGlyZWN0aW9uO1xuICAgIHByaXZhdGUgX3NvcnQ7XG4gICAgcHJpdmF0ZSBfZ3JvdXA7XG4gICAgcHJpdmF0ZSBfc2tpcDtcbiAgICBwcml2YXRlIGNhY2hlZFdpbmRvd1dpZHRoO1xuICAgIHByaXZhdGUgZGVmYXVsdFNlbGVjdGlvbjtcbiAgICBwcml2YXRlIF9yb3dTZWxlY3RlZDtcbiAgICBwcml2YXRlIF9jZWxsU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBfY3VzdG9tRGV0YWlsVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBfY3VzdG9tTm9SZWNvcmRzVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBfY3VzdG9tUGFnZXJUZW1wbGF0ZTtcbiAgICBwcml2YXRlIF9jdXN0b21Ub29sYmFyVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBsZWFmVmlld3BvcnRDb2x1bW5zO1xuICAgIHByaXZhdGUgdmlld3BvcnRDb2x1bW5zO1xuICAgIHJlYWRvbmx5IGlzVmlydHVhbDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1Njcm9sbGFibGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdmlzaWJsZUNvbHVtbnM6IFF1ZXJ5TGlzdDxDb2x1bW5CYXNlPjtcbiAgICByZWFkb25seSBsb2NrZWRDb2x1bW5zOiBRdWVyeUxpc3Q8Q29sdW1uQmFzZT47XG4gICAgcmVhZG9ubHkgbm9uTG9ja2VkQ29sdW1uczogUXVlcnlMaXN0PENvbHVtbkJhc2U+O1xuICAgIHJlYWRvbmx5IGxvY2tlZExlYWZDb2x1bW5zOiBRdWVyeUxpc3Q8Q29sdW1uQmFzZT47XG4gICAgcmVhZG9ubHkgbm9uTG9ja2VkTGVhZkNvbHVtbnM6IFF1ZXJ5TGlzdDxDb2x1bW5CYXNlPjtcbiAgICByZWFkb25seSBsZWFmQ29sdW1uczogUXVlcnlMaXN0PENvbHVtbkJhc2U+O1xuICAgIHJlYWRvbmx5IHRvdGFsQ29sdW1uTGV2ZWxzOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaGVhZGVyQ29sdW1uczogYW55O1xuICAgIHJlYWRvbmx5IGhlYWRlckxlYWZDb2x1bW5zOiBhbnk7XG4gICAgcmVhZG9ubHkgbG9ja2VkV2lkdGg6IG51bWJlcjtcbiAgICByZWFkb25seSBub25Mb2NrZWRXaWR0aDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHNlbGVjdGFibGVTZXR0aW5nczogU2VsZWN0YWJsZVNldHRpbmdzO1xuICAgIHJlYWRvbmx5IGNvbHVtbk1lbnVUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICByZWFkb25seSB0b3RhbENvdW50OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25TdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBzdGF0ZUNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGdyb3VwRXhwYW5kQ29sbGFwc2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBlZGl0U2VydmljZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGRldGFpbHNTZXJ2aWNlU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZmlsdGVyU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc29ydFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNvbHVtbnNDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBwZGZTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBleGNlbFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNvbHVtbnNDb250YWluZXJDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBjZWxsQ2xpY2tTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBmb290ZXJDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBjb2x1bW5SZXNpemluZ1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNvbHVtblJlb3JkZXJTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBkZXRhY2hFbGVtZW50RXZlbnRIYW5kbGVycztcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvblN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNvbHVtblZpc2liaWxpdHlDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBjb2x1bW5Mb2NrZWRDaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBmb2N1c0VsZW1lbnRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBjb2x1bW5SYW5nZUNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHJ0bDtcbiAgICBjb25zdHJ1Y3RvcihzdXBwb3J0U2VydmljZTogQnJvd3NlclN1cHBvcnRTZXJ2aWNlLCBzZWxlY3Rpb25TZXJ2aWNlOiBTZWxlY3Rpb25TZXJ2aWNlLCBjZWxsU2VsZWN0aW9uU2VydmljZTogQ2VsbFNlbGVjdGlvblNlcnZpY2UsIHdyYXBwZXI6IEVsZW1lbnRSZWYsIGdyb3VwSW5mb1NlcnZpY2U6IEdyb3VwSW5mb1NlcnZpY2UsIGdyb3Vwc1NlcnZpY2U6IEdyb3Vwc1NlcnZpY2UsIGNoYW5nZU5vdGlmaWNhdGlvbjogQ2hhbmdlTm90aWZpY2F0aW9uU2VydmljZSwgZGV0YWlsc1NlcnZpY2U6IERldGFpbHNTZXJ2aWNlLCBlZGl0U2VydmljZTogRWRpdFNlcnZpY2UsIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2UsIHBkZlNlcnZpY2U6IFBERlNlcnZpY2UsIHJlc3BvbnNpdmVTZXJ2aWNlOiBSZXNwb25zaXZlU2VydmljZSwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZXhjZWxTZXJ2aWNlOiBFeGNlbFNlcnZpY2UsIG5nWm9uZTogTmdab25lLCBzY3JvbGxTeW5jU2VydmljZTogU2Nyb2xsU3luY1NlcnZpY2UsIGRvbUV2ZW50czogRG9tRXZlbnRzU2VydmljZSwgY29sdW1uUmVzaXppbmdTZXJ2aWNlOiBDb2x1bW5SZXNpemluZ1NlcnZpY2UsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgY29sdW1uUmVvcmRlclNlcnZpY2U6IENvbHVtblJlb3JkZXJTZXJ2aWNlLCBjb2x1bW5JbmZvU2VydmljZTogQ29sdW1uSW5mb1NlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZSwgc29ydFNlcnZpY2U6IFNvcnRTZXJ2aWNlLCBzY3JvbGxSZXF1ZXN0U2VydmljZTogU2Nyb2xsUmVxdWVzdFNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogRXhwYW5kcyB0aGUgc3BlY2lmaWVkIG1hc3RlciByb3cgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBoaWVyYXJjaHlfZ3JpZCAlfSkpLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgb25seSBmb3IgYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgd2l0aCBsZWdhY3kgdmVyc2lvbnMuXG4gICAgICogVGhlc2UgdmVyc2lvbnMgdHJhY2tlZCB0aGUgZXhwYW5kZWQgc3RhdGUgaW50ZXJuYWxseSB1c2luZyB0aGUgZGF0YSByb3cgaW5kZXguXG4gICAgICpcbiAgICAgKiBGb3IgbmV3IGRldmVsb3BtZW50LCB1c2UgdGhlIFtga2VuZG9HcmlkRGV0YWlsc0V4cGFuZEJ5YCBkaXJlY3RpdmVdKHslIHNsdWcgYXBpX2dyaWRfZXhwYW5kZGV0YWlsc2RpcmVjdGl2ZSAlfSlcbiAgICAgKiBvciBwcm92aWRlIGFuIGlzRGV0YWlsRXhwYW5kZWQgY2FsbGJhY2suIFNlZSBbQ29udHJvbGxpbmcgdGhlIEV4cGFuZGVkIFN0YXRlXSh7JSBzbHVnIG1hc3Rlcl9kZXRhaWxfZXhwYW5kZWRfc3RhdGVfZ3JpZCAlfSlcbiAgICAgKiBmb3IgZXhhbXBsZXMgb24gaG93IHRvIGNvbnRyb2wgdGhlIGV4cGFuZGVkIHN0YXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4IC0gVGhlIGRhdGEgcm93IGluZGV4IG9mIHRoZSBtYXN0ZXIgcm93LlxuICAgICAqL1xuICAgIGV4cGFuZFJvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZXMgdGhlIHNwZWNpZmllZCBtYXN0ZXIgcm93IChbc2VlIGV4YW1wbGVdKHslIHNsdWcgaGllcmFyY2h5X2dyaWQgJX0pKS5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHByb3ZpZGVkIG9ubHkgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IHdpdGggbGVnYWN5IHZlcnNpb25zLlxuICAgICAqIFRoZXNlIHZlcnNpb25zIHRyYWNrZWQgdGhlIGV4cGFuZGVkIHN0YXRlIGludGVybmFsbHkgdXNpbmcgdGhlIGRhdGEgcm93IGluZGV4LlxuICAgICAqXG4gICAgICogRm9yIG5ldyBkZXZlbG9wbWVudCwgdXNlIHRoZSBbYGtlbmRvR3JpZERldGFpbHNFeHBhbmRCeWAgZGlyZWN0aXZlXSh7JSBzbHVnIGFwaV9ncmlkX2V4cGFuZGRldGFpbHNkaXJlY3RpdmUgJX0pXG4gICAgICogb3IgcHJvdmlkZSBhbiBpc0RldGFpbEV4cGFuZGVkIGNhbGxiYWNrLiBTZWUgW0NvbnRyb2xsaW5nIHRoZSBFeHBhbmRlZCBTdGF0ZV0oeyUgc2x1ZyBtYXN0ZXJfZGV0YWlsX2V4cGFuZGVkX3N0YXRlX2dyaWQgJX0pXG4gICAgICogZm9yIGV4YW1wbGVzIG9uIGhvdyB0byBjb250cm9sIHRoZSBleHBhbmRlZCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleCAtIFRoZSBkYXRhIHJvdyBpbmRleCBvZiB0aGUgbWFzdGVyIHJvdy5cbiAgICAgKi9cbiAgICBjb2xsYXBzZVJvdyhpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFeHBhbmRzIGEgZ3JvdXAgaGVhZGVyIGl0ZW0gZm9yIHRoZSBnaXZlbiBpbmRleC4gRm9yIGV4YW1wbGUsXG4gICAgICogYDBfMWAgZXhwYW5kcyB0aGUgc2Vjb25kIGlubmVyIGdyb3VwIG9mIHRoZSBmaXJzdCBtYXN0ZXIgZ3JvdXAuXG4gICAgICpcbiAgICAgKiA+ICogV2hlbiB5b3UgdXNlIHRoZSBbYGtlbmRvR3JpZEdyb3VwQmluZGluZ2BdKHslIHNsdWcgYXBpX2dyaWRfZ3JvdXBiaW5kaW5nZGlyZWN0aXZlICV9KSBkaXJlY3RpdmUsXG4gICAgICogPiB0aGUgYGV4cGFuZEdyb3VwYCBtZXRob2QgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKiA+ICogV2hlbiBhIEdyaWQgaXMgcGFnZWFibGUsIHRoZSBpbmRleGVzIG9mIHRoZSBncm91cHMgYXJlIG9mZnNldCBieSB0aGUgY3VycmVudCBHcmlkIFtgc2tpcGBdKHslIHNsdWcgYXBpX2dyaWRfZ3JpZGNvbXBvbmVudCAlfSN0b2Mtc2tpcCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5kZXggLSBUaGUgdW5kZXJzY29yZSBzZXBhcmF0ZWQgaGllcmFyY2hpY2FsIGluZGV4IG9mIHRoZSBncm91cC5cbiAgICAgKi9cbiAgICBleHBhbmRHcm91cChpbmRleDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZXMgYSBncm91cCBoZWFkZXIgaXRlbSBmb3IgdGhlIGdpdmVuIGluZGV4LiBGb3IgZXhhbXBsZSxcbiAgICAgKiBgMF8xYCBjb2xsYXBzZXMgdGhlIHNlY29uZCBpbm5lciBncm91cCBvZiB0aGUgZmlyc3QgbWFzdGVyIGdyb3VwLlxuICAgICAqXG4gICAgICogPiAqIFdoZW4geW91IHVzZSB0aGUgW2BrZW5kb0dyaWRHcm91cEJpbmRpbmdgXSh7JSBzbHVnIGFwaV9ncmlkX2dyb3VwYmluZGluZ2RpcmVjdGl2ZSAlfSkgZGlyZWN0aXZlLFxuICAgICAqID4gdGhlIGBjb2xsYXBzZUdyb3VwYCBtZXRob2QgaXMgbm90IHN1cHBvcnRlZC5cbiAgICAgKiA+ICogV2hlbiBhIEdyaWQgaXMgcGFnZWFibGUsIHRoZSBpbmRleGVzIG9mIHRoZSBncm91cHMgYXJlIG9mZnNldCBieSB0aGUgY3VycmVudCBHcmlkIFtgc2tpcGBdKHslIHNsdWcgYXBpX2dyaWRfZ3JpZGNvbXBvbmVudCAlfSN0b2Mtc2tpcCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5kZXggLSBUaGUgdW5kZXJzY29yZSBzZXBhcmF0ZWQgaGllcmFyY2hpY2FsIGluZGV4IG9mIHRoZSBncm91cC5cbiAgICAgKi9cbiAgICBjb2xsYXBzZUdyb3VwKGluZGV4OiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZXNldEdyb3Vwc1N0YXRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGV4cGFuZEdyb3VwQ2hpbGRyZW4oZ3JvdXBJbmRleDogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25EYXRhQ2hhbmdlKCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczoge1xuICAgICAgICBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhdHRhY2hTY3JvbGxTeW5jKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgdGhlIHNwZWNpZmllZCB0YWJsZSByb3cgaW4gdGhlIGVkaXQgbW9kZSAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGVkaXRpbmdfdGVtcGxhdGVfZm9ybXNfZ3JpZCAlfSN0b2MtZWRpdGluZy1yZWNvcmRzKSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcm93SW5kZXggLSBUaGUgZGF0YSByb3cgaW5kZXggdGhhdCB3aWxsIGJlIHN3aXRjaGVkIGluIHRoZSBlZGl0IG1vZGUuXG4gICAgICogQHBhcmFtIGdyb3VwIC0gVGhlIFtgRm9ybUdyb3VwYF0oe3sgc2l0ZS5kYXRhLnVybHMuYW5ndWxhclsnZm9ybWdyb3VwYXBpJ10gfX0pXG4gICAgICogdGhhdCBkZXNjcmliZXMgdGhlIGVkaXQgZm9ybS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucyBjb25maWd1cmluZyB0aGUgZm9jdXMgdGFyZ2V0IG9uY2UgdGhlIGVkaXRvciBvcGVucy5cbiAgICAgKi9cbiAgICBlZGl0Um93KHJvd0luZGV4OiBudW1iZXIsIGdyb3VwPzogRm9ybUdyb3VwLCBvcHRpb25zPzogRWRpdFJvd09wdGlvbnMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgZWRpdG9yIGZvciBhIGdpdmVuIHJvdyAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGVkaXRpbmdfdGVtcGxhdGVfZm9ybXNfZ3JpZCAlfSN0b2MtY2FuY2VsbGluZy1lZGl0aW5nKSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgcm93IGluZGV4IHRoYXQgd2lsbCBiZSBzd2l0Y2hlZCBvdXQgb2YgdGhlIGVkaXQgbW9kZS4gSWYgbm8gaW5kZXggaXMgcHJvdmlkZWQsIGl0IGlzIGFzc3VtZWRcbiAgICAgKiB0aGF0IHRoZSBuZXcgaXRlbSBlZGl0b3Igd2lsbCBiZSBjbG9zZWQuXG4gICAgICovXG4gICAgY2xvc2VSb3coaW5kZXg/OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcm93IGVkaXRvciAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGVkaXRpbmdfdGVtcGxhdGVfZm9ybXNfZ3JpZCAlfSN0b2MtYWRkaW5nLXJlY29yZHMpKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Rm9ybUdyb3VwfSBncm91cCAtIFRoZSBbYEZvcm1Hcm91cGBdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ2Zvcm1ncm91cGFwaSddIH19KSB0aGF0IGRlc2NyaWJlc1xuICAgICAqIHRoZSBlZGl0IGZvcm0uIElmIGNhbGxlZCB3aXRoIGEgZGF0YSBpdGVtLCBpdCB3aWxsIGJ1aWxkIHRoZSBgRm9ybUdyb3VwYCBmcm9tIHRoZSBkYXRhIGl0ZW0gZmllbGRzLlxuICAgICAqL1xuICAgIGFkZFJvdyhncm91cDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQdXRzIHRoZSBjZWxsIHRoYXQgaXMgc3BlY2lmaWVkIGJ5IHRoZSB0YWJsZSByb3cgYW5kIGNvbHVtbiBpbiBlZGl0IG1vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93SW5kZXggLSBUaGUgZGF0YSByb3cgaW5kZXggdGhhdCB3aWxsIGJlIHN3aXRjaGVkIGluIHRoZSBlZGl0IG1vZGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfGFueX0gY29sdW1uIC0gVGhlIGxlYWYgY29sdW1uIGluZGV4LCBvciB0aGUgZmllbGQgbmFtZSBvciB0aGUgY29sdW1uIGluc3RhbmNlIHRoYXQgc2hvdWxkIGJlIGVkaXRlZC5cbiAgICAgKiBAcGFyYW0ge0Zvcm1Hcm91cH0gZ3JvdXAgLSBUaGUgW2BGb3JtR3JvdXBgXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWydmb3JtZ3JvdXBhcGknXSB9fSlcbiAgICAgKiB0aGF0IGRlc2NyaWJlcyB0aGUgZWRpdCBmb3JtLlxuICAgICAqL1xuICAgIGVkaXRDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbjogbnVtYmVyIHwgc3RyaW5nIHwgYW55LCBncm91cD86IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ2xvc2VzIHRoZSBjdXJyZW50IGNlbGwgaW4gZWRpdCBtb2RlIGFuZCBmaXJlc1xuICAgICAqIHRoZSBbYGNlbGxDbG9zZWBdKHslIHNsdWcgYXBpX2dyaWRfZ3JpZGNvbXBvbmVudCAlfSN0b2MtY2VsbGNsb3NlKSBldmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IEluZGljYXRlcyB3aGV0aGVyIHRoZSBlZGl0ZWQgY2VsbCB3YXMgY2xvc2VkLlxuICAgICAqIEEgYGZhbHNlYCB2YWx1ZSBpbmRpY2F0ZXMgdGhhdCB0aGVcbiAgICAgKiBbYGNlbGxDbG9zZWBdKHslIHNsdWcgYXBpX2dyaWRfZ3JpZGNvbXBvbmVudCAlfSN0b2MtY2VsbGNsb3NlKSBldmVudCB3YXMgcHJldmVudGVkLlxuICAgICAqL1xuICAgIGNsb3NlQ2VsbCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgY3VycmVudCBjZWxsIGluIGVkaXQgbW9kZS5cbiAgICAgKi9cbiAgICBjYW5jZWxDZWxsKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGZsYWcgd2hpY2ggaW5kaWNhdGVzIGlmIGEgcm93IG9yIGEgY2VsbCBpcyBjdXJyZW50bHkgZWRpdGVkLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gQSBmbGFnIHdoaWNoIGluZGljYXRlcyBpZiBhIHJvdyBvciBhIGNlbGwgaXMgY3VycmVudGx5IGVkaXRlZC5cbiAgICAgKi9cbiAgICBpc0VkaXRpbmcoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZmxhZyB3aGljaCBpbmRpY2F0ZXMgaWYgYSBjZWxsIGlzIGN1cnJlbnRseSBlZGl0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBBIGZsYWcgd2hpY2ggaW5kaWNhdGVzIGlmIGEgY2VsbCBpcyBjdXJyZW50bHkgYmVpbmcgZWRpdGVkLlxuICAgICAqL1xuICAgIGlzRWRpdGluZ0NlbGwoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJbml0aWF0ZXMgdGhlIFBERiBleHBvcnQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwZGZleHBvcnRfZ3JpZCAlfSkpLlxuICAgICAqL1xuICAgIHNhdmVBc1BERigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEV4cG9ydHMgdGhlIEdyaWQgZWxlbWVudCB0byBhIERyYXdpbmcgW2BHcm91cGBdKHslIHNsdWcgYXBpX2tlbmRvLWRyYXdpbmdfZ3JvdXAgJX0pIGJ5IHVzaW5nIHRoZSBga2VuZG8tZ3JpZC1wZGZgIGNvbXBvbmVudCBvcHRpb25zLlxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcGRmZXhwb3J0X2dyaWQgJX0jdG9jLWV4cG9ydGluZy1tdWx0aXBsZS1ncmlkcy10by10aGUtc2FtZS1wZGYpKS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSBEcmF3aW5nIGBHcm91cGAuXG4gICAgICovXG4gICAgZHJhd1BERigpOiBQcm9taXNlPGFueT47XG4gICAgLyoqXG4gICAgICogSW5pdGlhdGVzIHRoZSBFeGNlbCBleHBvcnQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBleGNlbGV4cG9ydF9ncmlkICV9KSkuXG4gICAgICovXG4gICAgc2F2ZUFzRXhjZWwoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBtaW5pbXVtIHBvc3NpYmxlIHdpZHRoIGZvciB0aGUgc3BlY2lmaWVkIGNvbHVtbixcbiAgICAgKiBzbyB0aGF0IHRoZSB3aG9sZSB0ZXh0IGZpdHMgd2l0aG91dCB3cmFwcGluZy4gVGhpcyBtZXRob2QgZXhwZWN0cyB0aGUgR3JpZFxuICAgICAqIHRvIGJlIHJlc2l6YWJsZSAoc2V0IGByZXNpemFibGVgIHRvIGB0cnVlYCkuXG4gICAgICogTWFrZXMgc2Vuc2UgdG8gZXhlY3V0ZSB0aGlzIG1ldGhvZCBvbmx5XG4gICAgICogYWZ0ZXIgdGhlIEdyaWQgaXMgYWxyZWFkeSBwb3B1bGF0ZWQgd2l0aCBkYXRhLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgKiAgICBzZWxlY3RvcjogJ215LWFwcCcsXG4gICAgICogICAgdGVtcGxhdGU6IGBcbiAgICAgKiAgICAgICAgPGtlbmRvLWdyaWRcbiAgICAgKiAgICAgICAgICAgICNncmlkXG4gICAgICogICAgICAgICAgICBbZGF0YV09XCJncmlkRGF0YVwiXG4gICAgICogICAgICAgICAgICBbcmVzaXphYmxlXT1cInRydWVcIlxuICAgICAqICAgICAgICAgICAgc3R5bGU9XCJoZWlnaHQ6IDMwMHB4XCI+XG4gICAgICogICAgICAgICAgICA8bmctdGVtcGxhdGUga2VuZG9HcmlkVG9vbGJhclRlbXBsYXRlPlxuICAgICAqICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiay1idXR0b25cIiAoY2xpY2spPVwiZ3JpZC5hdXRvRml0Q29sdW1uKGdyb3VwQ29sdW1uKVwiPlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgQXV0by1maXQgdGhlIGdyb3VwIGNvbHVtblxuICAgICAqICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgKiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICogICAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW4tZ3JvdXAgI2dyb3VwQ29sdW1uIHRpdGxlPVwiUHJvZHVjdCBJbmZvXCI+XG4gICAgICogICAgICAgICAgICAgICAgPGtlbmRvLWdyaWQtY29sdW1uXG4gICAgICogICAgICAgICAgICAgICAgICAgIGZpZWxkPVwiUHJvZHVjdElEXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgW3dpZHRoXT1cIjUwXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgW21pblJlc2l6YWJsZVdpZHRoXT1cIjMwXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJJRFwiPlxuICAgICAqICAgICAgICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4+XG4gICAgICpcbiAgICAgKiAgICAgICAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgZmllbGQ9XCJQcm9kdWN0TmFtZVwiXG4gICAgICogICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiUHJvZHVjdCBOYW1lXCI+XG4gICAgICogICAgICAgICAgICAgICAgPC9rZW5kby1ncmlkLWNvbHVtbj5cbiAgICAgKiAgICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4tZ3JvdXA+XG4gICAgICpcbiAgICAgKiAgICAgICAgICAgIDxrZW5kby1ncmlkLWNvbHVtblxuICAgICAqICAgICAgICAgICAgICAgIGZpZWxkPVwiVW5pdFByaWNlXCJcbiAgICAgKiAgICAgICAgICAgICAgICB0aXRsZT1cIlVuaXQgUHJpY2VcIlxuICAgICAqICAgICAgICAgICAgICAgIFt3aWR0aF09XCIxODBcIlxuICAgICAqICAgICAgICAgICAgICAgIGZpbHRlcj1cIm51bWVyaWNcIlxuICAgICAqICAgICAgICAgICAgICAgIGZvcm1hdD1cInswOmN9XCI+XG4gICAgICogICAgICAgICAgICA8L2tlbmRvLWdyaWQtY29sdW1uPlxuICAgICAqICAgICAgICA8L2tlbmRvLWdyaWQ+XG4gICAgICogICAgYFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICAgKiAgICBwdWJsaWMgZ3JpZERhdGE6IGFueVtdID0gcHJvZHVjdHM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogY29uc3QgcHJvZHVjdHMgPSBbe1xuICAgICAqICAgIFwiUHJvZHVjdElEXCI6IDEsXG4gICAgICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYWlcIixcbiAgICAgKiAgICBcIlVuaXRQcmljZVwiOiAxOC4wMDAwLFxuICAgICAqICAgIFwiRGlzY29udGludWVkXCI6IHRydWVcbiAgICAgKiAgfSwge1xuICAgICAqICAgIFwiUHJvZHVjdElEXCI6IDIsXG4gICAgICogICAgXCJQcm9kdWN0TmFtZVwiOiBcIkNoYW5nXCIsXG4gICAgICogICAgXCJVbml0UHJpY2VcIjogMTkuMDAwMCxcbiAgICAgKiAgICBcIkRpc2NvbnRpbnVlZFwiOiBmYWxzZVxuICAgICAqICB9XG4gICAgICogXTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhdXRvRml0Q29sdW1uKGNvbHVtbjogQ29sdW1uQmFzZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQWRqdXN0cyB0aGUgd2lkdGggb2YgdGhlIHNwZWNpZmllZCBjb2x1bW5zIHRvIGZpdCB0aGUgZW50aXJlIGNvbnRlbnQsIGluY2x1ZGluZyBoZWFkZXJzLCB3aXRob3V0IHdyYXBwaW5nLlxuICAgICAqIElmIG5vIGNvbHVtbnMgYXJlIHNwZWNpZmllZCwgYGF1dG9GaXRDb2x1bW5zYCBpcyBhcHBsaWVkIHRvIGFsbCBjb2x1bW5zLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgcmVxdWlyZXMgdGhlIEdyaWQgdG8gYmUgcmVzaXphYmxlIChzZXQgYHJlc2l6YWJsZWAgdG8gYHRydWVgKS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgIHRlbXBsYXRlOiBgXG4gICAgICogICAgICA8a2VuZG8tZ3JpZFxuICAgICAqICAgICAgICAgICNncmlkXG4gICAgICogICAgICAgICAgW2RhdGFdPVwiZ3JpZERhdGFcIlxuICAgICAqICAgICAgICAgIFtyZXNpemFibGVdPVwidHJ1ZVwiXG4gICAgICogICAgICAgICAgc3R5bGU9XCJoZWlnaHQ6IDMwMHB4XCI+XG4gICAgICogICAgICAgICAgPG5nLXRlbXBsYXRlIGtlbmRvR3JpZFRvb2xiYXJUZW1wbGF0ZT5cbiAgICAgKiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImstYnV0dG9uXCIgKGNsaWNrKT1cImdyaWQuYXV0b0ZpdENvbHVtbnMoW2ZpcnN0Q29sdW1uLCBsYXN0Q29sdW1uXSlcIj5cbiAgICAgKiAgICAgICAgICAgICAgICAgIEF1dG8tZml0IHRoZSBmaXJzdCBhbmQgbGFzdCBjb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICogICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJrLWJ1dHRvblwiIChjbGljayk9XCJncmlkLmF1dG9GaXRDb2x1bW5zKClcIj5cbiAgICAgKiAgICAgICAgICAgICAgICAgIEF1dG8tZml0IGFsbCBjb2x1bW5zXG4gICAgICogICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAqICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICogICAgICAgICAgPGtlbmRvLWdyaWQtY29sdW1uLWdyb3VwIHRpdGxlPVwiUHJvZHVjdCBJbmZvXCI+XG4gICAgICogICAgICAgICAgICAgIDxrZW5kby1ncmlkLWNvbHVtblxuICAgICAqICAgICAgICAgICAgICAgICAgI2ZpcnN0Q29sdW1uXG4gICAgICogICAgICAgICAgICAgICAgICBmaWVsZD1cIlByb2R1Y3RJRFwiXG4gICAgICogICAgICAgICAgICAgICAgICBbd2lkdGhdPVwiNTBcIlxuICAgICAqICAgICAgICAgICAgICAgICAgW21pblJlc2l6YWJsZVdpZHRoXT1cIjMwXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgIHRpdGxlPVwiSURcIj5cbiAgICAgKiAgICAgICAgICAgICAgPC9rZW5kby1ncmlkLWNvbHVtbj5cbiAgICAgKlxuICAgICAqICAgICAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgICAgIGZpZWxkPVwiUHJvZHVjdE5hbWVcIlxuICAgICAqICAgICAgICAgICAgICAgICAgdGl0bGU9XCJQcm9kdWN0IE5hbWVcIlxuICAgICAqICAgICAgICAgICAgICAgICAgPlxuICAgICAqICAgICAgICAgICAgICA8L2tlbmRvLWdyaWQtY29sdW1uPlxuICAgICAqICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4tZ3JvdXA+XG4gICAgICpcbiAgICAgKiAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgI2xhc3RDb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgZmllbGQ9XCJVbml0UHJpY2VcIlxuICAgICAqICAgICAgICAgICAgICB0aXRsZT1cIlVuaXQgUHJpY2VcIlxuICAgICAqICAgICAgICAgICAgICBbd2lkdGhdPVwiMTgwXCJcbiAgICAgKiAgICAgICAgICAgICAgZmlsdGVyPVwibnVtZXJpY1wiXG4gICAgICogICAgICAgICAgICAgIGZvcm1hdD1cInswOmN9XCI+XG4gICAgICogICAgICAgICAgPC9rZW5kby1ncmlkLWNvbHVtbj5cbiAgICAgKiAgICAgIDwva2VuZG8tZ3JpZD5cbiAgICAgKiAgICBgXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgICAqICAgIHB1YmxpYyBncmlkRGF0YTogYW55W10gPSBwcm9kdWN0cztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBjb25zdCBwcm9kdWN0cyA9IFt7XG4gICAgICogICAgXCJQcm9kdWN0SURcIjogMSxcbiAgICAgKiAgICBcIlByb2R1Y3ROYW1lXCI6IFwiQ2hhaVwiLFxuICAgICAqICAgIFwiVW5pdFByaWNlXCI6IDE4LjAwMDAsXG4gICAgICogICAgXCJEaXNjb250aW51ZWRcIjogdHJ1ZVxuICAgICAqICB9LCB7XG4gICAgICogICAgXCJQcm9kdWN0SURcIjogMixcbiAgICAgKiAgICBcIlByb2R1Y3ROYW1lXCI6IFwiQ2hhbmdcIixcbiAgICAgKiAgICBcIlVuaXRQcmljZVwiOiAxOS4wMDAwLFxuICAgICAqICAgIFwiRGlzY29udGludWVkXCI6IGZhbHNlXG4gICAgICogIH1cbiAgICAgKiBdO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGF1dG9GaXRDb2x1bW5zKGNvbHVtbnM/OiBBcnJheTxDb2x1bW5CYXNlPiB8IFF1ZXJ5TGlzdDxDb2x1bW5CYXNlPik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5vdGlmeVBhZ2VDaGFuZ2Uoc291cmNlOiBzdHJpbmcsIGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBub3RpZnlTY3JvbGxCb3R0b20oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZm9jdXNFZGl0RWxlbWVudChjb250YWluZXJTZWxlY3Rvcjogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBsYXN0IGFjdGl2ZSBvciB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgR3JpZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOYXZpZ2F0aW9uQ2VsbH0gVGhlIGZvY3VzZWQgY2VsbC5cbiAgICAgKi9cbiAgICBmb2N1cygpOiBOYXZpZ2F0aW9uQ2VsbDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBjZWxsIHdpdGggdGhlIHNwZWNpZmllZCByb3cgYW5kIGNvbHVtbiBpbmRleC5cbiAgICAgKlxuICAgICAqIFRoZSByb3cgaW5kZXggaXMgYmFzZWQgb24gdGhlIGxvZ2ljYWwgc3RydWN0dXJlIG9mIHRoZSBHcmlkIGFuZCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIHRoZSBkYXRhIGl0ZW0gaW5kZXg6XG4gICAgICogKiBIZWFkZXIgcm93cyBhcmUgaW5jbHVkZWQsIHN0YXJ0aW5nIGF0IGluZGV4IDAuXG4gICAgICogKiBHcm91cCBoZWFkZXJzIGFuZCBmb290ZXJzIGFyZSBpbmNsdWRlZC5cbiAgICAgKiAqIFRoZSByb3cgaW5kZXhpbmcgaXMgYWJzb2x1dGUgYW5kIGRvZXMgbm90IGNoYW5nZSB3aXRoIHBhZ2luZy5cbiAgICAgKlxuICAgICAqIElmIHRoZSBHcmlkIGlzIGNvbmZpZ3VyZWQgZm9yIHNjcm9sbGluZywgaW5jbHVkaW5nIHZpcnR1YWwgc2Nyb2xsaW5nLCB0aGUgc2Nyb2xsIHBvc2l0aW9uIHdpbGwgYmUgdXBkYXRlZC5cbiAgICAgKiBJZiB0aGUgcm93IGlzIG5vdCBwcmVzZW50IG9uIHRoZSBjdXJyZW50IHBhZ2UsIHRoZSBtZXRob2Qgd2lsbCBoYXZlIG5vIGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByb3dJbmRleCAtIFRoZSBsb2dpY2FsIHJvdyBpbmRleCB0byBmb2N1cy4gVGhlIHRvcCBoZWFkZXIgcm93IGhhcyBhbiBpbmRleCAwLlxuICAgICAqIEBwYXJhbSBjb2xJbmRleCAtIFRoZSBjb2x1bW4gaW5kZXggdG8gZm9jdXMuXG4gICAgICogQHJldHVybnMge05hdmlnYXRpb25DZWxsfSBUaGUgZm9jdXNlZCBjZWxsLlxuICAgICAqXG4gICAgICovXG4gICAgZm9jdXNDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbEluZGV4OiBudW1iZXIpOiBOYXZpZ2F0aW9uQ2VsbDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBuZXh0IGNlbGwsIG9wdGlvbmFsbHkgd3JhcHBpbmcgdG8gdGhlIG5leHQgcm93LlxuICAgICAqXG4gICAgICogQHBhcmFtIHdyYXAgLSBBIEJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIGlmIHRoZSBmb2N1cyB3aWxsIG1vdmUgdG8gdGhlIG5leHQgcm93LiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAgICogQHJldHVybnMge05hdmlnYXRpb25DZWxsfSBUaGUgZm9jdXNlZCBjZWxsLiBJZiB0aGUgZm9jdXMgaXMgYWxyZWFkeSBvbiB0aGUgbGFzdCBjZWxsLCByZXR1cm5zIGBudWxsYC5cbiAgICAgKi9cbiAgICBmb2N1c05leHRDZWxsKHdyYXA/OiBib29sZWFuKTogTmF2aWdhdGlvbkNlbGw7XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgcHJldmlvdXMgY2VsbC4gT3B0aW9uYWxseSB3cmFwcyB0byB0aGUgcHJldmlvdXMgcm93LlxuICAgICAqXG4gICAgICogQHBhcmFtIHdyYXAgLSBBIEJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIGlmIHRoZSBmb2N1cyB3aWxsIG1vdmUgdG8gdGhlIG5leHQgcm93LiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAgICogQHJldHVybnMge05hdmlnYXRpb25DZWxsfSBUaGUgZm9jdXNlZCBjZWxsLiBJZiB0aGUgZm9jdXMgaXMgYWxyZWFkeSBvbiB0aGUgZmlyc3QgY2VsbCwgcmV0dXJucyBgbnVsbGAuXG4gICAgICovXG4gICAgZm9jdXNQcmV2Q2VsbCh3cmFwPzogYm9vbGVhbik6IE5hdmlnYXRpb25DZWxsO1xuICAgIC8qKlxuICAgICAqIFNjcm9sbHMgdG8gdGhlIHNwZWNpZmllZCByb3cgYW5kIGNvbHVtblxuICAgICAqL1xuICAgIHNjcm9sbFRvKHJlcXVlc3Q6IFNjcm9sbFJlcXVlc3QpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBzcGVjaWZpZWQgY29sdW1uLlxuICAgICAqIFRoZSByZW9yZGVyaW5nIG9mIGNvbHVtbnMgb3BlcmF0ZXMgb25seSBvbiB0aGUgbGV2ZWxcbiAgICAgKiB3aGljaCBpcyBpbmZlcnJlZCBieSB0aGUgc291cmNlIGNvbHVtbi5cbiAgICAgKiBGb3IgdGhlIGByZW9yZGVyQ29sdW1uYCBtZXRob2QgdG8gd29yayBwcm9wZXJseSxcbiAgICAgKiB0aGUgYHNvdXJjZWAgY29sdW1uIGhhcyB0byBiZSB2aXNpYmxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb2x1bW5CYXNlfSBzb3VyY2UgLSBUaGUgY29sdW1uIHdob3NlIHBvc2l0aW9uIHdpbGwgYmUgY2hhbmdlZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVzdEluZGV4IC0gVGhlIG5ldyBwb3NpdGlvbiBvZiB0aGUgY29sdW1uLlxuICAgICAqIEBwYXJhbSB7Q29sdW1uUmVvcmRlckNvbmZpZ30gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHNcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgIHRlbXBsYXRlOiBgXG4gICAgICogICAgICAgIDxrZW5kby1ncmlkXG4gICAgICogICAgICAgICAgICAjZ3JpZFxuICAgICAqICAgICAgICAgICAgW2RhdGFdPVwiZ3JpZERhdGFcIlxuICAgICAqICAgICAgICAgICAgW3Jlb3JkZXJhYmxlXT1cInRydWVcIlxuICAgICAqICAgICAgICAgICAgc3R5bGU9XCJoZWlnaHQ6IDMwMHB4XCI+XG4gICAgICogICAgICAgICAgICA8bmctdGVtcGxhdGUga2VuZG9HcmlkVG9vbGJhclRlbXBsYXRlPlxuICAgICAqICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiay1idXR0b25cIlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgKGNsaWNrKT1cImdyaWQucmVvcmRlckNvbHVtbihncm91cENvbHVtbiwgMiwgeyBiZWZvcmU6IHRydWUgfSlcIj5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgIE1vdmUgdGhlIGdyb3VwIGNvbHVtbiBiZWZvcmUgdGhlIGxhc3Qgb25lLlxuICAgICAqICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgKiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICogICAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW4tZ3JvdXAgI2dyb3VwQ29sdW1uIHRpdGxlPVwiUHJvZHVjdCBJbmZvXCI+XG4gICAgICogICAgICAgICAgICAgICAgPGtlbmRvLWdyaWQtY29sdW1uXG4gICAgICogICAgICAgICAgICAgICAgICAgIGZpZWxkPVwiUHJvZHVjdElEXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgW3dpZHRoXT1cIjUwXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJJRFwiPlxuICAgICAqICAgICAgICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4+XG4gICAgICpcbiAgICAgKiAgICAgICAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgZmllbGQ9XCJQcm9kdWN0TmFtZVwiXG4gICAgICogICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiUHJvZHVjdCBOYW1lXCI+XG4gICAgICogICAgICAgICAgICAgICAgPC9rZW5kby1ncmlkLWNvbHVtbj5cbiAgICAgKiAgICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4tZ3JvdXA+XG4gICAgICpcbiAgICAgKiAgICAgICAgICAgIDxrZW5kby1ncmlkLWNvbHVtblxuICAgICAqICAgICAgICAgICAgICAgIGZpZWxkPVwiVW5pdFByaWNlXCJcbiAgICAgKiAgICAgICAgICAgICAgICB0aXRsZT1cIlVuaXQgUHJpY2VcIlxuICAgICAqICAgICAgICAgICAgICAgIFt3aWR0aF09XCIxODBcIlxuICAgICAqICAgICAgICAgICAgICAgIGZvcm1hdD1cInswOmN9XCI+XG4gICAgICogICAgICAgICAgICA8L2tlbmRvLWdyaWQtY29sdW1uPlxuICAgICAqXG4gICAgICogICAgICAgICAgICA8a2VuZG8tZ3JpZC1jb2x1bW5cbiAgICAgKiAgICAgICAgICAgICAgICBmaWVsZD1cIkRpc2NvbnRpbnVlZFwiXG4gICAgICogICAgICAgICAgICAgICAgdGl0bGU9XCJEaXNjb250aW51ZWRcIlxuICAgICAqICAgICAgICAgICAgICAgIFt3aWR0aF09XCIxMDBcIj5cbiAgICAgKiAgICAgICAgICAgIDwva2VuZG8tZ3JpZC1jb2x1bW4+XG4gICAgICogICAgICAgIDwva2VuZG8tZ3JpZD5cbiAgICAgKiAgICBgXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgICAqICAgIHB1YmxpYyBncmlkRGF0YTogYW55W10gPSBwcm9kdWN0cztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBjb25zdCBwcm9kdWN0cyA9IFt7XG4gICAgICogICAgXCJQcm9kdWN0SURcIjogMSxcbiAgICAgKiAgICBcIlByb2R1Y3ROYW1lXCI6IFwiQ2hhaVwiLFxuICAgICAqICAgIFwiVW5pdFByaWNlXCI6IDE4LjAwMDAsXG4gICAgICogICAgXCJEaXNjb250aW51ZWRcIjogdHJ1ZVxuICAgICAqICB9LCB7XG4gICAgICogICAgXCJQcm9kdWN0SURcIjogMixcbiAgICAgKiAgICBcIlByb2R1Y3ROYW1lXCI6IFwiQ2hhbmdcIixcbiAgICAgKiAgICBcIlVuaXRQcmljZVwiOiAxOS4wMDAwLFxuICAgICAqICAgIFwiRGlzY29udGludWVkXCI6IGZhbHNlXG4gICAgICogIH1cbiAgICAgKiBdO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlb3JkZXJDb2x1bW4oc291cmNlOiBDb2x1bW5CYXNlLCBkZXN0SW5kZXg6IG51bWJlciwgb3B0aW9ucz86IENvbHVtblJlb3JkZXJDb25maWcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gd2hpY2ggZGV0ZXJtaW5lcyBpZiBhIHNwZWNpZmljIHJvdyBpcyBleHBhbmRlZC5cbiAgICAgKi9cbiAgICBpc0RldGFpbEV4cGFuZGVkOiAoYXJnczogUm93QXJncykgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW9yZGVyO1xuICAgIHByaXZhdGUgdXBkYXRlQ29sdW1uSW5kaWNlcztcbiAgICBwcml2YXRlIHVwZGF0ZUluZGljZXNGb3JMZXZlbDtcbiAgICBwcml2YXRlIGNvbHVtbnNGb3JMZXZlbDtcbiAgICBwcml2YXRlIGluaXRTZWxlY3Rpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgc2V0RWRpdEZvY3VzO1xuICAgIHByaXZhdGUgY29sdW1uSW5zdGFuY2U7XG4gICAgcHJpdmF0ZSB2ZXJpZnlTZXR0aW5ncztcbiAgICBwcml2YXRlIGF1dG9HZW5lcmF0ZUNvbHVtbnM7XG4gICAgcHJpdmF0ZSBhdHRhY2hTdGF0ZUNoYW5nZXNFbWl0dGVyO1xuICAgIHByaXZhdGUgYXR0YWNoRWRpdEhhbmRsZXJzO1xuICAgIHByaXZhdGUgZW1pdENSVURFdmVudDtcbiAgICBwcml2YXRlIGF0dGFjaERvbUV2ZW50SGFuZGxlcnM7XG4gICAgcHJpdmF0ZSBhdHRhY2hFbGVtZW50RXZlbnRIYW5kbGVycztcbiAgICBwcml2YXRlIG1hdGNoZXNNZWRpYTtcbiAgICBwcml2YXRlIHJlc2l6ZUNoZWNrO1xuICAgIHByaXZhdGUgZW1pdFBERkV4cG9ydEV2ZW50O1xuICAgIHByaXZhdGUgc3luY0hlYWRlckhlaWdodDtcbiAgICBwcml2YXRlIGNvbHVtbnNDb250YWluZXJDaGFuZ2U7XG4gICAgcHJpdmF0ZSBoYW5kbGVDb2x1bW5SZXNpemU7XG4gICAgcHJpdmF0ZSBub3RpZnlSZXNpemU7XG4gICAgcHJpdmF0ZSBhc3NlcnROYXZpZ2FibGU7XG4gICAgcHJpdmF0ZSBfcm93Q2xhc3M7XG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uTWV0YWRhdGE7XG4gICAgcHJpdmF0ZSB1cGRhdGVOYXZpZ2F0aW9uTWV0YWRhdGE7XG4gICAgcHJpdmF0ZSBhcHBseUF1dG9TaXplO1xuICAgIHByaXZhdGUgb25Db2x1bW5SYW5nZUNoYW5nZTtcbiAgICBwcml2YXRlIHRvZ2dsZURldGFpbFJvd0xlZ2FjeTtcbiAgICBwcml2YXRlIHNob3VsZFJlc2V0U2VsZWN0aW9uO1xufVxuIl19