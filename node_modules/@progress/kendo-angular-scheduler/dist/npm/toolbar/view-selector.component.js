/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var toolbar_service_1 = require("./toolbar.service");
var dom_events_service_1 = require("../views/common/dom-events.service");
var dom_queries_1 = require("../common/dom-queries");
/**
 * A toolbar component which contains the controls for switching the views
 * ([see example]({% slug toolbar_scheduler %}#toc-including-the-built-in-components)).
 *
 * To render the view-selection buttons, include the component in the
 * [toolbar template]({% slug api_scheduler_toolbartemplatedirective %}).
 *
 * {% meta height:700 %}
 * {% embed_file toolbar/template/app.component.ts preview %}
 * {% embed_file toolbar/template/my-navigation.component.ts %}
 * {% embed_file toolbar/template/app.module.ts %}
 * {% embed_file shared/events-utc.ts %}
 * {% embed_file shared/main.ts %}
 * {% endmeta %}
 */
var ToolbarViewSelectorComponent = /** @class */ (function () {
    function ToolbarViewSelectorComponent(service, element, renderer, domEvents, ngZone) {
        this.service = service;
        this.element = element;
        this.renderer = renderer;
        this.domEvents = domEvents;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.hostClasses = true;
    }
    Object.defineProperty(ToolbarViewSelectorComponent.prototype, "expanded", {
        /**
         * @hidden
         */
        get: function () {
            return this._expanded;
        },
        set: function (value) {
            this._expanded = value;
            var expandedClass = 'k-state-expanded';
            var element = this.element.nativeElement;
            if (value) {
                this.renderer.addClass(element, expandedClass);
            }
            else {
                this.renderer.removeClass(element, expandedClass);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarViewSelectorComponent.prototype, "ctx", {
        /**
         * @hidden
         */
        get: function () {
            return this.service.context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarViewSelectorComponent.prototype, "itemDisplay", {
        /**
         * @hidden
         */
        get: function () {
            if (this.ctx.views && this.ctx.views.length === 1) {
                return 'list-item';
            }
        },
        enumerable: true,
        configurable: true
    });
    ToolbarViewSelectorComponent.prototype.ngAfterViewInit = function () {
        this.attachElementEventHandlers();
    };
    ToolbarViewSelectorComponent.prototype.ngOnDestroy = function () {
        if (this.detachDomEvents) {
            this.detachDomEvents();
        }
    };
    /**
     * @hidden
     */
    ToolbarViewSelectorComponent.prototype.onClick = function (view) {
        if (this.ctx.selectedView !== view) {
            this.service.navigate({
                type: 'view-change',
                view: view
            });
        }
        this.expanded = false;
    };
    /**
     * @hidden
     */
    ToolbarViewSelectorComponent.prototype.onCurrentViewClick = function () {
        this.expanded = !this.expanded;
    };
    /**
     * @hidden
     */
    ToolbarViewSelectorComponent.prototype.isSelected = function (view) {
        return this.ctx.selectedView === view;
    };
    ToolbarViewSelectorComponent.prototype.attachElementEventHandlers = function () {
        var _this = this;
        var element = this.element.nativeElement;
        this.ngZone.runOutsideAngular(function () {
            var focusOutListener = _this.renderer.listen(element, 'focusout', function (args) {
                var next = args.relatedTarget || document.activeElement;
                var outside = !dom_queries_1.closest(next, function (node) { return node === element; });
                if (outside) {
                    _this.expanded = false;
                }
            });
            var windowBlurSubscription = _this.domEvents.windowBlur.subscribe(function () { return _this.expanded = false; });
            _this.detachDomEvents = function () {
                focusOutListener();
                windowBlurSubscription.unsubscribe();
            };
        });
    };
    ToolbarViewSelectorComponent.decorators = [
        { type: core_1.Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: '[kendoSchedulerToolbarViewSelector]',
                    template: "\n        <li class=\"k-current-view\" *ngIf=\"ctx.views?.length > 1\">\n            <span role=\"button\" class=\"k-link\" tabindex=\"-1\" [kendoEventsOutsideAngular]=\"{ click: onCurrentViewClick }\" [scope]=\"this\">\n                {{ ctx.selectedView?.title }}\n            </span>\n        </li>\n        <li *ngFor=\"let view of ctx.views\"\n            [class.k-state-selected]=\"isSelected(view)\" [ngStyle]=\"{ display: itemDisplay }\"\n         >\n            <span role=\"button\" class=\"k-link\" tabindex=\"-1\" (click)=\"onClick(view)\">\n                {{ view.title }}\n            </span>\n        </li>\n    "
                },] },
    ];
    /** @nocollapse */
    ToolbarViewSelectorComponent.ctorParameters = function () { return [
        { type: toolbar_service_1.ToolbarService },
        { type: core_1.ElementRef },
        { type: core_1.Renderer2 },
        { type: dom_events_service_1.DomEventsService },
        { type: core_1.NgZone }
    ]; };
    ToolbarViewSelectorComponent.propDecorators = {
        hostClasses: [{ type: core_1.HostBinding, args: ['class.k-scheduler-views',] }, { type: core_1.HostBinding, args: ['class.k-reset',] }]
    };
    return ToolbarViewSelectorComponent;
}());
exports.ToolbarViewSelectorComponent = ToolbarViewSelectorComponent;
