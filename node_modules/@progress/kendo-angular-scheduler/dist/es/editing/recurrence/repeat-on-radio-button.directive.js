/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, Input, HostBinding, ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';
import { RecurrenceService } from './recurrence.service';
/**
 * @hidden
 */
var RepeatOnRadioButtonDirective = /** @class */ (function () {
    function RepeatOnRadioButtonDirective(el, renderer, recurrence, changeDetector) {
        this.el = el;
        this.renderer = renderer;
        this.recurrence = recurrence;
        this.changeDetector = changeDetector;
        this.type = 'radio';
        this.radioClass = true;
        this.destroyChange = this.renderer.listen(this.elem, 'change', this.onChange.bind(this));
    }
    Object.defineProperty(RepeatOnRadioButtonDirective.prototype, "repeatOnRule", {
        /* tslint:disable-next-line:no-input-rename */
        set: function (value) {
            var parts = value.split('-');
            this._repeatOnRule = parts[0];
            this._uniqueId = parts[1];
        },
        enumerable: true,
        configurable: true
    });
    RepeatOnRadioButtonDirective.prototype.ngOnInit = function () {
        this.renderer.setAttribute(this.elem, 'id', "k-repeaton-" + this._repeatOnRule + "-" + this._uniqueId);
        this.renderer.setAttribute(this.elem, 'name', "day-" + this._uniqueId);
    };
    RepeatOnRadioButtonDirective.prototype.ngAfterContentChecked = function () {
        this.setCheckedState();
    };
    RepeatOnRadioButtonDirective.prototype.ngOnDestroy = function () {
        if (this.destroyChange) {
            this.destroyChange();
        }
    };
    RepeatOnRadioButtonDirective.prototype.onChange = function () {
        if (this.elem.checked) {
            this.recurrence.repeatOnRule = this._repeatOnRule;
            this.changeDetector.markForCheck();
        }
    };
    RepeatOnRadioButtonDirective.prototype.setCheckedState = function () {
        var isChecked = this._repeatOnRule === this.recurrence.repeatOnRule;
        this.renderer.setProperty(this.elem, 'checked', isChecked);
    };
    Object.defineProperty(RepeatOnRadioButtonDirective.prototype, "elem", {
        get: function () {
            return this.el.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    RepeatOnRadioButtonDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[kendoRecurrenceRepeatOnRadioButton]'
                },] },
    ];
    /** @nocollapse */
    RepeatOnRadioButtonDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: RecurrenceService },
        { type: ChangeDetectorRef }
    ]; };
    RepeatOnRadioButtonDirective.propDecorators = {
        type: [{ type: HostBinding, args: ['attr.type',] }],
        radioClass: [{ type: HostBinding, args: ['class.k-radio',] }],
        repeatOnRule: [{ type: Input, args: ["kendoRecurrenceRepeatOnRadioButton",] }]
    };
    return RepeatOnRadioButtonDirective;
}());
export { RepeatOnRadioButtonDirective };
