/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { RecurrenceService } from './recurrence.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { isPresent } from '../../common/util';
/**
 * @hidden
 */
var RecurrenceIntervalEditorComponent = /** @class */ (function () {
    function RecurrenceIntervalEditorComponent(recurrence, localization) {
        this.recurrence = recurrence;
        this.localization = localization;
        this.numericOptions = {
            min: 1,
            format: '#',
            autoCorrect: true,
            step: 1,
            spinners: true
        };
        this.intervalValue = this.recurrence.rrule.interval || 1;
    }
    Object.defineProperty(RecurrenceIntervalEditorComponent.prototype, "userNumericOptions", {
        set: function (options) {
            this.numericOptions = tslib_1.__assign({}, this.numericOptions, options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RecurrenceIntervalEditorComponent.prototype, "currentFreq", {
        get: function () {
            return this.recurrence.frequency;
        },
        enumerable: true,
        configurable: true
    });
    RecurrenceIntervalEditorComponent.prototype.onIntervalChange = function (newInterval) {
        if (isPresent(newInterval)) {
            this.recurrence.interval = newInterval;
        }
    };
    RecurrenceIntervalEditorComponent.prototype.onIntervalBlur = function () {
        if (!isPresent(this.intervalValue)) {
            this.recurrence.interval = this.intervalValue = 1;
        }
    };
    RecurrenceIntervalEditorComponent.prototype.textForRepeatEvery = function () {
        var freq = this.currentFreq;
        switch (freq) {
            case 'daily':
                return this.textFor('dailyRepeatEvery');
            case 'weekly':
                return this.textFor('weeklyRepeatEvery');
            case 'monthly':
                return this.textFor('monthlyRepeatEvery');
            case 'yearly':
                return this.textFor('yearlyRepeatEvery');
            default:
                break;
        }
    };
    RecurrenceIntervalEditorComponent.prototype.textForFrequency = function () {
        var freq = this.currentFreq;
        switch (freq) {
            case 'daily':
                return this.textFor('dailyInterval');
            case 'weekly':
                return this.textFor('weeklyInterval');
            case 'monthly':
                return this.textFor('monthlyInterval');
            case 'yearly':
                return this.textFor('yearlyInterval');
            default:
                break;
        }
    };
    RecurrenceIntervalEditorComponent.prototype.textFor = function (key) {
        return this.localization.get(key);
    };
    RecurrenceIntervalEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-recurrence-interval-editor',
                    template: "\n        <div class=\"k-edit-label\">\n            <label (click)=\"intervalNumeric.focus()\">{{ textForRepeatEvery() }}</label>\n        </div>\n\n        <div class=\"k-edit-field\">\n            <kendo-numerictextbox\n                #intervalNumeric\n                [style.width.px]=\"70\"\n                [min]=\"numericOptions.min\"\n                [max]=\"numericOptions.max\"\n                [decimals]=\"0\"\n                [format]=\"numericOptions.format\"\n                [autoCorrect]=\"numericOptions.autoCorrect\"\n                [readonly]=\"numericOptions.readonly\"\n                [selectOnFocus]=\"numericOptions.selectOnFocus\"\n                [spinners]=\"numericOptions.spinners\"\n                [step]=\"numericOptions.step\"\n                [title]=\"numericOptions.title\"\n                [(value)]=\"intervalValue\"\n                (blur)=\"onIntervalBlur()\"\n                (valueChange)=\"onIntervalChange($event)\">\n            </kendo-numerictextbox>\n\n            <span>{{ textForFrequency() }}</span>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    RecurrenceIntervalEditorComponent.ctorParameters = function () { return [
        { type: RecurrenceService },
        { type: LocalizationService }
    ]; };
    RecurrenceIntervalEditorComponent.propDecorators = {
        userNumericOptions: [{ type: Input }]
    };
    return RecurrenceIntervalEditorComponent;
}());
export { RecurrenceIntervalEditorComponent };
