/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Component, ElementRef, HostBinding, Renderer2, NgZone } from '@angular/core';
import { ToolbarService } from './toolbar.service';
import { DomEventsService } from '../views/common/dom-events.service';
import { closest } from '../common/dom-queries';
/**
 * A toolbar component which contains the controls for switching the views
 * ([see example]({% slug toolbar_scheduler %}#toc-including-the-built-in-components)).
 *
 * To render the view-selection buttons, include the component in the
 * [toolbar template]({% slug api_scheduler_toolbartemplatedirective %}).
 *
 * {% meta height:700 %}
 * {% embed_file toolbar/template/app.component.ts preview %}
 * {% embed_file toolbar/template/my-navigation.component.ts %}
 * {% embed_file toolbar/template/app.module.ts %}
 * {% embed_file shared/events-utc.ts %}
 * {% embed_file shared/main.ts %}
 * {% endmeta %}
 */
export class ToolbarViewSelectorComponent {
    constructor(service, element, renderer, domEvents, ngZone) {
        this.service = service;
        this.element = element;
        this.renderer = renderer;
        this.domEvents = domEvents;
        this.ngZone = ngZone;
        /**
         * @hidden
         */
        this.hostClasses = true;
    }
    /**
     * @hidden
     */
    get expanded() {
        return this._expanded;
    }
    set expanded(value) {
        this._expanded = value;
        const expandedClass = 'k-state-expanded';
        const element = this.element.nativeElement;
        if (value) {
            this.renderer.addClass(element, expandedClass);
        }
        else {
            this.renderer.removeClass(element, expandedClass);
        }
    }
    /**
     * @hidden
     */
    get ctx() {
        return this.service.context;
    }
    /**
     * @hidden
     */
    get itemDisplay() {
        if (this.ctx.views && this.ctx.views.length === 1) {
            return 'list-item';
        }
    }
    ngAfterViewInit() {
        this.attachElementEventHandlers();
    }
    ngOnDestroy() {
        if (this.detachDomEvents) {
            this.detachDomEvents();
        }
    }
    /**
     * @hidden
     */
    onClick(view) {
        if (this.ctx.selectedView !== view) {
            this.service.navigate({
                type: 'view-change',
                view: view
            });
        }
        this.expanded = false;
    }
    /**
     * @hidden
     */
    onCurrentViewClick() {
        this.expanded = !this.expanded;
    }
    /**
     * @hidden
     */
    isSelected(view) {
        return this.ctx.selectedView === view;
    }
    attachElementEventHandlers() {
        const element = this.element.nativeElement;
        this.ngZone.runOutsideAngular(() => {
            const focusOutListener = this.renderer.listen(element, 'focusout', (args) => {
                const next = args.relatedTarget || document.activeElement;
                const outside = !closest(next, (node) => node === element);
                if (outside) {
                    this.expanded = false;
                }
            });
            const windowBlurSubscription = this.domEvents.windowBlur.subscribe(() => this.expanded = false);
            this.detachDomEvents = () => {
                focusOutListener();
                windowBlurSubscription.unsubscribe();
            };
        });
    }
}
ToolbarViewSelectorComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: '[kendoSchedulerToolbarViewSelector]',
                template: `
        <li class="k-current-view" *ngIf="ctx.views?.length > 1">
            <span role="button" class="k-link" tabindex="-1" [kendoEventsOutsideAngular]="{ click: onCurrentViewClick }" [scope]="this">
                {{ ctx.selectedView?.title }}
            </span>
        </li>
        <li *ngFor="let view of ctx.views"
            [class.k-state-selected]="isSelected(view)" [ngStyle]="{ display: itemDisplay }"
         >
            <span role="button" class="k-link" tabindex="-1" (click)="onClick(view)">
                {{ view.title }}
            </span>
        </li>
    `
            },] },
];
/** @nocollapse */
ToolbarViewSelectorComponent.ctorParameters = () => [
    { type: ToolbarService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomEventsService },
    { type: NgZone }
];
ToolbarViewSelectorComponent.propDecorators = {
    hostClasses: [{ type: HostBinding, args: ['class.k-scheduler-views',] }, { type: HostBinding, args: ['class.k-reset',] }]
};
