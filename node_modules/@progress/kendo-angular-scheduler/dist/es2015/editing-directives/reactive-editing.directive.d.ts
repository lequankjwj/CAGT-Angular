/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { FormGroup } from '@angular/forms';
import { SchedulerComponent } from '../scheduler.component';
import { EditingDirectiveBase } from './editing-directive-base';
import { CreateFormGroupArgs } from '../types/create-form-group-args.interface';
import { LocalDataChangesService } from '../editing/local-data-changes.service';
import { DialogsService } from '../editing/dialogs.service';
/**
 * A directive which encapsulates the editing operations when the Scheduler
 * uses the [Reactive Angular Forms]({{ site.data.urls.angular['reactiveforms'] }}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class ReactiveEditingDirective extends EditingDirectiveBase {
    protected scheduler: SchedulerComponent;
    protected localDataChangesService: LocalDataChangesService;
    protected dialogsService: DialogsService;
    /**
     * The function that creates the `FormGroup` for the edited model.
     */
    createFormGroup: (args: CreateFormGroupArgs) => FormGroup;
    constructor(scheduler: SchedulerComponent, localDataChangesService: LocalDataChangesService, dialogsService: DialogsService);
    ngOnInit(): void;
    protected editHandler(args: any): void;
    protected saveHandler(args: any): void;
    protected createModel(args: any): any;
    protected isFormValid({ formGroup, isNew }: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReactiveEditingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ReactiveEditingDirective, "[kendoSchedulerReactiveEditing]", never, { "createFormGroup": "kendoSchedulerReactiveEditing"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmUtZWRpdGluZy5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZWRpdGluZy5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgU2NoZWR1bGVyQ29tcG9uZW50IH0gZnJvbSAnLi4vc2NoZWR1bGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFZGl0aW5nRGlyZWN0aXZlQmFzZSB9IGZyb20gJy4vZWRpdGluZy1kaXJlY3RpdmUtYmFzZSc7XG5pbXBvcnQgeyBDcmVhdGVGb3JtR3JvdXBBcmdzIH0gZnJvbSAnLi4vdHlwZXMvY3JlYXRlLWZvcm0tZ3JvdXAtYXJncy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UgfSBmcm9tICcuLi9lZGl0aW5nL2xvY2FsLWRhdGEtY2hhbmdlcy5zZXJ2aWNlJztcbmltcG9ydCB7IERpYWxvZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vZWRpdGluZy9kaWFsb2dzLnNlcnZpY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBlbmNhcHN1bGF0ZXMgdGhlIGVkaXRpbmcgb3BlcmF0aW9ucyB3aGVuIHRoZSBTY2hlZHVsZXJcbiAqIHVzZXMgdGhlIFtSZWFjdGl2ZSBBbmd1bGFyIEZvcm1zXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWydyZWFjdGl2ZWZvcm1zJ10gfX0pLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZWFjdGl2ZUVkaXRpbmdEaXJlY3RpdmUgZXh0ZW5kcyBFZGl0aW5nRGlyZWN0aXZlQmFzZSB7XG4gICAgcHJvdGVjdGVkIHNjaGVkdWxlcjogU2NoZWR1bGVyQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBsb2NhbERhdGFDaGFuZ2VzU2VydmljZTogTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGRpYWxvZ3NTZXJ2aWNlOiBEaWFsb2dzU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIHRoZSBgRm9ybUdyb3VwYCBmb3IgdGhlIGVkaXRlZCBtb2RlbC5cbiAgICAgKi9cbiAgICBjcmVhdGVGb3JtR3JvdXA6IChhcmdzOiBDcmVhdGVGb3JtR3JvdXBBcmdzKSA9PiBGb3JtR3JvdXA7XG4gICAgY29uc3RydWN0b3Ioc2NoZWR1bGVyOiBTY2hlZHVsZXJDb21wb25lbnQsIGxvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlOiBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSwgZGlhbG9nc1NlcnZpY2U6IERpYWxvZ3NTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBlZGl0SGFuZGxlcihhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzYXZlSGFuZGxlcihhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjcmVhdGVNb2RlbChhcmdzOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGlzRm9ybVZhbGlkKHsgZm9ybUdyb3VwLCBpc05ldyB9OiBhbnkpOiBib29sZWFuO1xufVxuIl19