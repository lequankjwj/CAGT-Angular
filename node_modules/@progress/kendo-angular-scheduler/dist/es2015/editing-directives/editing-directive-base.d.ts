/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { SchedulerComponent } from '../scheduler.component';
import { Subscription } from 'rxjs';
import { LocalDataChangesService } from '../editing/local-data-changes.service';
import { EditService } from './edit-service.interface';
import { DialogsService } from '../editing/dialogs.service';
import { EditMode } from '../types';
import { AddEvent, EditEvent } from '../events';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class EditingDirectiveBase implements OnInit, OnDestroy {
    protected scheduler: SchedulerComponent;
    protected localDataChangesService: LocalDataChangesService;
    protected dialogsService: DialogsService;
    /**
     * Fires before the editing directive renders the **Add** dialog.
     */
    add: EventEmitter<AddEvent>;
    /**
     * Fires before the editing directive renders the **Edit** dialog.
     */
    edit: EventEmitter<EditEvent>;
    /**
     * The edit service that will handle the editing operations.
     */
    editService: EditService<any>;
    protected defaultTitle: string;
    protected subscriptions: Subscription;
    protected defaultEditService: EditService<any>;
    protected userEditService: EditService<any>;
    protected abstract createModel(args: any): any;
    constructor(scheduler: SchedulerComponent, localDataChangesService: LocalDataChangesService, dialogsService: DialogsService);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    protected createDefaultService(): EditService<any>;
    protected addHandler(args: any): void;
    protected removeHandler({ dataItem }: any): void;
    protected cancelHandler(): void;
    protected closeEditor(): void;
    protected handleUpdate(item: any, value: any, mode: EditMode): void;
    protected handleRemove(item: any, mode: EditMode): void;
    protected resizeEndHandler({ event, start, end }: any): void;
    protected dragEndHandler({ event: { dataItem }, start, end, resources, isAllDay }: any): void;
    protected isEnabled(action: string): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditingDirectiveBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<EditingDirectiveBase, never, never, { "editService": "editService"; }, { "add": "add"; "edit": "edit"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdGluZy1kaXJlY3RpdmUtYmFzZS5kLnRzIiwic291cmNlcyI6WyJlZGl0aW5nLWRpcmVjdGl2ZS1iYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uSW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNjaGVkdWxlckNvbXBvbmVudCB9IGZyb20gJy4uL3NjaGVkdWxlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSB9IGZyb20gJy4uL2VkaXRpbmcvbG9jYWwtZGF0YS1jaGFuZ2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRWRpdFNlcnZpY2UgfSBmcm9tICcuL2VkaXQtc2VydmljZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRGlhbG9nc1NlcnZpY2UgfSBmcm9tICcuLi9lZGl0aW5nL2RpYWxvZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBFZGl0TW9kZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEFkZEV2ZW50LCBFZGl0RXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIEVkaXRpbmdEaXJlY3RpdmVCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBzY2hlZHVsZXI6IFNjaGVkdWxlckNvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgbG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2U6IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBkaWFsb2dzU2VydmljZTogRGlhbG9nc1NlcnZpY2U7XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBlZGl0aW5nIGRpcmVjdGl2ZSByZW5kZXJzIHRoZSAqKkFkZCoqIGRpYWxvZy5cbiAgICAgKi9cbiAgICBhZGQ6IEV2ZW50RW1pdHRlcjxBZGRFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBlZGl0aW5nIGRpcmVjdGl2ZSByZW5kZXJzIHRoZSAqKkVkaXQqKiBkaWFsb2cuXG4gICAgICovXG4gICAgZWRpdDogRXZlbnRFbWl0dGVyPEVkaXRFdmVudD47XG4gICAgLyoqXG4gICAgICogVGhlIGVkaXQgc2VydmljZSB0aGF0IHdpbGwgaGFuZGxlIHRoZSBlZGl0aW5nIG9wZXJhdGlvbnMuXG4gICAgICovXG4gICAgZWRpdFNlcnZpY2U6IEVkaXRTZXJ2aWNlPGFueT47XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRUaXRsZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb247XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRFZGl0U2VydmljZTogRWRpdFNlcnZpY2U8YW55PjtcbiAgICBwcm90ZWN0ZWQgdXNlckVkaXRTZXJ2aWNlOiBFZGl0U2VydmljZTxhbnk+O1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVNb2RlbChhcmdzOiBhbnkpOiBhbnk7XG4gICAgY29uc3RydWN0b3Ioc2NoZWR1bGVyOiBTY2hlZHVsZXJDb21wb25lbnQsIGxvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlOiBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSwgZGlhbG9nc1NlcnZpY2U6IERpYWxvZ3NTZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY3JlYXRlRGVmYXVsdFNlcnZpY2UoKTogRWRpdFNlcnZpY2U8YW55PjtcbiAgICBwcm90ZWN0ZWQgYWRkSGFuZGxlcihhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCByZW1vdmVIYW5kbGVyKHsgZGF0YUl0ZW0gfTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY2FuY2VsSGFuZGxlcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjbG9zZUVkaXRvcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBoYW5kbGVVcGRhdGUoaXRlbTogYW55LCB2YWx1ZTogYW55LCBtb2RlOiBFZGl0TW9kZSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGhhbmRsZVJlbW92ZShpdGVtOiBhbnksIG1vZGU6IEVkaXRNb2RlKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcmVzaXplRW5kSGFuZGxlcih7IGV2ZW50LCBzdGFydCwgZW5kIH06IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGRyYWdFbmRIYW5kbGVyKHsgZXZlbnQ6IHsgZGF0YUl0ZW0gfSwgc3RhcnQsIGVuZCwgcmVzb3VyY2VzLCBpc0FsbERheSB9OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBpc0VuYWJsZWQoYWN0aW9uOiBzdHJpbmcpOiBib29sZWFuO1xufVxuIl19