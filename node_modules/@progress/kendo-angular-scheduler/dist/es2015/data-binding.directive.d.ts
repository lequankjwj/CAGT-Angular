/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { SchedulerComponent } from './scheduler.component';
import { DateRange, SchedulerEvent } from './types';
import { LocalDataChangesService } from './editing/local-data-changes.service';
import { IntlService } from '@progress/kendo-angular-intl';
/**
 * A directive that processes Scheduler events in-memory.
 *
 * Processing includes the expanding of recurring events and the filtering of data for
 * the currently active period.
 *
 * {% meta height:650 %}
 * {% embed_file basic-usage/app.component.ts preview %}
 * {% embed_file shared/app.module.ts %}
 * {% embed_file shared/main.ts %}
 * {% embed_file shared/events-utc.ts %}
 * {% endmeta %}
 */
import * as ɵngcc0 from '@angular/core';
export declare class DataBindingDirective implements OnInit, OnDestroy {
    protected scheduler: SchedulerComponent;
    protected changeDetector: ChangeDetectorRef;
    protected intl: IntlService;
    protected localDataChangesService?: LocalDataChangesService;
    /**
     * The array of data which will populate the Scheduler.
     */
    data: any[];
    protected dateRange: DateRange;
    protected originalData: any[];
    private subscription;
    private dataChangedSubscription;
    constructor(scheduler: SchedulerComponent, changeDetector: ChangeDetectorRef, intl: IntlService, localDataChangesService?: LocalDataChangesService);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    rebind(): void;
    protected process(): SchedulerEvent[];
    private onDateChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataBindingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DataBindingDirective, "[kendoSchedulerBinding]", never, { "data": "kendoSchedulerBinding"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1iaW5kaW5nLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkYXRhLWJpbmRpbmcuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTY2hlZHVsZXJDb21wb25lbnQgfSBmcm9tICcuL3NjaGVkdWxlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlLCBTY2hlZHVsZXJFdmVudCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UgfSBmcm9tICcuL2VkaXRpbmcvbG9jYWwtZGF0YS1jaGFuZ2VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW50bFNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1pbnRsJztcbi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBwcm9jZXNzZXMgU2NoZWR1bGVyIGV2ZW50cyBpbi1tZW1vcnkuXG4gKlxuICogUHJvY2Vzc2luZyBpbmNsdWRlcyB0aGUgZXhwYW5kaW5nIG9mIHJlY3VycmluZyBldmVudHMgYW5kIHRoZSBmaWx0ZXJpbmcgb2YgZGF0YSBmb3JcbiAqIHRoZSBjdXJyZW50bHkgYWN0aXZlIHBlcmlvZC5cbiAqXG4gKiB7JSBtZXRhIGhlaWdodDo2NTAgJX1cbiAqIHslIGVtYmVkX2ZpbGUgYmFzaWMtdXNhZ2UvYXBwLmNvbXBvbmVudC50cyBwcmV2aWV3ICV9XG4gKiB7JSBlbWJlZF9maWxlIHNoYXJlZC9hcHAubW9kdWxlLnRzICV9XG4gKiB7JSBlbWJlZF9maWxlIHNoYXJlZC9tYWluLnRzICV9XG4gKiB7JSBlbWJlZF9maWxlIHNoYXJlZC9ldmVudHMtdXRjLnRzICV9XG4gKiB7JSBlbmRtZXRhICV9XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGFCaW5kaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBzY2hlZHVsZXI6IFNjaGVkdWxlckNvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIHByb3RlY3RlZCBpbnRsOiBJbnRsU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgbG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2U/OiBMb2NhbERhdGFDaGFuZ2VzU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgZGF0YSB3aGljaCB3aWxsIHBvcHVsYXRlIHRoZSBTY2hlZHVsZXIuXG4gICAgICovXG4gICAgZGF0YTogYW55W107XG4gICAgcHJvdGVjdGVkIGRhdGVSYW5nZTogRGF0ZVJhbmdlO1xuICAgIHByb3RlY3RlZCBvcmlnaW5hbERhdGE6IGFueVtdO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZGF0YUNoYW5nZWRTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Ioc2NoZWR1bGVyOiBTY2hlZHVsZXJDb21wb25lbnQsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgaW50bDogSW50bFNlcnZpY2UsIGxvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlPzogTG9jYWxEYXRhQ2hhbmdlc1NlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWJpbmQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcHJvY2VzcygpOiBTY2hlZHVsZXJFdmVudFtdO1xuICAgIHByaXZhdGUgb25EYXRlQ2hhbmdlO1xufVxuIl19