/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterContentInit, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, ViewContainerRef, ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ResizeSensorComponent } from '@progress/kendo-angular-common';
import { Day } from '@progress/kendo-date-math';
import { Observable } from 'rxjs';
import { DateChangeEvent, NavigateEvent, SlotClickEvent, EventClickEvent } from './events';
import { ToolbarTemplateDirective } from './toolbar/toolbar-template.directive';
import { DateRange, Group, NavigationAction, Resource, SchedulerModelFields, SchedulerView, EditMode, CrudOperation, EditableSettings, CurrentTimeSettings, SlotClassArgs, EventStyleArgs, SchedulerSlot } from './types';
import { AgendaDateTemplateDirective } from './views/templates/agenda-date-template.directive';
import { AgendaTimeTemplateDirective } from './views/templates/agenda-time-template.directive';
import { AllDayEventTemplateDirective } from './views/templates/all-day-event-template.directive';
import { AllDaySlotTemplateDirective } from './views/templates/all-day-slot-template.directive';
import { DateHeaderTemplateDirective } from './views/templates/date-header-template.directive';
import { EventTemplateDirective } from './views/templates/event-template.directive';
import { GroupHeaderTemplateDirective } from './views/templates/group-header-template.directive';
import { MajorTimeHeaderTemplateDirective } from './views/templates/major-time-header-template.directive';
import { MinorTimeHeaderTemplateDirective } from './views/templates/minor-time-header-template.directive';
import { MonthDaySlotTemplateDirective } from './views/templates/month-day-slot-template.directive';
import { TimeSlotTemplateDirective } from './views/templates/time-slot-template.directive';
import { ViewContextService } from './views/view-context.service';
import { ViewStateService } from './views/view-state.service';
import { EditService } from './editing/edit.service';
import { EditDialogTemplateDirective } from './editing/edit-dialog-template.directive';
import { CancelEvent, SaveEvent, RemoveEvent, ResizeStartEvent, ResizeEvent, ResizeEndEvent, DragStartEvent, DragEvent, DragEndEvent } from './events';
import { FormGroup } from '@angular/forms';
import { DialogsService } from './editing/dialogs.service';
import { IntlService } from '@progress/kendo-angular-intl';
import { EditEventArgs } from './types/edit-event-args.interface';
import { PDFService } from './pdf/pdf.service';
import { PDFExportEvent } from './pdf/pdf-export-event';
import { LoadingComponent } from './loading.component';
import { FocusService, FocusPosition } from './navigation';
import { DomEventsService } from './views/common/dom-events.service';
import { CreateEvent } from './events/create-event';
import { SchedulerEvent } from './types/scheduler-event';
import { EventKeydownEvent } from './events/event-keydown-event';
/**
 * Represents the [Kendo UI Scheduler component for Angular]({% slug overview_scheduler %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-scheduler style="height: 600px">
 *            <kendo-scheduler-day-view>
 *            </kendo-scheduler-day-view>
 *            <kendo-scheduler-week-view>
 *            </kendo-scheduler-week-view>
 *        </kendo-scheduler>
 *    `
 * })
 * class AppComponent {}
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class SchedulerComponent implements AfterContentInit, OnDestroy, OnInit {
    wrapper: ElementRef;
    private viewContext;
    private viewState;
    private editService;
    private dialogsService;
    private intlService;
    private changeDetector;
    private zone;
    private pdfService;
    private localization;
    private domEvents;
    private renderer;
    private focusService;
    hostClasses: boolean;
    rtl: boolean;
    readonly dir: string;
    /**
     * The index of the currently selected view.
     *
     * By default, the selected view index is `0` and
     * indicates that the first declared view is visible.
     */
    selectedViewIndex: number;
    /**
     * Specifies if the Scheduler is editable.
     */
    editable: boolean | EditableSettings;
    /**
     * The minimum date that can be selected by using the navigation of the Scheduler.
     */
    min: Date;
    /**
     * The maximum date that can be selected by using the navigation of the Scheduler.
     */
    max: Date;
    /**
     * The height of the events in the **Month** and **Timeline** views, and the height of the **All day** events in the **Day** and **Week** views.
     */
    eventHeight: number;
    /**
     * Specifies the columns width. Applicable for the **Timeline** views.
     */
    columnWidth: number;
    /**
     * If set to `true`, the view will be initially shown in the business-hours mode.
     * By default, the view is displayed in the full-day mode. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    showWorkHours: boolean;
    /**
     * The start time of the view. The Scheduler displays events which start after the start time.
     * Accepts string values in the `HH:mm` format. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    startTime: string;
    /**
     * The end time of the view. The Scheduler displays events which end before the end time.
     * Accepts string values in the `HH:mm` format. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    endTime: string;
    /**
     * The start time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    workDayStart: string;
    /**
     * The end time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    workDayEnd: string;
    /**
     * The start of the work week. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    workWeekStart: Day;
    /**
     * The end of the work week. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    workWeekEnd: Day;
    /**
     * The duration (in minutes) of the time slots. Applicable for the day, week and timeline views.
     */
    slotDuration: number;
    /**
     * The number of divisions of the time slots. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    slotDivisions: number;
    /**
     * A numeric value between 0 and 1 that specifies what percentage of the slot will be filled by the events.
     * Applicable for the **Day** and **Week** views.
     * Defaults to `0.9` (90% fill).
     */
    slotFill: number;
    /**
     * The time to which the view will initially be scrolled.
     * Accepts string values in the `HH:mm` format or a JavaScript `Date`. Applicable for the **Day**, **Week**, and **Timeline** views.
     */
    scrollTime: string | Date;
    /**
     * Specifies the groups of the Scheduler.
     */
    group: Group;
    /**
     * Specifies the resources of the Scheduler.
     */
    resources: Resource[];
    /**
     * Specifies if the Scheduler will display a loading indicator.
     */
    loading: boolean;
    /**
     * Specifies the id of the timezone that will be displayed in the Scheduler.
     * For example, `Europe/Sofia`.
     * Defaults to `Etc/UTC`.
     */
    timezone: string;
    /**
     * The currently selected view.
     */
    selectedView: SchedulerView;
    /**
     * An array of event instances which will be shown by the Scheduler.
     */
    events: any[];
    /**
     * The currently selected date of the Scheduler.
     * Determines the period which is displayed.
     */
    selectedDate: Date;
    /**
     * The names of the model fields from which the Scheduler will read its data
     * ([see example]({% slug databinding_scheduler %}#toc-binding-to-models)).
     */
    modelFields: SchedulerModelFields;
    /**
     * Specifies the Scheduler current time marker settings.
     */
    currentTimeMarker: boolean | CurrentTimeSettings;
    /**
     * Defines a function that is executed for every slot in the view.
     * The function returns a value which is supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     *
     * @example
     * ```ts
     * import { Component, ViewEncapsulation } from '@angular/core';
     * import { SlotClassArgs } from '@progress/kendo-angular-scheduler';
     *
     * _@Component({
     *    selector: 'my-app',
     *    encapsulation: ViewEncapsulation.None,
     *    styles: [`
     *      .evening {
     *        background-color: steelblue;
     *      }
     *    `],
     *    template: `
     *        <kendo-scheduler [slotClass]="getSlotClass"
     *                         style="height: 600px">
     *            <kendo-scheduler-day-view>
     *            </kendo-scheduler-day-view>
     *            <kendo-scheduler-week-view>
     *            </kendo-scheduler-week-view>
     *        </kendo-scheduler>
     *    `
     * })
     * export class AppComponent {
     *   // Use an arrow function to capture the 'this' execution context of the class.
     *   public getSlotClass = (args: SlotClassArgs) => {
     *     const hour = args.start.getHours();
     *
     *     return {
     *       evening: !args.isAllDay && (hour < 6 || hour > 19)
     *     };
     *   }
     * }
     * ```
     */
    slotClass: (args: SlotClassArgs) => any;
    /**
     * Defines a function that is executed for every event in the view.
     * The function returns a value which is supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     *
     * @example
     * ```ts
     * import { Component, ViewEncapsulation } from '@angular/core';
     * import { EventStyleArgs, SchedulerEvent } from '@progress/kendo-angular-scheduler';
     *
     * _@Component({
     *    selector: 'my-app',
     *    encapsulation: ViewEncapsulation.None,
     *    styles: [`
     *      .morning.k-event {
     *        background-color: steelblue;
     *      }
     *    `],
     *    template: `
     *        <kendo-scheduler [selectedDate]="selectedDate"
     *                         [kendoSchedulerBinding]="events"
     *                         [eventClass]="getEventClass"
     *                         style="height: 600px">
     *            <kendo-scheduler-day-view>
     *            </kendo-scheduler-day-view>
     *            <kendo-scheduler-week-view>
     *            </kendo-scheduler-week-view>
     *        </kendo-scheduler>
     *    `
     * })
     * export class AppComponent {
     *   public selectedDate: Date = new Date('2018-10-22T00:00:00');
     *   public events: SchedulerEvent[] = [{
     *       id: 1,
     *       title: 'Breakfast',
     *       start: new Date('2018-10-22T09:00:00'),
     *       end: new Date('2018-10-22T09:30:00'),
     *       type: 'morning'
     *   }];
     *   // Use an arrow function to capture the 'this' execution context of the class.
     *   public getEventClass = (args: EventStyleArgs) => {
     *     return args.event.dataItem.type;
     *   }
     * }
     * ```
     */
    eventClass: (args: EventStyleArgs) => any;
    /**
     * Defines a function that is executed for every event in the view.
     * The function returns a value which is supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     * @example
     * ```ts
     * import { Component } from '@angular/core';
     * import { EventStyleArgs, SchedulerEvent } from '@progress/kendo-angular-scheduler';
     *
     * _@Component({
     *    selector: 'my-app',
     *    template: `
     *        <kendo-scheduler [selectedDate]="selectedDate"
     *                         [kendoSchedulerBinding]="events"
     *                         [eventStyles]="getEventStyles"
     *                         style="height: 600px">
     *            <kendo-scheduler-day-view>
     *            </kendo-scheduler-day-view>
     *            <kendo-scheduler-week-view>
     *            </kendo-scheduler-week-view>
     *        </kendo-scheduler>
     *    `
     * })
     * export class AppComponent {
     *   public selectedDate: Date = new Date('2018-10-22T00:00:00');
     *   public events: SchedulerEvent[] = [{
     *       id: 1,
     *       title: 'Breakfast',
     *       start: new Date('2018-10-22T09:00:00'),
     *       end: new Date('2018-10-22T09:30:00'),
     *       color: 'steelblue'
     *   }];
     *   // Use an arrow function to capture the 'this' execution context of the class.
     *   public getEventStyles = (args: EventStyleArgs) => {
     *     return { backgroundColor: args.event.dataItem.color };
     *   }
     * }
     * ```
     */
    eventStyles: (args: EventStyleArgs) => any;
    /**
     * @hidden
     */
    selectedViewIndexChange: EventEmitter<number>;
    /**
     * Fires when the Scheduler is about to execute a navigation action
     * (a view, date, or focus change).
     */
    navigate: EventEmitter<NavigateEvent>;
    /**
     * Fires when the date range that is displayed in the Scheduler changes.
     */
    dateChange: EventEmitter<DateChangeEvent>;
    /**
     * Fires when a Scheduler view slot is clicked.
     */
    slotClick: EventEmitter<SlotClickEvent>;
    /**
     * Fires when a Scheduler view slot is double-clicked.
     */
    slotDblClick: EventEmitter<SlotClickEvent>;
    /**
     * Fires when the user creates a new event using the `'c'` key.
     * ([see example]({% slug keyboard_navigation_scheduler %})).
     */
    create: EventEmitter<CreateEvent>;
    /**
     * Fires when a Scheduler event is clicked.
     */
    eventClick: EventEmitter<EventClickEvent>;
    /**
     * Fires when a Scheduler event is double-clicked.
     */
    eventDblClick: EventEmitter<EventClickEvent>;
    /**
     * Fires when a key is pressed on a focused Scheduler event.
     */
    eventKeydown: EventEmitter<EventKeydownEvent>;
    /**
     * Fires when the user cancels the editing by clicking the **Cancel** command button.
     */
    cancel: EventEmitter<CancelEvent>;
    /**
     * Fires when the user clicks the **Save** command button to save the changes of the edited event.
     */
    save: EventEmitter<SaveEvent>;
    /**
     * Fires when the user clicks the **Remove** icon of a Scheduler event.
     */
    remove: EventEmitter<RemoveEvent>;
    /**
     * Fires when the user starts resizing a Scheduler event.
     */
    resizeStart: EventEmitter<ResizeStartEvent>;
    /**
     * Fires when the user is resizing a Scheduler event.
     */
    resize: EventEmitter<ResizeEvent>;
    /**
     * Fires when the user stops resizing a Scheduler event.
     */
    resizeEnd: EventEmitter<ResizeEndEvent>;
    /**
     * Fires when the user starts dragging a Scheduler event.
     */
    dragStart: EventEmitter<DragStartEvent>;
    /**
     * Fires when the user is dragging a Scheduler event.
     */
    drag: EventEmitter<DragEvent>;
    /**
     * Fires when the user stops dragging a Scheduler event.
     */
    dragEnd: EventEmitter<DragEndEvent>;
    /**
     * Fires when the user clicks the **PDF export** command button.
     */
    pdfExport: EventEmitter<PDFExportEvent>;
    /**
     * @hidden
     */
    dragEndConfirmed: EventEmitter<DragEndEvent>;
    /**
     * @hidden
     */
    resizeEndConfirmed: EventEmitter<ResizeEndEvent>;
    /**
     * @hidden
     */
    removeConfirmed: EventEmitter<RemoveEvent>;
    /**
     * @hidden
     */
    editDialogTemplate: EditDialogTemplateDirective;
    /**
     * @hidden
     */
    toolbarTemplate: ToolbarTemplateDirective;
    /**
     * @hidden
     */
    dateRangeStream: Observable<DateRange>;
    /**
     * @hidden
     */
    selectedDateStream: Observable<Date>;
    /**
     * @hidden
     */
    views: QueryList<SchedulerView>;
    /**
     * @hidden
     */
    resizeSensor: ResizeSensorComponent;
    /**
     * @hidden
     */
    confirmationDialogContainerRef: ViewContainerRef;
    /**
     * @hidden
     */
    loadingComponent: LoadingComponent;
    /**
     * @hidden
     */
    allDayEventTemplate: QueryList<AllDayEventTemplateDirective>;
    /**
     * @hidden
     */
    eventTemplate: QueryList<EventTemplateDirective>;
    /**
     * @hidden
     */
    timeSlotTemplate: QueryList<TimeSlotTemplateDirective>;
    /**
     * @hidden
     */
    minorTimeHeaderTemplate: QueryList<MinorTimeHeaderTemplateDirective>;
    /**
     * @hidden
     */
    majorTimeHeaderTemplate: QueryList<MajorTimeHeaderTemplateDirective>;
    /**
     * @hidden
     */
    monthDaySlotTemplate: QueryList<MonthDaySlotTemplateDirective>;
    /**
     * @hidden
     */
    dateHeaderTemplate: QueryList<DateHeaderTemplateDirective>;
    /**
     * @hidden
     */
    allDaySlotTemplate: QueryList<AllDaySlotTemplateDirective>;
    /**
     * @hidden
     */
    groupHeaderTemplate: QueryList<GroupHeaderTemplateDirective>;
    /**
     * @hidden
     */
    agendaDateTemplate: QueryList<AgendaDateTemplateDirective>;
    /**
     * @hidden
     */
    agendaTimeTemplate: QueryList<AgendaTimeTemplateDirective>;
    private direction;
    private subs;
    private viewIndex;
    private _selectedDate;
    private _events;
    private _timezone;
    private _modelFields;
    private viewItems;
    private detachElementEventHandlers;
    constructor(wrapper: ElementRef, viewContext: ViewContextService, viewState: ViewStateService, editService: EditService, dialogsService: DialogsService, intlService: IntlService, changeDetector: ChangeDetectorRef, zone: NgZone, pdfService: PDFService, localization: LocalizationService, domEvents: DomEventsService, renderer: Renderer2, focusService: FocusService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onResize(_event?: any): void;
    /**
     * @hidden
     */
    onNavigationAction(action: NavigationAction): boolean;
    /**
     * Creates a popup editor for the new event.
     *
     * @param group - The [`FormGroup`](https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html) that describes
     * the edit form. If called with a data item, the parameter will build the `FormGroup` from the data item fields.
     */
    addEvent(group: FormGroup | any): void;
    /**
     * Switches the specified event in edit mode.
     *
     * @param dataItem - The event that will be switched to edit mode.
     * @param options - An object which contains the form `group` that will be bound in the edit dialog and the current edit `mode`.
     *
     */
    editEvent(dataItem: any, options?: EditEventArgs): void;
    /**
     * Closes the event editor, if open.
     */
    closeEvent(): void;
    /**
     * Returns a flag which indicates if an event is currently edited.
     *
     * @return {boolean} - A flag which indicates if an event is currently edited.
     */
    isEditing(): boolean;
    /**
     * Opens the built-in confirmation dialog for defining the edit mode
     * that will be used when the user edits or removes a recurring event.
     *
     * @param operation - The type of operation that will be confirmed. Has to be either **Edit** or **Remove**.
     *
     * @return {Observable<EditMode>}
     */
    openRecurringConfirmationDialog(operation: CrudOperation): Observable<EditMode>;
    /**
     * Opens the built-in removal confirmation dialog.
     *
     * @return {Observable<boolean>}
     */
    openRemoveConfirmationDialog(): Observable<boolean>;
    /**
     * Saves the current view as PDF.
     */
    saveAsPDF(): void;
    /**
     * Scrolls the view to the specified time.
     */
    scrollToTime(time: string | Date): void;
    /**
     * Returns the current view slot that matches the passed document position.
     *
     * @param x - The x document position.
     * @param y - The y document position.
     *
     * @return {SchedulerSlot} - The slot.
     *
     * {% embed_file drag-and-drop/app.component.ts %}
     * {% embed_file drag-and-drop/draggable.directive.ts %}
     * {% embed_file drag-and-drop/app.module.ts %}
     * {% embed_file shared/main.ts %}
     */
    slotByPosition(x: number, y: number): SchedulerSlot;
    /**
     * Returns the event associated with the specified DOM element, if any.
     *
     * @param element - The DOM element document position.
     * @return the event instance, if found.
     */
    eventFromElement(element: Element): SchedulerEvent;
    /**
     * Gets the currently active event, if any.
     * The active event is the event that can currently receive focus.
     */
    readonly activeEvent: SchedulerEvent;
    /**
     * Focuses the next event or an event at a specified relative position.
     * The `options` parameter can be used to set a positive or negative offset
     * that is relative to the currently focused event.
     * A `nowrap` flag toggles the wrapping to the first or to the last item.
     *
     * @example
     * ```ts-no-run
     * scheduler.focusNext(); // Focuses the next event.
     * scheduler.focusNext({ offset: 1 }); // Focuses the next event.
     * scheduler.focusNext({ offset: -1 }); // Focuses the previous event.
     * scheduler.focusNext({ nowrap: true }); // If the focus is on the last event, does not move the focus to the first event.
     * ```
     *
     * @param position The relative position of the event to focus.
     * @returns `true` if the focused event changed. Otherwise, returns `false`.
     */
    focusNext(position?: FocusPosition): boolean;
    /**
     * Focuses the previous event or an event at a specified relative position.
     * The `options` parameter can be used to set a positive or negative offset
     * that is relative to the currently focused event.
     * A `nowrap` flag toggles the wrapping to the first or to the last item.
     *
     * @example
     * ```ts-no-run
     * scheduler.focusPrev(); // Focuses the previous event
     * scheduler.focusPrev({ nowrap: true }); // Does not move the focus to the last event, if focus is on the first one.
     * ```
     *
     * @param position The relative position of the event to focus.
     * @returns `true` if the focused event changed. Otherwise, returns `false`.
     */
    focusPrev(position: FocusPosition): boolean;
    /**
     * Focuses the last focused event or the Scheduler element, if no events are available.
     */
    focus(): void;
    private isInRange;
    private notifyOptionsChange;
    private readonly workWeek;
    private resetViewIndex;
    private onViewIndexChange;
    private setViewIndex;
    private processEvents;
    private attachEditHandlers;
    private emitCRUDEvent;
    private intlChange;
    private attachElementEventHandlers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SchedulerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SchedulerComponent, "kendo-scheduler", never, { "editable": "editable"; "eventHeight": "eventHeight"; "columnWidth": "columnWidth"; "startTime": "startTime"; "endTime": "endTime"; "workDayStart": "workDayStart"; "workDayEnd": "workDayEnd"; "slotDuration": "slotDuration"; "slotDivisions": "slotDivisions"; "slotFill": "slotFill"; "scrollTime": "scrollTime"; "currentTimeMarker": "currentTimeMarker"; "selectedViewIndex": "selectedViewIndex"; "timezone": "timezone"; "events": "events"; "selectedDate": "selectedDate"; "modelFields": "modelFields"; "min": "min"; "max": "max"; "showWorkHours": "showWorkHours"; "workWeekStart": "workWeekStart"; "workWeekEnd": "workWeekEnd"; "group": "group"; "resources": "resources"; "loading": "loading"; "slotClass": "slotClass"; "eventClass": "eventClass"; "eventStyles": "eventStyles"; }, { "selectedViewIndexChange": "selectedViewIndexChange"; "navigate": "navigate"; "dateChange": "dateChange"; "slotClick": "slotClick"; "slotDblClick": "slotDblClick"; "create": "create"; "eventClick": "eventClick"; "eventDblClick": "eventDblClick"; "eventKeydown": "eventKeydown"; "cancel": "cancel"; "save": "save"; "remove": "remove"; "resizeStart": "resizeStart"; "resize": "resize"; "resizeEnd": "resizeEnd"; "dragStart": "dragStart"; "drag": "drag"; "dragEnd": "dragEnd"; "pdfExport": "pdfExport"; }, ["editDialogTemplate", "toolbarTemplate", "views", "allDayEventTemplate", "eventTemplate", "timeSlotTemplate", "minorTimeHeaderTemplate", "majorTimeHeaderTemplate", "monthDaySlotTemplate", "dateHeaderTemplate", "allDaySlotTemplate", "groupHeaderTemplate", "agendaDateTemplate", "agendaTimeTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzY2hlZHVsZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0LCBWaWV3Q29udGFpbmVyUmVmLCBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBSZXNpemVTZW5zb3JDb21wb25lbnQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1jb21tb24nO1xuaW1wb3J0IHsgRGF5IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGUtbWF0aCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRlQ2hhbmdlRXZlbnQsIE5hdmlnYXRlRXZlbnQsIFNsb3RDbGlja0V2ZW50LCBFdmVudENsaWNrRXZlbnQgfSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgeyBUb29sYmFyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3Rvb2xiYXIvdG9vbGJhci10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlLCBHcm91cCwgTmF2aWdhdGlvbkFjdGlvbiwgUmVzb3VyY2UsIFNjaGVkdWxlck1vZGVsRmllbGRzLCBTY2hlZHVsZXJWaWV3LCBFZGl0TW9kZSwgQ3J1ZE9wZXJhdGlvbiwgRWRpdGFibGVTZXR0aW5ncywgQ3VycmVudFRpbWVTZXR0aW5ncywgU2xvdENsYXNzQXJncywgRXZlbnRTdHlsZUFyZ3MsIFNjaGVkdWxlclNsb3QgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEFnZW5kYURhdGVUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdmlld3MvdGVtcGxhdGVzL2FnZW5kYS1kYXRlLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBZ2VuZGFUaW1lVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3ZpZXdzL3RlbXBsYXRlcy9hZ2VuZGEtdGltZS10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQWxsRGF5RXZlbnRUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdmlld3MvdGVtcGxhdGVzL2FsbC1kYXktZXZlbnQtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFsbERheVNsb3RUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdmlld3MvdGVtcGxhdGVzL2FsbC1kYXktc2xvdC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGF0ZUhlYWRlclRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi92aWV3cy90ZW1wbGF0ZXMvZGF0ZS1oZWFkZXItdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEV2ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3ZpZXdzL3RlbXBsYXRlcy9ldmVudC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JvdXBIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdmlld3MvdGVtcGxhdGVzL2dyb3VwLWhlYWRlci10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWFqb3JUaW1lSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3ZpZXdzL3RlbXBsYXRlcy9tYWpvci10aW1lLWhlYWRlci10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTWlub3JUaW1lSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3ZpZXdzL3RlbXBsYXRlcy9taW5vci10aW1lLWhlYWRlci10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTW9udGhEYXlTbG90VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3ZpZXdzL3RlbXBsYXRlcy9tb250aC1kYXktc2xvdC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVGltZVNsb3RUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdmlld3MvdGVtcGxhdGVzL3RpbWUtc2xvdC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVmlld0NvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi92aWV3cy92aWV3LWNvbnRleHQuc2VydmljZSc7XG5pbXBvcnQgeyBWaWV3U3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi92aWV3cy92aWV3LXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRWRpdFNlcnZpY2UgfSBmcm9tICcuL2VkaXRpbmcvZWRpdC5zZXJ2aWNlJztcbmltcG9ydCB7IEVkaXREaWFsb2dUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZWRpdGluZy9lZGl0LWRpYWxvZy10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ2FuY2VsRXZlbnQsIFNhdmVFdmVudCwgUmVtb3ZlRXZlbnQsIFJlc2l6ZVN0YXJ0RXZlbnQsIFJlc2l6ZUV2ZW50LCBSZXNpemVFbmRFdmVudCwgRHJhZ1N0YXJ0RXZlbnQsIERyYWdFdmVudCwgRHJhZ0VuZEV2ZW50IH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRGlhbG9nc1NlcnZpY2UgfSBmcm9tICcuL2VkaXRpbmcvZGlhbG9ncy5zZXJ2aWNlJztcbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBFZGl0RXZlbnRBcmdzIH0gZnJvbSAnLi90eXBlcy9lZGl0LWV2ZW50LWFyZ3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBERlNlcnZpY2UgfSBmcm9tICcuL3BkZi9wZGYuc2VydmljZSc7XG5pbXBvcnQgeyBQREZFeHBvcnRFdmVudCB9IGZyb20gJy4vcGRmL3BkZi1leHBvcnQtZXZlbnQnO1xuaW1wb3J0IHsgTG9hZGluZ0NvbXBvbmVudCB9IGZyb20gJy4vbG9hZGluZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRm9jdXNTZXJ2aWNlLCBGb2N1c1Bvc2l0aW9uIH0gZnJvbSAnLi9uYXZpZ2F0aW9uJztcbmltcG9ydCB7IERvbUV2ZW50c1NlcnZpY2UgfSBmcm9tICcuL3ZpZXdzL2NvbW1vbi9kb20tZXZlbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3JlYXRlRXZlbnQgfSBmcm9tICcuL2V2ZW50cy9jcmVhdGUtZXZlbnQnO1xuaW1wb3J0IHsgU2NoZWR1bGVyRXZlbnQgfSBmcm9tICcuL3R5cGVzL3NjaGVkdWxlci1ldmVudCc7XG5pbXBvcnQgeyBFdmVudEtleWRvd25FdmVudCB9IGZyb20gJy4vZXZlbnRzL2V2ZW50LWtleWRvd24tZXZlbnQnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgU2NoZWR1bGVyIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19zY2hlZHVsZXIgJX0pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0cy1wcmV2aWV3XG4gKiBfQENvbXBvbmVudCh7XG4gKiAgICBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiAgICB0ZW1wbGF0ZTogYFxuICogICAgICAgIDxrZW5kby1zY2hlZHVsZXIgc3R5bGU9XCJoZWlnaHQ6IDYwMHB4XCI+XG4gKiAgICAgICAgICAgIDxrZW5kby1zY2hlZHVsZXItZGF5LXZpZXc+XG4gKiAgICAgICAgICAgIDwva2VuZG8tc2NoZWR1bGVyLWRheS12aWV3PlxuICogICAgICAgICAgICA8a2VuZG8tc2NoZWR1bGVyLXdlZWstdmlldz5cbiAqICAgICAgICAgICAgPC9rZW5kby1zY2hlZHVsZXItd2Vlay12aWV3PlxuICogICAgICAgIDwva2VuZG8tc2NoZWR1bGVyPlxuICogICAgYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7fVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNjaGVkdWxlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgICB3cmFwcGVyOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgdmlld0NvbnRleHQ7XG4gICAgcHJpdmF0ZSB2aWV3U3RhdGU7XG4gICAgcHJpdmF0ZSBlZGl0U2VydmljZTtcbiAgICBwcml2YXRlIGRpYWxvZ3NTZXJ2aWNlO1xuICAgIHByaXZhdGUgaW50bFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgcHJpdmF0ZSBwZGZTZXJ2aWNlO1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uO1xuICAgIHByaXZhdGUgZG9tRXZlbnRzO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBmb2N1c1NlcnZpY2U7XG4gICAgaG9zdENsYXNzZXM6IGJvb2xlYW47XG4gICAgcnRsOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRpcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHZpZXcuXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgc2VsZWN0ZWQgdmlldyBpbmRleCBpcyBgMGAgYW5kXG4gICAgICogaW5kaWNhdGVzIHRoYXQgdGhlIGZpcnN0IGRlY2xhcmVkIHZpZXcgaXMgdmlzaWJsZS5cbiAgICAgKi9cbiAgICBzZWxlY3RlZFZpZXdJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgU2NoZWR1bGVyIGlzIGVkaXRhYmxlLlxuICAgICAqL1xuICAgIGVkaXRhYmxlOiBib29sZWFuIHwgRWRpdGFibGVTZXR0aW5ncztcbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSBkYXRlIHRoYXQgY2FuIGJlIHNlbGVjdGVkIGJ5IHVzaW5nIHRoZSBuYXZpZ2F0aW9uIG9mIHRoZSBTY2hlZHVsZXIuXG4gICAgICovXG4gICAgbWluOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIGRhdGUgdGhhdCBjYW4gYmUgc2VsZWN0ZWQgYnkgdXNpbmcgdGhlIG5hdmlnYXRpb24gb2YgdGhlIFNjaGVkdWxlci5cbiAgICAgKi9cbiAgICBtYXg6IERhdGU7XG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgZXZlbnRzIGluIHRoZSAqKk1vbnRoKiogYW5kICoqVGltZWxpbmUqKiB2aWV3cywgYW5kIHRoZSBoZWlnaHQgb2YgdGhlICoqQWxsIGRheSoqIGV2ZW50cyBpbiB0aGUgKipEYXkqKiBhbmQgKipXZWVrKiogdmlld3MuXG4gICAgICovXG4gICAgZXZlbnRIZWlnaHQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGNvbHVtbnMgd2lkdGguIEFwcGxpY2FibGUgZm9yIHRoZSAqKlRpbWVsaW5lKiogdmlld3MuXG4gICAgICovXG4gICAgY29sdW1uV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgdmlldyB3aWxsIGJlIGluaXRpYWxseSBzaG93biBpbiB0aGUgYnVzaW5lc3MtaG91cnMgbW9kZS5cbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgdmlldyBpcyBkaXNwbGF5ZWQgaW4gdGhlIGZ1bGwtZGF5IG1vZGUuIEFwcGxpY2FibGUgZm9yIHRoZSAqKkRheSoqLCAqKldlZWsqKiwgYW5kICoqVGltZWxpbmUqKiB2aWV3cy5cbiAgICAgKi9cbiAgICBzaG93V29ya0hvdXJzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCB0aW1lIG9mIHRoZSB2aWV3LiBUaGUgU2NoZWR1bGVyIGRpc3BsYXlzIGV2ZW50cyB3aGljaCBzdGFydCBhZnRlciB0aGUgc3RhcnQgdGltZS5cbiAgICAgKiBBY2NlcHRzIHN0cmluZyB2YWx1ZXMgaW4gdGhlIGBISDptbWAgZm9ybWF0LiBBcHBsaWNhYmxlIGZvciB0aGUgKipEYXkqKiwgKipXZWVrKiosIGFuZCAqKlRpbWVsaW5lKiogdmlld3MuXG4gICAgICovXG4gICAgc3RhcnRUaW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGVuZCB0aW1lIG9mIHRoZSB2aWV3LiBUaGUgU2NoZWR1bGVyIGRpc3BsYXlzIGV2ZW50cyB3aGljaCBlbmQgYmVmb3JlIHRoZSBlbmQgdGltZS5cbiAgICAgKiBBY2NlcHRzIHN0cmluZyB2YWx1ZXMgaW4gdGhlIGBISDptbWAgZm9ybWF0LiBBcHBsaWNhYmxlIGZvciB0aGUgKipEYXkqKiwgKipXZWVrKiosIGFuZCAqKlRpbWVsaW5lKiogdmlld3MuXG4gICAgICovXG4gICAgZW5kVGltZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCB0aW1lIG9mIHRoZSB2aWV3IHdoZW4gYHNob3dXb3JrSG91cnNgIGlzIHNldCB0byBgdHJ1ZWAuXG4gICAgICogQWNjZXB0cyBzdHJpbmcgdmFsdWVzIGluIHRoZSBgSEg6bW1gIGZvcm1hdC4gQXBwbGljYWJsZSBmb3IgdGhlICoqRGF5KiosICoqV2VlayoqLCBhbmQgKipUaW1lbGluZSoqIHZpZXdzLlxuICAgICAqL1xuICAgIHdvcmtEYXlTdGFydDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBlbmQgdGltZSBvZiB0aGUgdmlldyB3aGVuIGBzaG93V29ya0hvdXJzYCBpcyBzZXQgdG8gYHRydWVgLlxuICAgICAqIEFjY2VwdHMgc3RyaW5nIHZhbHVlcyBpbiB0aGUgYEhIOm1tYCBmb3JtYXQuIEFwcGxpY2FibGUgZm9yIHRoZSAqKkRheSoqLCAqKldlZWsqKiwgYW5kICoqVGltZWxpbmUqKiB2aWV3cy5cbiAgICAgKi9cbiAgICB3b3JrRGF5RW5kOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHN0YXJ0IG9mIHRoZSB3b3JrIHdlZWsuIEFwcGxpY2FibGUgZm9yIHRoZSAqKkRheSoqLCAqKldlZWsqKiwgYW5kICoqVGltZWxpbmUqKiB2aWV3cy5cbiAgICAgKi9cbiAgICB3b3JrV2Vla1N0YXJ0OiBEYXk7XG4gICAgLyoqXG4gICAgICogVGhlIGVuZCBvZiB0aGUgd29yayB3ZWVrLiBBcHBsaWNhYmxlIGZvciB0aGUgKipEYXkqKiwgKipXZWVrKiosIGFuZCAqKlRpbWVsaW5lKiogdmlld3MuXG4gICAgICovXG4gICAgd29ya1dlZWtFbmQ6IERheTtcbiAgICAvKipcbiAgICAgKiBUaGUgZHVyYXRpb24gKGluIG1pbnV0ZXMpIG9mIHRoZSB0aW1lIHNsb3RzLiBBcHBsaWNhYmxlIGZvciB0aGUgZGF5LCB3ZWVrIGFuZCB0aW1lbGluZSB2aWV3cy5cbiAgICAgKi9cbiAgICBzbG90RHVyYXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRpdmlzaW9ucyBvZiB0aGUgdGltZSBzbG90cy4gQXBwbGljYWJsZSBmb3IgdGhlICoqRGF5KiosICoqV2VlayoqLCBhbmQgKipUaW1lbGluZSoqIHZpZXdzLlxuICAgICAqL1xuICAgIHNsb3REaXZpc2lvbnM6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBBIG51bWVyaWMgdmFsdWUgYmV0d2VlbiAwIGFuZCAxIHRoYXQgc3BlY2lmaWVzIHdoYXQgcGVyY2VudGFnZSBvZiB0aGUgc2xvdCB3aWxsIGJlIGZpbGxlZCBieSB0aGUgZXZlbnRzLlxuICAgICAqIEFwcGxpY2FibGUgZm9yIHRoZSAqKkRheSoqIGFuZCAqKldlZWsqKiB2aWV3cy5cbiAgICAgKiBEZWZhdWx0cyB0byBgMC45YCAoOTAlIGZpbGwpLlxuICAgICAqL1xuICAgIHNsb3RGaWxsOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgdG8gd2hpY2ggdGhlIHZpZXcgd2lsbCBpbml0aWFsbHkgYmUgc2Nyb2xsZWQuXG4gICAgICogQWNjZXB0cyBzdHJpbmcgdmFsdWVzIGluIHRoZSBgSEg6bW1gIGZvcm1hdCBvciBhIEphdmFTY3JpcHQgYERhdGVgLiBBcHBsaWNhYmxlIGZvciB0aGUgKipEYXkqKiwgKipXZWVrKiosIGFuZCAqKlRpbWVsaW5lKiogdmlld3MuXG4gICAgICovXG4gICAgc2Nyb2xsVGltZTogc3RyaW5nIHwgRGF0ZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGdyb3VwcyBvZiB0aGUgU2NoZWR1bGVyLlxuICAgICAqL1xuICAgIGdyb3VwOiBHcm91cDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHJlc291cmNlcyBvZiB0aGUgU2NoZWR1bGVyLlxuICAgICAqL1xuICAgIHJlc291cmNlczogUmVzb3VyY2VbXTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIFNjaGVkdWxlciB3aWxsIGRpc3BsYXkgYSBsb2FkaW5nIGluZGljYXRvci5cbiAgICAgKi9cbiAgICBsb2FkaW5nOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaWQgb2YgdGhlIHRpbWV6b25lIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIFNjaGVkdWxlci5cbiAgICAgKiBGb3IgZXhhbXBsZSwgYEV1cm9wZS9Tb2ZpYWAuXG4gICAgICogRGVmYXVsdHMgdG8gYEV0Yy9VVENgLlxuICAgICAqL1xuICAgIHRpbWV6b25lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnRseSBzZWxlY3RlZCB2aWV3LlxuICAgICAqL1xuICAgIHNlbGVjdGVkVmlldzogU2NoZWR1bGVyVmlldztcbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBldmVudCBpbnN0YW5jZXMgd2hpY2ggd2lsbCBiZSBzaG93biBieSB0aGUgU2NoZWR1bGVyLlxuICAgICAqL1xuICAgIGV2ZW50czogYW55W107XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnRseSBzZWxlY3RlZCBkYXRlIG9mIHRoZSBTY2hlZHVsZXIuXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgcGVyaW9kIHdoaWNoIGlzIGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBzZWxlY3RlZERhdGU6IERhdGU7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWVzIG9mIHRoZSBtb2RlbCBmaWVsZHMgZnJvbSB3aGljaCB0aGUgU2NoZWR1bGVyIHdpbGwgcmVhZCBpdHMgZGF0YVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGF0YWJpbmRpbmdfc2NoZWR1bGVyICV9I3RvYy1iaW5kaW5nLXRvLW1vZGVscykpLlxuICAgICAqL1xuICAgIG1vZGVsRmllbGRzOiBTY2hlZHVsZXJNb2RlbEZpZWxkcztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIFNjaGVkdWxlciBjdXJyZW50IHRpbWUgbWFya2VyIHNldHRpbmdzLlxuICAgICAqL1xuICAgIGN1cnJlbnRUaW1lTWFya2VyOiBib29sZWFuIHwgQ3VycmVudFRpbWVTZXR0aW5ncztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBmb3IgZXZlcnkgc2xvdCBpbiB0aGUgdmlldy5cbiAgICAgKiBUaGUgZnVuY3Rpb24gcmV0dXJucyBhIHZhbHVlIHdoaWNoIGlzIHN1cHBvcnRlZCBieSBbYG5nQ2xhc3NgXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWyduZ2NsYXNzYXBpJ10gfX0pLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGltcG9ydCB7IENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAgICAgKiBpbXBvcnQgeyBTbG90Q2xhc3NBcmdzIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItc2NoZWR1bGVyJztcbiAgICAgKlxuICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgKiAgICBzZWxlY3RvcjogJ215LWFwcCcsXG4gICAgICogICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgICAgKiAgICBzdHlsZXM6IFtgXG4gICAgICogICAgICAuZXZlbmluZyB7XG4gICAgICogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHN0ZWVsYmx1ZTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgICBgXSxcbiAgICAgKiAgICB0ZW1wbGF0ZTogYFxuICAgICAqICAgICAgICA8a2VuZG8tc2NoZWR1bGVyIFtzbG90Q2xhc3NdPVwiZ2V0U2xvdENsYXNzXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cImhlaWdodDogNjAwcHhcIj5cbiAgICAgKiAgICAgICAgICAgIDxrZW5kby1zY2hlZHVsZXItZGF5LXZpZXc+XG4gICAgICogICAgICAgICAgICA8L2tlbmRvLXNjaGVkdWxlci1kYXktdmlldz5cbiAgICAgKiAgICAgICAgICAgIDxrZW5kby1zY2hlZHVsZXItd2Vlay12aWV3PlxuICAgICAqICAgICAgICAgICAgPC9rZW5kby1zY2hlZHVsZXItd2Vlay12aWV3PlxuICAgICAqICAgICAgICA8L2tlbmRvLXNjaGVkdWxlcj5cbiAgICAgKiAgICBgXG4gICAgICogfSlcbiAgICAgKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICAgKiAgIC8vIFVzZSBhbiBhcnJvdyBmdW5jdGlvbiB0byBjYXB0dXJlIHRoZSAndGhpcycgZXhlY3V0aW9uIGNvbnRleHQgb2YgdGhlIGNsYXNzLlxuICAgICAqICAgcHVibGljIGdldFNsb3RDbGFzcyA9IChhcmdzOiBTbG90Q2xhc3NBcmdzKSA9PiB7XG4gICAgICogICAgIGNvbnN0IGhvdXIgPSBhcmdzLnN0YXJ0LmdldEhvdXJzKCk7XG4gICAgICpcbiAgICAgKiAgICAgcmV0dXJuIHtcbiAgICAgKiAgICAgICBldmVuaW5nOiAhYXJncy5pc0FsbERheSAmJiAoaG91ciA8IDYgfHwgaG91ciA+IDE5KVxuICAgICAqICAgICB9O1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzbG90Q2xhc3M6IChhcmdzOiBTbG90Q2xhc3NBcmdzKSA9PiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGV2ZXJ5IGV2ZW50IGluIHRoZSB2aWV3LlxuICAgICAqIFRoZSBmdW5jdGlvbiByZXR1cm5zIGEgdmFsdWUgd2hpY2ggaXMgc3VwcG9ydGVkIGJ5IFtgbmdDbGFzc2BdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nY2xhc3NhcGknXSB9fSkuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzXG4gICAgICogaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICAgICAqIGltcG9ydCB7IEV2ZW50U3R5bGVBcmdzLCBTY2hlZHVsZXJFdmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLXNjaGVkdWxlcic7XG4gICAgICpcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgICogICAgc3R5bGVzOiBbYFxuICAgICAqICAgICAgLm1vcm5pbmcuay1ldmVudCB7XG4gICAgICogICAgICAgIGJhY2tncm91bmQtY29sb3I6IHN0ZWVsYmx1ZTtcbiAgICAgKiAgICAgIH1cbiAgICAgKiAgICBgXSxcbiAgICAgKiAgICB0ZW1wbGF0ZTogYFxuICAgICAqICAgICAgICA8a2VuZG8tc2NoZWR1bGVyIFtzZWxlY3RlZERhdGVdPVwic2VsZWN0ZWREYXRlXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBba2VuZG9TY2hlZHVsZXJCaW5kaW5nXT1cImV2ZW50c1wiXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgW2V2ZW50Q2xhc3NdPVwiZ2V0RXZlbnRDbGFzc1wiXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJoZWlnaHQ6IDYwMHB4XCI+XG4gICAgICogICAgICAgICAgICA8a2VuZG8tc2NoZWR1bGVyLWRheS12aWV3PlxuICAgICAqICAgICAgICAgICAgPC9rZW5kby1zY2hlZHVsZXItZGF5LXZpZXc+XG4gICAgICogICAgICAgICAgICA8a2VuZG8tc2NoZWR1bGVyLXdlZWstdmlldz5cbiAgICAgKiAgICAgICAgICAgIDwva2VuZG8tc2NoZWR1bGVyLXdlZWstdmlldz5cbiAgICAgKiAgICAgICAgPC9rZW5kby1zY2hlZHVsZXI+XG4gICAgICogICAgYFxuICAgICAqIH0pXG4gICAgICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gICAgICogICBwdWJsaWMgc2VsZWN0ZWREYXRlOiBEYXRlID0gbmV3IERhdGUoJzIwMTgtMTAtMjJUMDA6MDA6MDAnKTtcbiAgICAgKiAgIHB1YmxpYyBldmVudHM6IFNjaGVkdWxlckV2ZW50W10gPSBbe1xuICAgICAqICAgICAgIGlkOiAxLFxuICAgICAqICAgICAgIHRpdGxlOiAnQnJlYWtmYXN0JyxcbiAgICAgKiAgICAgICBzdGFydDogbmV3IERhdGUoJzIwMTgtMTAtMjJUMDk6MDA6MDAnKSxcbiAgICAgKiAgICAgICBlbmQ6IG5ldyBEYXRlKCcyMDE4LTEwLTIyVDA5OjMwOjAwJyksXG4gICAgICogICAgICAgdHlwZTogJ21vcm5pbmcnXG4gICAgICogICB9XTtcbiAgICAgKiAgIC8vIFVzZSBhbiBhcnJvdyBmdW5jdGlvbiB0byBjYXB0dXJlIHRoZSAndGhpcycgZXhlY3V0aW9uIGNvbnRleHQgb2YgdGhlIGNsYXNzLlxuICAgICAqICAgcHVibGljIGdldEV2ZW50Q2xhc3MgPSAoYXJnczogRXZlbnRTdHlsZUFyZ3MpID0+IHtcbiAgICAgKiAgICAgcmV0dXJuIGFyZ3MuZXZlbnQuZGF0YUl0ZW0udHlwZTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXZlbnRDbGFzczogKGFyZ3M6IEV2ZW50U3R5bGVBcmdzKSA9PiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGV2ZXJ5IGV2ZW50IGluIHRoZSB2aWV3LlxuICAgICAqIFRoZSBmdW5jdGlvbiByZXR1cm5zIGEgdmFsdWUgd2hpY2ggaXMgc3VwcG9ydGVkIGJ5IFtgbmdTdHlsZWBdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nc3R5bGVhcGknXSB9fSkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGB0c1xuICAgICAqIGltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICAgICAqIGltcG9ydCB7IEV2ZW50U3R5bGVBcmdzLCBTY2hlZHVsZXJFdmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLXNjaGVkdWxlcic7XG4gICAgICpcbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgIHRlbXBsYXRlOiBgXG4gICAgICogICAgICAgIDxrZW5kby1zY2hlZHVsZXIgW3NlbGVjdGVkRGF0ZV09XCJzZWxlY3RlZERhdGVcIlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIFtrZW5kb1NjaGVkdWxlckJpbmRpbmddPVwiZXZlbnRzXCJcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBbZXZlbnRTdHlsZXNdPVwiZ2V0RXZlbnRTdHlsZXNcIlxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPVwiaGVpZ2h0OiA2MDBweFwiPlxuICAgICAqICAgICAgICAgICAgPGtlbmRvLXNjaGVkdWxlci1kYXktdmlldz5cbiAgICAgKiAgICAgICAgICAgIDwva2VuZG8tc2NoZWR1bGVyLWRheS12aWV3PlxuICAgICAqICAgICAgICAgICAgPGtlbmRvLXNjaGVkdWxlci13ZWVrLXZpZXc+XG4gICAgICogICAgICAgICAgICA8L2tlbmRvLXNjaGVkdWxlci13ZWVrLXZpZXc+XG4gICAgICogICAgICAgIDwva2VuZG8tc2NoZWR1bGVyPlxuICAgICAqICAgIGBcbiAgICAgKiB9KVxuICAgICAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgICAqICAgcHVibGljIHNlbGVjdGVkRGF0ZTogRGF0ZSA9IG5ldyBEYXRlKCcyMDE4LTEwLTIyVDAwOjAwOjAwJyk7XG4gICAgICogICBwdWJsaWMgZXZlbnRzOiBTY2hlZHVsZXJFdmVudFtdID0gW3tcbiAgICAgKiAgICAgICBpZDogMSxcbiAgICAgKiAgICAgICB0aXRsZTogJ0JyZWFrZmFzdCcsXG4gICAgICogICAgICAgc3RhcnQ6IG5ldyBEYXRlKCcyMDE4LTEwLTIyVDA5OjAwOjAwJyksXG4gICAgICogICAgICAgZW5kOiBuZXcgRGF0ZSgnMjAxOC0xMC0yMlQwOTozMDowMCcpLFxuICAgICAqICAgICAgIGNvbG9yOiAnc3RlZWxibHVlJ1xuICAgICAqICAgfV07XG4gICAgICogICAvLyBVc2UgYW4gYXJyb3cgZnVuY3Rpb24gdG8gY2FwdHVyZSB0aGUgJ3RoaXMnIGV4ZWN1dGlvbiBjb250ZXh0IG9mIHRoZSBjbGFzcy5cbiAgICAgKiAgIHB1YmxpYyBnZXRFdmVudFN0eWxlcyA9IChhcmdzOiBFdmVudFN0eWxlQXJncykgPT4ge1xuICAgICAqICAgICByZXR1cm4geyBiYWNrZ3JvdW5kQ29sb3I6IGFyZ3MuZXZlbnQuZGF0YUl0ZW0uY29sb3IgfTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXZlbnRTdHlsZXM6IChhcmdzOiBFdmVudFN0eWxlQXJncykgPT4gYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZWxlY3RlZFZpZXdJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgU2NoZWR1bGVyIGlzIGFib3V0IHRvIGV4ZWN1dGUgYSBuYXZpZ2F0aW9uIGFjdGlvblxuICAgICAqIChhIHZpZXcsIGRhdGUsIG9yIGZvY3VzIGNoYW5nZSkuXG4gICAgICovXG4gICAgbmF2aWdhdGU6IEV2ZW50RW1pdHRlcjxOYXZpZ2F0ZUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBkYXRlIHJhbmdlIHRoYXQgaXMgZGlzcGxheWVkIGluIHRoZSBTY2hlZHVsZXIgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBkYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZUNoYW5nZUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGEgU2NoZWR1bGVyIHZpZXcgc2xvdCBpcyBjbGlja2VkLlxuICAgICAqL1xuICAgIHNsb3RDbGljazogRXZlbnRFbWl0dGVyPFNsb3RDbGlja0V2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGEgU2NoZWR1bGVyIHZpZXcgc2xvdCBpcyBkb3VibGUtY2xpY2tlZC5cbiAgICAgKi9cbiAgICBzbG90RGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjxTbG90Q2xpY2tFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjcmVhdGVzIGEgbmV3IGV2ZW50IHVzaW5nIHRoZSBgJ2MnYCBrZXkuXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBrZXlib2FyZF9uYXZpZ2F0aW9uX3NjaGVkdWxlciAlfSkpLlxuICAgICAqL1xuICAgIGNyZWF0ZTogRXZlbnRFbWl0dGVyPENyZWF0ZUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGEgU2NoZWR1bGVyIGV2ZW50IGlzIGNsaWNrZWQuXG4gICAgICovXG4gICAgZXZlbnRDbGljazogRXZlbnRFbWl0dGVyPEV2ZW50Q2xpY2tFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBhIFNjaGVkdWxlciBldmVudCBpcyBkb3VibGUtY2xpY2tlZC5cbiAgICAgKi9cbiAgICBldmVudERibENsaWNrOiBFdmVudEVtaXR0ZXI8RXZlbnRDbGlja0V2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGEga2V5IGlzIHByZXNzZWQgb24gYSBmb2N1c2VkIFNjaGVkdWxlciBldmVudC5cbiAgICAgKi9cbiAgICBldmVudEtleWRvd246IEV2ZW50RW1pdHRlcjxFdmVudEtleWRvd25FdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjYW5jZWxzIHRoZSBlZGl0aW5nIGJ5IGNsaWNraW5nIHRoZSAqKkNhbmNlbCoqIGNvbW1hbmQgYnV0dG9uLlxuICAgICAqL1xuICAgIGNhbmNlbDogRXZlbnRFbWl0dGVyPENhbmNlbEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgKipTYXZlKiogY29tbWFuZCBidXR0b24gdG8gc2F2ZSB0aGUgY2hhbmdlcyBvZiB0aGUgZWRpdGVkIGV2ZW50LlxuICAgICAqL1xuICAgIHNhdmU6IEV2ZW50RW1pdHRlcjxTYXZlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSAqKlJlbW92ZSoqIGljb24gb2YgYSBTY2hlZHVsZXIgZXZlbnQuXG4gICAgICovXG4gICAgcmVtb3ZlOiBFdmVudEVtaXR0ZXI8UmVtb3ZlRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgc3RhcnRzIHJlc2l6aW5nIGEgU2NoZWR1bGVyIGV2ZW50LlxuICAgICAqL1xuICAgIHJlc2l6ZVN0YXJ0OiBFdmVudEVtaXR0ZXI8UmVzaXplU3RhcnRFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBpcyByZXNpemluZyBhIFNjaGVkdWxlciBldmVudC5cbiAgICAgKi9cbiAgICByZXNpemU6IEV2ZW50RW1pdHRlcjxSZXNpemVFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBzdG9wcyByZXNpemluZyBhIFNjaGVkdWxlciBldmVudC5cbiAgICAgKi9cbiAgICByZXNpemVFbmQ6IEV2ZW50RW1pdHRlcjxSZXNpemVFbmRFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBzdGFydHMgZHJhZ2dpbmcgYSBTY2hlZHVsZXIgZXZlbnQuXG4gICAgICovXG4gICAgZHJhZ1N0YXJ0OiBFdmVudEVtaXR0ZXI8RHJhZ1N0YXJ0RXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHVzZXIgaXMgZHJhZ2dpbmcgYSBTY2hlZHVsZXIgZXZlbnQuXG4gICAgICovXG4gICAgZHJhZzogRXZlbnRFbWl0dGVyPERyYWdFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBzdG9wcyBkcmFnZ2luZyBhIFNjaGVkdWxlciBldmVudC5cbiAgICAgKi9cbiAgICBkcmFnRW5kOiBFdmVudEVtaXR0ZXI8RHJhZ0VuZEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgKipQREYgZXhwb3J0KiogY29tbWFuZCBidXR0b24uXG4gICAgICovXG4gICAgcGRmRXhwb3J0OiBFdmVudEVtaXR0ZXI8UERGRXhwb3J0RXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkcmFnRW5kQ29uZmlybWVkOiBFdmVudEVtaXR0ZXI8RHJhZ0VuZEV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVzaXplRW5kQ29uZmlybWVkOiBFdmVudEVtaXR0ZXI8UmVzaXplRW5kRXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZW1vdmVDb25maXJtZWQ6IEV2ZW50RW1pdHRlcjxSZW1vdmVFdmVudD47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGVkaXREaWFsb2dUZW1wbGF0ZTogRWRpdERpYWxvZ1RlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0b29sYmFyVGVtcGxhdGU6IFRvb2xiYXJUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGF0ZVJhbmdlU3RyZWFtOiBPYnNlcnZhYmxlPERhdGVSYW5nZT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNlbGVjdGVkRGF0ZVN0cmVhbTogT2JzZXJ2YWJsZTxEYXRlPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdmlld3M6IFF1ZXJ5TGlzdDxTY2hlZHVsZXJWaWV3PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVzaXplU2Vuc29yOiBSZXNpemVTZW5zb3JDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbmZpcm1hdGlvbkRpYWxvZ0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbG9hZGluZ0NvbXBvbmVudDogTG9hZGluZ0NvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYWxsRGF5RXZlbnRUZW1wbGF0ZTogUXVlcnlMaXN0PEFsbERheUV2ZW50VGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBldmVudFRlbXBsYXRlOiBRdWVyeUxpc3Q8RXZlbnRUZW1wbGF0ZURpcmVjdGl2ZT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRpbWVTbG90VGVtcGxhdGU6IFF1ZXJ5TGlzdDxUaW1lU2xvdFRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbWlub3JUaW1lSGVhZGVyVGVtcGxhdGU6IFF1ZXJ5TGlzdDxNaW5vclRpbWVIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG1ham9yVGltZUhlYWRlclRlbXBsYXRlOiBRdWVyeUxpc3Q8TWFqb3JUaW1lSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBtb250aERheVNsb3RUZW1wbGF0ZTogUXVlcnlMaXN0PE1vbnRoRGF5U2xvdFRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGF0ZUhlYWRlclRlbXBsYXRlOiBRdWVyeUxpc3Q8RGF0ZUhlYWRlclRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYWxsRGF5U2xvdFRlbXBsYXRlOiBRdWVyeUxpc3Q8QWxsRGF5U2xvdFRlbXBsYXRlRGlyZWN0aXZlPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ3JvdXBIZWFkZXJUZW1wbGF0ZTogUXVlcnlMaXN0PEdyb3VwSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhZ2VuZGFEYXRlVGVtcGxhdGU6IFF1ZXJ5TGlzdDxBZ2VuZGFEYXRlVGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhZ2VuZGFUaW1lVGVtcGxhdGU6IFF1ZXJ5TGlzdDxBZ2VuZGFUaW1lVGVtcGxhdGVEaXJlY3RpdmU+O1xuICAgIHByaXZhdGUgZGlyZWN0aW9uO1xuICAgIHByaXZhdGUgc3VicztcbiAgICBwcml2YXRlIHZpZXdJbmRleDtcbiAgICBwcml2YXRlIF9zZWxlY3RlZERhdGU7XG4gICAgcHJpdmF0ZSBfZXZlbnRzO1xuICAgIHByaXZhdGUgX3RpbWV6b25lO1xuICAgIHByaXZhdGUgX21vZGVsRmllbGRzO1xuICAgIHByaXZhdGUgdmlld0l0ZW1zO1xuICAgIHByaXZhdGUgZGV0YWNoRWxlbWVudEV2ZW50SGFuZGxlcnM7XG4gICAgY29uc3RydWN0b3Iod3JhcHBlcjogRWxlbWVudFJlZiwgdmlld0NvbnRleHQ6IFZpZXdDb250ZXh0U2VydmljZSwgdmlld1N0YXRlOiBWaWV3U3RhdGVTZXJ2aWNlLCBlZGl0U2VydmljZTogRWRpdFNlcnZpY2UsIGRpYWxvZ3NTZXJ2aWNlOiBEaWFsb2dzU2VydmljZSwgaW50bFNlcnZpY2U6IEludGxTZXJ2aWNlLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHpvbmU6IE5nWm9uZSwgcGRmU2VydmljZTogUERGU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBkb21FdmVudHM6IERvbUV2ZW50c1NlcnZpY2UsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25SZXNpemUoX2V2ZW50PzogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25OYXZpZ2F0aW9uQWN0aW9uKGFjdGlvbjogTmF2aWdhdGlvbkFjdGlvbik6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBvcHVwIGVkaXRvciBmb3IgdGhlIG5ldyBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBncm91cCAtIFRoZSBbYEZvcm1Hcm91cGBdKGh0dHBzOi8vYW5ndWxhci5pby9kb2NzL3RzL2xhdGVzdC9hcGkvZm9ybXMvaW5kZXgvRm9ybUdyb3VwLWNsYXNzLmh0bWwpIHRoYXQgZGVzY3JpYmVzXG4gICAgICogdGhlIGVkaXQgZm9ybS4gSWYgY2FsbGVkIHdpdGggYSBkYXRhIGl0ZW0sIHRoZSBwYXJhbWV0ZXIgd2lsbCBidWlsZCB0aGUgYEZvcm1Hcm91cGAgZnJvbSB0aGUgZGF0YSBpdGVtIGZpZWxkcy5cbiAgICAgKi9cbiAgICBhZGRFdmVudChncm91cDogRm9ybUdyb3VwIHwgYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTd2l0Y2hlcyB0aGUgc3BlY2lmaWVkIGV2ZW50IGluIGVkaXQgbW9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhSXRlbSAtIFRoZSBldmVudCB0aGF0IHdpbGwgYmUgc3dpdGNoZWQgdG8gZWRpdCBtb2RlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdoaWNoIGNvbnRhaW5zIHRoZSBmb3JtIGBncm91cGAgdGhhdCB3aWxsIGJlIGJvdW5kIGluIHRoZSBlZGl0IGRpYWxvZyBhbmQgdGhlIGN1cnJlbnQgZWRpdCBgbW9kZWAuXG4gICAgICpcbiAgICAgKi9cbiAgICBlZGl0RXZlbnQoZGF0YUl0ZW06IGFueSwgb3B0aW9ucz86IEVkaXRFdmVudEFyZ3MpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgZXZlbnQgZWRpdG9yLCBpZiBvcGVuLlxuICAgICAqL1xuICAgIGNsb3NlRXZlbnQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgZmxhZyB3aGljaCBpbmRpY2F0ZXMgaWYgYW4gZXZlbnQgaXMgY3VycmVudGx5IGVkaXRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gQSBmbGFnIHdoaWNoIGluZGljYXRlcyBpZiBhbiBldmVudCBpcyBjdXJyZW50bHkgZWRpdGVkLlxuICAgICAqL1xuICAgIGlzRWRpdGluZygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBidWlsdC1pbiBjb25maXJtYXRpb24gZGlhbG9nIGZvciBkZWZpbmluZyB0aGUgZWRpdCBtb2RlXG4gICAgICogdGhhdCB3aWxsIGJlIHVzZWQgd2hlbiB0aGUgdXNlciBlZGl0cyBvciByZW1vdmVzIGEgcmVjdXJyaW5nIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIG9wZXJhdGlvbiAtIFRoZSB0eXBlIG9mIG9wZXJhdGlvbiB0aGF0IHdpbGwgYmUgY29uZmlybWVkLiBIYXMgdG8gYmUgZWl0aGVyICoqRWRpdCoqIG9yICoqUmVtb3ZlKiouXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPEVkaXRNb2RlPn1cbiAgICAgKi9cbiAgICBvcGVuUmVjdXJyaW5nQ29uZmlybWF0aW9uRGlhbG9nKG9wZXJhdGlvbjogQ3J1ZE9wZXJhdGlvbik6IE9ic2VydmFibGU8RWRpdE1vZGU+O1xuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBidWlsdC1pbiByZW1vdmFsIGNvbmZpcm1hdGlvbiBkaWFsb2cuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGJvb2xlYW4+fVxuICAgICAqL1xuICAgIG9wZW5SZW1vdmVDb25maXJtYXRpb25EaWFsb2coKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcbiAgICAvKipcbiAgICAgKiBTYXZlcyB0aGUgY3VycmVudCB2aWV3IGFzIFBERi5cbiAgICAgKi9cbiAgICBzYXZlQXNQREYoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTY3JvbGxzIHRoZSB2aWV3IHRvIHRoZSBzcGVjaWZpZWQgdGltZS5cbiAgICAgKi9cbiAgICBzY3JvbGxUb1RpbWUodGltZTogc3RyaW5nIHwgRGF0ZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB2aWV3IHNsb3QgdGhhdCBtYXRjaGVzIHRoZSBwYXNzZWQgZG9jdW1lbnQgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0geCAtIFRoZSB4IGRvY3VtZW50IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB5IC0gVGhlIHkgZG9jdW1lbnQgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtTY2hlZHVsZXJTbG90fSAtIFRoZSBzbG90LlxuICAgICAqXG4gICAgICogeyUgZW1iZWRfZmlsZSBkcmFnLWFuZC1kcm9wL2FwcC5jb21wb25lbnQudHMgJX1cbiAgICAgKiB7JSBlbWJlZF9maWxlIGRyYWctYW5kLWRyb3AvZHJhZ2dhYmxlLmRpcmVjdGl2ZS50cyAlfVxuICAgICAqIHslIGVtYmVkX2ZpbGUgZHJhZy1hbmQtZHJvcC9hcHAubW9kdWxlLnRzICV9XG4gICAgICogeyUgZW1iZWRfZmlsZSBzaGFyZWQvbWFpbi50cyAlfVxuICAgICAqL1xuICAgIHNsb3RCeVBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyKTogU2NoZWR1bGVyU2xvdDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBldmVudCBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCBET00gZWxlbWVudCwgaWYgYW55LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSBUaGUgRE9NIGVsZW1lbnQgZG9jdW1lbnQgcG9zaXRpb24uXG4gICAgICogQHJldHVybiB0aGUgZXZlbnQgaW5zdGFuY2UsIGlmIGZvdW5kLlxuICAgICAqL1xuICAgIGV2ZW50RnJvbUVsZW1lbnQoZWxlbWVudDogRWxlbWVudCk6IFNjaGVkdWxlckV2ZW50O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnRseSBhY3RpdmUgZXZlbnQsIGlmIGFueS5cbiAgICAgKiBUaGUgYWN0aXZlIGV2ZW50IGlzIHRoZSBldmVudCB0aGF0IGNhbiBjdXJyZW50bHkgcmVjZWl2ZSBmb2N1cy5cbiAgICAgKi9cbiAgICByZWFkb25seSBhY3RpdmVFdmVudDogU2NoZWR1bGVyRXZlbnQ7XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgbmV4dCBldmVudCBvciBhbiBldmVudCBhdCBhIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cbiAgICAgKiBUaGUgYG9wdGlvbnNgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBzZXQgYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBvZmZzZXRcbiAgICAgKiB0aGF0IGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBldmVudC5cbiAgICAgKiBBIGBub3dyYXBgIGZsYWcgdG9nZ2xlcyB0aGUgd3JhcHBpbmcgdG8gdGhlIGZpcnN0IG9yIHRvIHRoZSBsYXN0IGl0ZW0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzLW5vLXJ1blxuICAgICAqIHNjaGVkdWxlci5mb2N1c05leHQoKTsgLy8gRm9jdXNlcyB0aGUgbmV4dCBldmVudC5cbiAgICAgKiBzY2hlZHVsZXIuZm9jdXNOZXh0KHsgb2Zmc2V0OiAxIH0pOyAvLyBGb2N1c2VzIHRoZSBuZXh0IGV2ZW50LlxuICAgICAqIHNjaGVkdWxlci5mb2N1c05leHQoeyBvZmZzZXQ6IC0xIH0pOyAvLyBGb2N1c2VzIHRoZSBwcmV2aW91cyBldmVudC5cbiAgICAgKiBzY2hlZHVsZXIuZm9jdXNOZXh0KHsgbm93cmFwOiB0cnVlIH0pOyAvLyBJZiB0aGUgZm9jdXMgaXMgb24gdGhlIGxhc3QgZXZlbnQsIGRvZXMgbm90IG1vdmUgdGhlIGZvY3VzIHRvIHRoZSBmaXJzdCBldmVudC5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHRvIGZvY3VzLlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZm9jdXNlZCBldmVudCBjaGFuZ2VkLiBPdGhlcndpc2UsIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmb2N1c05leHQocG9zaXRpb24/OiBGb2N1c1Bvc2l0aW9uKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBwcmV2aW91cyBldmVudCBvciBhbiBldmVudCBhdCBhIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cbiAgICAgKiBUaGUgYG9wdGlvbnNgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBzZXQgYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBvZmZzZXRcbiAgICAgKiB0aGF0IGlzIHJlbGF0aXZlIHRvIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBldmVudC5cbiAgICAgKiBBIGBub3dyYXBgIGZsYWcgdG9nZ2xlcyB0aGUgd3JhcHBpbmcgdG8gdGhlIGZpcnN0IG9yIHRvIHRoZSBsYXN0IGl0ZW0uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzLW5vLXJ1blxuICAgICAqIHNjaGVkdWxlci5mb2N1c1ByZXYoKTsgLy8gRm9jdXNlcyB0aGUgcHJldmlvdXMgZXZlbnRcbiAgICAgKiBzY2hlZHVsZXIuZm9jdXNQcmV2KHsgbm93cmFwOiB0cnVlIH0pOyAvLyBEb2VzIG5vdCBtb3ZlIHRoZSBmb2N1cyB0byB0aGUgbGFzdCBldmVudCwgaWYgZm9jdXMgaXMgb24gdGhlIGZpcnN0IG9uZS5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IHRvIGZvY3VzLlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZm9jdXNlZCBldmVudCBjaGFuZ2VkLiBPdGhlcndpc2UsIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmb2N1c1ByZXYocG9zaXRpb246IEZvY3VzUG9zaXRpb24pOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIGxhc3QgZm9jdXNlZCBldmVudCBvciB0aGUgU2NoZWR1bGVyIGVsZW1lbnQsIGlmIG5vIGV2ZW50cyBhcmUgYXZhaWxhYmxlLlxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpc0luUmFuZ2U7XG4gICAgcHJpdmF0ZSBub3RpZnlPcHRpb25zQ2hhbmdlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgd29ya1dlZWs7XG4gICAgcHJpdmF0ZSByZXNldFZpZXdJbmRleDtcbiAgICBwcml2YXRlIG9uVmlld0luZGV4Q2hhbmdlO1xuICAgIHByaXZhdGUgc2V0Vmlld0luZGV4O1xuICAgIHByaXZhdGUgcHJvY2Vzc0V2ZW50cztcbiAgICBwcml2YXRlIGF0dGFjaEVkaXRIYW5kbGVycztcbiAgICBwcml2YXRlIGVtaXRDUlVERXZlbnQ7XG4gICAgcHJpdmF0ZSBpbnRsQ2hhbmdlO1xuICAgIHByaXZhdGUgYXR0YWNoRWxlbWVudEV2ZW50SGFuZGxlcnM7XG59XG4iXX0=