/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { NgZone, QueryList, ElementRef, Renderer2, TemplateRef, ChangeDetectorRef } from '@angular/core';
import { IntlService } from '@progress/kendo-angular-intl';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Subject } from 'rxjs';
import { DateRange, ViewItem } from '../../types';
import { ViewContextService } from '../view-context.service';
import { ViewStateService } from '../view-state.service';
import { DayTimeSlotService } from '../day-time/day-time-slot.service';
import { SchedulerTask } from '../common/scheduler-task';
import { DayTimeViewComponent } from '../day-time/day-time-view.component';
import { HintContainerComponent } from '../common/hint-container.component';
import { PDFService } from '../../pdf/pdf.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class MultiDayViewRendererComponent extends DayTimeViewComponent {
    name: string;
    slotFill: number;
    allDaySlotTemplate: TemplateRef<any>;
    allDayEventTemplate: TemplateRef<any>;
    minorTimeHeaderTemplate: TemplateRef<any>;
    majorTimeHeaderTemplate: TemplateRef<any>;
    dayCells: QueryList<ElementRef>;
    headerHintContainer: HintContainerComponent;
    dateFormat: any;
    allDayResizeHintFormat: any;
    allDayItems: Subject<SchedulerTask[]>;
    readonly allDaySlotTemplateRef: TemplateRef<any>;
    readonly allDayEventTemplateRef: TemplateRef<any>;
    readonly minorTimeHeaderTemplateRef: TemplateRef<any>;
    readonly majorTimeHeaderTemplateRef: TemplateRef<any>;
    readonly allDayMessage: string;
    readonly allDayResizeHint: boolean;
    readonly allDayDragHint: boolean;
    private schedulerAllDaySlotTemplate;
    private schedulerAllDayEventTemplate;
    private schedulerMinorTimeHeaderTemplate;
    private schedulerMajorTimeHeaderTemplate;
    private dragContainers;
    constructor(localization: LocalizationService, viewContext: ViewContextService, viewState: ViewStateService, intl: IntlService, slotService: DayTimeSlotService, zone: NgZone, renderer: Renderer2, element: ElementRef, changeDetector: ChangeDetectorRef, pdfService: PDFService);
    protected optionsChange(changes: any): void;
    ngOnChanges(changes: any): void;
    horizontalColspan(resourceIndex: number): any;
    verticalRowspan(resourceIndex: number): any;
    allDaySlotClass(slot: any, resourceIndex: any): string;
    protected createTasks(items: ViewItem[], dateRange: DateRange): any[];
    protected onTasksChange(): void;
    protected reflow(): void;
    protected dragHorizontal(slot: any): boolean;
    protected updateHintContainer(): void;
    protected onRelease(): void;
    protected updateDragContainer(args: any): void;
    protected containerByPosition({ x, y }: any): any;
    protected readonly containers: any[];
    protected scrollContainer(callback: any, args: any): void;
    protected dragRanges(slot: any): any;
    protected dragHintEventStyleArgs(): any;
    protected draggedIsAllDay(task: any, slot: any): boolean;
    protected dragHintSize(firstSlot: any, lastSlot: any): any;
    protected currentTimeArrowOffset(): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiDayViewRendererComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiDayViewRendererComponent, "multi-day-view", never, { "name": "name"; "slotFill": "slotFill"; "allDaySlotTemplate": "allDaySlotTemplate"; "allDayEventTemplate": "allDayEventTemplate"; "minorTimeHeaderTemplate": "minorTimeHeaderTemplate"; "majorTimeHeaderTemplate": "majorTimeHeaderTemplate"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktZGF5LXZpZXctcmVuZGVyZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm11bHRpLWRheS12aWV3LXJlbmRlcmVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBOZ1pvbmUsIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRlUmFuZ2UsIFZpZXdJdGVtIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgVmlld0NvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi4vdmlldy1jb250ZXh0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVmlld1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3ZpZXctc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBEYXlUaW1lU2xvdFNlcnZpY2UgfSBmcm9tICcuLi9kYXktdGltZS9kYXktdGltZS1zbG90LnNlcnZpY2UnO1xuaW1wb3J0IHsgU2NoZWR1bGVyVGFzayB9IGZyb20gJy4uL2NvbW1vbi9zY2hlZHVsZXItdGFzayc7XG5pbXBvcnQgeyBEYXlUaW1lVmlld0NvbXBvbmVudCB9IGZyb20gJy4uL2RheS10aW1lL2RheS10aW1lLXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IEhpbnRDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vaGludC1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFBERlNlcnZpY2UgfSBmcm9tICcuLi8uLi9wZGYvcGRmLnNlcnZpY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpRGF5Vmlld1JlbmRlcmVyQ29tcG9uZW50IGV4dGVuZHMgRGF5VGltZVZpZXdDb21wb25lbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzbG90RmlsbDogbnVtYmVyO1xuICAgIGFsbERheVNsb3RUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBhbGxEYXlFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG1pbm9yVGltZUhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIG1ham9yVGltZUhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGRheUNlbGxzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG4gICAgaGVhZGVySGludENvbnRhaW5lcjogSGludENvbnRhaW5lckNvbXBvbmVudDtcbiAgICBkYXRlRm9ybWF0OiBhbnk7XG4gICAgYWxsRGF5UmVzaXplSGludEZvcm1hdDogYW55O1xuICAgIGFsbERheUl0ZW1zOiBTdWJqZWN0PFNjaGVkdWxlclRhc2tbXT47XG4gICAgcmVhZG9ubHkgYWxsRGF5U2xvdFRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHJlYWRvbmx5IGFsbERheUV2ZW50VGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcmVhZG9ubHkgbWlub3JUaW1lSGVhZGVyVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcmVhZG9ubHkgbWFqb3JUaW1lSGVhZGVyVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgcmVhZG9ubHkgYWxsRGF5TWVzc2FnZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFsbERheVJlc2l6ZUhpbnQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgYWxsRGF5RHJhZ0hpbnQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzY2hlZHVsZXJBbGxEYXlTbG90VGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBzY2hlZHVsZXJBbGxEYXlFdmVudFRlbXBsYXRlO1xuICAgIHByaXZhdGUgc2NoZWR1bGVyTWlub3JUaW1lSGVhZGVyVGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBzY2hlZHVsZXJNYWpvclRpbWVIZWFkZXJUZW1wbGF0ZTtcbiAgICBwcml2YXRlIGRyYWdDb250YWluZXJzO1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgdmlld0NvbnRleHQ6IFZpZXdDb250ZXh0U2VydmljZSwgdmlld1N0YXRlOiBWaWV3U3RhdGVTZXJ2aWNlLCBpbnRsOiBJbnRsU2VydmljZSwgc2xvdFNlcnZpY2U6IERheVRpbWVTbG90U2VydmljZSwgem9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50OiBFbGVtZW50UmVmLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHBkZlNlcnZpY2U6IFBERlNlcnZpY2UpO1xuICAgIHByb3RlY3RlZCBvcHRpb25zQ2hhbmdlKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBob3Jpem9udGFsQ29sc3BhbihyZXNvdXJjZUluZGV4OiBudW1iZXIpOiBhbnk7XG4gICAgdmVydGljYWxSb3dzcGFuKHJlc291cmNlSW5kZXg6IG51bWJlcik6IGFueTtcbiAgICBhbGxEYXlTbG90Q2xhc3Moc2xvdDogYW55LCByZXNvdXJjZUluZGV4OiBhbnkpOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGNyZWF0ZVRhc2tzKGl0ZW1zOiBWaWV3SXRlbVtdLCBkYXRlUmFuZ2U6IERhdGVSYW5nZSk6IGFueVtdO1xuICAgIHByb3RlY3RlZCBvblRhc2tzQ2hhbmdlKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlZmxvdygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBkcmFnSG9yaXpvbnRhbChzbG90OiBhbnkpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCB1cGRhdGVIaW50Q29udGFpbmVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uUmVsZWFzZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVEcmFnQ29udGFpbmVyKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNvbnRhaW5lckJ5UG9zaXRpb24oeyB4LCB5IH06IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29udGFpbmVyczogYW55W107XG4gICAgcHJvdGVjdGVkIHNjcm9sbENvbnRhaW5lcihjYWxsYmFjazogYW55LCBhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBkcmFnUmFuZ2VzKHNsb3Q6IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgZHJhZ0hpbnRFdmVudFN0eWxlQXJncygpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGRyYWdnZWRJc0FsbERheSh0YXNrOiBhbnksIHNsb3Q6IGFueSk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGRyYWdIaW50U2l6ZShmaXJzdFNsb3Q6IGFueSwgbGFzdFNsb3Q6IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgY3VycmVudFRpbWVBcnJvd09mZnNldCgpOiBudW1iZXI7XG59XG4iXX0=