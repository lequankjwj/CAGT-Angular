/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Observable } from 'rxjs';
import { DateRange } from '../types';
/**
 * A service for publishing the view state and actions to the Scheduler.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ViewStateService {
    /**
     * A stream for publishing the visible date range of the current view to the Scheduler.
     */
    readonly dateRange: Observable<DateRange>;
    /**
     * A stream for publishing the changes to the selected date that are initiated from the view.
     */
    readonly nextDate: Observable<Date>;
    /**
     * A stream fro navigating from the current to another view.
     */
    readonly navigate: Observable<any>;
    /**
     * A stream for navigating from the current to another view.
     */
    readonly viewEvent: Observable<any>;
    /**
     * A stream for indicating that the view layout finished.
     */
    readonly layoutEnd: Observable<any>;
    /**
     * A stream for indicating that the view options has changed.
     */
    readonly optionsChange: Observable<any>;
    private dateRangeSource;
    private nextDateSource;
    private navigateSource;
    private viewEventSource;
    private layoutEndSource;
    private optionsChangeSource;
    constructor();
    /**
     * Publishes the date that will be displayed by the Scheduler
     * typically as a result from processing a navigation action.
     */
    notifyNextDate(date: Date): void;
    /**
     * Publishes the visible date range of the view.
     * The view will calculate and set the new data range when
     * the selected date changes.
     */
    notifyDateRange(range: DateRange): void;
    /**
     * Notifies the Scheduler that the view has completed its layout.
     */
    notifyLayoutEnd(): void;
    /**
     * Navigates to another view.
     */
    navigateTo(args: any): void;
    /**
     * Notifies the Scheduler that the view options have been changed.
     */
    notifyOptionsChange(): void;
    /**
     * Emits a DOM event to the Scheduler.
     */
    emitEvent(name: string, args: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ViewStateService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ViewStateService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1zdGF0ZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInZpZXctc3RhdGUuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IERhdGVSYW5nZSB9IGZyb20gJy4uL3R5cGVzJztcbi8qKlxuICogQSBzZXJ2aWNlIGZvciBwdWJsaXNoaW5nIHRoZSB2aWV3IHN0YXRlIGFuZCBhY3Rpb25zIHRvIHRoZSBTY2hlZHVsZXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFZpZXdTdGF0ZVNlcnZpY2Uge1xuICAgIC8qKlxuICAgICAqIEEgc3RyZWFtIGZvciBwdWJsaXNoaW5nIHRoZSB2aXNpYmxlIGRhdGUgcmFuZ2Ugb2YgdGhlIGN1cnJlbnQgdmlldyB0byB0aGUgU2NoZWR1bGVyLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRhdGVSYW5nZTogT2JzZXJ2YWJsZTxEYXRlUmFuZ2U+O1xuICAgIC8qKlxuICAgICAqIEEgc3RyZWFtIGZvciBwdWJsaXNoaW5nIHRoZSBjaGFuZ2VzIHRvIHRoZSBzZWxlY3RlZCBkYXRlIHRoYXQgYXJlIGluaXRpYXRlZCBmcm9tIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5leHREYXRlOiBPYnNlcnZhYmxlPERhdGU+O1xuICAgIC8qKlxuICAgICAqIEEgc3RyZWFtIGZybyBuYXZpZ2F0aW5nIGZyb20gdGhlIGN1cnJlbnQgdG8gYW5vdGhlciB2aWV3LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG5hdmlnYXRlOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogQSBzdHJlYW0gZm9yIG5hdmlnYXRpbmcgZnJvbSB0aGUgY3VycmVudCB0byBhbm90aGVyIHZpZXcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld0V2ZW50OiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogQSBzdHJlYW0gZm9yIGluZGljYXRpbmcgdGhhdCB0aGUgdmlldyBsYXlvdXQgZmluaXNoZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGF5b3V0RW5kOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogQSBzdHJlYW0gZm9yIGluZGljYXRpbmcgdGhhdCB0aGUgdmlldyBvcHRpb25zIGhhcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9wdGlvbnNDaGFuZ2U6IE9ic2VydmFibGU8YW55PjtcbiAgICBwcml2YXRlIGRhdGVSYW5nZVNvdXJjZTtcbiAgICBwcml2YXRlIG5leHREYXRlU291cmNlO1xuICAgIHByaXZhdGUgbmF2aWdhdGVTb3VyY2U7XG4gICAgcHJpdmF0ZSB2aWV3RXZlbnRTb3VyY2U7XG4gICAgcHJpdmF0ZSBsYXlvdXRFbmRTb3VyY2U7XG4gICAgcHJpdmF0ZSBvcHRpb25zQ2hhbmdlU291cmNlO1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBkYXRlIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgYnkgdGhlIFNjaGVkdWxlclxuICAgICAqIHR5cGljYWxseSBhcyBhIHJlc3VsdCBmcm9tIHByb2Nlc3NpbmcgYSBuYXZpZ2F0aW9uIGFjdGlvbi5cbiAgICAgKi9cbiAgICBub3RpZnlOZXh0RGF0ZShkYXRlOiBEYXRlKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIHZpc2libGUgZGF0ZSByYW5nZSBvZiB0aGUgdmlldy5cbiAgICAgKiBUaGUgdmlldyB3aWxsIGNhbGN1bGF0ZSBhbmQgc2V0IHRoZSBuZXcgZGF0YSByYW5nZSB3aGVuXG4gICAgICogdGhlIHNlbGVjdGVkIGRhdGUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBub3RpZnlEYXRlUmFuZ2UocmFuZ2U6IERhdGVSYW5nZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgdGhlIFNjaGVkdWxlciB0aGF0IHRoZSB2aWV3IGhhcyBjb21wbGV0ZWQgaXRzIGxheW91dC5cbiAgICAgKi9cbiAgICBub3RpZnlMYXlvdXRFbmQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBOYXZpZ2F0ZXMgdG8gYW5vdGhlciB2aWV3LlxuICAgICAqL1xuICAgIG5hdmlnYXRlVG8oYXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyB0aGUgU2NoZWR1bGVyIHRoYXQgdGhlIHZpZXcgb3B0aW9ucyBoYXZlIGJlZW4gY2hhbmdlZC5cbiAgICAgKi9cbiAgICBub3RpZnlPcHRpb25zQ2hhbmdlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRW1pdHMgYSBET00gZXZlbnQgdG8gdGhlIFNjaGVkdWxlci5cbiAgICAgKi9cbiAgICBlbWl0RXZlbnQobmFtZTogc3RyaW5nLCBhcmdzOiBhbnkpOiB2b2lkO1xufVxuIl19