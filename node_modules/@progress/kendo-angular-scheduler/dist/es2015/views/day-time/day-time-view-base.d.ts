/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ConfigurationViewBase } from '../common/configuration-view-base';
import { TimeSlotTemplateDirective, DateHeaderTemplateDirective } from '../templates';
import { ViewContextService } from '../view-context.service';
import { ViewStateService } from '../view-state.service';
import { CurrentTimeSettings } from '../../types';
import { Day } from '@progress/kendo-date-math';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class DayTimeViewBase extends ConfigurationViewBase implements OnDestroy {
    /**
     * @hidden
     */
    timeSlotTemplate: TimeSlotTemplateDirective;
    /**
     * @hidden
     */
    dateHeaderTemplate: DateHeaderTemplateDirective;
    /**
     * If set to `true`, the view will be initially shown in the business-hours mode.
     * By default, the view is displayed in the full-day mode.
     */
    showWorkHours: boolean;
    /**
     * The height of the events.
     */
    eventHeight: number;
    /**
     * The start time of the view. The Scheduler displays events which start after the start time.
     * Accepts string values in the `HH:mm` format.
     */
    startTime: string;
    /**
     * The time to which the view will initially be scrolled.
     * Accepts string values in the `HH:mm` format or a JavaScript `Date`.
     */
    scrollTime: string;
    /**
     * The end time of the view. The Scheduler displays events which end before the end time.
     * Accepts string values in the `HH:mm` format.
     */
    endTime: string;
    /**
     * The start time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayStart: string;
    /**
     * The end time of the view when `showWorkHours` is set to `true`.
     * Accepts string values in the `HH:mm` format.
     */
    workDayEnd: string;
    /**
     * The start of the work week.
     */
    workWeekStart: Day;
    /**
     * The end of the work week.
     */
    workWeekEnd: Day;
    /**
     * The duration (in minutes) of the time slots.
     */
    slotDuration: number;
    /**
     * The number of divisions of the time slots.
     */
    slotDivisions: number;
    /**
     * Specifies the settings for the current time marker of the Scheduler.
     */
    currentTimeMarker: boolean | CurrentTimeSettings;
    /**
     * @hidden
     */
    readonly viewEventHeight: any;
    /**
     * @hidden
     */
    readonly shouldShowWorkHours: boolean;
    /**
     * @hidden
     */
    readonly viewStartTime: any;
    /**
     * @hidden
     */
    readonly viewEndTime: any;
    /**
     * @hidden
     */
    readonly viewWorkDayStart: any;
    /**
     * @hidden
     */
    readonly viewWorkDayEnd: any;
    /**
     * @hidden
     */
    readonly viewWorkWeekStart: any;
    /**
     * @hidden
     */
    readonly viewWorkWeekEnd: any;
    /**
     * @hidden
     */
    readonly viewSlotDuration: any;
    /**
     * @hidden
     */
    readonly viewSlotDivisions: any;
    /**
     * @hidden
     */
    readonly viewCurrentTimeMarker: any;
    /**
     * @hidden
     */
    readonly viewScrollTime: any;
    constructor(localization: LocalizationService, changeDetector: ChangeDetectorRef, viewContext: ViewContextService, viewState: ViewStateService);
    protected optionValue(name: string): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayTimeViewBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DayTimeViewBase, never, never, { "showWorkHours": "showWorkHours"; "eventHeight": "eventHeight"; "startTime": "startTime"; "scrollTime": "scrollTime"; "endTime": "endTime"; "workDayStart": "workDayStart"; "workDayEnd": "workDayEnd"; "workWeekStart": "workWeekStart"; "workWeekEnd": "workWeekEnd"; "slotDuration": "slotDuration"; "slotDivisions": "slotDivisions"; "currentTimeMarker": "currentTimeMarker"; }, {}, ["timeSlotTemplate", "dateHeaderTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LXRpbWUtdmlldy1iYXNlLmQudHMiLCJzb3VyY2VzIjpbImRheS10aW1lLXZpZXctYmFzZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25WaWV3QmFzZSB9IGZyb20gJy4uL2NvbW1vbi9jb25maWd1cmF0aW9uLXZpZXctYmFzZSc7XG5pbXBvcnQgeyBUaW1lU2xvdFRlbXBsYXRlRGlyZWN0aXZlLCBEYXRlSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi90ZW1wbGF0ZXMnO1xuaW1wb3J0IHsgVmlld0NvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi4vdmlldy1jb250ZXh0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVmlld1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3ZpZXctc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBDdXJyZW50VGltZVNldHRpbmdzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgRGF5IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGUtbWF0aCc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgRGF5VGltZVZpZXdCYXNlIGV4dGVuZHMgQ29uZmlndXJhdGlvblZpZXdCYXNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdGltZVNsb3RUZW1wbGF0ZTogVGltZVNsb3RUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGF0ZUhlYWRlclRlbXBsYXRlOiBEYXRlSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHZpZXcgd2lsbCBiZSBpbml0aWFsbHkgc2hvd24gaW4gdGhlIGJ1c2luZXNzLWhvdXJzIG1vZGUuXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHZpZXcgaXMgZGlzcGxheWVkIGluIHRoZSBmdWxsLWRheSBtb2RlLlxuICAgICAqL1xuICAgIHNob3dXb3JrSG91cnM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgZXZlbnRzLlxuICAgICAqL1xuICAgIGV2ZW50SGVpZ2h0OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIHN0YXJ0IHRpbWUgb2YgdGhlIHZpZXcuIFRoZSBTY2hlZHVsZXIgZGlzcGxheXMgZXZlbnRzIHdoaWNoIHN0YXJ0IGFmdGVyIHRoZSBzdGFydCB0aW1lLlxuICAgICAqIEFjY2VwdHMgc3RyaW5nIHZhbHVlcyBpbiB0aGUgYEhIOm1tYCBmb3JtYXQuXG4gICAgICovXG4gICAgc3RhcnRUaW1lOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgdG8gd2hpY2ggdGhlIHZpZXcgd2lsbCBpbml0aWFsbHkgYmUgc2Nyb2xsZWQuXG4gICAgICogQWNjZXB0cyBzdHJpbmcgdmFsdWVzIGluIHRoZSBgSEg6bW1gIGZvcm1hdCBvciBhIEphdmFTY3JpcHQgYERhdGVgLlxuICAgICAqL1xuICAgIHNjcm9sbFRpbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZW5kIHRpbWUgb2YgdGhlIHZpZXcuIFRoZSBTY2hlZHVsZXIgZGlzcGxheXMgZXZlbnRzIHdoaWNoIGVuZCBiZWZvcmUgdGhlIGVuZCB0aW1lLlxuICAgICAqIEFjY2VwdHMgc3RyaW5nIHZhbHVlcyBpbiB0aGUgYEhIOm1tYCBmb3JtYXQuXG4gICAgICovXG4gICAgZW5kVGltZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBzdGFydCB0aW1lIG9mIHRoZSB2aWV3IHdoZW4gYHNob3dXb3JrSG91cnNgIGlzIHNldCB0byBgdHJ1ZWAuXG4gICAgICogQWNjZXB0cyBzdHJpbmcgdmFsdWVzIGluIHRoZSBgSEg6bW1gIGZvcm1hdC5cbiAgICAgKi9cbiAgICB3b3JrRGF5U3RhcnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZW5kIHRpbWUgb2YgdGhlIHZpZXcgd2hlbiBgc2hvd1dvcmtIb3Vyc2AgaXMgc2V0IHRvIGB0cnVlYC5cbiAgICAgKiBBY2NlcHRzIHN0cmluZyB2YWx1ZXMgaW4gdGhlIGBISDptbWAgZm9ybWF0LlxuICAgICAqL1xuICAgIHdvcmtEYXlFbmQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhcnQgb2YgdGhlIHdvcmsgd2Vlay5cbiAgICAgKi9cbiAgICB3b3JrV2Vla1N0YXJ0OiBEYXk7XG4gICAgLyoqXG4gICAgICogVGhlIGVuZCBvZiB0aGUgd29yayB3ZWVrLlxuICAgICAqL1xuICAgIHdvcmtXZWVrRW5kOiBEYXk7XG4gICAgLyoqXG4gICAgICogVGhlIGR1cmF0aW9uIChpbiBtaW51dGVzKSBvZiB0aGUgdGltZSBzbG90cy5cbiAgICAgKi9cbiAgICBzbG90RHVyYXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRpdmlzaW9ucyBvZiB0aGUgdGltZSBzbG90cy5cbiAgICAgKi9cbiAgICBzbG90RGl2aXNpb25zOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIGN1cnJlbnQgdGltZSBtYXJrZXIgb2YgdGhlIFNjaGVkdWxlci5cbiAgICAgKi9cbiAgICBjdXJyZW50VGltZU1hcmtlcjogYm9vbGVhbiB8IEN1cnJlbnRUaW1lU2V0dGluZ3M7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZpZXdFdmVudEhlaWdodDogYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBzaG91bGRTaG93V29ya0hvdXJzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSB2aWV3U3RhcnRUaW1lOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZpZXdFbmRUaW1lOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZpZXdXb3JrRGF5U3RhcnQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld1dvcmtEYXlFbmQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld1dvcmtXZWVrU3RhcnQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld1dvcmtXZWVrRW5kOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZpZXdTbG90RHVyYXRpb246IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld1Nsb3REaXZpc2lvbnM6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld0N1cnJlbnRUaW1lTWFya2VyOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZpZXdTY3JvbGxUaW1lOiBhbnk7XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHZpZXdDb250ZXh0OiBWaWV3Q29udGV4dFNlcnZpY2UsIHZpZXdTdGF0ZTogVmlld1N0YXRlU2VydmljZSk7XG4gICAgcHJvdGVjdGVkIG9wdGlvblZhbHVlKG5hbWU6IHN0cmluZyk6IGFueTtcbn1cbiJdfQ==