/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ResourceGroup, SlotDirective, SlotID } from '../view-items/types';
import { BaseSlotService } from '../view-items/base-slot.service';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare class SlotRange {
    index: number;
    readonly slots: any[];
    readonly firstSlot: any;
    readonly lastSlot: any;
    readonly items: any[];
    readonly rect: any;
    private slotMap;
    private itemMap;
    private slotItems;
    readonly start: Date;
    readonly end: Date;
    readonly hasSlots: boolean;
    readonly hasItems: boolean;
    constructor(index: number);
    registerItem(component: any): void;
    unregisterItem(component: any, id: SlotID): void;
    registerSlot(slot: any): void;
    unregisterSlot(slot: any): void;
    layout(options: any): void;
    initDaySlots(rowHeight: number, eventHeight: number): void;
    setDayOffsets(): void;
    setSlotsHeight(height: number): void;
}
/**
 * @hidden
 */
export declare class DayTimeResourceGroup implements ResourceGroup {
    readonly index: number;
    dayRanges: SlotRange[];
    timeRanges: SlotRange[];
    private slotItems;
    constructor(index: number);
    registerSlot(slot: SlotDirective): void;
    unregisterSlot(slot: SlotDirective): void;
    registerItem(component: any): void;
    unregisterItem(component: any, id: SlotID): void;
    forEachDateRange(callback: (slot: SlotRange) => void): void;
    forEachTimeRange(callback: (slot: SlotRange) => void): void;
    slotRange(slot: any): SlotRange;
    slotRanges(slot: any): SlotRange[];
    initTimeSlots(rowHeight: number, eventHeight: number, resourceRowHeight: any): void;
    setTimelineOffsets(): void;
    setSlotsHeight(height: number): void;
    readonly items: any[];
    readonly slots: any[];
    readonly hasSlots: boolean;
    cleanRanges(): void;
    private itemRange;
}
/**
 * @hidden
 */
export declare class DayTimeSlotService extends BaseSlotService {
    layoutDays(eventHeight?: number): void;
    layoutTimeline(eventHeight: number, resourceRows: any[]): void;
    layoutTimes(options: any): void;
    forEachDateRange(callback: any): void;
    syncDateRanges(): number;
    forEachGroup(callback: any): void;
    forEachSlot(callback: any): void;
    createGroup(index: number): DayTimeResourceGroup;
    slotByIndex(slotIndex: string, allDay?: boolean): any;
    slotByPosition(x: any, y: any, isDaySlot?: boolean, includeDayRanges?: boolean): any;
    groupSlotByPosition(currentSlot: any, x: any, y: any): any;
    dragRanges(currentSlot: any, offset: any, timeRanges?: boolean): any;
    resizeRanges(currentSlot: any, task: any, resizeStart: boolean, offset?: any): any;
    timePosition(date: Date, resourceIndex: number, vertical: boolean): number;
    private findDateSlot;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayTimeSlotService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DayTimeSlotService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LXRpbWUtc2xvdC5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRheS10aW1lLXNsb3Quc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBSZXNvdXJjZUdyb3VwLCBTbG90RGlyZWN0aXZlLCBTbG90SUQgfSBmcm9tICcuLi92aWV3LWl0ZW1zL3R5cGVzJztcbmltcG9ydCB7IEJhc2VTbG90U2VydmljZSB9IGZyb20gJy4uL3ZpZXctaXRlbXMvYmFzZS1zbG90LnNlcnZpY2UnO1xuLyoqIEBoaWRkZW4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsb3RSYW5nZSB7XG4gICAgaW5kZXg6IG51bWJlcjtcbiAgICByZWFkb25seSBzbG90czogYW55W107XG4gICAgcmVhZG9ubHkgZmlyc3RTbG90OiBhbnk7XG4gICAgcmVhZG9ubHkgbGFzdFNsb3Q6IGFueTtcbiAgICByZWFkb25seSBpdGVtczogYW55W107XG4gICAgcmVhZG9ubHkgcmVjdDogYW55O1xuICAgIHByaXZhdGUgc2xvdE1hcDtcbiAgICBwcml2YXRlIGl0ZW1NYXA7XG4gICAgcHJpdmF0ZSBzbG90SXRlbXM7XG4gICAgcmVhZG9ubHkgc3RhcnQ6IERhdGU7XG4gICAgcmVhZG9ubHkgZW5kOiBEYXRlO1xuICAgIHJlYWRvbmx5IGhhc1Nsb3RzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc0l0ZW1zOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGluZGV4OiBudW1iZXIpO1xuICAgIHJlZ2lzdGVySXRlbShjb21wb25lbnQ6IGFueSk6IHZvaWQ7XG4gICAgdW5yZWdpc3Rlckl0ZW0oY29tcG9uZW50OiBhbnksIGlkOiBTbG90SUQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyU2xvdChzbG90OiBhbnkpOiB2b2lkO1xuICAgIHVucmVnaXN0ZXJTbG90KHNsb3Q6IGFueSk6IHZvaWQ7XG4gICAgbGF5b3V0KG9wdGlvbnM6IGFueSk6IHZvaWQ7XG4gICAgaW5pdERheVNsb3RzKHJvd0hlaWdodDogbnVtYmVyLCBldmVudEhlaWdodDogbnVtYmVyKTogdm9pZDtcbiAgICBzZXREYXlPZmZzZXRzKCk6IHZvaWQ7XG4gICAgc2V0U2xvdHNIZWlnaHQoaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERheVRpbWVSZXNvdXJjZUdyb3VwIGltcGxlbWVudHMgUmVzb3VyY2VHcm91cCB7XG4gICAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbiAgICBkYXlSYW5nZXM6IFNsb3RSYW5nZVtdO1xuICAgIHRpbWVSYW5nZXM6IFNsb3RSYW5nZVtdO1xuICAgIHByaXZhdGUgc2xvdEl0ZW1zO1xuICAgIGNvbnN0cnVjdG9yKGluZGV4OiBudW1iZXIpO1xuICAgIHJlZ2lzdGVyU2xvdChzbG90OiBTbG90RGlyZWN0aXZlKTogdm9pZDtcbiAgICB1bnJlZ2lzdGVyU2xvdChzbG90OiBTbG90RGlyZWN0aXZlKTogdm9pZDtcbiAgICByZWdpc3Rlckl0ZW0oY29tcG9uZW50OiBhbnkpOiB2b2lkO1xuICAgIHVucmVnaXN0ZXJJdGVtKGNvbXBvbmVudDogYW55LCBpZDogU2xvdElEKTogdm9pZDtcbiAgICBmb3JFYWNoRGF0ZVJhbmdlKGNhbGxiYWNrOiAoc2xvdDogU2xvdFJhbmdlKSA9PiB2b2lkKTogdm9pZDtcbiAgICBmb3JFYWNoVGltZVJhbmdlKGNhbGxiYWNrOiAoc2xvdDogU2xvdFJhbmdlKSA9PiB2b2lkKTogdm9pZDtcbiAgICBzbG90UmFuZ2Uoc2xvdDogYW55KTogU2xvdFJhbmdlO1xuICAgIHNsb3RSYW5nZXMoc2xvdDogYW55KTogU2xvdFJhbmdlW107XG4gICAgaW5pdFRpbWVTbG90cyhyb3dIZWlnaHQ6IG51bWJlciwgZXZlbnRIZWlnaHQ6IG51bWJlciwgcmVzb3VyY2VSb3dIZWlnaHQ6IGFueSk6IHZvaWQ7XG4gICAgc2V0VGltZWxpbmVPZmZzZXRzKCk6IHZvaWQ7XG4gICAgc2V0U2xvdHNIZWlnaHQoaGVpZ2h0OiBudW1iZXIpOiB2b2lkO1xuICAgIHJlYWRvbmx5IGl0ZW1zOiBhbnlbXTtcbiAgICByZWFkb25seSBzbG90czogYW55W107XG4gICAgcmVhZG9ubHkgaGFzU2xvdHM6IGJvb2xlYW47XG4gICAgY2xlYW5SYW5nZXMoKTogdm9pZDtcbiAgICBwcml2YXRlIGl0ZW1SYW5nZTtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXlUaW1lU2xvdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2xvdFNlcnZpY2Uge1xuICAgIGxheW91dERheXMoZXZlbnRIZWlnaHQ/OiBudW1iZXIpOiB2b2lkO1xuICAgIGxheW91dFRpbWVsaW5lKGV2ZW50SGVpZ2h0OiBudW1iZXIsIHJlc291cmNlUm93czogYW55W10pOiB2b2lkO1xuICAgIGxheW91dFRpbWVzKG9wdGlvbnM6IGFueSk6IHZvaWQ7XG4gICAgZm9yRWFjaERhdGVSYW5nZShjYWxsYmFjazogYW55KTogdm9pZDtcbiAgICBzeW5jRGF0ZVJhbmdlcygpOiBudW1iZXI7XG4gICAgZm9yRWFjaEdyb3VwKGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICAgIGZvckVhY2hTbG90KGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICAgIGNyZWF0ZUdyb3VwKGluZGV4OiBudW1iZXIpOiBEYXlUaW1lUmVzb3VyY2VHcm91cDtcbiAgICBzbG90QnlJbmRleChzbG90SW5kZXg6IHN0cmluZywgYWxsRGF5PzogYm9vbGVhbik6IGFueTtcbiAgICBzbG90QnlQb3NpdGlvbih4OiBhbnksIHk6IGFueSwgaXNEYXlTbG90PzogYm9vbGVhbiwgaW5jbHVkZURheVJhbmdlcz86IGJvb2xlYW4pOiBhbnk7XG4gICAgZ3JvdXBTbG90QnlQb3NpdGlvbihjdXJyZW50U2xvdDogYW55LCB4OiBhbnksIHk6IGFueSk6IGFueTtcbiAgICBkcmFnUmFuZ2VzKGN1cnJlbnRTbG90OiBhbnksIG9mZnNldDogYW55LCB0aW1lUmFuZ2VzPzogYm9vbGVhbik6IGFueTtcbiAgICByZXNpemVSYW5nZXMoY3VycmVudFNsb3Q6IGFueSwgdGFzazogYW55LCByZXNpemVTdGFydDogYm9vbGVhbiwgb2Zmc2V0PzogYW55KTogYW55O1xuICAgIHRpbWVQb3NpdGlvbihkYXRlOiBEYXRlLCByZXNvdXJjZUluZGV4OiBudW1iZXIsIHZlcnRpY2FsOiBib29sZWFuKTogbnVtYmVyO1xuICAgIHByaXZhdGUgZmluZERhdGVTbG90O1xufVxuIl19