/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, OnInit, OnChanges, OnDestroy, Renderer2, TemplateRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { BaseSlotService } from './base-slot.service';
import { Rect, ViewItem } from './types';
import { FocusService } from '../../navigation';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class BaseViewItem implements OnInit, OnChanges, OnDestroy, ViewItem {
    protected slotService: BaseSlotService;
    protected localization: LocalizationService;
    protected focusService: FocusService;
    protected element: ElementRef;
    protected renderer: Renderer2;
    protected localeId: string;
    item: any;
    resourceIndex: number;
    rangeIndex: number;
    index: number;
    eventTemplate: TemplateRef<any>;
    editable: any;
    dragHint: boolean;
    resources: any[];
    className: boolean;
    readonly taskIndex: string;
    readonly touchAction: string;
    readonly eventTitle: string;
    readonly deleteMessage: string;
    readonly resizable: boolean;
    readonly removable: boolean;
    rect: Rect;
    private subs;
    constructor(slotService: BaseSlotService, localization: LocalizationService, focusService: FocusService, element: ElementRef, renderer: Renderer2, localeId: string);
    readonly isRecurrence: boolean;
    readonly isRecurrenceException: boolean;
    readonly nativeElement: any;
    setStyles(styles: any): void;
    toggle(visible: boolean): void;
    reflow(): void;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseViewItem, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseViewItem, never, never, { "item": "item"; "resourceIndex": "resourceIndex"; "rangeIndex": "rangeIndex"; "index": "index"; "eventTemplate": "eventTemplate"; "editable": "editable"; "dragHint": "dragHint"; "resources": "resources"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12aWV3LWl0ZW0uZC50cyIsInNvdXJjZXMiOlsiYmFzZS12aWV3LWl0ZW0uZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgQmFzZVNsb3RTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLXNsb3Quc2VydmljZSc7XG5pbXBvcnQgeyBSZWN0LCBWaWV3SXRlbSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vbmF2aWdhdGlvbic7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQmFzZVZpZXdJdGVtIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgVmlld0l0ZW0ge1xuICAgIHByb3RlY3RlZCBzbG90U2VydmljZTogQmFzZVNsb3RTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBlbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCBsb2NhbGVJZDogc3RyaW5nO1xuICAgIGl0ZW06IGFueTtcbiAgICByZXNvdXJjZUluZGV4OiBudW1iZXI7XG4gICAgcmFuZ2VJbmRleDogbnVtYmVyO1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgZXZlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBlZGl0YWJsZTogYW55O1xuICAgIGRyYWdIaW50OiBib29sZWFuO1xuICAgIHJlc291cmNlczogYW55W107XG4gICAgY2xhc3NOYW1lOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHRhc2tJbmRleDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHRvdWNoQWN0aW9uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZXZlbnRUaXRsZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRlbGV0ZU1lc3NhZ2U6IHN0cmluZztcbiAgICByZWFkb25seSByZXNpemFibGU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgcmVtb3ZhYmxlOiBib29sZWFuO1xuICAgIHJlY3Q6IFJlY3Q7XG4gICAgcHJpdmF0ZSBzdWJzO1xuICAgIGNvbnN0cnVjdG9yKHNsb3RTZXJ2aWNlOiBCYXNlU2xvdFNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2UsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGxvY2FsZUlkOiBzdHJpbmcpO1xuICAgIHJlYWRvbmx5IGlzUmVjdXJyZW5jZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc1JlY3VycmVuY2VFeGNlcHRpb246IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbmF0aXZlRWxlbWVudDogYW55O1xuICAgIHNldFN0eWxlcyhzdHlsZXM6IGFueSk6IHZvaWQ7XG4gICAgdG9nZ2xlKHZpc2libGU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHJlZmxvdygpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19