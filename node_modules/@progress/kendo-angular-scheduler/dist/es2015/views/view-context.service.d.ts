/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Observable } from 'rxjs';
import { NavigationAction, ViewItem } from '../types';
/**
 * A service which publishes information from the Scheduler to the views.
 * Views subscribe to changes in the context (selected date, event, and resource data) through this service.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ViewContextService {
    /**
     * A stream of navigation actions that will be handled by the view.
     */
    readonly action: Observable<NavigationAction>;
    /**
     * A stream that executes methods from the view.
     */
    readonly execute: Observable<any>;
    /**
     * A stream of items (events) that will be displayed in the view.
     */
    readonly items: Observable<ViewItem[]>;
    /**
     * A stream with the selected date that will be displayed by the view.
     */
    readonly selectedDate: Observable<Date>;
    /**
     * Fires when the Scheduler element is resized.
     */
    readonly resize: Observable<Date>;
    /**
     * Fires when the Scheduler options are changed.
     */
    readonly optionsChange: Observable<any>;
    private actionSource;
    private itemsSource;
    private selectedDateSource;
    private resizeSource;
    private optionsChangeSource;
    private executeSource;
    constructor();
    /**
     * An internal method which is used by the Scheduler to publish unhandled navigation actions.
     *
     * @hidden
     */
    notifyAction(action: NavigationAction): void;
    /**
     * An internal method which is used by the Scheduler to publish the current set of items.
     *
     * @hidden
     */
    notifyItems(items: ViewItem[]): void;
    /**
     * An internal method which is used by the Scheduler to publish the currently selected date.
     *
     * @hidden
     */
    notifySelectedDate(date: Date): void;
    /**
     * An internal method which is used by the Scheduler to notify that the size changed.
     *
     * @hidden
     */
    notifyResize(): void;
    /**
     * An internal method which is used by the Scheduler to notify that the options changed.
     *
     * @hidden
     */
    notifyOptionsChange(changes: any): void;
    /**
     * An internal method which is used by the Scheduler to execute a view method.
     *
     * @hidden
     */
    executeMethod(name: string, args: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ViewContextService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ViewContextService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1jb250ZXh0LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidmlldy1jb250ZXh0LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5hdmlnYXRpb25BY3Rpb24sIFZpZXdJdGVtIH0gZnJvbSAnLi4vdHlwZXMnO1xuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggcHVibGlzaGVzIGluZm9ybWF0aW9uIGZyb20gdGhlIFNjaGVkdWxlciB0byB0aGUgdmlld3MuXG4gKiBWaWV3cyBzdWJzY3JpYmUgdG8gY2hhbmdlcyBpbiB0aGUgY29udGV4dCAoc2VsZWN0ZWQgZGF0ZSwgZXZlbnQsIGFuZCByZXNvdXJjZSBkYXRhKSB0aHJvdWdoIHRoaXMgc2VydmljZS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVmlld0NvbnRleHRTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBBIHN0cmVhbSBvZiBuYXZpZ2F0aW9uIGFjdGlvbnMgdGhhdCB3aWxsIGJlIGhhbmRsZWQgYnkgdGhlIHZpZXcuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYWN0aW9uOiBPYnNlcnZhYmxlPE5hdmlnYXRpb25BY3Rpb24+O1xuICAgIC8qKlxuICAgICAqIEEgc3RyZWFtIHRoYXQgZXhlY3V0ZXMgbWV0aG9kcyBmcm9tIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGV4ZWN1dGU6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBBIHN0cmVhbSBvZiBpdGVtcyAoZXZlbnRzKSB0aGF0IHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGl0ZW1zOiBPYnNlcnZhYmxlPFZpZXdJdGVtW10+O1xuICAgIC8qKlxuICAgICAqIEEgc3RyZWFtIHdpdGggdGhlIHNlbGVjdGVkIGRhdGUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBieSB0aGUgdmlldy5cbiAgICAgKi9cbiAgICByZWFkb25seSBzZWxlY3RlZERhdGU6IE9ic2VydmFibGU8RGF0ZT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgU2NoZWR1bGVyIGVsZW1lbnQgaXMgcmVzaXplZC5cbiAgICAgKi9cbiAgICByZWFkb25seSByZXNpemU6IE9ic2VydmFibGU8RGF0ZT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgU2NoZWR1bGVyIG9wdGlvbnMgYXJlIGNoYW5nZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgb3B0aW9uc0NoYW5nZTogT2JzZXJ2YWJsZTxhbnk+O1xuICAgIHByaXZhdGUgYWN0aW9uU291cmNlO1xuICAgIHByaXZhdGUgaXRlbXNTb3VyY2U7XG4gICAgcHJpdmF0ZSBzZWxlY3RlZERhdGVTb3VyY2U7XG4gICAgcHJpdmF0ZSByZXNpemVTb3VyY2U7XG4gICAgcHJpdmF0ZSBvcHRpb25zQ2hhbmdlU291cmNlO1xuICAgIHByaXZhdGUgZXhlY3V0ZVNvdXJjZTtcbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIG1ldGhvZCB3aGljaCBpcyB1c2VkIGJ5IHRoZSBTY2hlZHVsZXIgdG8gcHVibGlzaCB1bmhhbmRsZWQgbmF2aWdhdGlvbiBhY3Rpb25zLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5vdGlmeUFjdGlvbihhY3Rpb246IE5hdmlnYXRpb25BY3Rpb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIG1ldGhvZCB3aGljaCBpcyB1c2VkIGJ5IHRoZSBTY2hlZHVsZXIgdG8gcHVibGlzaCB0aGUgY3VycmVudCBzZXQgb2YgaXRlbXMuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbm90aWZ5SXRlbXMoaXRlbXM6IFZpZXdJdGVtW10pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIG1ldGhvZCB3aGljaCBpcyB1c2VkIGJ5IHRoZSBTY2hlZHVsZXIgdG8gcHVibGlzaCB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGRhdGUuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbm90aWZ5U2VsZWN0ZWREYXRlKGRhdGU6IERhdGUpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIG1ldGhvZCB3aGljaCBpcyB1c2VkIGJ5IHRoZSBTY2hlZHVsZXIgdG8gbm90aWZ5IHRoYXQgdGhlIHNpemUgY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBub3RpZnlSZXNpemUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBbiBpbnRlcm5hbCBtZXRob2Qgd2hpY2ggaXMgdXNlZCBieSB0aGUgU2NoZWR1bGVyIHRvIG5vdGlmeSB0aGF0IHRoZSBvcHRpb25zIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbm90aWZ5T3B0aW9uc0NoYW5nZShjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFuIGludGVybmFsIG1ldGhvZCB3aGljaCBpcyB1c2VkIGJ5IHRoZSBTY2hlZHVsZXIgdG8gZXhlY3V0ZSBhIHZpZXcgbWV0aG9kLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGV4ZWN1dGVNZXRob2QobmFtZTogc3RyaW5nLCBhcmdzOiBhbnkpOiBhbnk7XG59XG4iXX0=