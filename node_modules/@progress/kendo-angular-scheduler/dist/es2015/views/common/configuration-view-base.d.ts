/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { SchedulerView } from '../../types';
import { EventTemplateDirective, GroupHeaderTemplateDirective } from '../templates';
import { Subscription } from 'rxjs';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ViewContextService } from '../view-context.service';
import { ViewStateService } from '../view-state.service';
import { SlotClassArgs } from '../../types';
import { EventStyleArgs } from '../../types';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class ConfigurationViewBase extends SchedulerView implements OnDestroy {
    protected localization: LocalizationService;
    protected changeDetector: ChangeDetectorRef;
    protected viewContext: ViewContextService;
    protected viewState: ViewStateService;
    /**
     * Defines a function that is executed for every slot in the view.
     * The function returns a value which is supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     *
     * For more information, refer to the example on [setting the `class` callback for all views in `SchedulerComponent.slotClass`]({% slug overview_scheduler %}#toc-slotclass).
     */
    slotClass: (args: SlotClassArgs) => any;
    /**
     * Defines a function that is executed for every event in the view.
     * The function returns a value which is supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    eventClass: (args: EventStyleArgs) => any;
    /**
     * Defines a function that is executed for every event in the view.
     * The function returns a value which is supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    eventStyles: (args: EventStyleArgs) => any;
    /**
     * @hidden
     */
    template: TemplateRef<any>;
    /**
     * @hidden
     */
    eventTemplate: EventTemplateDirective;
    /**
     * @hidden
     */
    groupHeaderTemplate: GroupHeaderTemplateDirective;
    /**
     * @hidden
     */
    readonly viewSlotClass: number;
    /**
     * @hidden
     */
    readonly viewEventClass: any;
    /**
     * @hidden
     */
    readonly viewEventStyles: any;
    protected subs: Subscription;
    protected schedulerOptions: any;
    constructor(localization: LocalizationService, changeDetector: ChangeDetectorRef, viewContext: ViewContextService, viewState: ViewStateService);
    ngOnChanges(_changes: any): void;
    ngOnDestroy(): void;
    protected optionsChange(options: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ConfigurationViewBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ConfigurationViewBase, never, never, { "slotClass": "slotClass"; "eventClass": "eventClass"; "eventStyles": "eventStyles"; }, {}, ["eventTemplate", "groupHeaderTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi12aWV3LWJhc2UuZC50cyIsInNvdXJjZXMiOlsiY29uZmlndXJhdGlvbi12aWV3LWJhc2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU2NoZWR1bGVyVmlldyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEV2ZW50VGVtcGxhdGVEaXJlY3RpdmUsIEdyb3VwSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi90ZW1wbGF0ZXMnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBWaWV3Q29udGV4dFNlcnZpY2UgfSBmcm9tICcuLi92aWV3LWNvbnRleHQuc2VydmljZSc7XG5pbXBvcnQgeyBWaWV3U3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vdmlldy1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFNsb3RDbGFzc0FyZ3MgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBFdmVudFN0eWxlQXJncyB9IGZyb20gJy4uLy4uL3R5cGVzJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBDb25maWd1cmF0aW9uVmlld0Jhc2UgZXh0ZW5kcyBTY2hlZHVsZXJWaWV3IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIHZpZXdDb250ZXh0OiBWaWV3Q29udGV4dFNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIHZpZXdTdGF0ZTogVmlld1N0YXRlU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBmb3IgZXZlcnkgc2xvdCBpbiB0aGUgdmlldy5cbiAgICAgKiBUaGUgZnVuY3Rpb24gcmV0dXJucyBhIHZhbHVlIHdoaWNoIGlzIHN1cHBvcnRlZCBieSBbYG5nQ2xhc3NgXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWyduZ2NsYXNzYXBpJ10gfX0pLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHJlZmVyIHRvIHRoZSBleGFtcGxlIG9uIFtzZXR0aW5nIHRoZSBgY2xhc3NgIGNhbGxiYWNrIGZvciBhbGwgdmlld3MgaW4gYFNjaGVkdWxlckNvbXBvbmVudC5zbG90Q2xhc3NgXSh7JSBzbHVnIG92ZXJ2aWV3X3NjaGVkdWxlciAlfSN0b2Mtc2xvdGNsYXNzKS5cbiAgICAgKi9cbiAgICBzbG90Q2xhc3M6IChhcmdzOiBTbG90Q2xhc3NBcmdzKSA9PiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGV2ZXJ5IGV2ZW50IGluIHRoZSB2aWV3LlxuICAgICAqIFRoZSBmdW5jdGlvbiByZXR1cm5zIGEgdmFsdWUgd2hpY2ggaXMgc3VwcG9ydGVkIGJ5IFtgbmdDbGFzc2BdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nY2xhc3NhcGknXSB9fSkuXG4gICAgICovXG4gICAgZXZlbnRDbGFzczogKGFyZ3M6IEV2ZW50U3R5bGVBcmdzKSA9PiBhbnk7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGV2ZXJ5IGV2ZW50IGluIHRoZSB2aWV3LlxuICAgICAqIFRoZSBmdW5jdGlvbiByZXR1cm5zIGEgdmFsdWUgd2hpY2ggaXMgc3VwcG9ydGVkIGJ5IFtgbmdTdHlsZWBdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nc3R5bGVhcGknXSB9fSkuXG4gICAgICovXG4gICAgZXZlbnRTdHlsZXM6IChhcmdzOiBFdmVudFN0eWxlQXJncykgPT4gYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZXZlbnRUZW1wbGF0ZTogRXZlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ3JvdXBIZWFkZXJUZW1wbGF0ZTogR3JvdXBIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdmlld1Nsb3RDbGFzczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSB2aWV3RXZlbnRDbGFzczogYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSB2aWV3RXZlbnRTdHlsZXM6IGFueTtcbiAgICBwcm90ZWN0ZWQgc3ViczogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCBzY2hlZHVsZXJPcHRpb25zOiBhbnk7XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHZpZXdDb250ZXh0OiBWaWV3Q29udGV4dFNlcnZpY2UsIHZpZXdTdGF0ZTogVmlld1N0YXRlU2VydmljZSk7XG4gICAgbmdPbkNoYW5nZXMoX2NoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb3B0aW9uc0NoYW5nZShvcHRpb25zOiBhbnkpOiB2b2lkO1xufVxuIl19