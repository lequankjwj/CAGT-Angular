/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, AfterViewInit, OnDestroy, OnChanges, NgZone, ElementRef, Renderer2, TemplateRef } from '@angular/core';
import { IntlService } from '@progress/kendo-angular-intl';
import { Subscription, Subject, BehaviorSubject } from 'rxjs';
import { DateRange, NavigationAction, ViewItem } from '../../types';
import { BaseSlotService } from '../view-items/base-slot.service';
import { ViewContextService } from '../view-context.service';
import { ViewStateService } from '../view-state.service';
import { HintContainerComponent } from '../common/hint-container.component';
import { PDFService } from '../../pdf/pdf.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/** @hidden */
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseView implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    protected viewContext: ViewContextService;
    protected viewState: ViewStateService;
    protected intl: IntlService;
    protected slotService: BaseSlotService;
    protected zone: NgZone;
    protected renderer: Renderer2;
    protected element: ElementRef;
    protected pdfService: PDFService;
    protected localization: LocalizationService;
    еventTemplate: TemplateRef<any>;
    groupHeaderTemplate: TemplateRef<any>;
    selectedDateFormat: string;
    selectedShortDateFormat: string;
    eventHeight: number;
    slotClass: (args: any) => any;
    eventClass: (args: any) => any;
    eventStyles: (args: any) => any;
    content: ElementRef;
    header: ElementRef;
    contentTable: ElementRef;
    times: ElementRef;
    timesHeader: ElementRef;
    timesTable: ElementRef;
    headerWrap: ElementRef;
    hintContainer: HintContainerComponent;
    readonly eventTemplateRef: TemplateRef<any>;
    readonly groupHeaderTemplateRef: TemplateRef<any>;
    items: Subject<any[]>;
    horizontalResources: any[];
    verticalResources: any[];
    dragHints: any[];
    resizeHints: any[];
    editable: any;
    getField: any;
    protected changes: BehaviorSubject<any>;
    protected viewRangeChange: BehaviorSubject<any>;
    protected subs: Subscription;
    protected groupedResources: any[];
    protected spans: any[];
    protected contentHeight: any;
    protected tasks: any[];
    protected group: any;
    protected resources: any[];
    protected domEvents: any[];
    protected schedulerEventTemplate: any;
    protected schedulerGroupHeaderTemplate: any;
    protected min: any;
    protected max: any;
    protected selectedDate: Date;
    protected resourcesCache: any;
    protected timezone: string;
    protected draggable: any;
    protected resizing: any;
    protected dragging: any;
    protected dragArgs: any;
    protected container: any;
    protected containerOffset: any;
    protected pressLocation: any;
    protected pressTarget: any;
    protected scrollInterval: any;
    protected autoHeight: boolean;
    protected rtl: boolean;
    constructor(viewContext: ViewContextService, viewState: ViewStateService, intl: IntlService, slotService: BaseSlotService, zone: NgZone, renderer: Renderer2, element: ElementRef, pdfService: PDFService, localization: LocalizationService);
    protected abstract onSelectDate(date: Date): void;
    protected abstract onAction(action: NavigationAction): void;
    protected abstract onTasksChange(): void;
    protected abstract createTasks(items: ViewItem[], dateRange: DateRange): any[];
    protected abstract reflow(): void;
    protected abstract slotByIndex(slotIndex: string, args: any): any;
    protected abstract dateRange(date: Date): DateRange;
    protected abstract dragHintSize(startSlot: any, endSlot: any): any;
    protected abstract dragRanges(slot: any): any;
    protected abstract slotByPosition(x: number, y: number, container?: any): any;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    itemIndex(index: number, _: any): any;
    resourcesByIndex(index: number): any[];
    dragResourcesByIndex(index: number): any[];
    getEventClasses(item: any, resources: any, isAllDay?: boolean): any;
    getEventStyles(item: any, itemResource: any, isAllDay?: boolean): any;
    protected optionsChange(options: any): void;
    protected toggleElement(visible: boolean): void;
    protected onStable(): any;
    protected updateView(): void;
    protected assignResources(): void;
    protected bindEvents(): void;
    protected onPress(args: any): void;
    protected onDrag(args: any): void;
    protected onRelease(): void;
    protected setHintClass(className: string): void;
    protected updateHintClass(): void;
    protected removeHintClass(): void;
    protected setSlotClass(className: string): void;
    protected removeSlotClass(): void;
    protected readonly hints: any;
    protected initDrag(args: any): void;
    protected updateDragContainer(args: any): void;
    protected drag(args: any): void;
    protected dragHintClasses(): any;
    protected dragHintEventStyleArgs(): any;
    protected draggedIsAllDay(task: any, _slot: any): boolean;
    protected dragResourceColor(task: any, slotResources: any[]): string;
    protected resourceValues(task: any, currentResources: any[]): any;
    protected initResize(args: any): void;
    protected resize(args: any): void;
    protected updateResizeHints(ranges: any[], start: Date, end: Date): void;
    protected coordinatesOffset(x: number, y: number, container?: any, offset?: any): any;
    protected scrollContainer(callback: any, args: any): void;
    protected emitEvent(name: string, args: any): boolean;
    protected targetTask(target: any): any;
    protected updateHintContainer(): void;
    /**
     * Converts a "view date" (date stored in the UTC parts of a Date object) to a local date.
     */
    protected convertDate(date: Date): Date;
    protected onClick(e: any, eventType?: string): void;
    protected emitSlotEvent(e: any, eventType: string): void;
    protected emitTaskEvent(e: any, eventType: string): void;
    protected onKeydown(e: any): void;
    protected syncTables(): void;
    protected updateContentHeight(): void;
    protected groupResources(): void;
    protected readonly taskResources: any[];
    protected resourceSpans(): number[];
    protected isInRange(date: Date): boolean;
    protected createPDFElement(): void;
    protected pdfWidth(): number;
    protected containerByPosition({ x, y }: any): any;
    protected execute(e: any): void;
    protected slotFields(slot: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseView, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseView, never, never, { "\u0435ventTemplate": "\u0435ventTemplate"; "groupHeaderTemplate": "groupHeaderTemplate"; "selectedDateFormat": "selectedDateFormat"; "selectedShortDateFormat": "selectedShortDateFormat"; "eventHeight": "eventHeight"; "slotClass": "slotClass"; "eventClass": "eventClass"; "eventStyles": "eventStyles"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12aWV3LmQudHMiLCJzb3VyY2VzIjpbImJhc2Utdmlldy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBOZ1pvbmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIFN1YmplY3QsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRGF0ZVJhbmdlLCBOYXZpZ2F0aW9uQWN0aW9uLCBWaWV3SXRlbSB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEJhc2VTbG90U2VydmljZSB9IGZyb20gJy4uL3ZpZXctaXRlbXMvYmFzZS1zbG90LnNlcnZpY2UnO1xuaW1wb3J0IHsgVmlld0NvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi4vdmlldy1jb250ZXh0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVmlld1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3ZpZXctc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBIaW50Q29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2hpbnQtY29udGFpbmVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQREZTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vcGRmL3BkZi5zZXJ2aWNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbi8qKiBAaGlkZGVuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBCYXNlVmlldyBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCB2aWV3Q29udGV4dDogVmlld0NvbnRleHRTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCB2aWV3U3RhdGU6IFZpZXdTdGF0ZVNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGludGw6IEludGxTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBzbG90U2VydmljZTogQmFzZVNsb3RTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIHBkZlNlcnZpY2U6IFBERlNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZTtcbiAgICDQtXZlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBncm91cEhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHNlbGVjdGVkRGF0ZUZvcm1hdDogc3RyaW5nO1xuICAgIHNlbGVjdGVkU2hvcnREYXRlRm9ybWF0OiBzdHJpbmc7XG4gICAgZXZlbnRIZWlnaHQ6IG51bWJlcjtcbiAgICBzbG90Q2xhc3M6IChhcmdzOiBhbnkpID0+IGFueTtcbiAgICBldmVudENsYXNzOiAoYXJnczogYW55KSA9PiBhbnk7XG4gICAgZXZlbnRTdHlsZXM6IChhcmdzOiBhbnkpID0+IGFueTtcbiAgICBjb250ZW50OiBFbGVtZW50UmVmO1xuICAgIGhlYWRlcjogRWxlbWVudFJlZjtcbiAgICBjb250ZW50VGFibGU6IEVsZW1lbnRSZWY7XG4gICAgdGltZXM6IEVsZW1lbnRSZWY7XG4gICAgdGltZXNIZWFkZXI6IEVsZW1lbnRSZWY7XG4gICAgdGltZXNUYWJsZTogRWxlbWVudFJlZjtcbiAgICBoZWFkZXJXcmFwOiBFbGVtZW50UmVmO1xuICAgIGhpbnRDb250YWluZXI6IEhpbnRDb250YWluZXJDb21wb25lbnQ7XG4gICAgcmVhZG9ubHkgZXZlbnRUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICByZWFkb25seSBncm91cEhlYWRlclRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGl0ZW1zOiBTdWJqZWN0PGFueVtdPjtcbiAgICBob3Jpem9udGFsUmVzb3VyY2VzOiBhbnlbXTtcbiAgICB2ZXJ0aWNhbFJlc291cmNlczogYW55W107XG4gICAgZHJhZ0hpbnRzOiBhbnlbXTtcbiAgICByZXNpemVIaW50czogYW55W107XG4gICAgZWRpdGFibGU6IGFueTtcbiAgICBnZXRGaWVsZDogYW55O1xuICAgIHByb3RlY3RlZCBjaGFuZ2VzOiBCZWhhdmlvclN1YmplY3Q8YW55PjtcbiAgICBwcm90ZWN0ZWQgdmlld1JhbmdlQ2hhbmdlOiBCZWhhdmlvclN1YmplY3Q8YW55PjtcbiAgICBwcm90ZWN0ZWQgc3ViczogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCBncm91cGVkUmVzb3VyY2VzOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgc3BhbnM6IGFueVtdO1xuICAgIHByb3RlY3RlZCBjb250ZW50SGVpZ2h0OiBhbnk7XG4gICAgcHJvdGVjdGVkIHRhc2tzOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgZ3JvdXA6IGFueTtcbiAgICBwcm90ZWN0ZWQgcmVzb3VyY2VzOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgZG9tRXZlbnRzOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgc2NoZWR1bGVyRXZlbnRUZW1wbGF0ZTogYW55O1xuICAgIHByb3RlY3RlZCBzY2hlZHVsZXJHcm91cEhlYWRlclRlbXBsYXRlOiBhbnk7XG4gICAgcHJvdGVjdGVkIG1pbjogYW55O1xuICAgIHByb3RlY3RlZCBtYXg6IGFueTtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0ZWREYXRlOiBEYXRlO1xuICAgIHByb3RlY3RlZCByZXNvdXJjZXNDYWNoZTogYW55O1xuICAgIHByb3RlY3RlZCB0aW1lem9uZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBkcmFnZ2FibGU6IGFueTtcbiAgICBwcm90ZWN0ZWQgcmVzaXppbmc6IGFueTtcbiAgICBwcm90ZWN0ZWQgZHJhZ2dpbmc6IGFueTtcbiAgICBwcm90ZWN0ZWQgZHJhZ0FyZ3M6IGFueTtcbiAgICBwcm90ZWN0ZWQgY29udGFpbmVyOiBhbnk7XG4gICAgcHJvdGVjdGVkIGNvbnRhaW5lck9mZnNldDogYW55O1xuICAgIHByb3RlY3RlZCBwcmVzc0xvY2F0aW9uOiBhbnk7XG4gICAgcHJvdGVjdGVkIHByZXNzVGFyZ2V0OiBhbnk7XG4gICAgcHJvdGVjdGVkIHNjcm9sbEludGVydmFsOiBhbnk7XG4gICAgcHJvdGVjdGVkIGF1dG9IZWlnaHQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHJ0bDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGV4dDogVmlld0NvbnRleHRTZXJ2aWNlLCB2aWV3U3RhdGU6IFZpZXdTdGF0ZVNlcnZpY2UsIGludGw6IEludGxTZXJ2aWNlLCBzbG90U2VydmljZTogQmFzZVNsb3RTZXJ2aWNlLCB6b25lOiBOZ1pvbmUsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHBkZlNlcnZpY2U6IFBERlNlcnZpY2UsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSk7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IG9uU2VsZWN0RGF0ZShkYXRlOiBEYXRlKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25BY3Rpb24oYWN0aW9uOiBOYXZpZ2F0aW9uQWN0aW9uKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3Qgb25UYXNrc0NoYW5nZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBjcmVhdGVUYXNrcyhpdGVtczogVmlld0l0ZW1bXSwgZGF0ZVJhbmdlOiBEYXRlUmFuZ2UpOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgcmVmbG93KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNsb3RCeUluZGV4KHNsb3RJbmRleDogc3RyaW5nLCBhcmdzOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGRhdGVSYW5nZShkYXRlOiBEYXRlKTogRGF0ZVJhbmdlO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBkcmFnSGludFNpemUoc3RhcnRTbG90OiBhbnksIGVuZFNsb3Q6IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZHJhZ1JhbmdlcyhzbG90OiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHNsb3RCeVBvc2l0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCBjb250YWluZXI/OiBhbnkpOiBhbnk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgaXRlbUluZGV4KGluZGV4OiBudW1iZXIsIF86IGFueSk6IGFueTtcbiAgICByZXNvdXJjZXNCeUluZGV4KGluZGV4OiBudW1iZXIpOiBhbnlbXTtcbiAgICBkcmFnUmVzb3VyY2VzQnlJbmRleChpbmRleDogbnVtYmVyKTogYW55W107XG4gICAgZ2V0RXZlbnRDbGFzc2VzKGl0ZW06IGFueSwgcmVzb3VyY2VzOiBhbnksIGlzQWxsRGF5PzogYm9vbGVhbik6IGFueTtcbiAgICBnZXRFdmVudFN0eWxlcyhpdGVtOiBhbnksIGl0ZW1SZXNvdXJjZTogYW55LCBpc0FsbERheT86IGJvb2xlYW4pOiBhbnk7XG4gICAgcHJvdGVjdGVkIG9wdGlvbnNDaGFuZ2Uob3B0aW9uczogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdG9nZ2xlRWxlbWVudCh2aXNpYmxlOiBib29sZWFuKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25TdGFibGUoKTogYW55O1xuICAgIHByb3RlY3RlZCB1cGRhdGVWaWV3KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGFzc2lnblJlc291cmNlcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBiaW5kRXZlbnRzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uUHJlc3MoYXJnczogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25EcmFnKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIG9uUmVsZWFzZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBzZXRIaW50Q2xhc3MoY2xhc3NOYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVIaW50Q2xhc3MoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgcmVtb3ZlSGludENsYXNzKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNldFNsb3RDbGFzcyhjbGFzc05hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlbW92ZVNsb3RDbGFzcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBoaW50czogYW55O1xuICAgIHByb3RlY3RlZCBpbml0RHJhZyhhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVEcmFnQ29udGFpbmVyKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGRyYWcoYXJnczogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZHJhZ0hpbnRDbGFzc2VzKCk6IGFueTtcbiAgICBwcm90ZWN0ZWQgZHJhZ0hpbnRFdmVudFN0eWxlQXJncygpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGRyYWdnZWRJc0FsbERheSh0YXNrOiBhbnksIF9zbG90OiBhbnkpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBkcmFnUmVzb3VyY2VDb2xvcih0YXNrOiBhbnksIHNsb3RSZXNvdXJjZXM6IGFueVtdKTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCByZXNvdXJjZVZhbHVlcyh0YXNrOiBhbnksIGN1cnJlbnRSZXNvdXJjZXM6IGFueVtdKTogYW55O1xuICAgIHByb3RlY3RlZCBpbml0UmVzaXplKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlc2l6ZShhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVSZXNpemVIaW50cyhyYW5nZXM6IGFueVtdLCBzdGFydDogRGF0ZSwgZW5kOiBEYXRlKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY29vcmRpbmF0ZXNPZmZzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbnRhaW5lcj86IGFueSwgb2Zmc2V0PzogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCBzY3JvbGxDb250YWluZXIoY2FsbGJhY2s6IGFueSwgYXJnczogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZW1pdEV2ZW50KG5hbWU6IHN0cmluZywgYXJnczogYW55KTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgdGFyZ2V0VGFzayh0YXJnZXQ6IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlSGludENvbnRhaW5lcigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgXCJ2aWV3IGRhdGVcIiAoZGF0ZSBzdG9yZWQgaW4gdGhlIFVUQyBwYXJ0cyBvZiBhIERhdGUgb2JqZWN0KSB0byBhIGxvY2FsIGRhdGUuXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNvbnZlcnREYXRlKGRhdGU6IERhdGUpOiBEYXRlO1xuICAgIHByb3RlY3RlZCBvbkNsaWNrKGU6IGFueSwgZXZlbnRUeXBlPzogc3RyaW5nKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZW1pdFNsb3RFdmVudChlOiBhbnksIGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZW1pdFRhc2tFdmVudChlOiBhbnksIGV2ZW50VHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25LZXlkb3duKGU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHN5bmNUYWJsZXMoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlQ29udGVudEhlaWdodCgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBncm91cFJlc291cmNlcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCByZWFkb25seSB0YXNrUmVzb3VyY2VzOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgcmVzb3VyY2VTcGFucygpOiBudW1iZXJbXTtcbiAgICBwcm90ZWN0ZWQgaXNJblJhbmdlKGRhdGU6IERhdGUpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBjcmVhdGVQREZFbGVtZW50KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHBkZldpZHRoKCk6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgY29udGFpbmVyQnlQb3NpdGlvbih7IHgsIHkgfTogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCBleGVjdXRlKGU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNsb3RGaWVsZHMoc2xvdDogYW55KTogYW55O1xufVxuIl19