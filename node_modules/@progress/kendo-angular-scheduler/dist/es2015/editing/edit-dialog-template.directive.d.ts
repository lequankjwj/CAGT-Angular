/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
/**
 * Represents the template for the edit dialog of the Scheduler.
 * To define the template, nest an `<ng-template>` tag
 * with the `kendoSchedulerEditDialogTemplate` directive inside the `<kendo-scheduler>` tag.
 *
 * The template context is set to the current event and then the following additional fields are passed:
 * - `event`&mdash;The currently edited event. Represents the default context that will be assigned to any template variable which utilizes the `let-x` syntax&mdash;for example, `let-event`.
 * - `formGroup`&mdash;The current [`FormGroup`](https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html).
 * - `editMode`&mdash;The current edit mode.
 * - `isNew`&mdash;The state of the current event.
 */
import * as ɵngcc0 from '@angular/core';
export declare class EditDialogTemplateDirective {
    templateRef: TemplateRef<any>;
    /**
     * Specifies the query selector used to set the initial focus.
     */
    autoFocusedElement: string;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditDialogTemplateDirective, [{ optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<EditDialogTemplateDirective, "[kendoSchedulerEditDialogTemplate]", never, { "autoFocusedElement": "autoFocusedElement"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1kaWFsb2ctdGVtcGxhdGUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImVkaXQtZGlhbG9nLXRlbXBsYXRlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHRlbXBsYXRlIGZvciB0aGUgZWRpdCBkaWFsb2cgb2YgdGhlIFNjaGVkdWxlci5cbiAqIFRvIGRlZmluZSB0aGUgdGVtcGxhdGUsIG5lc3QgYW4gYDxuZy10ZW1wbGF0ZT5gIHRhZ1xuICogd2l0aCB0aGUgYGtlbmRvU2NoZWR1bGVyRWRpdERpYWxvZ1RlbXBsYXRlYCBkaXJlY3RpdmUgaW5zaWRlIHRoZSBgPGtlbmRvLXNjaGVkdWxlcj5gIHRhZy5cbiAqXG4gKiBUaGUgdGVtcGxhdGUgY29udGV4dCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgZXZlbnQgYW5kIHRoZW4gdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIGZpZWxkcyBhcmUgcGFzc2VkOlxuICogLSBgZXZlbnRgJm1kYXNoO1RoZSBjdXJyZW50bHkgZWRpdGVkIGV2ZW50LiBSZXByZXNlbnRzIHRoZSBkZWZhdWx0IGNvbnRleHQgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIGFueSB0ZW1wbGF0ZSB2YXJpYWJsZSB3aGljaCB1dGlsaXplcyB0aGUgYGxldC14YCBzeW50YXgmbWRhc2g7Zm9yIGV4YW1wbGUsIGBsZXQtZXZlbnRgLlxuICogLSBgZm9ybUdyb3VwYCZtZGFzaDtUaGUgY3VycmVudCBbYEZvcm1Hcm91cGBdKGh0dHBzOi8vYW5ndWxhci5pby9kb2NzL3RzL2xhdGVzdC9hcGkvZm9ybXMvaW5kZXgvRm9ybUdyb3VwLWNsYXNzLmh0bWwpLlxuICogLSBgZWRpdE1vZGVgJm1kYXNoO1RoZSBjdXJyZW50IGVkaXQgbW9kZS5cbiAqIC0gYGlzTmV3YCZtZGFzaDtUaGUgc3RhdGUgb2YgdGhlIGN1cnJlbnQgZXZlbnQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVkaXREaWFsb2dUZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBxdWVyeSBzZWxlY3RvciB1c2VkIHRvIHNldCB0aGUgaW5pdGlhbCBmb2N1cy5cbiAgICAgKi9cbiAgICBhdXRvRm9jdXNlZEVsZW1lbnQ6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pik7XG59XG4iXX0=