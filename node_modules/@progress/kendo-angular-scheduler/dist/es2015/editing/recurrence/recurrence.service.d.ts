/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter } from "@angular/core";
import { RecurrenceRule } from '@progress/kendo-recurrence';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { IntlService } from '@progress/kendo-angular-intl';
/**
 * @hidden
 *
 */
import * as ɵngcc0 from '@angular/core';
export interface WeekDayRule {
    day: number;
    offset: number;
}
/**
 * @hidden
 */
export declare type EndRule = 'count' | 'never' | 'until';
/**
 * @hidden
 */
export declare type RepeatOnRule = 'monthday' | 'weekday';
/**
 * @hidden
 */
export declare type Frequency = 'never' | 'daily' | 'weekly' | 'monthly' | 'yearly';
/**
 * @hidden
 */
export declare type OffsetPosition = 'first' | 'second' | 'third' | 'fourth' | 'last';
/**
 * @hidden
 */
export interface FrequencyEntity {
    text: string;
    value: Frequency;
}
/**
 * @hidden
 */
export interface WeekDayEntity {
    text: string;
    value: number | string;
}
/**
 * @hidden
 */
export interface MonthEntity {
    text: string;
    value: number;
}
/**
 * @hidden
 */
export interface OffsetPositionEntity {
    text: string;
    value: number;
}
/**
 * @hidden
 */
export declare const dayRule: Array<WeekDayRule>;
/**
 * @hidden
 */
export declare const weekdayRule: Array<WeekDayRule>;
/**
 * @hidden
 */
export declare const weekendRule: Array<WeekDayRule>;
/**
 * @hidden
 *
 * The internal service for handling changes in the RecurrenceEditor component.
 */
export declare class RecurrenceService {
    private intl;
    private localization;
    rrule: RecurrenceRule;
    timezone: string;
    start: Date;
    change: EventEmitter<string>;
    endRuleChange: EventEmitter<string>;
    frequencyChange: EventEmitter<any>;
    repeatOnRuleChange: EventEmitter<RepeatOnRule>;
    constructor(intl: IntlService, localization: LocalizationService);
    init(rrule: string, start: Date, timezone: string): void;
    /**
     * @hidden
     */
    getUniqueId(): number;
    readonly frequencies: Array<FrequencyEntity>;
    readonly frequency: string;
    setFrequency(freq: Frequency): void;
    interval: number;
    count: number;
    until: Date;
    setWeekDays(newWeekDays: Array<WeekDayRule>): void;
    monthDays: Array<number>;
    positions: Array<number>;
    setMonths(newMonths: Array<number>): void;
    readonly months: Array<MonthEntity>;
    readonly weekDays: Array<WeekDayEntity>;
    readonly extendedWeekDays: Array<WeekDayEntity>;
    readonly offsetPositions: Array<OffsetPositionEntity>;
    endRule: EndRule;
    repeatOnRule: RepeatOnRule;
    onChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecurrenceService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<RecurrenceService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdXJyZW5jZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInJlY3VycmVuY2Uuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBSZWN1cnJlbmNlUnVsZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1yZWN1cnJlbmNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG4vKipcbiAqIEBoaWRkZW5cbiAqXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV2Vla0RheVJ1bGUge1xuICAgIGRheTogbnVtYmVyO1xuICAgIG9mZnNldDogbnVtYmVyO1xufVxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIHR5cGUgRW5kUnVsZSA9ICdjb3VudCcgfCAnbmV2ZXInIHwgJ3VudGlsJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIFJlcGVhdE9uUnVsZSA9ICdtb250aGRheScgfCAnd2Vla2RheSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGcmVxdWVuY3kgPSAnbmV2ZXInIHwgJ2RhaWx5JyB8ICd3ZWVrbHknIHwgJ21vbnRobHknIHwgJ3llYXJseSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBPZmZzZXRQb3NpdGlvbiA9ICdmaXJzdCcgfCAnc2Vjb25kJyB8ICd0aGlyZCcgfCAnZm91cnRoJyB8ICdsYXN0Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZyZXF1ZW5jeUVudGl0eSB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIHZhbHVlOiBGcmVxdWVuY3k7XG59XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWVrRGF5RW50aXR5IHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmFsdWU6IG51bWJlciB8IHN0cmluZztcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1vbnRoRW50aXR5IHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmFsdWU6IG51bWJlcjtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9mZnNldFBvc2l0aW9uRW50aXR5IHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmFsdWU6IG51bWJlcjtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBkYXlSdWxlOiBBcnJheTxXZWVrRGF5UnVsZT47XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3Qgd2Vla2RheVJ1bGU6IEFycmF5PFdlZWtEYXlSdWxlPjtcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCB3ZWVrZW5kUnVsZTogQXJyYXk8V2Vla0RheVJ1bGU+O1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogVGhlIGludGVybmFsIHNlcnZpY2UgZm9yIGhhbmRsaW5nIGNoYW5nZXMgaW4gdGhlIFJlY3VycmVuY2VFZGl0b3IgY29tcG9uZW50LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZWN1cnJlbmNlU2VydmljZSB7XG4gICAgcHJpdmF0ZSBpbnRsO1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uO1xuICAgIHJydWxlOiBSZWN1cnJlbmNlUnVsZTtcbiAgICB0aW1lem9uZTogc3RyaW5nO1xuICAgIHN0YXJ0OiBEYXRlO1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgZW5kUnVsZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgZnJlcXVlbmN5Q2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZXBlYXRPblJ1bGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxSZXBlYXRPblJ1bGU+O1xuICAgIGNvbnN0cnVjdG9yKGludGw6IEludGxTZXJ2aWNlLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UpO1xuICAgIGluaXQocnJ1bGU6IHN0cmluZywgc3RhcnQ6IERhdGUsIHRpbWV6b25lOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXRVbmlxdWVJZCgpOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgZnJlcXVlbmNpZXM6IEFycmF5PEZyZXF1ZW5jeUVudGl0eT47XG4gICAgcmVhZG9ubHkgZnJlcXVlbmN5OiBzdHJpbmc7XG4gICAgc2V0RnJlcXVlbmN5KGZyZXE6IEZyZXF1ZW5jeSk6IHZvaWQ7XG4gICAgaW50ZXJ2YWw6IG51bWJlcjtcbiAgICBjb3VudDogbnVtYmVyO1xuICAgIHVudGlsOiBEYXRlO1xuICAgIHNldFdlZWtEYXlzKG5ld1dlZWtEYXlzOiBBcnJheTxXZWVrRGF5UnVsZT4pOiB2b2lkO1xuICAgIG1vbnRoRGF5czogQXJyYXk8bnVtYmVyPjtcbiAgICBwb3NpdGlvbnM6IEFycmF5PG51bWJlcj47XG4gICAgc2V0TW9udGhzKG5ld01vbnRoczogQXJyYXk8bnVtYmVyPik6IHZvaWQ7XG4gICAgcmVhZG9ubHkgbW9udGhzOiBBcnJheTxNb250aEVudGl0eT47XG4gICAgcmVhZG9ubHkgd2Vla0RheXM6IEFycmF5PFdlZWtEYXlFbnRpdHk+O1xuICAgIHJlYWRvbmx5IGV4dGVuZGVkV2Vla0RheXM6IEFycmF5PFdlZWtEYXlFbnRpdHk+O1xuICAgIHJlYWRvbmx5IG9mZnNldFBvc2l0aW9uczogQXJyYXk8T2Zmc2V0UG9zaXRpb25FbnRpdHk+O1xuICAgIGVuZFJ1bGU6IEVuZFJ1bGU7XG4gICAgcmVwZWF0T25SdWxlOiBSZXBlYXRPblJ1bGU7XG4gICAgb25DaGFuZ2UoKTogdm9pZDtcbn1cbiJdfQ==