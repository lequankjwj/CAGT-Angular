/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, Input, HostBinding, ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';
import { RecurrenceService } from './recurrence.service';
/**
 * @hidden
 */
export class RepeatOnRadioButtonDirective {
    constructor(el, renderer, recurrence, changeDetector) {
        this.el = el;
        this.renderer = renderer;
        this.recurrence = recurrence;
        this.changeDetector = changeDetector;
        this.type = 'radio';
        this.radioClass = true;
        this.destroyChange = this.renderer.listen(this.elem, 'change', this.onChange.bind(this));
    }
    /* tslint:disable-next-line:no-input-rename */
    set repeatOnRule(value) {
        const parts = value.split('-');
        this._repeatOnRule = parts[0];
        this._uniqueId = parts[1];
    }
    ngOnInit() {
        this.renderer.setAttribute(this.elem, 'id', `k-repeaton-${this._repeatOnRule}-${this._uniqueId}`);
        this.renderer.setAttribute(this.elem, 'name', `day-${this._uniqueId}`);
    }
    ngAfterContentChecked() {
        this.setCheckedState();
    }
    ngOnDestroy() {
        if (this.destroyChange) {
            this.destroyChange();
        }
    }
    onChange() {
        if (this.elem.checked) {
            this.recurrence.repeatOnRule = this._repeatOnRule;
            this.changeDetector.markForCheck();
        }
    }
    setCheckedState() {
        const isChecked = this._repeatOnRule === this.recurrence.repeatOnRule;
        this.renderer.setProperty(this.elem, 'checked', isChecked);
    }
    get elem() {
        return this.el.nativeElement;
    }
}
RepeatOnRadioButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendoRecurrenceRepeatOnRadioButton]'
            },] },
];
/** @nocollapse */
RepeatOnRadioButtonDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: RecurrenceService },
    { type: ChangeDetectorRef }
];
RepeatOnRadioButtonDirective.propDecorators = {
    type: [{ type: HostBinding, args: ['attr.type',] }],
    radioClass: [{ type: HostBinding, args: ['class.k-radio',] }],
    repeatOnRule: [{ type: Input, args: ["kendoRecurrenceRepeatOnRadioButton",] }]
};
