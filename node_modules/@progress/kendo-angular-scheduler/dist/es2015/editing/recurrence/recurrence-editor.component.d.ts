/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { RecurrenceService, Frequency } from './recurrence.service';
import { NumericTextBoxOptions } from '../../types/numeric-options.interface';
import { DatePickerOptions } from './../../types/datepicker-options.interface';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare const RECURRENCE_VALUE_ACCESSOR: any;
/**
 * Represents the Kendo UI Recurrence Editor component for Angular. [This example]({% slug custom_reactive_editing_scheduler %}#toc-setup) demonstrates the Recurrence Editor, among other components.
 */
export declare class RecurrenceEditorComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private recurrenceService;
    cssClass: boolean;
    /**
     * Specifies the start date of the event.
     */
    start: Date;
    /**
     * Specifies the id of the timezone that will be used.
     */
    timezone: string;
    /**
     * Specifies the options of the `Repeat Every` NumericTextBox component within the recurrence `interval` editor.
     */
    repeatEveryOptions: NumericTextBoxOptions;
    /**
     * Specifies the options of the `End After` NumericTextBox component within the recurrence `count` rule editor.
     */
    endAfterOptions: NumericTextBoxOptions;
    /**
     * Specifies the options of the `Repeat On` NumericTextBox component for choosing the day
     * an event will occur on within the monthly and yearly sections of the recurrence editor.
     */
    repeatOnOptions: NumericTextBoxOptions;
    /**
     * Specifies the options of the `End On` DatePicker component within the recurrence `until` rule editor.
     */
    endOnOptions: DatePickerOptions;
    /**
     * Fires when the value of the component has changed.
     */
    valueChange: EventEmitter<string>;
    private _start;
    private subscriptions;
    constructor(recurrenceService: RecurrenceService);
    /**
     * @hidden
     */
    readonly currentFreq: Frequency;
    /**
     * @hidden
     */
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    writeValue(rrule: any): void;
    protected onTouchedCallback: Function;
    protected onChangeCallback: Function;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    private emitChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RecurrenceEditorComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<RecurrenceEditorComponent, "kendo-recurrence-editor", ["kendoRecurrenceEditor"], { "timezone": "timezone"; "start": "start"; "repeatEveryOptions": "repeatEveryOptions"; "endAfterOptions": "endAfterOptions"; "repeatOnOptions": "repeatOnOptions"; "endOnOptions": "endOnOptions"; }, { "valueChange": "valueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdXJyZW5jZS1lZGl0b3IuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJlY3VycmVuY2UtZWRpdG9yLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJlY3VycmVuY2VTZXJ2aWNlLCBGcmVxdWVuY3kgfSBmcm9tICcuL3JlY3VycmVuY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOdW1lcmljVGV4dEJveE9wdGlvbnMgfSBmcm9tICcuLi8uLi90eXBlcy9udW1lcmljLW9wdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IERhdGVQaWNrZXJPcHRpb25zIH0gZnJvbSAnLi8uLi8uLi90eXBlcy9kYXRlcGlja2VyLW9wdGlvbnMuaW50ZXJmYWNlJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBSRUNVUlJFTkNFX1ZBTFVFX0FDQ0VTU09SOiBhbnk7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEtlbmRvIFVJIFJlY3VycmVuY2UgRWRpdG9yIGNvbXBvbmVudCBmb3IgQW5ndWxhci4gW1RoaXMgZXhhbXBsZV0oeyUgc2x1ZyBjdXN0b21fcmVhY3RpdmVfZWRpdGluZ19zY2hlZHVsZXIgJX0jdG9jLXNldHVwKSBkZW1vbnN0cmF0ZXMgdGhlIFJlY3VycmVuY2UgRWRpdG9yLCBhbW9uZyBvdGhlciBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBSZWN1cnJlbmNlRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlY3VycmVuY2VTZXJ2aWNlO1xuICAgIGNzc0NsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc3RhcnQgZGF0ZSBvZiB0aGUgZXZlbnQuXG4gICAgICovXG4gICAgc3RhcnQ6IERhdGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBpZCBvZiB0aGUgdGltZXpvbmUgdGhhdCB3aWxsIGJlIHVzZWQuXG4gICAgICovXG4gICAgdGltZXpvbmU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG9wdGlvbnMgb2YgdGhlIGBSZXBlYXQgRXZlcnlgIE51bWVyaWNUZXh0Qm94IGNvbXBvbmVudCB3aXRoaW4gdGhlIHJlY3VycmVuY2UgYGludGVydmFsYCBlZGl0b3IuXG4gICAgICovXG4gICAgcmVwZWF0RXZlcnlPcHRpb25zOiBOdW1lcmljVGV4dEJveE9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBvcHRpb25zIG9mIHRoZSBgRW5kIEFmdGVyYCBOdW1lcmljVGV4dEJveCBjb21wb25lbnQgd2l0aGluIHRoZSByZWN1cnJlbmNlIGBjb3VudGAgcnVsZSBlZGl0b3IuXG4gICAgICovXG4gICAgZW5kQWZ0ZXJPcHRpb25zOiBOdW1lcmljVGV4dEJveE9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBvcHRpb25zIG9mIHRoZSBgUmVwZWF0IE9uYCBOdW1lcmljVGV4dEJveCBjb21wb25lbnQgZm9yIGNob29zaW5nIHRoZSBkYXlcbiAgICAgKiBhbiBldmVudCB3aWxsIG9jY3VyIG9uIHdpdGhpbiB0aGUgbW9udGhseSBhbmQgeWVhcmx5IHNlY3Rpb25zIG9mIHRoZSByZWN1cnJlbmNlIGVkaXRvci5cbiAgICAgKi9cbiAgICByZXBlYXRPbk9wdGlvbnM6IE51bWVyaWNUZXh0Qm94T3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG9wdGlvbnMgb2YgdGhlIGBFbmQgT25gIERhdGVQaWNrZXIgY29tcG9uZW50IHdpdGhpbiB0aGUgcmVjdXJyZW5jZSBgdW50aWxgIHJ1bGUgZWRpdG9yLlxuICAgICAqL1xuICAgIGVuZE9uT3B0aW9uczogRGF0ZVBpY2tlck9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudCBoYXMgY2hhbmdlZC5cbiAgICAgKi9cbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgcHJpdmF0ZSBfc3RhcnQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKHJlY3VycmVuY2VTZXJ2aWNlOiBSZWN1cnJlbmNlU2VydmljZSk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1cnJlbnRGcmVxOiBGcmVxdWVuY3k7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZShycnVsZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaGVkQ2FsbGJhY2s6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCBvbkNoYW5nZUNhbGxiYWNrOiBGdW5jdGlvbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBlbWl0Q2hhbmdlO1xufVxuIl19