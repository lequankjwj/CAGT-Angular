/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, NgZone, ChangeDetectorRef, QueryList, ElementRef } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Resource } from '../types/resource.interface';
import { EditService } from './edit.service';
import { EditMode } from '../types';
import { EditDialogTemplateDirective } from './edit-dialog-template.directive';
import { MultipleResourceEditorComponent } from './resource-multiple-editor.component';
import { SingleResourceEditorComponent } from './resource-single-editor.component';
import { FocusService } from '../navigation';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class EditDialogComponent implements OnDestroy {
    private ngZone;
    private editService;
    private localization;
    private changeDetector;
    private element;
    private focusService;
    multipleResourceEditors: QueryList<MultipleResourceEditorComponent>;
    singleResourceEditors: QueryList<SingleResourceEditorComponent>;
    resources: Array<Resource>;
    timezone: string;
    fields: any;
    editTemplate: EditDialogTemplateDirective;
    readonly autoFocusedElement: string;
    dialogTitle: string;
    isActive: boolean;
    editMode: EditMode;
    readonly isEditingSeries: boolean;
    readonly eventTimezone: string;
    readonly endTimezone: string;
    recurrenceStart: Date;
    setTimeZone: boolean;
    setSeparateStartEndTimeZones: boolean;
    formGroup: FormGroup;
    editedEvent: any;
    isNew: boolean;
    private subs;
    constructor(ngZone: NgZone, editService: EditService, localization: LocalizationService, changeDetector: ChangeDetectorRef, element: ElementRef, focusService: FocusService);
    onChange(): void;
    ngOnDestroy(): void;
    onCancel(e: any): void;
    onSave(e: any): void;
    onClose(): void;
    readonly hasAllDay: boolean;
    readonly hasStartTimeZone: boolean;
    readonly isStartTimeZoneVisible: boolean;
    readonly hasEndTimeZone: boolean;
    readonly isEndTimeZoneVisible: boolean;
    getFormValue(field?: string): any;
    textFor(key: string): string;
    onResourceClick(resource: Resource): void;
    private reset;
    private addTimeZoneCheckboxesToFormGroup;
    private removeTimeZoneCheckboxesFromFormGroup;
    private subscribeToFormGroupChanges;
    /**
     * Converts the event dates to "display dates" that look like the original date in its time zone.
     * The result does not represent the same moment in time and must be converted back to local dates.
     */
    private applyLocalTimezone;
    /**
     * Converts the "display dates" used by the editors back to local dates that represent the true moment in time.
     */
    private applyTimezone;
    private readDateWithTimezone;
    private readDateAsLocal;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditDialogComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<EditDialogComponent, "kendo-scheduler-edit-dialog", never, { "resources": "resources"; "timezone": "timezone"; "fields": "fields"; "editTemplate": "editTemplate"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC1kaWFsb2cuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImVkaXQtZGlhbG9nLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPbkRlc3Ryb3ksIE5nWm9uZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICcuLi90eXBlcy9yZXNvdXJjZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRWRpdFNlcnZpY2UgfSBmcm9tICcuL2VkaXQuc2VydmljZSc7XG5pbXBvcnQgeyBFZGl0TW9kZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IEVkaXREaWFsb2dUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZWRpdC1kaWFsb2ctdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE11bHRpcGxlUmVzb3VyY2VFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL3Jlc291cmNlLW11bHRpcGxlLWVkaXRvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2luZ2xlUmVzb3VyY2VFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL3Jlc291cmNlLXNpbmdsZS1lZGl0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IEZvY3VzU2VydmljZSB9IGZyb20gJy4uL25hdmlnYXRpb24nO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEVkaXREaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgZWRpdFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBmb2N1c1NlcnZpY2U7XG4gICAgbXVsdGlwbGVSZXNvdXJjZUVkaXRvcnM6IFF1ZXJ5TGlzdDxNdWx0aXBsZVJlc291cmNlRWRpdG9yQ29tcG9uZW50PjtcbiAgICBzaW5nbGVSZXNvdXJjZUVkaXRvcnM6IFF1ZXJ5TGlzdDxTaW5nbGVSZXNvdXJjZUVkaXRvckNvbXBvbmVudD47XG4gICAgcmVzb3VyY2VzOiBBcnJheTxSZXNvdXJjZT47XG4gICAgdGltZXpvbmU6IHN0cmluZztcbiAgICBmaWVsZHM6IGFueTtcbiAgICBlZGl0VGVtcGxhdGU6IEVkaXREaWFsb2dUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICByZWFkb25seSBhdXRvRm9jdXNlZEVsZW1lbnQ6IHN0cmluZztcbiAgICBkaWFsb2dUaXRsZTogc3RyaW5nO1xuICAgIGlzQWN0aXZlOiBib29sZWFuO1xuICAgIGVkaXRNb2RlOiBFZGl0TW9kZTtcbiAgICByZWFkb25seSBpc0VkaXRpbmdTZXJpZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZXZlbnRUaW1lem9uZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGVuZFRpbWV6b25lOiBzdHJpbmc7XG4gICAgcmVjdXJyZW5jZVN0YXJ0OiBEYXRlO1xuICAgIHNldFRpbWVab25lOiBib29sZWFuO1xuICAgIHNldFNlcGFyYXRlU3RhcnRFbmRUaW1lWm9uZXM6IGJvb2xlYW47XG4gICAgZm9ybUdyb3VwOiBGb3JtR3JvdXA7XG4gICAgZWRpdGVkRXZlbnQ6IGFueTtcbiAgICBpc05ldzogYm9vbGVhbjtcbiAgICBwcml2YXRlIHN1YnM7XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIGVkaXRTZXJ2aWNlOiBFZGl0U2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlKTtcbiAgICBvbkNoYW5nZSgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgb25DYW5jZWwoZTogYW55KTogdm9pZDtcbiAgICBvblNhdmUoZTogYW55KTogdm9pZDtcbiAgICBvbkNsb3NlKCk6IHZvaWQ7XG4gICAgcmVhZG9ubHkgaGFzQWxsRGF5OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc1N0YXJ0VGltZVpvbmU6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNTdGFydFRpbWVab25lVmlzaWJsZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBoYXNFbmRUaW1lWm9uZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0VuZFRpbWVab25lVmlzaWJsZTogYm9vbGVhbjtcbiAgICBnZXRGb3JtVmFsdWUoZmllbGQ/OiBzdHJpbmcpOiBhbnk7XG4gICAgdGV4dEZvcihrZXk6IHN0cmluZyk6IHN0cmluZztcbiAgICBvblJlc291cmNlQ2xpY2socmVzb3VyY2U6IFJlc291cmNlKTogdm9pZDtcbiAgICBwcml2YXRlIHJlc2V0O1xuICAgIHByaXZhdGUgYWRkVGltZVpvbmVDaGVja2JveGVzVG9Gb3JtR3JvdXA7XG4gICAgcHJpdmF0ZSByZW1vdmVUaW1lWm9uZUNoZWNrYm94ZXNGcm9tRm9ybUdyb3VwO1xuICAgIHByaXZhdGUgc3Vic2NyaWJlVG9Gb3JtR3JvdXBDaGFuZ2VzO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBldmVudCBkYXRlcyB0byBcImRpc3BsYXkgZGF0ZXNcIiB0aGF0IGxvb2sgbGlrZSB0aGUgb3JpZ2luYWwgZGF0ZSBpbiBpdHMgdGltZSB6b25lLlxuICAgICAqIFRoZSByZXN1bHQgZG9lcyBub3QgcmVwcmVzZW50IHRoZSBzYW1lIG1vbWVudCBpbiB0aW1lIGFuZCBtdXN0IGJlIGNvbnZlcnRlZCBiYWNrIHRvIGxvY2FsIGRhdGVzLlxuICAgICAqL1xuICAgIHByaXZhdGUgYXBwbHlMb2NhbFRpbWV6b25lO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBcImRpc3BsYXkgZGF0ZXNcIiB1c2VkIGJ5IHRoZSBlZGl0b3JzIGJhY2sgdG8gbG9jYWwgZGF0ZXMgdGhhdCByZXByZXNlbnQgdGhlIHRydWUgbW9tZW50IGluIHRpbWUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBhcHBseVRpbWV6b25lO1xuICAgIHByaXZhdGUgcmVhZERhdGVXaXRoVGltZXpvbmU7XG4gICAgcHJpdmF0ZSByZWFkRGF0ZUFzTG9jYWw7XG59XG4iXX0=