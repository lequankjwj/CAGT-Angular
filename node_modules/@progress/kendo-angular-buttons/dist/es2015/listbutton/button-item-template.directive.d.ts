/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
/**
 * Used for rendering the list item content.
 *
 * To define the item template, nest a `<ng-template>` tag with the `kendo<ComponentName>ItemTemplate` directive inside the component tag.
 *
 * For the DropDownButton, use the `kendoDropDownButtonItemTemplate` directive.
 * For the SplitButton, use the `kendoSplitButtonItemTemplate` directive.
 *
 * The template context is set to the current component. To get a reference to the current data item, use the `let-dataItem` directive.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-splitbutton [data]="listItems">
 *    <ng-template kendoSplitButtonItemTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-splitbutton>
 *  <kendo-dropdownbutton [data]="listItems">
 *    <ng-template kendoDropDownButtonItemTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-dropdownbutton>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<any> = [{
 *      text: 'item1',
 *      icon: 'refresh',
 *      disabled: false,
 *      click: (dataItem: any) => {
 *          //action
 *      }
 *  }, {
 *      text: 'item2',
 *      icon: 'refresh',
 *      disabled: false,
 *      click: (dataItem: any) => {
 *          //action
 *      }
 *  }]
 * }
 * ```
 *
 * For more examples, refer to the article on the [DropDownList templates]({% slug overview_ddl %}#templates).
 */
import * as ɵngcc0 from '@angular/core';
export declare class ButtonItemTemplateDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ButtonItemTemplateDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ButtonItemTemplateDirective, "[kendoDropDownButtonItemTemplate],[kendoSplitButtonItemTemplate]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWl0ZW0tdGVtcGxhdGUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi1pdGVtLXRlbXBsYXRlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFVzZWQgZm9yIHJlbmRlcmluZyB0aGUgbGlzdCBpdGVtIGNvbnRlbnQuXG4gKlxuICogVG8gZGVmaW5lIHRoZSBpdGVtIHRlbXBsYXRlLCBuZXN0IGEgYDxuZy10ZW1wbGF0ZT5gIHRhZyB3aXRoIHRoZSBga2VuZG88Q29tcG9uZW50TmFtZT5JdGVtVGVtcGxhdGVgIGRpcmVjdGl2ZSBpbnNpZGUgdGhlIGNvbXBvbmVudCB0YWcuXG4gKlxuICogRm9yIHRoZSBEcm9wRG93bkJ1dHRvbiwgdXNlIHRoZSBga2VuZG9Ecm9wRG93bkJ1dHRvbkl0ZW1UZW1wbGF0ZWAgZGlyZWN0aXZlLlxuICogRm9yIHRoZSBTcGxpdEJ1dHRvbiwgdXNlIHRoZSBga2VuZG9TcGxpdEJ1dHRvbkl0ZW1UZW1wbGF0ZWAgZGlyZWN0aXZlLlxuICpcbiAqIFRoZSB0ZW1wbGF0ZSBjb250ZXh0IGlzIHNldCB0byB0aGUgY3VycmVudCBjb21wb25lbnQuIFRvIGdldCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBkYXRhIGl0ZW0sIHVzZSB0aGUgYGxldC1kYXRhSXRlbWAgZGlyZWN0aXZlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogX0BDb21wb25lbnQoe1xuICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICogdGVtcGxhdGU6IGBcbiAqICA8a2VuZG8tc3BsaXRidXR0b24gW2RhdGFdPVwibGlzdEl0ZW1zXCI+XG4gKiAgICA8bmctdGVtcGxhdGUga2VuZG9TcGxpdEJ1dHRvbkl0ZW1UZW1wbGF0ZSBsZXQtZGF0YUl0ZW0+XG4gKiAgICAgIDxzcGFuPnt7ZGF0YUl0ZW19fSBvcHRpb248L3NwYW4+XG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogIDwva2VuZG8tc3BsaXRidXR0b24+XG4gKiAgPGtlbmRvLWRyb3Bkb3duYnV0dG9uIFtkYXRhXT1cImxpc3RJdGVtc1wiPlxuICogICAgPG5nLXRlbXBsYXRlIGtlbmRvRHJvcERvd25CdXR0b25JdGVtVGVtcGxhdGUgbGV0LWRhdGFJdGVtPlxuICogICAgICA8c3Bhbj57e2RhdGFJdGVtfX0gb3B0aW9uPC9zcGFuPlxuICogICAgPC9uZy10ZW1wbGF0ZT5cbiAqICA8L2tlbmRvLWRyb3Bkb3duYnV0dG9uPlxuICogYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgIHB1YmxpYyBsaXN0SXRlbXM6IEFycmF5PGFueT4gPSBbe1xuICogICAgICB0ZXh0OiAnaXRlbTEnLFxuICogICAgICBpY29uOiAncmVmcmVzaCcsXG4gKiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAqICAgICAgY2xpY2s6IChkYXRhSXRlbTogYW55KSA9PiB7XG4gKiAgICAgICAgICAvL2FjdGlvblxuICogICAgICB9XG4gKiAgfSwge1xuICogICAgICB0ZXh0OiAnaXRlbTInLFxuICogICAgICBpY29uOiAncmVmcmVzaCcsXG4gKiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAqICAgICAgY2xpY2s6IChkYXRhSXRlbTogYW55KSA9PiB7XG4gKiAgICAgICAgICAvL2FjdGlvblxuICogICAgICB9XG4gKiAgfV1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEZvciBtb3JlIGV4YW1wbGVzLCByZWZlciB0byB0aGUgYXJ0aWNsZSBvbiB0aGUgW0Ryb3BEb3duTGlzdCB0ZW1wbGF0ZXNdKHslIHNsdWcgb3ZlcnZpZXdfZGRsICV9I3RlbXBsYXRlcykuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJ1dHRvbkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4pO1xufVxuIl19