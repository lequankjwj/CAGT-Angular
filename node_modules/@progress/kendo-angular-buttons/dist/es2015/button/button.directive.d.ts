/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChanges, ElementRef, EventEmitter, Renderer2 as Renderer, OnDestroy, NgZone } from '@angular/core';
import { KendoButtonService } from './button.service';
import { ButtonLook } from '../button-look';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents the Kendo UI Button component for Angular.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ButtonDirective implements OnDestroy {
    private service;
    private ngZone;
    /**
     * Provides visual styling that indicates if the Button is active.
     * By default, `toggleable` is set to `false`.
     */
    toggleable: boolean;
    /**
     * Backwards-compatible alias
     *
     * @hidden
     */
    /**
    * @hidden
    */
    togglable: boolean;
    /**
     * Adds visual weight to the Button and makes it primary.
     */
    primary: boolean;
    /**
     * Changes the visual appearance by using alternative styling options
     * ([more information and examples]({% slug appearance_button %})).
     *
     * The available values are:
     * * [`ButtonLook`]({% slug api_buttons_buttonlook %}) = `flat` | `outline`
     * * `clear`
     */
    look: ButtonLook | 'clear';
    /**
     * Sets the selected state of the Button.
     */
    selected: boolean;
    /**
     * @hidden
     */
    tabIndex: number;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Button by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;
     * which are applied to a `span` element inside the Button. Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Defines a URL which is used for an `img` element inside the Button.
     * The URL can be relative or absolute. If relative, it is evaluated with relation to the web page URL.
     */
    imageUrl: string;
    /**
     * If set to `true`, it disables the Button.
     */
    disabled: boolean;
    /**
     * @hidden
     */
    role: string;
    /**
     * Fires each time the selected state of a toggleable button is changed.
     *
     * The event argument is the new selected state (boolean).
     */
    selectedChange: EventEmitter<any>;
    /**
     * Fires each time the user clicks the button.
     */
    click: EventEmitter<any>;
    element: HTMLElement;
    renderer: Renderer;
    isDisabled: boolean;
    isIcon: boolean;
    isIconClass: boolean;
    imageNode: HTMLImageElement;
    iconNode: HTMLElement;
    private localizationChangeSubscription;
    private buttonLookChangeSubscription;
    private _focused;
    private direction;
    private _selected;
    private deferTimeout;
    private domEvents;
    isFocused: boolean;
    readonly classButton: boolean;
    readonly classPrimary: boolean;
    readonly isFlat: boolean;
    readonly isBare: boolean;
    readonly isOutline: boolean;
    readonly isClear: boolean;
    readonly roleSetter: string;
    readonly classDisabled: boolean;
    readonly classActive: boolean;
    readonly getDirection: string;
    /**
     * @hidden
     */
    onFocus(): void;
    /**
     * @hidden
     */
    onBlur(): void;
    constructor(element: ElementRef, renderer: Renderer, service: KendoButtonService, localization: LocalizationService, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(change: SimpleChanges): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Focuses the Button component.
     */
    focus(): void;
    /**
     * Blurs the Button component.
     */
    blur(): void;
    /**
     * @hidden
     */
    setAttribute(attribute: string, value: string): void;
    /**
     * @hidden
     */
    removeAttribute(attribute: string): void;
    /**
     * @hidden
     *
     * Internal setter that triggers selectedChange
     */
    setSelected(value: boolean): void;
    private toggleAriaPressed;
    private hasText;
    private addImgIcon;
    private addIcon;
    private prependChild;
    private defer;
    private iconSetter;
    private removeImageNode;
    private removeIconNode;
    private updateIconNode;
    private setIconTextClasses;
    private toggleClass;
    private _onButtonClick;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ButtonDirective, [null, null, { optional: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ButtonDirective, "button[kendoButton], span[kendoButton]", ["kendoButton"], { "toggleable": "toggleable"; "primary": "primary"; "look": "look"; "role": "role"; "togglable": "togglable"; "selected": "selected"; "tabIndex": "tabIndex"; "icon": "icon"; "iconClass": "iconClass"; "imageUrl": "imageUrl"; "disabled": "disabled"; }, { "selectedChange": "selectedChange"; "click": "click"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJidXR0b24uZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgU2ltcGxlQ2hhbmdlcywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBSZW5kZXJlcjIgYXMgUmVuZGVyZXIsIE9uRGVzdHJveSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBLZW5kb0J1dHRvblNlcnZpY2UgfSBmcm9tICcuL2J1dHRvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJ1dHRvbkxvb2sgfSBmcm9tICcuLi9idXR0b24tbG9vayc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEtlbmRvIFVJIEJ1dHRvbiBjb21wb25lbnQgZm9yIEFuZ3VsYXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJ1dHRvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBzZXJ2aWNlO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIHZpc3VhbCBzdHlsaW5nIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBCdXR0b24gaXMgYWN0aXZlLlxuICAgICAqIEJ5IGRlZmF1bHQsIGB0b2dnbGVhYmxlYCBpcyBzZXQgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICB0b2dnbGVhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEJhY2t3YXJkcy1jb21wYXRpYmxlIGFsaWFzXG4gICAgICpcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgLyoqXG4gICAgKiBAaGlkZGVuXG4gICAgKi9cbiAgICB0b2dnbGFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQWRkcyB2aXN1YWwgd2VpZ2h0IHRvIHRoZSBCdXR0b24gYW5kIG1ha2VzIGl0IHByaW1hcnkuXG4gICAgICovXG4gICAgcHJpbWFyeTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSBieSB1c2luZyBhbHRlcm5hdGl2ZSBzdHlsaW5nIG9wdGlvbnNcbiAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzXSh7JSBzbHVnIGFwcGVhcmFuY2VfYnV0dG9uICV9KSkuXG4gICAgICpcbiAgICAgKiBUaGUgYXZhaWxhYmxlIHZhbHVlcyBhcmU6XG4gICAgICogKiBbYEJ1dHRvbkxvb2tgXSh7JSBzbHVnIGFwaV9idXR0b25zX2J1dHRvbmxvb2sgJX0pID0gYGZsYXRgIHwgYG91dGxpbmVgXG4gICAgICogKiBgY2xlYXJgXG4gICAgICovXG4gICAgbG9vazogQnV0dG9uTG9vayB8ICdjbGVhcic7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgc2VsZWN0ZWQgc3RhdGUgb2YgdGhlIEJ1dHRvbi5cbiAgICAgKi9cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBuYW1lIGZvciBhbiBleGlzdGluZyBpY29uIGluIGEgS2VuZG8gVUkgdGhlbWUuXG4gICAgICogVGhlIGljb24gaXMgcmVuZGVyZWQgaW5zaWRlIHRoZSBCdXR0b24gYnkgYSBgc3Bhbi5rLWljb25gIGVsZW1lbnQuXG4gICAgICovXG4gICAgaWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBDU1MgY2xhc3MmbWRhc2g7b3IgbXVsdGlwbGUgY2xhc3NlcyBzZXBhcmF0ZWQgYnkgc3BhY2VzJm1kYXNoO1xuICAgICAqIHdoaWNoIGFyZSBhcHBsaWVkIHRvIGEgYHNwYW5gIGVsZW1lbnQgaW5zaWRlIHRoZSBCdXR0b24uIEFsbG93cyB0aGUgdXNhZ2Ugb2YgY3VzdG9tIGljb25zLlxuICAgICAqL1xuICAgIGljb25DbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBVUkwgd2hpY2ggaXMgdXNlZCBmb3IgYW4gYGltZ2AgZWxlbWVudCBpbnNpZGUgdGhlIEJ1dHRvbi5cbiAgICAgKiBUaGUgVVJMIGNhbiBiZSByZWxhdGl2ZSBvciBhYnNvbHV0ZS4gSWYgcmVsYXRpdmUsIGl0IGlzIGV2YWx1YXRlZCB3aXRoIHJlbGF0aW9uIHRvIHRoZSB3ZWIgcGFnZSBVUkwuXG4gICAgICovXG4gICAgaW1hZ2VVcmw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCBpdCBkaXNhYmxlcyB0aGUgQnV0dG9uLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByb2xlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBzZWxlY3RlZCBzdGF0ZSBvZiBhIHRvZ2dsZWFibGUgYnV0dG9uIGlzIGNoYW5nZWQuXG4gICAgICpcbiAgICAgKiBUaGUgZXZlbnQgYXJndW1lbnQgaXMgdGhlIG5ldyBzZWxlY3RlZCBzdGF0ZSAoYm9vbGVhbikuXG4gICAgICovXG4gICAgc2VsZWN0ZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBjbGlja3MgdGhlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBjbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyO1xuICAgIGlzRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgaXNJY29uOiBib29sZWFuO1xuICAgIGlzSWNvbkNsYXNzOiBib29sZWFuO1xuICAgIGltYWdlTm9kZTogSFRNTEltYWdlRWxlbWVudDtcbiAgICBpY29uTm9kZTogSFRNTEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBidXR0b25Mb29rQ2hhbmdlU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX2ZvY3VzZWQ7XG4gICAgcHJpdmF0ZSBkaXJlY3Rpb247XG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBkZWZlclRpbWVvdXQ7XG4gICAgcHJpdmF0ZSBkb21FdmVudHM7XG4gICAgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNsYXNzQnV0dG9uOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNsYXNzUHJpbWFyeTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0ZsYXQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNCYXJlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzT3V0bGluZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0NsZWFyOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHJvbGVTZXR0ZXI6IHN0cmluZztcbiAgICByZWFkb25seSBjbGFzc0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNsYXNzQWN0aXZlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGdldERpcmVjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uQmx1cigpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlciwgc2VydmljZTogS2VuZG9CdXR0b25TZXJ2aWNlLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIG5nWm9uZTogTmdab25lKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBCdXR0b24gY29tcG9uZW50LlxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmx1cnMgdGhlIEJ1dHRvbiBjb21wb25lbnQuXG4gICAgICovXG4gICAgYmx1cigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXRBdHRyaWJ1dGUoYXR0cmlidXRlOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKlxuICAgICAqIEludGVybmFsIHNldHRlciB0aGF0IHRyaWdnZXJzIHNlbGVjdGVkQ2hhbmdlXG4gICAgICovXG4gICAgc2V0U2VsZWN0ZWQodmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHByaXZhdGUgdG9nZ2xlQXJpYVByZXNzZWQ7XG4gICAgcHJpdmF0ZSBoYXNUZXh0O1xuICAgIHByaXZhdGUgYWRkSW1nSWNvbjtcbiAgICBwcml2YXRlIGFkZEljb247XG4gICAgcHJpdmF0ZSBwcmVwZW5kQ2hpbGQ7XG4gICAgcHJpdmF0ZSBkZWZlcjtcbiAgICBwcml2YXRlIGljb25TZXR0ZXI7XG4gICAgcHJpdmF0ZSByZW1vdmVJbWFnZU5vZGU7XG4gICAgcHJpdmF0ZSByZW1vdmVJY29uTm9kZTtcbiAgICBwcml2YXRlIHVwZGF0ZUljb25Ob2RlO1xuICAgIHByaXZhdGUgc2V0SWNvblRleHRDbGFzc2VzO1xuICAgIHByaXZhdGUgdG9nZ2xlQ2xhc3M7XG4gICAgcHJpdmF0ZSBfb25CdXR0b25DbGljaztcbn1cbiJdfQ==