/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, ElementRef, Renderer2, AfterViewInit, OnInit, NgZone } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ChipRemoveEvent } from './chip-remove-event-args.interface';
import { ChipLook } from './models/chip-look';
import { ChipType } from './models/type';
/**
 * Displays a Chip that represents an input, attribute or an action.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ChipComponent implements OnInit, AfterViewInit {
    element: ElementRef;
    private renderer;
    private ngZone;
    private localizationService;
    /**
     * Changes the visual appearance by using alternative styling options.
     *
     * The available values are:
     * * `filled`
     * * `outlined`
     */
    look: ChipLook;
    /**
     * Sets the label text of the Chip.
     */
    label: string;
    /**
     * Defines the name for an existing icon in a Kendo UI theme.
     * The icon is rendered inside the Chip by a `span.k-icon` element.
     */
    icon: string;
    /**
     * Defines a CSS class — or multiple classes separated by spaces —
     * which are applied to a span element.
     * Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Specifies the selected state of the Chip.
     */
    selected: boolean;
    /**
     * Specifies a custom select icon that will be rendered when the Chip is selected.
     * [see example]({% slug icons %})
     */
    selectedIcon: string;
    /**
     * Specifies if the Chip will be removable or not.
     * If the property is set to `true`, the Chip renders a remove icon.
     */
    removable: boolean;
    /**
     * Specifies a custom remove icon that will be rendered when the Chip is removable.
     * [see example]({% slug icons %})
     */
    removeIcon: string;
    /**
     * Specifies the Chip type.
     *
     * The possible values are:
     * - `none` (default)
     * - `success`
     * - `error`
     * - `warning`
     * - `info`
     */
    type: ChipType;
    /**
     * If set to `true`, the Chip will be disabled.
     */
    disabled: boolean;
    /**
     * Fires each time the user clicks the remove icon of the Chip.
     */
    remove: EventEmitter<ChipRemoveEvent>;
    tabIndex: number;
    hostClass: boolean;
    readonly outlineClass: boolean;
    readonly filledClass: boolean;
    readonly hasIconClass: boolean;
    readonly disabledClass: boolean;
    readonly selectedClass: boolean;
    readonly focusedClass: boolean;
    /**
     * @hidden
     */
    direction: string;
    private focused;
    private dynamicRTLSubscription;
    private detachDomEvents;
    constructor(element: ElementRef, renderer: Renderer2, ngZone: NgZone, localizationService: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    readonly iconClasses: string;
    /**
     * @hidden
     */
    readonly selectedIconClasses: string;
    /**
     * @hidden
     */
    readonly removeIconClasses: string;
    /**
     * @hidden
     */
    typeClass(): string;
    /**
     * Focuses the Chip component.
     */
    focus(): void;
    /**
     * Blurs the Chip component.
     */
    blur(): void;
    /**
     * @hidden
     */
    onRemoveClick(e: MouseEvent): void;
    private attachElementEventHandlers;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChipComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChipComponent, "kendo-chip", never, { "look": "look"; "selected": "selected"; "removable": "removable"; "type": "type"; "disabled": "disabled"; "label": "label"; "icon": "icon"; "iconClass": "iconClass"; "selectedIcon": "selectedIcon"; "removeIcon": "removeIcon"; }, { "remove": "remove"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2hpcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBPbkluaXQsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgQ2hpcFJlbW92ZUV2ZW50IH0gZnJvbSAnLi9jaGlwLXJlbW92ZS1ldmVudC1hcmdzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDaGlwTG9vayB9IGZyb20gJy4vbW9kZWxzL2NoaXAtbG9vayc7XG5pbXBvcnQgeyBDaGlwVHlwZSB9IGZyb20gJy4vbW9kZWxzL3R5cGUnO1xuLyoqXG4gKiBEaXNwbGF5cyBhIENoaXAgdGhhdCByZXByZXNlbnRzIGFuIGlucHV0LCBhdHRyaWJ1dGUgb3IgYW4gYWN0aW9uLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDaGlwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICBlbGVtZW50OiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHZpc3VhbCBhcHBlYXJhbmNlIGJ5IHVzaW5nIGFsdGVybmF0aXZlIHN0eWxpbmcgb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIFRoZSBhdmFpbGFibGUgdmFsdWVzIGFyZTpcbiAgICAgKiAqIGBmaWxsZWRgXG4gICAgICogKiBgb3V0bGluZWRgXG4gICAgICovXG4gICAgbG9vazogQ2hpcExvb2s7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGFiZWwgdGV4dCBvZiB0aGUgQ2hpcC5cbiAgICAgKi9cbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIG5hbWUgZm9yIGFuIGV4aXN0aW5nIGljb24gaW4gYSBLZW5kbyBVSSB0aGVtZS5cbiAgICAgKiBUaGUgaWNvbiBpcyByZW5kZXJlZCBpbnNpZGUgdGhlIENoaXAgYnkgYSBgc3Bhbi5rLWljb25gIGVsZW1lbnQuXG4gICAgICovXG4gICAgaWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBDU1MgY2xhc3Mg4oCUIG9yIG11bHRpcGxlIGNsYXNzZXMgc2VwYXJhdGVkIGJ5IHNwYWNlcyDigJRcbiAgICAgKiB3aGljaCBhcmUgYXBwbGllZCB0byBhIHNwYW4gZWxlbWVudC5cbiAgICAgKiBBbGxvd3MgdGhlIHVzYWdlIG9mIGN1c3RvbSBpY29ucy5cbiAgICAgKi9cbiAgICBpY29uQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNlbGVjdGVkIHN0YXRlIG9mIHRoZSBDaGlwLlxuICAgICAqL1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhIGN1c3RvbSBzZWxlY3QgaWNvbiB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgd2hlbiB0aGUgQ2hpcCBpcyBzZWxlY3RlZC5cbiAgICAgKiBbc2VlIGV4YW1wbGVdKHslIHNsdWcgaWNvbnMgJX0pXG4gICAgICovXG4gICAgc2VsZWN0ZWRJY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBDaGlwIHdpbGwgYmUgcmVtb3ZhYmxlIG9yIG5vdC5cbiAgICAgKiBJZiB0aGUgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIENoaXAgcmVuZGVycyBhIHJlbW92ZSBpY29uLlxuICAgICAqL1xuICAgIHJlbW92YWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgYSBjdXN0b20gcmVtb3ZlIGljb24gdGhhdCB3aWxsIGJlIHJlbmRlcmVkIHdoZW4gdGhlIENoaXAgaXMgcmVtb3ZhYmxlLlxuICAgICAqIFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBpY29ucyAlfSlcbiAgICAgKi9cbiAgICByZW1vdmVJY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBDaGlwIHR5cGUuXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAtIGBub25lYCAoZGVmYXVsdClcbiAgICAgKiAtIGBzdWNjZXNzYFxuICAgICAqIC0gYGVycm9yYFxuICAgICAqIC0gYHdhcm5pbmdgXG4gICAgICogLSBgaW5mb2BcbiAgICAgKi9cbiAgICB0eXBlOiBDaGlwVHlwZTtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgQ2hpcCB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBjbGlja3MgdGhlIHJlbW92ZSBpY29uIG9mIHRoZSBDaGlwLlxuICAgICAqL1xuICAgIHJlbW92ZTogRXZlbnRFbWl0dGVyPENoaXBSZW1vdmVFdmVudD47XG4gICAgdGFiSW5kZXg6IG51bWJlcjtcbiAgICBob3N0Q2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgb3V0bGluZUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGZpbGxlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc0ljb25DbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXNhYmxlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZm9jdXNlZENsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICBwcml2YXRlIGZvY3VzZWQ7XG4gICAgcHJpdmF0ZSBkeW5hbWljUlRMU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZGV0YWNoRG9tRXZlbnRzO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIG5nWm9uZTogTmdab25lLCBsb2NhbGl6YXRpb25TZXJ2aWNlOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGljb25DbGFzc2VzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlbGVjdGVkSWNvbkNsYXNzZXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVtb3ZlSWNvbkNsYXNzZXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdHlwZUNsYXNzKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBDaGlwIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJsdXJzIHRoZSBDaGlwIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uUmVtb3ZlQ2xpY2soZTogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhdHRhY2hFbGVtZW50RXZlbnRIYW5kbGVycztcbn1cbiJdfQ==