/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ButtonDirective } from '../button/button.directive';
import { EventEmitter, QueryList, OnInit, OnDestroy, AfterContentChecked, AfterViewChecked, AfterContentInit, ElementRef, SimpleChanges } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ButtonGroupSelection } from '../button/selection-settings';
import { KendoButtonService } from '../button/button.service';
import { ButtonLook } from '../button-look';
import { PreventableEvent } from '../preventable-event';
/**
 * Represents the Kendo UI ButtonGroup component for Angular.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ButtonGroupComponent implements OnInit, OnDestroy, AfterContentChecked, AfterViewChecked, AfterContentInit {
    private service;
    private element;
    /**
     * By default, the ButtonGroup is enabled.
     * To disable the whole group of buttons, set its `disabled` attribute to `true`.
     *
     * To disable a specific button, set its own `disabled` attribute to `true`
     * and leave the `disabled` attribute of the ButtonGroup undefined.
     * If you define the `disabled` attribute of the ButtonGroup, it will take
     * precedence over the `disabled` attributes of the underlying buttons and they will be ignored.
     *
     * For more information on how to configure the Button, refer to
     * its [API documentation]({% slug api_buttons_buttondirective %}).
     */
    disabled: boolean;
    /**
     * By default, the selection mode of the ButtonGroup is set to `multiple`.
     */
    selection: ButtonGroupSelection;
    /**
     * Sets the width of the ButtonGroup.
     * If the width of the ButtonGroup is set:
     * - The buttons resize automatically to fill the full width of the group wrapper.
     * - The buttons acquire the same width.
     */
    width: string;
    /**
     * Changes the visual appearance by using alternative styling options
     * ([more information and examples]({% slug styling_buttongroup %})).
     * The `look` property of the ButtonGroup takes precedence over the `look` property
     * of the individual buttons that are part of the group.
     *
     * The available values are:
     * * `flat`
     * * `outline`
     */
    look: ButtonLook;
    /**
     * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabIndex: number;
    /**
     * Fires every time keyboard navigation occurs.
     */
    navigate: EventEmitter<PreventableEvent>;
    buttons: QueryList<ButtonDirective>;
    private _tabIndex;
    private currentTabIndex;
    private direction;
    private subscription;
    private localizationChangeSubscription;
    readonly wrapperClass: boolean;
    readonly disabledClass: boolean;
    readonly stretchedClass: boolean;
    readonly isFlat: boolean;
    readonly isBare: boolean;
    readonly isOutline: boolean;
    readonly getRole: string;
    readonly dir: string;
    readonly ariaDisabled: boolean;
    readonly wrapperWidth: string;
    readonly wrapperTabIndex: number;
    /**
     * @hidden
     */
    keydown(event: any): void;
    /**
     * @hidden
     */
    onFocus(): void;
    /**
     * @hidden
     */
    focusout(event: any): void;
    constructor(service: KendoButtonService, localization: LocalizationService, element: ElementRef);
    ngOnInit(): void;
    ngOnChanges(change: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    protected navigateFocus(event: any): void;
    protected deactivate(buttons: Array<ButtonDirective>): void;
    protected activate(buttons: Array<ButtonDirective>): void;
    protected defocus(buttons: Array<ButtonDirective>): void;
    protected focus(buttons: Array<ButtonDirective>): void;
    private verifySettings;
    private isSelectionSingle;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ButtonGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ButtonGroupComponent, "kendo-buttongroup", ["kendoButtonGroup"], { "selection": "selection"; "look": "look"; "tabIndex": "tabIndex"; "disabled": "disabled"; "width": "width"; }, { "navigate": "navigate"; }, ["buttons"], ["[kendoButton]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbmdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBCdXR0b25EaXJlY3RpdmUgfSBmcm9tICcuLi9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFF1ZXJ5TGlzdCwgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEJ1dHRvbkdyb3VwU2VsZWN0aW9uIH0gZnJvbSAnLi4vYnV0dG9uL3NlbGVjdGlvbi1zZXR0aW5ncyc7XG5pbXBvcnQgeyBLZW5kb0J1dHRvblNlcnZpY2UgfSBmcm9tICcuLi9idXR0b24vYnV0dG9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQnV0dG9uTG9vayB9IGZyb20gJy4uL2J1dHRvbi1sb29rJztcbmltcG9ydCB7IFByZXZlbnRhYmxlRXZlbnQgfSBmcm9tICcuLi9wcmV2ZW50YWJsZS1ldmVudCc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIEtlbmRvIFVJIEJ1dHRvbkdyb3VwIGNvbXBvbmVudCBmb3IgQW5ndWxhci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnV0dG9uR3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJpdmF0ZSBzZXJ2aWNlO1xuICAgIHByaXZhdGUgZWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgQnV0dG9uR3JvdXAgaXMgZW5hYmxlZC5cbiAgICAgKiBUbyBkaXNhYmxlIHRoZSB3aG9sZSBncm91cCBvZiBidXR0b25zLCBzZXQgaXRzIGBkaXNhYmxlZGAgYXR0cmlidXRlIHRvIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIFRvIGRpc2FibGUgYSBzcGVjaWZpYyBidXR0b24sIHNldCBpdHMgb3duIGBkaXNhYmxlZGAgYXR0cmlidXRlIHRvIGB0cnVlYFxuICAgICAqIGFuZCBsZWF2ZSB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGUgb2YgdGhlIEJ1dHRvbkdyb3VwIHVuZGVmaW5lZC5cbiAgICAgKiBJZiB5b3UgZGVmaW5lIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSBvZiB0aGUgQnV0dG9uR3JvdXAsIGl0IHdpbGwgdGFrZVxuICAgICAqIHByZWNlZGVuY2Ugb3ZlciB0aGUgYGRpc2FibGVkYCBhdHRyaWJ1dGVzIG9mIHRoZSB1bmRlcmx5aW5nIGJ1dHRvbnMgYW5kIHRoZXkgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIGNvbmZpZ3VyZSB0aGUgQnV0dG9uLCByZWZlciB0b1xuICAgICAqIGl0cyBbQVBJIGRvY3VtZW50YXRpb25dKHslIHNsdWcgYXBpX2J1dHRvbnNfYnV0dG9uZGlyZWN0aXZlICV9KS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBCeSBkZWZhdWx0LCB0aGUgc2VsZWN0aW9uIG1vZGUgb2YgdGhlIEJ1dHRvbkdyb3VwIGlzIHNldCB0byBgbXVsdGlwbGVgLlxuICAgICAqL1xuICAgIHNlbGVjdGlvbjogQnV0dG9uR3JvdXBTZWxlY3Rpb247XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgd2lkdGggb2YgdGhlIEJ1dHRvbkdyb3VwLlxuICAgICAqIElmIHRoZSB3aWR0aCBvZiB0aGUgQnV0dG9uR3JvdXAgaXMgc2V0OlxuICAgICAqIC0gVGhlIGJ1dHRvbnMgcmVzaXplIGF1dG9tYXRpY2FsbHkgdG8gZmlsbCB0aGUgZnVsbCB3aWR0aCBvZiB0aGUgZ3JvdXAgd3JhcHBlci5cbiAgICAgKiAtIFRoZSBidXR0b25zIGFjcXVpcmUgdGhlIHNhbWUgd2lkdGguXG4gICAgICovXG4gICAgd2lkdGg6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIHRoZSB2aXN1YWwgYXBwZWFyYW5jZSBieSB1c2luZyBhbHRlcm5hdGl2ZSBzdHlsaW5nIG9wdGlvbnNcbiAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzXSh7JSBzbHVnIHN0eWxpbmdfYnV0dG9uZ3JvdXAgJX0pKS5cbiAgICAgKiBUaGUgYGxvb2tgIHByb3BlcnR5IG9mIHRoZSBCdXR0b25Hcm91cCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIGBsb29rYCBwcm9wZXJ0eVxuICAgICAqIG9mIHRoZSBpbmRpdmlkdWFsIGJ1dHRvbnMgdGhhdCBhcmUgcGFydCBvZiB0aGUgZ3JvdXAuXG4gICAgICpcbiAgICAgKiBUaGUgYXZhaWxhYmxlIHZhbHVlcyBhcmU6XG4gICAgICogKiBgZmxhdGBcbiAgICAgKiAqIGBvdXRsaW5lYFxuICAgICAqL1xuICAgIGxvb2s6IEJ1dHRvbkxvb2s7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYkluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGV2ZXJ5IHRpbWUga2V5Ym9hcmQgbmF2aWdhdGlvbiBvY2N1cnMuXG4gICAgICovXG4gICAgbmF2aWdhdGU6IEV2ZW50RW1pdHRlcjxQcmV2ZW50YWJsZUV2ZW50PjtcbiAgICBidXR0b25zOiBRdWVyeUxpc3Q8QnV0dG9uRGlyZWN0aXZlPjtcbiAgICBwcml2YXRlIF90YWJJbmRleDtcbiAgICBwcml2YXRlIGN1cnJlbnRUYWJJbmRleDtcbiAgICBwcml2YXRlIGRpcmVjdGlvbjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICByZWFkb25seSB3cmFwcGVyQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlzYWJsZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBzdHJldGNoZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0ZsYXQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNCYXJlOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzT3V0bGluZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBnZXRSb2xlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZGlyOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYXJpYURpc2FibGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHdyYXBwZXJXaWR0aDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHdyYXBwZXJUYWJJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBrZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3Vzb3V0KGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IEtlbmRvQnV0dG9uU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZTogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgbmF2aWdhdGVGb2N1cyhldmVudDogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZGVhY3RpdmF0ZShidXR0b25zOiBBcnJheTxCdXR0b25EaXJlY3RpdmU+KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWN0aXZhdGUoYnV0dG9uczogQXJyYXk8QnV0dG9uRGlyZWN0aXZlPik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGRlZm9jdXMoYnV0dG9uczogQXJyYXk8QnV0dG9uRGlyZWN0aXZlPik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGZvY3VzKGJ1dHRvbnM6IEFycmF5PEJ1dHRvbkRpcmVjdGl2ZT4pOiB2b2lkO1xuICAgIHByaXZhdGUgdmVyaWZ5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBpc1NlbGVjdGlvblNpbmdsZTtcbn1cbiJdfQ==