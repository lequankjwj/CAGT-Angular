/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, QueryList, ElementRef, SimpleChange, ChangeDetectorRef, NgZone, Renderer2 } from '@angular/core';
import { AfterViewInit, OnChanges, OnDestroy } from '@angular/core';
import { ListItemDirective } from './list-item.directive';
import { ItemTemplateDirective } from './templates/item-template.directive';
import { GroupTemplateDirective } from './templates/group-template.directive';
import { FixedGroupTemplateDirective } from './templates/fixed-group-template.directive';
import { SelectionService } from './selection/selection.service';
import { DisabledItemsService } from './disabled-items/disabled-items.service';
import { DataService } from './data.service';
import { VirtualizationSettings } from './models/virtualization-settings';
import { PageChangeEvent } from './models/page-change-event';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ListComponent implements OnChanges, OnDestroy, AfterViewInit {
    dataService: DataService;
    wrapper: ElementRef;
    private selectionService;
    private disabledItemsService;
    private cdr;
    private zone;
    private renderer;
    selected: any[];
    focused: number;
    textField: string;
    valueField: string;
    height: number;
    template: ItemTemplateDirective;
    groupTemplate: GroupTemplateDirective;
    fixedGroupTemplate: FixedGroupTemplateDirective;
    show: boolean;
    id: string;
    optionPrefix: string;
    multipleSelection: boolean;
    virtual: VirtualizationSettings;
    data: any[];
    onClick: EventEmitter<any>;
    pageChange: EventEmitter<PageChangeEvent>;
    items: QueryList<ListItemDirective>;
    content: ElementRef;
    list: ElementRef;
    currentGroup: string;
    startFrom: number;
    lastLoaded: number;
    lastScrollTop: number;
    private scrollToFocused;
    private _data;
    private _items;
    private scrollSubscription;
    private selectSubscription;
    readonly pageSize: number;
    readonly scrollHeight: number;
    constructor(dataService: DataService, wrapper: ElementRef, selectionService: SelectionService, disabledItemsService: DisabledItemsService, cdr: ChangeDetectorRef, zone: NgZone, renderer: Renderer2);
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    firstVisibleItem(): any;
    findCurrentGroup(): void;
    prefetchData(): void;
    changePage(start: number): void;
    index(groupIndex: number, itemIndex: number): number;
    getText(dataItem: any): any;
    getValue(dataItem: any): any;
    isDisabled(index: number): boolean;
    scrollToItem(index: number): void;
    scrollToIndex(index: number): void;
    scroll(item: ElementRef): void;
    private positionItems;
    /**
     * Indicates whether the first group header from the data set is in the targeted virtual page.
     */
    private firstGroupHeaderInTargetedPage;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ListComponent, "kendo-list", never, { "selected": "selected"; "focused": "focused"; "show": "show"; "multipleSelection": "multipleSelection"; "data": "data"; "textField": "textField"; "valueField": "valueField"; "height": "height"; "template": "template"; "groupTemplate": "groupTemplate"; "fixedGroupTemplate": "fixedGroupTemplate"; "id": "id"; "optionPrefix": "optionPrefix"; "virtual": "virtual"; }, { "onClick": "onClick"; "pageChange": "pageChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGlzdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlzdEl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL2xpc3QtaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSXRlbVRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZXMvaXRlbS10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdGVtcGxhdGVzL2dyb3VwLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlcy9maXhlZC1ncm91cC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERpc2FibGVkSXRlbXNTZXJ2aWNlIH0gZnJvbSAnLi9kaXNhYmxlZC1pdGVtcy9kaXNhYmxlZC1pdGVtcy5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGFTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmlydHVhbGl6YXRpb25TZXR0aW5ncyB9IGZyb20gJy4vbW9kZWxzL3ZpcnR1YWxpemF0aW9uLXNldHRpbmdzJztcbmltcG9ydCB7IFBhZ2VDaGFuZ2VFdmVudCB9IGZyb20gJy4vbW9kZWxzL3BhZ2UtY2hhbmdlLWV2ZW50Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xuICAgIGRhdGFTZXJ2aWNlOiBEYXRhU2VydmljZTtcbiAgICB3cmFwcGVyOiBFbGVtZW50UmVmO1xuICAgIHByaXZhdGUgc2VsZWN0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIGRpc2FibGVkSXRlbXNTZXJ2aWNlO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHNlbGVjdGVkOiBhbnlbXTtcbiAgICBmb2N1c2VkOiBudW1iZXI7XG4gICAgdGV4dEZpZWxkOiBzdHJpbmc7XG4gICAgdmFsdWVGaWVsZDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHRlbXBsYXRlOiBJdGVtVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgZ3JvdXBUZW1wbGF0ZTogR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBmaXhlZEdyb3VwVGVtcGxhdGU6IEZpeGVkR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZTtcbiAgICBzaG93OiBib29sZWFuO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgb3B0aW9uUHJlZml4OiBzdHJpbmc7XG4gICAgbXVsdGlwbGVTZWxlY3Rpb246IGJvb2xlYW47XG4gICAgdmlydHVhbDogVmlydHVhbGl6YXRpb25TZXR0aW5ncztcbiAgICBkYXRhOiBhbnlbXTtcbiAgICBvbkNsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwYWdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8UGFnZUNoYW5nZUV2ZW50PjtcbiAgICBpdGVtczogUXVlcnlMaXN0PExpc3RJdGVtRGlyZWN0aXZlPjtcbiAgICBjb250ZW50OiBFbGVtZW50UmVmO1xuICAgIGxpc3Q6IEVsZW1lbnRSZWY7XG4gICAgY3VycmVudEdyb3VwOiBzdHJpbmc7XG4gICAgc3RhcnRGcm9tOiBudW1iZXI7XG4gICAgbGFzdExvYWRlZDogbnVtYmVyO1xuICAgIGxhc3RTY3JvbGxUb3A6IG51bWJlcjtcbiAgICBwcml2YXRlIHNjcm9sbFRvRm9jdXNlZDtcbiAgICBwcml2YXRlIF9kYXRhO1xuICAgIHByaXZhdGUgX2l0ZW1zO1xuICAgIHByaXZhdGUgc2Nyb2xsU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc2VsZWN0U3Vic2NyaXB0aW9uO1xuICAgIHJlYWRvbmx5IHBhZ2VTaXplOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgc2Nyb2xsSGVpZ2h0OiBudW1iZXI7XG4gICAgY29uc3RydWN0b3IoZGF0YVNlcnZpY2U6IERhdGFTZXJ2aWNlLCB3cmFwcGVyOiBFbGVtZW50UmVmLCBzZWxlY3Rpb25TZXJ2aWNlOiBTZWxlY3Rpb25TZXJ2aWNlLCBkaXNhYmxlZEl0ZW1zU2VydmljZTogRGlzYWJsZWRJdGVtc1NlcnZpY2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHpvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczoge1xuICAgICAgICBbcHJvcGVydHlOYW1lOiBzdHJpbmddOiBTaW1wbGVDaGFuZ2U7XG4gICAgfSk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBmaXJzdFZpc2libGVJdGVtKCk6IGFueTtcbiAgICBmaW5kQ3VycmVudEdyb3VwKCk6IHZvaWQ7XG4gICAgcHJlZmV0Y2hEYXRhKCk6IHZvaWQ7XG4gICAgY2hhbmdlUGFnZShzdGFydDogbnVtYmVyKTogdm9pZDtcbiAgICBpbmRleChncm91cEluZGV4OiBudW1iZXIsIGl0ZW1JbmRleDogbnVtYmVyKTogbnVtYmVyO1xuICAgIGdldFRleHQoZGF0YUl0ZW06IGFueSk6IGFueTtcbiAgICBnZXRWYWx1ZShkYXRhSXRlbTogYW55KTogYW55O1xuICAgIGlzRGlzYWJsZWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgc2Nyb2xsVG9JdGVtKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHNjcm9sbFRvSW5kZXgoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2Nyb2xsKGl0ZW06IEVsZW1lbnRSZWYpOiB2b2lkO1xuICAgIHByaXZhdGUgcG9zaXRpb25JdGVtcztcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZmlyc3QgZ3JvdXAgaGVhZGVyIGZyb20gdGhlIGRhdGEgc2V0IGlzIGluIHRoZSB0YXJnZXRlZCB2aXJ0dWFsIHBhZ2UuXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaXJzdEdyb3VwSGVhZGVySW5UYXJnZXRlZFBhZ2U7XG59XG4iXX0=