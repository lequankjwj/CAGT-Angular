/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, OnDestroy } from '@angular/core';
import { FilterableDropDownComponentBase } from './filterable-base.component';
import { DropDownFilterSettings } from './filter-settings';
/**
 * Implements an event handler for the `filterChange` event of a DropDowns component
 * which performs simple data filtering.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-autocomplete
 *      [data]="data"
 *      kendoDropDownFilter
 *      placeholder="e.g. Andorra">
 *  </kendo-autocomplete>
 * `
 * })
 * class AppComponent {
 *     public data: Array<string> = ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan"];
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class FilterDirective implements OnInit, OnDestroy {
    private component;
    /**
     * The initial data that will be used as a source array for the filtering operations.
     */
    data: any[];
    /**
     * The configuration object which sets the behavior of the `kendoDropDownFilter` directive.
     */
    filterSettings: DropDownFilterSettings;
    /**
     * @hidden
     *
     * Sets whether the filtering functionality is enabled on component init.
     */
    filterable: boolean;
    private _data;
    private _filterSettings;
    private filterChangeSubscription;
    constructor(component: FilterableDropDownComponentBase);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private getFilteredData;
    private checkItem;
    private normalizeValue;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FilterDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<FilterDirective, "[kendoDropDownFilter]", never, { "filterable": "filterable"; "data": "data"; "filterSettings": "kendoDropDownFilter"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJmaWx0ZXIuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZpbHRlcmFibGVEcm9wRG93bkNvbXBvbmVudEJhc2UgfSBmcm9tICcuL2ZpbHRlcmFibGUtYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgRHJvcERvd25GaWx0ZXJTZXR0aW5ncyB9IGZyb20gJy4vZmlsdGVyLXNldHRpbmdzJztcbi8qKlxuICogSW1wbGVtZW50cyBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgYGZpbHRlckNoYW5nZWAgZXZlbnQgb2YgYSBEcm9wRG93bnMgY29tcG9uZW50XG4gKiB3aGljaCBwZXJmb3JtcyBzaW1wbGUgZGF0YSBmaWx0ZXJpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1hdXRvY29tcGxldGVcbiAqICAgICAgW2RhdGFdPVwiZGF0YVwiXG4gKiAgICAgIGtlbmRvRHJvcERvd25GaWx0ZXJcbiAqICAgICAgcGxhY2Vob2xkZXI9XCJlLmcuIEFuZG9ycmFcIj5cbiAqICA8L2tlbmRvLWF1dG9jb21wbGV0ZT5cbiAqIGBcbiAqIH0pXG4gKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICAgIHB1YmxpYyBkYXRhOiBBcnJheTxzdHJpbmc+ID0gW1wiQWxiYW5pYVwiLCBcIkFuZG9ycmFcIiwgXCJBcm1lbmlhXCIsIFwiQXVzdHJpYVwiLCBcIkF6ZXJiYWlqYW5cIl07XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmlsdGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBpbml0aWFsIGRhdGEgdGhhdCB3aWxsIGJlIHVzZWQgYXMgYSBzb3VyY2UgYXJyYXkgZm9yIHRoZSBmaWx0ZXJpbmcgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICBkYXRhOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvYmplY3Qgd2hpY2ggc2V0cyB0aGUgYmVoYXZpb3Igb2YgdGhlIGBrZW5kb0Ryb3BEb3duRmlsdGVyYCBkaXJlY3RpdmUuXG4gICAgICovXG4gICAgZmlsdGVyU2V0dGluZ3M6IERyb3BEb3duRmlsdGVyU2V0dGluZ3M7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqXG4gICAgICogU2V0cyB3aGV0aGVyIHRoZSBmaWx0ZXJpbmcgZnVuY3Rpb25hbGl0eSBpcyBlbmFibGVkIG9uIGNvbXBvbmVudCBpbml0LlxuICAgICAqL1xuICAgIGZpbHRlcmFibGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfZGF0YTtcbiAgICBwcml2YXRlIF9maWx0ZXJTZXR0aW5ncztcbiAgICBwcml2YXRlIGZpbHRlckNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQ6IEZpbHRlcmFibGVEcm9wRG93bkNvbXBvbmVudEJhc2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIGdldEZpbHRlcmVkRGF0YTtcbiAgICBwcml2YXRlIGNoZWNrSXRlbTtcbiAgICBwcml2YXRlIG5vcm1hbGl6ZVZhbHVlO1xufVxuIl19