/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, Component, Renderer2, Input, Output, ViewChild, HostBinding, Directive, TemplateRef, Injectable, ElementRef, ChangeDetectorRef, NgZone, ViewChildren, forwardRef, isDevMode, ContentChild, ViewContainerRef, InjectionToken, Optional, Inject, KeyValueDiffers, HostListener, NgModule } from '@angular/core';
import { isDocumentAvailable, Keys, isChanged, hasObservers, KendoInput, anyChanged, ResizeSensorModule, EventsModule } from '@progress/kendo-angular-common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { LocalizationService, L10N_PREFIX, ComponentMessages } from '@progress/kendo-angular-l10n';
import { merge, fromEvent, Subject, Subscription, of, interval } from 'rxjs';
import { PopupService, PopupModule } from '@progress/kendo-angular-popup';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
import * as ɵngcc2 from '@progress/kendo-angular-common';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from '@progress/kendo-angular-popup';
import * as ɵngcc5 from '@angular/forms';

const _c0 = ["input"];
const _c1 = function (a0, a1) { return { focus: a0, blur: a1 }; };
const _c2 = ["content"];
const _c3 = ["list"];
function ListComponent_div_0_1_ng_template_0_Template(rf, ctx) { }
const _c4 = function (a0, a1) { return { templateRef: a0, $implicit: a1 }; };
function ListComponent_div_0_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_div_0_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r6.fixedGroupTemplate.templateRef, ctx_r6.currentGroup));
} }
function ListComponent_div_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "strong");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r7.currentGroup);
} }
const _c5 = function (a0) { return { "k-virtual-item": a0 }; };
const _c6 = function (a0, a1, a2) { return { "height.px": a0, "minHeight.px": a1, "boxSizing": a2 }; };
function ListComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 7);
    ɵngcc0.ɵɵtemplate(1, ListComponent_div_0_1_Template, 1, 4, undefined, 5);
    ɵngcc0.ɵɵtemplate(2, ListComponent_div_0_ng_template_2_Template, 2, 1, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(4, _c5, ctx_r0.virtual))("ngStyle", ɵngcc0.ɵɵpureFunction3(6, _c6, ctx_r0.virtual == null ? null : ctx_r0.virtual.itemHeight, ctx_r0.virtual == null ? null : ctx_r0.virtual.itemHeight, ctx_r0.virtual ? "border-box" : "inherit"));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.fixedGroupTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.fixedGroupTemplate);
} }
function ListComponent_5_ng_template_0_1_ng_template_0_Template(rf, ctx) { }
function ListComponent_5_ng_template_0_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_5_ng_template_0_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const dataItem_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r12.template.templateRef, dataItem_r10));
} }
function ListComponent_5_ng_template_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const dataItem_r10 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r13.getText(dataItem_r10));
} }
const _c7 = function (a0, a1) { return { "k-virtual-item": a0, "k-state-disabled": a1 }; };
function ListComponent_5_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵtemplate(1, ListComponent_5_ng_template_0_1_Template, 1, 4, undefined, 5);
    ɵngcc0.ɵɵtemplate(2, ListComponent_5_ng_template_0_ng_template_2_Template, 1, 1, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dataItem_r10 = ctx.$implicit;
    const itemIndex_r11 = ctx.index;
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("height", ctx_r9.virtual == null ? null : ctx_r9.virtual.itemHeight)("index", itemIndex_r11 + ctx_r9.startFrom)("multipleSelection", ctx_r9.multipleSelection)("ngClass", ɵngcc0.ɵɵpureFunction2(8, _c7, ctx_r9.virtual, ctx_r9.isDisabled(itemIndex_r11)));
    ɵngcc0.ɵɵattribute("id", ctx_r9.optionPrefix + "-" + ctx_r9.getValue(dataItem_r10))("tabIndex", 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r9.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r9.template);
} }
function ListComponent_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_5_ng_template_0_Template, 3, 11, "ng-template", 10);
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.data);
} }
function ListComponent_6_ng_template_0_li_0_1_ng_template_0_Template(rf, ctx) { }
function ListComponent_6_ng_template_0_li_0_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_6_ng_template_0_li_0_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const dataItem_r18 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r22 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r22.groupTemplate.templateRef, dataItem_r18.value));
} }
function ListComponent_6_ng_template_0_li_0_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "strong");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dataItem_r18 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", dataItem_r18.value, "");
} }
function ListComponent_6_ng_template_0_li_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 14);
    ɵngcc0.ɵɵtemplate(1, ListComponent_6_ng_template_0_li_0_1_Template, 1, 4, undefined, 5);
    ɵngcc0.ɵɵtemplate(2, ListComponent_6_ng_template_0_li_0_ng_template_2_Template, 2, 1, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dataItem_r18 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r20 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c5, ctx_r20.virtual))("ngStyle", ɵngcc0.ɵɵpureFunction3(9, _c6, ctx_r20.virtual == null ? null : ctx_r20.virtual.itemHeight, ctx_r20.virtual == null ? null : ctx_r20.virtual.itemHeight, ctx_r20.virtual ? "border-box" : "inherit"));
    ɵngcc0.ɵɵattribute("group-index", dataItem_r18.index)("id", ctx_r20.optionPrefix + "-" + ctx_r20.getValue(dataItem_r18.value))("tabIndex", 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r20.groupTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r20.groupTemplate);
} }
function ListComponent_6_ng_template_0_li_1_1_ng_template_0_Template(rf, ctx) { }
function ListComponent_6_ng_template_0_li_1_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_6_ng_template_0_li_1_1_ng_template_0_Template, 0, 0, "ng-template", 9);
} if (rf & 2) {
    const dataItem_r18 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r28 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r28.template.templateRef, dataItem_r18.value));
} }
function ListComponent_6_ng_template_0_li_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const dataItem_r18 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r29 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r29.getText(dataItem_r18.value));
} }
function ListComponent_6_ng_template_0_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 11);
    ɵngcc0.ɵɵtemplate(1, ListComponent_6_ng_template_0_li_1_1_Template, 1, 4, undefined, 5);
    ɵngcc0.ɵɵtemplate(2, ListComponent_6_ng_template_0_li_1_ng_template_2_Template, 1, 1, "ng-template", 8);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const dataItem_r18 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r21 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("height", ctx_r21.virtual == null ? null : ctx_r21.virtual.itemHeight)("index", dataItem_r18.offsetIndex)("multipleSelection", ctx_r21.multipleSelection)("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c7, ctx_r21.virtual, ctx_r21.isDisabled(dataItem_r18.offsetIndex)));
    ɵngcc0.ɵɵattribute("absolute-index", dataItem_r18.index)("id", ctx_r21.optionPrefix + "-" + ctx_r21.getValue(dataItem_r18.value))("tabIndex", 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r21.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r21.template);
} }
function ListComponent_6_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_6_ng_template_0_li_0_Template, 3, 13, "li", 12);
    ɵngcc0.ɵɵtemplate(1, ListComponent_6_ng_template_0_li_1_Template, 3, 12, "li", 13);
} if (rf & 2) {
    const dataItem_r18 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("ngIf", dataItem_r18.header && dataItem_r18.index > 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !dataItem_r18.header);
} }
function ListComponent_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ListComponent_6_ng_template_0_Template, 2, 2, "ng-template", 10);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r4.data);
} }
function ListComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵelement(1, "div");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵstyleProp("height", ctx_r5.scrollHeight, "px");
} }
const _c8 = function (a0, a1) { return { "k-virtual-content": a0, "k-list-scroller": a1 }; };
const _c9 = function (a0) { return { "k-virtual-list": a0 }; };
const _c10 = ["container"];
const _c11 = ["popupTemplate"];
const _c12 = ["optionsList"];
var I18N_13;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The text displayed in the popup when there are no items
     * @meaning kendo.autocomplete.noDataText
     */ 
    const MSG_EXTERNAL_2690656529626907484$$DIST_FESM2015_INDEX_JS_14 = goog.getMsg("NO DATA FOUND");
    I18N_13 = MSG_EXTERNAL_2690656529626907484$$DIST_FESM2015_INDEX_JS_14;
}
else {
    I18N_13 = $localize `:kendo.autocomplete.noDataText|The text displayed in the popup when there are no items␟4e9993e088a293543eb0c2801343518c115b6f20␟2690656529626907484:NO DATA FOUND`;
}
var I18N_15;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The title of the clear button
     * @meaning kendo.autocomplete.clearTitle
     */ 
    const MSG_EXTERNAL_4821453594854847070$$DIST_FESM2015_INDEX_JS_16 = goog.getMsg("clear");
    I18N_15 = MSG_EXTERNAL_4821453594854847070$$DIST_FESM2015_INDEX_JS_16;
}
else {
    I18N_15 = $localize `:kendo.autocomplete.clearTitle|The title of the clear button␟7cf49cc2d50eebd29f8d61564512383caaaac7a6␟4821453594854847070:clear`;
}
const _c17 = ["noDataText", I18N_13, "clearTitle", I18N_15];
function AutoCompleteComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵlistener("click", function AutoCompleteComponent_span_4_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.clearValue($event); })("mousedown", function AutoCompleteComponent_span_4_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); return $event.preventDefault(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("title", ctx_r1.clearTitle);
} }
function AutoCompleteComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 9);
} }
function AutoCompleteComponent_ng_template_6_0_ng_template_0_Template(rf, ctx) { }
const _c18 = function (a0) { return { templateRef: a0 }; };
function AutoCompleteComponent_ng_template_6_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AutoCompleteComponent_ng_template_6_0_ng_template_0_Template, 0, 0, "ng-template", 14);
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r10.headerTemplate.templateRef));
} }
function AutoCompleteComponent_ng_template_6_div_3_ng_template_1_Template(rf, ctx) { }
function AutoCompleteComponent_ng_template_6_div_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r16.noDataText);
} }
function AutoCompleteComponent_ng_template_6_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 15);
    ɵngcc0.ɵɵtemplate(1, AutoCompleteComponent_ng_template_6_div_3_ng_template_1_Template, 0, 0, "ng-template", 16);
    ɵngcc0.ɵɵtemplate(2, AutoCompleteComponent_ng_template_6_div_3_ng_template_2_Template, 2, 1, "ng-template", 6);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.noDataTemplate)("templateContext", ɵngcc0.ɵɵpureFunction1(3, _c18, ctx_r12.noDataTemplate == null ? null : ctx_r12.noDataTemplate.templateRef));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r12.noDataTemplate);
} }
function AutoCompleteComponent_ng_template_6_4_ng_template_0_Template(rf, ctx) { }
function AutoCompleteComponent_ng_template_6_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, AutoCompleteComponent_ng_template_6_4_ng_template_0_Template, 0, 0, "ng-template", 14);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r13.footerTemplate.templateRef));
} }
function AutoCompleteComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, AutoCompleteComponent_ng_template_6_0_Template, 1, 3, undefined, 10);
    ɵngcc0.ɵɵelementStart(1, "kendo-list", 11, 12);
    ɵngcc0.ɵɵlistener("pageChange", function AutoCompleteComponent_ng_template_6_Template_kendo_list_pageChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.pageChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, AutoCompleteComponent_ng_template_6_div_3_Template, 3, 5, "div", 13);
    ɵngcc0.ɵɵtemplate(4, AutoCompleteComponent_ng_template_6_4_Template, 1, 3, undefined, 10);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.headerTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r4.listBoxId)("optionPrefix", ctx_r4.optionPrefix)("data", ctx_r4.data)("textField", ctx_r4.valueField)("valueField", ctx_r4.valueField)("template", ctx_r4.template)("groupTemplate", ctx_r4.groupTemplate)("fixedGroupTemplate", ctx_r4.fixedGroupTemplate)("height", ctx_r4.listHeight)("show", ctx_r4.isOpen)("virtual", ctx_r4.virtual);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.data.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.footerTemplate);
} }
function AutoCompleteComponent_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-resize-sensor", 17);
    ɵngcc0.ɵɵlistener("resize", function AutoCompleteComponent_ng_template_8_Template_kendo_resize_sensor_resize_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onResize(); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c19 = ["wrapper"];
var I18N_20;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The text displayed in the popup when there are no items
     * @meaning kendo.combobox.noDataText
     */ 
    const MSG_EXTERNAL_7708502966028483300$$DIST_FESM2015_INDEX_JS_21 = goog.getMsg("NO DATA FOUND");
    I18N_20 = MSG_EXTERNAL_7708502966028483300$$DIST_FESM2015_INDEX_JS_21;
}
else {
    I18N_20 = $localize `:kendo.combobox.noDataText|The text displayed in the popup when there are no items␟2b6e00c74a6d9c98c03a6274d0224e9bd457ff89␟7708502966028483300:NO DATA FOUND`;
}
var I18N_22;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The title of the clear button
     * @meaning kendo.combobox.clearTitle
     */ 
    const MSG_EXTERNAL_2025597431468961462$$DIST_FESM2015_INDEX_JS_23 = goog.getMsg("clear");
    I18N_22 = MSG_EXTERNAL_2025597431468961462$$DIST_FESM2015_INDEX_JS_23;
}
else {
    I18N_22 = $localize `:kendo.combobox.clearTitle|The title of the clear button␟069e8fae80677e3e785861123bef446b3ff41ab4␟2025597431468961462:clear`;
}
const _c24 = ["noDataText", I18N_20, "clearTitle", I18N_22];
function ComboBoxComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵlistener("click", function ComboBoxComponent_span_6_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.clearValue($event); })("mousedown", function ComboBoxComponent_span_6_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); return $event.preventDefault(); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("title", ctx_r2.clearTitle);
} }
function ComboBoxComponent_ng_template_9_0_ng_template_0_Template(rf, ctx) { }
function ComboBoxComponent_ng_template_9_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ComboBoxComponent_ng_template_9_0_ng_template_0_Template, 0, 0, "ng-template", 16);
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r10.headerTemplate.templateRef));
} }
function ComboBoxComponent_ng_template_9_div_3_ng_template_1_Template(rf, ctx) { }
function ComboBoxComponent_ng_template_9_div_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r16.noDataText);
} }
function ComboBoxComponent_ng_template_9_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtemplate(1, ComboBoxComponent_ng_template_9_div_3_ng_template_1_Template, 0, 0, "ng-template", 18);
    ɵngcc0.ɵɵtemplate(2, ComboBoxComponent_ng_template_9_div_3_ng_template_2_Template, 2, 1, "ng-template", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r12.noDataTemplate)("templateContext", ɵngcc0.ɵɵpureFunction1(3, _c18, ctx_r12.noDataTemplate ? ctx_r12.noDataTemplate.templateRef : undefined));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r12.noDataTemplate);
} }
function ComboBoxComponent_ng_template_9_4_ng_template_0_Template(rf, ctx) { }
function ComboBoxComponent_ng_template_9_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, ComboBoxComponent_ng_template_9_4_ng_template_0_Template, 0, 0, "ng-template", 16);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r13.footerTemplate.templateRef));
} }
function ComboBoxComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, ComboBoxComponent_ng_template_9_0_Template, 1, 3, undefined, 12);
    ɵngcc0.ɵɵelementStart(1, "kendo-list", 13, 14);
    ɵngcc0.ɵɵlistener("pageChange", function ComboBoxComponent_ng_template_9_Template_kendo_list_pageChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(); return ctx_r18.pageChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(3, ComboBoxComponent_ng_template_9_div_3_Template, 3, 5, "div", 15);
    ɵngcc0.ɵɵtemplate(4, ComboBoxComponent_ng_template_9_4_Template, 1, 3, undefined, 12);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.headerTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r4.listBoxId)("optionPrefix", ctx_r4.optionPrefix)("data", ctx_r4.data)("textField", ctx_r4.textField)("valueField", ctx_r4.valueField)("template", ctx_r4.template)("groupTemplate", ctx_r4.groupTemplate)("fixedGroupTemplate", ctx_r4.fixedGroupTemplate)("height", ctx_r4.listHeight)("show", ctx_r4.isOpen)("virtual", ctx_r4.virtual);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.data.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.footerTemplate);
} }
function ComboBoxComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    const _r21 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-resize-sensor", 19);
    ɵngcc0.ɵɵlistener("resize", function ComboBoxComponent_ng_template_11_Template_kendo_resize_sensor_resize_0_listener() { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.onResize(); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c25 = function (a0, a1) { return { "k-state-default": a0, "k-state-disabled": a1 }; };
var I18N_26;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The text displayed in the popup when there are no items
     * @meaning kendo.dropdownlist.noDataText
     */ 
    const MSG_EXTERNAL_8289552890585138350$$DIST_FESM2015_INDEX_JS_27 = goog.getMsg("NO DATA FOUND");
    I18N_26 = MSG_EXTERNAL_8289552890585138350$$DIST_FESM2015_INDEX_JS_27;
}
else {
    I18N_26 = $localize `:kendo.dropdownlist.noDataText|The text displayed in the popup when there are no items␟4fc2f70c9c8cf7b18affd6b938105996d6ac3306␟8289552890585138350:NO DATA FOUND`;
}
const _c28 = ["noDataText", I18N_26];
function DropDownListComponent_5_ng_template_0_Template(rf, ctx) { }
function DropDownListComponent_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DropDownListComponent_5_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r1.valueTemplate.templateRef, ctx_r1.dataItem));
} }
function DropDownListComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.getText());
} }
function DropDownListComponent_ng_template_9_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r16 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 14);
    ɵngcc0.ɵɵlistener("click", function DropDownListComponent_ng_template_9_ng_template_0_Template_span_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); return $event.stopImmediatePropagation(); });
    ɵngcc0.ɵɵelementStart(1, "input", 15);
    ɵngcc0.ɵɵlistener("ngModelChange", function DropDownListComponent_ng_template_9_ng_template_0_Template_input_ngModelChange_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r17 = ɵngcc0.ɵɵnextContext(2); return ctx_r17.filterText = $event; })("keydown", function DropDownListComponent_ng_template_9_ng_template_0_Template_input_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.keydown($event); })("input", function DropDownListComponent_ng_template_9_ng_template_0_Template_input_input_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r19 = ɵngcc0.ɵɵnextContext(2); return ctx_r19.handleFilter($event); })("focus", function DropDownListComponent_ng_template_9_ng_template_0_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r20 = ɵngcc0.ɵɵnextContext(2); return ctx_r20.onFilterFocus(); })("blur", function DropDownListComponent_ng_template_9_ng_template_0_Template_input_blur_1_listener() { ɵngcc0.ɵɵrestoreView(_r16); const ctx_r21 = ɵngcc0.ɵɵnextContext(2); return ctx_r21.blurFilterInput(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "span", 16);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("filterInput", ctx_r8.isFocused && !ctx_r8.touchEnabled)("dir", ctx_r8.direction)("ngModel", ctx_r8.filterText);
    ɵngcc0.ɵɵattribute("aria-owns", ctx_r8.ariaOwns)("aria-activedescendant", ctx_r8.ariaActivedescendant)("aria-label", ctx_r8.noDataLabel);
} }
const _c29 = function (a0) { return { "k-state-disabled": a0 }; };
function DropDownListComponent_ng_template_9_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c29, ctx_r9.isDisabledDefaultItem))("index", 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r9.getDefaultItemText(), " ");
} }
function DropDownListComponent_ng_template_9_ng_template_2_ng_template_1_Template(rf, ctx) { }
function DropDownListComponent_ng_template_9_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 17);
    ɵngcc0.ɵɵtemplate(1, DropDownListComponent_ng_template_9_ng_template_2_ng_template_1_Template, 0, 0, "ng-template", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(3, _c29, ctx_r10.isDisabledDefaultItem))("index", 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(5, _c4, ctx_r10.itemTemplate.templateRef, ctx_r10.defaultItem));
} }
function DropDownListComponent_ng_template_9_3_ng_template_0_Template(rf, ctx) { }
function DropDownListComponent_ng_template_9_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DropDownListComponent_ng_template_9_3_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r11.headerTemplate.templateRef));
} }
function DropDownListComponent_ng_template_9_div_6_ng_template_1_Template(rf, ctx) { }
function DropDownListComponent_ng_template_9_div_6_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r25.noDataText);
} }
function DropDownListComponent_ng_template_9_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 18);
    ɵngcc0.ɵɵtemplate(1, DropDownListComponent_ng_template_9_div_6_ng_template_1_Template, 0, 0, "ng-template", 19);
    ɵngcc0.ɵɵtemplate(2, DropDownListComponent_ng_template_9_div_6_ng_template_2_Template, 2, 1, "ng-template", 5);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r13.noDataTemplate)("templateContext", ɵngcc0.ɵɵpureFunction1(3, _c18, ctx_r13.noDataTemplate ? ctx_r13.noDataTemplate.templateRef : undefined));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r13.noDataTemplate);
} }
function DropDownListComponent_ng_template_9_7_ng_template_0_Template(rf, ctx) { }
function DropDownListComponent_ng_template_9_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, DropDownListComponent_ng_template_9_7_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r14.footerTemplate.templateRef));
} }
function DropDownListComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r28 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, DropDownListComponent_ng_template_9_ng_template_0_Template, 3, 6, "ng-template", 5);
    ɵngcc0.ɵɵtemplate(1, DropDownListComponent_ng_template_9_ng_template_1_Template, 2, 5, "ng-template", 5);
    ɵngcc0.ɵɵtemplate(2, DropDownListComponent_ng_template_9_ng_template_2_Template, 2, 8, "ng-template", 5);
    ɵngcc0.ɵɵtemplate(3, DropDownListComponent_ng_template_9_3_Template, 1, 3, undefined, 4);
    ɵngcc0.ɵɵelementStart(4, "kendo-list", 11, 12);
    ɵngcc0.ɵɵlistener("pageChange", function DropDownListComponent_ng_template_9_Template_kendo_list_pageChange_4_listener($event) { ɵngcc0.ɵɵrestoreView(_r28); const ctx_r27 = ɵngcc0.ɵɵnextContext(); return ctx_r27.pageChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(6, DropDownListComponent_ng_template_9_div_6_Template, 3, 5, "div", 13);
    ɵngcc0.ɵɵtemplate(7, DropDownListComponent_ng_template_9_7_Template, 1, 3, undefined, 4);
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.filterable);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.defaultItem && !ctx_r4.itemTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.defaultItem && ctx_r4.itemTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.headerTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r4.listBoxId)("optionPrefix", ctx_r4.optionPrefix)("data", ctx_r4.data)("textField", ctx_r4.textField)("valueField", ctx_r4.valueField)("template", ctx_r4.itemTemplate)("groupTemplate", ctx_r4.groupTemplate)("fixedGroupTemplate", ctx_r4.fixedGroupTemplate)("height", ctx_r4.listHeight)("show", ctx_r4.isOpen)("virtual", ctx_r4.virtual);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.data.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.footerTemplate);
} }
function DropDownListComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    const _r30 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-resize-sensor", 20);
    ɵngcc0.ɵɵlistener("resize", function DropDownListComponent_ng_template_11_Template_kendo_resize_sensor_resize_0_listener() { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.onResize(); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c30 = function (a1, a2) { return { "k-dropdown-wrap": true, "k-state-default": a1, "k-state-disabled": a2 }; };
var I18N_31;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The text displayed in the popup when there are no items
     * @meaning kendo.multiselect.noDataText
     */ 
    const MSG_EXTERNAL_1450213984397806503$$DIST_FESM2015_INDEX_JS_32 = goog.getMsg("NO DATA FOUND");
    I18N_31 = MSG_EXTERNAL_1450213984397806503$$DIST_FESM2015_INDEX_JS_32;
}
else {
    I18N_31 = $localize `:kendo.multiselect.noDataText|The text displayed in the popup when there are no items␟3cc1323f79a5fe012960578e513f8a35b2af1e96␟1450213984397806503:NO DATA FOUND`;
}
var I18N_33;
if (typeof ngI18nClosureMode !== "undefined" && ngI18nClosureMode) {
    /**
     * @desc The title of the clear button
     * @meaning kendo.combobox.clearTitle
     */ 
    const MSG_EXTERNAL_2025597431468961462$$DIST_FESM2015_INDEX_JS_34 = goog.getMsg("clear");
    I18N_33 = MSG_EXTERNAL_2025597431468961462$$DIST_FESM2015_INDEX_JS_34;
}
else {
    I18N_33 = $localize `:kendo.combobox.clearTitle|The title of the clear button␟069e8fae80677e3e785861123bef446b3ff41ab4␟2025597431468961462:clear`;
}
const _c35 = ["noDataText", I18N_31, "clearTitle", I18N_33];
function MultiSelectComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 11);
    ɵngcc0.ɵɵlistener("mousedown", function MultiSelectComponent_span_7_Template_span_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8.clearAll($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("title", ctx_r2.clearTitle);
} }
function MultiSelectComponent_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 12);
} }
function MultiSelectComponent_ng_template_9_0_ng_template_0_Template(rf, ctx) { }
function MultiSelectComponent_ng_template_9_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MultiSelectComponent_ng_template_9_0_ng_template_0_Template, 0, 0, "ng-template", 18);
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r10.headerTemplate.templateRef));
} }
function MultiSelectComponent_ng_template_9_div_1_2_ng_template_0_Template(rf, ctx) { }
function MultiSelectComponent_ng_template_9_div_1_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MultiSelectComponent_ng_template_9_div_1_2_ng_template_0_Template, 0, 0, "ng-template", 18);
} if (rf & 2) {
    const ctx_r16 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r16.customItemTemplate.templateRef, ctx_r16.text));
} }
function MultiSelectComponent_ng_template_9_div_1_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r18 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵtextInterpolate(ctx_r18.text);
} }
function MultiSelectComponent_ng_template_9_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵelementStart(1, "div", 20);
    ɵngcc0.ɵɵtemplate(2, MultiSelectComponent_ng_template_9_div_1_2_Template, 1, 4, undefined, 21);
    ɵngcc0.ɵɵtemplate(3, MultiSelectComponent_ng_template_9_div_1_ng_template_3_Template, 1, 1, "ng-template", null, 22, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelement(5, "span", 23);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const _r17 = ɵngcc0.ɵɵreference(4);
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("multipleSelection", true)("index", 0 - 1);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r11.customItemTemplate)("ngIfElse", _r17);
} }
function MultiSelectComponent_ng_template_9_div_4_ng_template_1_Template(rf, ctx) { }
function MultiSelectComponent_ng_template_9_div_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r21 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r21.noDataText);
} }
function MultiSelectComponent_ng_template_9_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 24);
    ɵngcc0.ɵɵtemplate(1, MultiSelectComponent_ng_template_9_div_4_ng_template_1_Template, 0, 0, "ng-template", 25);
    ɵngcc0.ɵɵtemplate(2, MultiSelectComponent_ng_template_9_div_4_ng_template_2_Template, 2, 1, "ng-template", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r13.noDataTemplate)("templateContext", ɵngcc0.ɵɵpureFunction1(3, _c18, ctx_r13.noDataTemplate ? ctx_r13.noDataTemplate.templateRef : undefined));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r13.noDataTemplate);
} }
function MultiSelectComponent_ng_template_9_5_ng_template_0_Template(rf, ctx) { }
function MultiSelectComponent_ng_template_9_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, MultiSelectComponent_ng_template_9_5_ng_template_0_Template, 0, 0, "ng-template", 18);
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction1(1, _c18, ctx_r14.footerTemplate.templateRef));
} }
function MultiSelectComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r24 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵtemplate(0, MultiSelectComponent_ng_template_9_0_Template, 1, 3, undefined, 13);
    ɵngcc0.ɵɵtemplate(1, MultiSelectComponent_ng_template_9_div_1_Template, 6, 4, "div", 14);
    ɵngcc0.ɵɵelementStart(2, "kendo-list", 15, 16);
    ɵngcc0.ɵɵlistener("pageChange", function MultiSelectComponent_ng_template_9_Template_kendo_list_pageChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.pageChange($event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(4, MultiSelectComponent_ng_template_9_div_4_Template, 3, 5, "div", 17);
    ɵngcc0.ɵɵtemplate(5, MultiSelectComponent_ng_template_9_5_Template, 1, 3, undefined, 13);
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.headerTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.allowCustom && ctx_r5.text);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("id", ctx_r5.listBoxId)("optionPrefix", ctx_r5.optionPrefix)("data", ctx_r5.data)("textField", ctx_r5.textField)("valueField", ctx_r5.valueField)("height", ctx_r5.listHeight)("template", ctx_r5.template)("groupTemplate", ctx_r5.groupTemplate)("fixedGroupTemplate", ctx_r5.fixedGroupTemplate)("show", ctx_r5.isOpen)("multipleSelection", true)("virtual", ctx_r5.virtual);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.data.length === 0);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.footerTemplate);
} }
function MultiSelectComponent_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    const _r26 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "kendo-resize-sensor", 26);
    ɵngcc0.ɵɵlistener("resize", function MultiSelectComponent_ng_template_11_Template_kendo_resize_sensor_resize_0_listener() { ɵngcc0.ɵɵrestoreView(_r26); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.onResize(); });
    ɵngcc0.ɵɵelementEnd();
} }
function TagListComponent_li_1_1_ng_template_0_Template(rf, ctx) { }
function TagListComponent_li_1_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TagListComponent_li_1_1_ng_template_0_Template, 0, 0, "ng-template");
} }
function TagListComponent_li_1_ng_template_2_1_ng_template_0_Template(rf, ctx) { }
function TagListComponent_li_1_ng_template_2_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TagListComponent_li_1_ng_template_2_1_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const tag_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r9 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r9.groupTemplate.templateRef, tag_r1));
} }
function TagListComponent_li_1_ng_template_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const tag_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    ɵngcc0.ɵɵtextInterpolate2("", tag_r1.length, " ", tag_r1.length === 1 ? "item" : "items", " selected");
} }
function TagListComponent_li_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, TagListComponent_li_1_ng_template_2_1_Template, 1, 4, undefined, 8);
    ɵngcc0.ɵɵtemplate(2, TagListComponent_li_1_ng_template_2_ng_template_2_Template, 1, 2, "ng-template", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.groupTemplate);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r5.groupTemplate);
} }
function TagListComponent_li_1_ng_template_4_1_ng_template_0_Template(rf, ctx) { }
function TagListComponent_li_1_ng_template_4_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtemplate(0, TagListComponent_li_1_ng_template_4_1_ng_template_0_Template, 0, 0, "ng-template", 10);
} if (rf & 2) {
    const tag_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("templateContext", ɵngcc0.ɵɵpureFunction2(1, _c4, ctx_r14.template.templateRef, tag_r1));
} }
function TagListComponent_li_1_ng_template_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵtext(0);
} if (rf & 2) {
    const tag_r1 = ɵngcc0.ɵɵnextContext(2).$implicit;
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵtextInterpolate(ctx_r15.tagProp(tag_r1, ctx_r15.textField));
} }
function TagListComponent_li_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtemplate(1, TagListComponent_li_1_ng_template_4_1_Template, 1, 4, undefined, 8);
    ɵngcc0.ɵɵtemplate(2, TagListComponent_li_1_ng_template_4_ng_template_2_Template, 1, 1, "ng-template", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r7.template);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r7.template);
} }
const _c36 = function (a0) { return { "k-state-focused": a0 }; };
function TagListComponent_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r20 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li", 2);
    ɵngcc0.ɵɵtemplate(1, TagListComponent_li_1_1_Template, 1, 0, undefined, 3);
    ɵngcc0.ɵɵtemplate(2, TagListComponent_li_1_ng_template_2_Template, 3, 2, "ng-template", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵtemplate(4, TagListComponent_li_1_ng_template_4_Template, 3, 2, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementStart(6, "span", 6);
    ɵngcc0.ɵɵelementStart(7, "span", 7);
    ɵngcc0.ɵɵlistener("mousedown", function TagListComponent_li_1_Template_span_mousedown_7_listener($event) { ɵngcc0.ɵɵrestoreView(_r20); const tag_r1 = ctx.$implicit; const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.deleteTag($event, tag_r1); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tag_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    const _r4 = ɵngcc0.ɵɵreference(3);
    const _r6 = ɵngcc0.ɵɵreference(5);
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(7, _c36, i_r2 === ctx_r0.focused));
    ɵngcc0.ɵɵattribute("aria-setsize", ctx_r0.tags == null ? null : ctx_r0.tags.length)("id", ctx_r0.itemId(tag_r1));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.isGroupTag(tag_r1))("ngIfThen", _r4)("ngIfElse", _r6);
    ɵngcc0.ɵɵadvance(5);
    ɵngcc0.ɵɵattribute("aria-hidden", i_r2 !== ctx_r0.focused);
} }
export { PopupComponent } from '@progress/kendo-angular-popup';
import { map, switchMap, take, auditTime, tap, filter, partition, throttleTime, catchError, skipWhile, concatMap, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { touchEnabled } from '@progress/kendo-common';

/* tslint:disable:no-bitwise */
/**
 * @hidden
 */
const isPresent = (value) => value !== null && value !== undefined;
/**
 * @hidden
 */
const isNumber = (value) => !isNaN(value);
/**
 * @hidden
 */
const guid = () => {
    let id = "";
    let i;
    let random;
    for (i = 0; i < 32; i++) {
        random = Math.random() * 16 | 0;
        if (i === 8 || i === 12 || i === 16 || i === 20) {
            id += "-";
        }
        id += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16);
    }
    return id;
};
/**
 * @hidden
 */
const combineStr = (begin, end) => {
    return begin.concat(end.substr(end.toLowerCase().indexOf(begin.toLowerCase()) + begin.length));
};
/**
 * @hidden
 */
const isArray = (value) => Array.isArray(value);
/**
 * @hidden
 */
const isObject = (value) => isPresent(value) && typeof value === 'object';
/**
 * @hidden
 */
const isEmptyString = (value) => typeof value === 'string' && value.length === 0;
/**
 * @hidden
 */
const resolveValuesInArray = (values, data = [], valueField) => values
    .map(value => {
    return data.find(item => item[valueField] === value);
})
    .filter(value => value !== undefined);
/**
 * @hidden
 */
const validateComplexValues = (values, valueField) => isArray(values) && values.filter(item => {
    return isObject(item) && item[valueField];
});
/**
 * @hidden
 */
const resolveAllValues = (value, data, valueField) => {
    const customValues = validateComplexValues(value, valueField) || [];
    const resolvedValues = resolveValuesInArray(value, data, valueField) || [];
    return resolvedValues.concat(customValues);
};
/**
 * @hidden
 */
const isObjectArray = (values) => {
    return isArray(values) && values.every(item => isObject(item));
};
/**
 * @hidden
 */
const selectedIndices = (values, data, valueField) => {
    const extractedValues = data.map(item => {
        return isPresent(item) && isPresent(item[valueField]) ? item[valueField] : item;
    });
    return values.reduce((arr, item) => {
        const value = isPresent(item) && isPresent(item[valueField]) ? item[valueField] : item;
        const index = extractedValues.indexOf(value);
        if (index !== -1) {
            arr.push(index);
        }
        return arr;
    }, []);
};
/**
 * @hidden
 */
const getter = (dataItem, field, usePrimitive = false) => {
    if (isPresent(dataItem)) {
        if (usePrimitive) {
            return field && isPresent(dataItem[field]) ? dataItem[field] : dataItem;
        }
        else {
            return field ? dataItem[field] : dataItem;
        }
    }
};
/**
 * @hidden
 */
const sameCharsOnly = (word, character) => {
    for (let idx = 0; idx < word.length; idx++) {
        if (word.charAt(idx) !== character) {
            return false;
        }
    }
    return true;
};
/**
 * @hidden
 */
const shuffleData = (data, splitIndex, defaultItem) => {
    let result = data;
    if (defaultItem) {
        result = [defaultItem].concat(result);
    }
    return result.slice(splitIndex).concat(result.slice(0, splitIndex));
};
/**
 * @hidden
 */
const matchText = (text, word, ignoreCase) => {
    if (!isPresent(text)) {
        return false;
    }
    let temp = String(text);
    if (ignoreCase) {
        temp = temp.toLowerCase();
    }
    return temp.indexOf(word) === 0;
};
/**
 * @hidden
 *
 * Checks whether the passed object has all of the listed properties.
 */
const hasProps = (obj, props) => {
    if (!isPresent(obj)) {
        return false;
    }
    return props.every(prop => obj.hasOwnProperty(prop));
};
/**
 * @hidden
 *
 * Checks whether an element is untouched by looking for the ng-untouched css class
 */
const isUntouched = (element) => element.className.includes('ng-untouched');
/**
 * @hidden
 */
const noop = (_) => { };

/* tslint:disable:member-ordering */
/**
 * @hidden
 */
class SearchBarComponent {
    constructor(localization, renderer) {
        this.localization = localization;
        this.valueChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onNavigate = new EventEmitter();
        this.searchBarClass = true;
        this._userInput = "";
        this._previousValue = "";
        this._placeholder = "";
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.renderer = renderer;
    }
    get userInput() {
        return this._userInput;
    }
    set userInput(userInput) {
        this._userInput = userInput || "";
    }
    get value() {
        return this.input.nativeElement.value;
    }
    set placeholder(text) {
        this._placeholder = text || '';
        this.setInputSize();
    }
    get placeholder() {
        return this._placeholder;
    }
    ngOnInit() {
        this.localizationChangeSubscription = this.localization
            .changes.subscribe(({ rtl }) => this.direction = rtl ? 'rtl' : 'ltr');
    }
    ngOnChanges(changes) {
        let previousUserInput;
        if (this.input && (changes.userInput || changes.suggestedText)) {
            if (changes.userInput && changes.userInput.previousValue) {
                if (this._previousValue === changes.userInput.previousValue) {
                    previousUserInput = this._previousValue;
                }
                else {
                    previousUserInput = changes.userInput.currentValue || "";
                }
            }
            else {
                previousUserInput = this._previousValue;
            }
            const caretIndex = this.input.nativeElement.selectionStart;
            const caretAtEnd = previousUserInput.length === caretIndex;
            this.writeInputValue(this.suggestedText ? combineStr(this.userInput, this.suggestedText) : this.userInput);
            if (this.suggestedText) {
                this.setInputSelection(this.userInput.length, this.suggestedText.length);
            }
            else if (caretAtEnd) {
                this.setInputSelection(this.userInput.length, this.userInput.length);
            }
            else {
                this.setInputSelection(caretIndex, caretIndex);
            }
            this._previousValue = this.userInput;
        }
    }
    ngOnDestroy() {
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    }
    writeInputValue(text) {
        if (isDocumentAvailable()) {
            this.renderer.setProperty(this.input.nativeElement, 'value', text);
        }
    }
    setInputSelection(start, end) {
        if (isDocumentAvailable() && this.input.nativeElement === document.activeElement) {
            try {
                this.input.nativeElement.setSelectionRange(start, end);
            }
            catch (e) {
                //Make sure that the element is in the DOM before you invoke its methods
            }
        }
    }
    handleInput(event) {
        const value = event.target.value;
        if (value !== this.userInput) {
            this._previousValue = value;
            this.valueChange.emit(value);
        }
    }
    handleFocus(event) {
        this.onFocus.emit(event);
    }
    handleBlur(event) {
        this.onBlur.emit(event);
    }
    handleKeydown(event) {
        const keyCode = event.keyCode;
        const keys = [Keys.ArrowUp, Keys.ArrowDown, Keys.ArrowLeft, Keys.ArrowRight, Keys.Enter,
            Keys.Escape, Keys.Delete, Keys.Backspace, Keys.Home, Keys.End];
        if (keys.indexOf(keyCode) > -1) {
            this.onNavigate.emit(event);
        }
    }
    focus() {
        if (isDocumentAvailable()) {
            this.input.nativeElement.focus();
        }
    }
    blur() {
        if (isDocumentAvailable()) {
            this.input.nativeElement.blur();
        }
    }
    setInputSize() {
        const lengthOf = x => x ? x.length : 0;
        const input = this.input.nativeElement;
        const placeholderLength = lengthOf(this.placeholder);
        const textLength = lengthOf(this.value);
        const size = Math.max(placeholderLength, textLength, 1);
        this.renderer.setAttribute(input, 'size', size.toString());
    }
}
SearchBarComponent.ɵfac = function SearchBarComponent_Factory(t) { return new (t || SearchBarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
SearchBarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SearchBarComponent, selectors: [["kendo-searchbar"]], viewQuery: function SearchBarComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
    } }, hostVars: 2, hostBindings: function SearchBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("k-searchbar", ctx.searchBarClass);
    } }, inputs: { userInput: "userInput", placeholder: "placeholder", id: "id", listId: "listId", tagListId: "tagListId", activeDescendant: "activeDescendant", noDataLabel: "noDataLabel", disabled: "disabled", readonly: "readonly", tabIndex: "tabIndex", popupOpen: "popupOpen", role: "role", suggestedText: "suggestedText" }, outputs: { valueChange: "valueChange", onBlur: "onBlur", onFocus: "onFocus", onClick: "onClick", onNavigate: "onNavigate" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 21, consts: [["autocomplete", "off", "aria-haspopup", "listbox", 3, "id", "disabled", "readonly", "placeholder", "kendoEventsOutsideAngular", "scope", "input", "keydown"], ["input", ""]], template: function SearchBarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "input", 0, 1);
        ɵngcc0.ɵɵlistener("input", function SearchBarComponent_Template_input_input_0_listener($event) { return ctx.handleInput($event); })("keydown", function SearchBarComponent_Template_input_keydown_0_listener($event) { return ctx.handleKeydown($event); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMap("k-input");
        ɵngcc0.ɵɵproperty("id", ctx.id)("disabled", ctx.disabled)("readonly", ctx.readonly)("placeholder", ctx.placeholder)("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(18, _c1, ctx.handleFocus, ctx.handleBlur))("scope", ctx);
        ɵngcc0.ɵɵattribute("tabIndex", ctx.tabIndex)("dir", ctx.direction)("role", ctx.role)("aria-disabled", ctx.disabled)("aria-readonly", ctx.readonly)("aria-expanded", ctx.popupOpen)("aria-owns", ctx.listId)("aria-describedby", ctx.tagListId)("aria-activedescendant", ctx.activeDescendant)("aria-label", ctx.noDataLabel);
    } }, directives: [ɵngcc2.EventsOutsideAngularDirective], encapsulation: 2 });
/** @nocollapse */
SearchBarComponent.ctorParameters = () => [
    { type: LocalizationService },
    { type: Renderer2 }
];
SearchBarComponent.propDecorators = {
    id: [{ type: Input }],
    listId: [{ type: Input }],
    tagListId: [{ type: Input }],
    activeDescendant: [{ type: Input }],
    noDataLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    tabIndex: [{ type: Input }],
    popupOpen: [{ type: Input }],
    role: [{ type: Input }],
    userInput: [{ type: Input }],
    suggestedText: [{ type: Input }],
    valueChange: [{ type: Output }],
    onBlur: [{ type: Output }],
    onFocus: [{ type: Output }],
    onClick: [{ type: Output }],
    onNavigate: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input', { static: true },] }],
    searchBarClass: [{ type: HostBinding, args: ['class.k-searchbar',] }],
    placeholder: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SearchBarComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-searchbar',
                template: `
        <input #input
            autocomplete="off"
            [id]="id"
            [disabled]="disabled"
            [readonly]="readonly"
            [placeholder]="placeholder"
            [class]="'k-input'"
            (input)="handleInput($event)"
            (keydown)="handleKeydown($event)"
            [kendoEventsOutsideAngular]="{
                focus: handleFocus,
                blur: handleBlur
            }"
            [scope]="this"
            [attr.tabIndex]="tabIndex"
            [attr.dir]="direction"
            [attr.role]="role"
            [attr.aria-disabled]="disabled"
            [attr.aria-readonly]="readonly"
            aria-haspopup="listbox"
            [attr.aria-expanded]="popupOpen"
            [attr.aria-owns]="listId"
            [attr.aria-describedby]="tagListId"
            [attr.aria-activedescendant]="activeDescendant"
            [attr.aria-label]="noDataLabel"
        />
   `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }, { type: ɵngcc0.Renderer2 }]; }, { valueChange: [{
            type: Output
        }], onBlur: [{
            type: Output
        }], onFocus: [{
            type: Output
        }], onClick: [{
            type: Output
        }], onNavigate: [{
            type: Output
        }], searchBarClass: [{
            type: HostBinding,
            args: ['class.k-searchbar']
        }], userInput: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], id: [{
            type: Input
        }], listId: [{
            type: Input
        }], tagListId: [{
            type: Input
        }], activeDescendant: [{
            type: Input
        }], noDataLabel: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], popupOpen: [{
            type: Input
        }], role: [{
            type: Input
        }], suggestedText: [{
            type: Input
        }], input: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }] }); })();

/* tslint:disable:max-line-length */
/**
 * Renders the list item content. To define the item template, nest an `<ng-template>` tag
 * with the `kendo<ComponentName>ItemTemplate` directive inside the component tag. The template context is
 * set to the current component. To get a reference to the current data item, use the `let-dataItem` directive.
 *
 * - [Using `ItemTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-item-template)
 * - [Using `ItemTemplate` with the ComboBox]({% slug templates_combobox %}#toc-item-template)
 * - [Using `ItemTemplate` with the DropDownList]({% slug templates_ddl %}#toc-item-template)
 * - [Using `ItemTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-item-template)
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="listItems">
 *    <ng-template kendoComboBoxItemTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class ItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ItemTemplateDirective.ɵfac = function ItemTemplateDirective_Factory(t) { return new (t || ItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ItemTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ItemTemplateDirective, selectors: [["", "kendoDropDownListItemTemplate", ""], ["", "kendoComboBoxItemTemplate", ""], ["", "kendoAutoCompleteItemTemplate", ""], ["", "kendoMultiSelectItemTemplate", ""]] });
/** @nocollapse */
ItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListItemTemplate],[kendoComboBoxItemTemplate],[kendoAutoCompleteItemTemplate],[kendoMultiSelectItemTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders the header content of the list. To define the header template, nest an `<ng-template>` tag
 * with the `kendo<ComponentName>HeaderTemplate` directive inside the component tag.
 *
 * - [Using `HeaderTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-header-template)
 * - [Using `HeaderTemplate` with the ComboBox]({% slug templates_combobox %}#toc-header-template)
 * - [Using `HeaderTemplate` with the DropDownList]({% slug templates_ddl %}#toc-header-template)
 * - [Using `HeaderTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-header-template)
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="listItems">
 *    <ng-template kendoComboBoxHeaderTemplate>
 *      <h4>Header template</h4>
 *    </ng-template>
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class HeaderTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
HeaderTemplateDirective.ɵfac = function HeaderTemplateDirective_Factory(t) { return new (t || HeaderTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
HeaderTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HeaderTemplateDirective, selectors: [["", "kendoDropDownListHeaderTemplate", ""], ["", "kendoComboBoxHeaderTemplate", ""], ["", "kendoAutoCompleteHeaderTemplate", ""], ["", "kendoMultiSelectHeaderTemplate", ""]] });
/** @nocollapse */
HeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HeaderTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListHeaderTemplate],[kendoComboBoxHeaderTemplate],[kendoAutoCompleteHeaderTemplate],[kendoMultiSelectHeaderTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders the footer content of the list. To define the footer template, nest an `<ng-template>` tag
 * with the `kendo<ComponentName>FooterTemplate` directive inside the component tag.
 *
 * - [Using `FooterTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-footer-template)
 * - [Using `FooterTemplate` with the ComboBox]({% slug templates_combobox %}#toc-footer-template)
 * - [Using `FooterTemplate` with the DropDownList]({% slug templates_ddl %}#toc-footer-template)
 * - [Using `FooterTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-footer-template)
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="listItems">
 *    <ng-template kendoComboBoxFooterTemplate>
 *      <h4>Footer template</h4>
 *    </ng-template>
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class FooterTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FooterTemplateDirective.ɵfac = function FooterTemplateDirective_Factory(t) { return new (t || FooterTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
FooterTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FooterTemplateDirective, selectors: [["", "kendoDropDownListFooterTemplate", ""], ["", "kendoComboBoxFooterTemplate", ""], ["", "kendoAutoCompleteFooterTemplate", ""], ["", "kendoMultiSelectFooterTemplate", ""]] });
/** @nocollapse */
FooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FooterTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListFooterTemplate],[kendoComboBoxFooterTemplate],[kendoAutoCompleteFooterTemplate],[kendoMultiSelectFooterTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders the group header content. To define the group template, nest an `<ng-template>` tag
 * with the `kendo<ComponentName>GroupTemplate` directive inside the component tag. The template context is
 * set to the current component. To get a reference to the current data item, use the `let-groupName` directive.
 *
 * - [Using `GroupTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-group-template)
 * - [Using `GroupTemplate` with the ComboBox]({% slug templates_combobox %}#toc-group-template)
 * - [Using `GroupTemplate` with the DropDownList]({% slug templates_ddl %}#toc-group-template)
 * - [Using `GroupTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-group-template)
 *
 * @example
 * ```ts
 * import { groupBy } from '@progress/kendo-data-query';
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="groupedData" [textField]="'name'" [valueField]="'name'">
 *    <ng-template kendoComboBoxGroupTemplate let-groupName>
 *      <span>Food type: {{groupName}} option</span>
 *    </ng-template>
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public data = [
 *       { name: "Pork", category: "Food", subcategory: "Meat" },
 *       { name: "Pepper", category: "Food", subcategory: "Vegetables" },
 *       { name: "Beef", category: "Food", subcategory: "Meat" }
 *   ];
 *   public groupedData = groupBy(this.data, [{field: "subcategory"}]);
 * }
 * ```
 */
class GroupTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
GroupTemplateDirective.ɵfac = function GroupTemplateDirective_Factory(t) { return new (t || GroupTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
GroupTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GroupTemplateDirective, selectors: [["", "kendoDropDownListGroupTemplate", ""], ["", "kendoComboBoxGroupTemplate", ""], ["", "kendoAutoCompleteGroupTemplate", ""], ["", "kendoMultiSelectGroupTemplate", ""]] });
/** @nocollapse */
GroupTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListGroupTemplate],[kendoComboBoxGroupTemplate],[kendoAutoCompleteGroupTemplate],[kendoMultiSelectGroupTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders the fixed group header content. To define the fixed group template, nest an `<ng-template>` tag
 * with the `kendo<ComponentName>FixedGroupTemplate` directive inside the component tag. The template context is
 * set to the current component. To get a reference to the current data item, use the `let-groupName` directive.
 *
 * - [Using `FixedGroupTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-fixed-group-template)
 * - [Using `FixedGroupTemplate` with the ComboBox]({% slug templates_combobox %}#toc-fixed-group-template)
 * - [Using `FixedGroupTemplate` with the DropDownList]({% slug templates_ddl %}#toc-fixed-group-template)
 * - [Using `FixedGroupTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-fixed-group-template)
 *
 * @example
 * ```ts
 * import { groupBy } from '@progress/kendo-data-query';
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="groupedData" [textField]="'name'" [valueField]="'name'">
 *    <ng-template kendoComboBoxFixedGroupTemplate let-groupName>
 *      <span>Food type: {{groupName}} option</span>
 *    </ng-template>
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public data = [
 *       { name: "Pork", category: "Food", subcategory: "Meat" },
 *       { name: "Pepper", category: "Food", subcategory: "Vegetables" },
 *       { name: "Beef", category: "Food", subcategory: "Meat" }
 *   ];
 *   public groupedData = groupBy(this.data, [{field: "subcategory"}]);
 * }
 * ```
 */
class FixedGroupTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FixedGroupTemplateDirective.ɵfac = function FixedGroupTemplateDirective_Factory(t) { return new (t || FixedGroupTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
FixedGroupTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FixedGroupTemplateDirective, selectors: [["", "kendoDropDownListFixedGroupTemplate", ""], ["", "kendoComboBoxFixedGroupTemplate", ""], ["", "kendoAutoCompleteFixedGroupTemplate", ""], ["", "kendoMultiSelectFixedGroupTemplate", ""]] });
/** @nocollapse */
FixedGroupTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FixedGroupTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListFixedGroupTemplate],[kendoComboBoxFixedGroupTemplate],[kendoAutoCompleteFixedGroupTemplate],[kendoMultiSelectFixedGroupTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/**
 * @hidden
 */
class SelectionService {
    constructor() {
        this.onSelect = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.total = 0;
        this.selectedIndices = [];
    }
    getTotal() {
        return this.total;
    }
    isSelected(index) {
        return isPresent(this.selectedIndices.find(current => current === index));
    }
    isFocused(index) {
        return index === this.focused;
    }
    focus(index) {
        if (this.isFocused(index)) {
            return;
        }
        this.focused = index;
        this.onFocus.emit(index);
    }
    select(index) {
        if (this.isSelected(index)) {
            return;
        }
        this.selectedIndices = [index];
        this.focused = index;
        this.onSelect.emit({
            indices: [index],
            newSelection: isPresent(index)
        });
    }
    add(index) {
        if (this.isSelected(index)) {
            return;
        }
        this.selectedIndices.push(index);
        this.focused = index;
        this.onChange.emit({
            added: index,
            indices: this.selectedIndices.slice()
        });
    }
    unselect(index) {
        if (!this.isSelected(index)) {
            return;
        }
        const position = this.selectedIndices.indexOf(index);
        this.selectedIndices.splice(position, 1);
        this.focused = index;
        this.onChange.emit({
            indices: this.selectedIndices.slice(),
            removed: index
        });
    }
    change(index) {
        const newSelection = isPresent(index) && !this.isSelected(index);
        this.selectedIndices = [index];
        this.focused = index;
        this.onChange.emit({
            indices: [index],
            newSelection: newSelection
        });
    }
    resetSelection(index) {
        this.selectedIndices = index instanceof Array ? index : [index];
        this.focused = this.selectedIndices[this.selectedIndices.length - 1];
    }
    get selected() {
        return this.selectedIndices.slice();
    }
    get focused() {
        return this.focusedIndex;
    }
    set focused(index) {
        if (this.focusedIndex !== index) {
            this.focusedIndex = index;
            this.onFocus.emit(index);
        }
    }
}
SelectionService.ɵfac = function SelectionService_Factory(t) { return new (t || SelectionService)(); };
SelectionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SelectionService, factory: SelectionService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectionService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @hidden
 */
var NavigationAction;
(function (NavigationAction) {
    NavigationAction[NavigationAction["Undefined"] = 0] = "Undefined";
    NavigationAction[NavigationAction["Open"] = 1] = "Open";
    NavigationAction[NavigationAction["Close"] = 2] = "Close";
    NavigationAction[NavigationAction["Enter"] = 3] = "Enter";
    NavigationAction[NavigationAction["Tab"] = 4] = "Tab";
    NavigationAction[NavigationAction["Esc"] = 5] = "Esc";
    NavigationAction[NavigationAction["Delete"] = 6] = "Delete";
    NavigationAction[NavigationAction["Backspace"] = 7] = "Backspace";
    NavigationAction[NavigationAction["Home"] = 8] = "Home";
    NavigationAction[NavigationAction["End"] = 9] = "End";
    NavigationAction[NavigationAction["Up"] = 10] = "Up";
    NavigationAction[NavigationAction["Down"] = 11] = "Down";
    NavigationAction[NavigationAction["Left"] = 12] = "Left";
    NavigationAction[NavigationAction["Right"] = 13] = "Right";
})(NavigationAction || (NavigationAction = {}));

/**
 * @hidden
 */
class DataService {
    constructor() {
        this.grouped = false;
        this.groupIndices = [];
    }
    set data(data) {
        this._data = data;
        this.grouped = this.isGrouped(data);
        if (this.grouped) {
            this.groupIndices = this.getGroupIndices(data);
            this._flatData = this.flatten(data);
        }
    }
    get data() {
        if (this.grouped) {
            return this._flatData;
        }
        return this._data;
    }
    /**
     * @hidden
     * Used to get the actual items count, i.e. excluding the header items in case of grouping.
     */
    get itemsCount() {
        if (!isPresent(this.data) || this.data.length === 0) {
            return 0;
        }
        const items = this.grouped ? this._flatData.filter(item => !item.header) : this.data;
        return items.length;
    }
    /**
     * @hidden
     * Used to determine if the component received grouped data.
     */
    isGrouped(data) {
        // GroupResult { aggregates: AggregateResult, field: string, items: object[], value: any }
        // https://www.telerik.com/kendo-angular-ui/components/dataquery/api/GroupResult/
        return (isPresent(data) && data.length !== 0) && isPresent(data[0]) && hasProps(data[0], ['aggregates', 'field', 'items', 'value']);
    }
    /**
     * @hidden
     * Used to calculate the last item index of each group.
     */
    getGroupIndices(data) {
        let groupIndices = [];
        for (let i = 0; i <= data.length - 1; i++) {
            groupIndices[i] = (groupIndices[i - 1] || 0) + data[i].items.length;
        }
        return groupIndices;
    }
    /**
     * @hidden
     * Used to get a flat array containing all items matching certain criteria.
     */
    filter(predicate) {
        let result = [];
        if (this.isGrouped(this.data)) {
            for (let i = 0; i <= this.groupIndices.length - 1; i++) {
                const matches = this.data[i].items.filter(predicate);
                if (matches) {
                    result = result.concat(matches);
                }
            }
        }
        else {
            result = this.data.filter(predicate);
        }
        return result;
    }
    /**
     * @hidden
     * Used to get the index of a given data item.
     */
    indexOf(item, startFrom = 0) {
        let predicate = (element) => {
            return element === item;
        };
        if (this.grouped) {
            predicate = (element) => {
                return element.value === item;
            };
        }
        return this.findIndex(predicate, startFrom);
    }
    /**
     * @hidden
     * Used to get the index of a data item based on an expression.
     */
    findIndex(predicate, startFrom = 0) {
        let index = -1;
        if (this.grouped) {
            const data = this._flatData.filter(item => !item.header && item.offsetIndex >= startFrom);
            index = data.findIndex(predicate);
            index = data[index] ? data[index].offsetIndex : -1;
        }
        else {
            const data = this.data.slice(startFrom);
            const itemIndex = data.findIndex(predicate);
            index = itemIndex !== -1 ? itemIndex + startFrom : -1;
        }
        return index;
    }
    /**
     * @hidden
     * Used to get the closest group header prior to an item index.
     */
    closestGroup(index) {
        for (let i = index; i >= 0; i--) {
            if (this._flatData[i].header) {
                return this._flatData[i];
            }
        }
    }
    /**
     * @hidden
     * Used to get the first item matching the criteria.
     */
    find(predicate) {
        const index = this.findIndex(predicate);
        return this.itemAt(index);
    }
    /**
     * @hidden
     * Used to get the true index in a flattened data array.
     */
    flatIndex(index) {
        if (this.itemsCount === 0) {
            return -1;
        }
        if (this.grouped) {
            const match = this._flatData.find((item) => !item.header && item.offsetIndex === index);
            if (match) {
                return match.index;
            }
        }
        else {
            return index;
        }
        return -1;
    }
    /**
     * @hidden
     * Used to get the item at the provided index.
     */
    itemAt(index) {
        let dataItem;
        if (this.itemsCount === 0) {
            return dataItem;
        }
        if (this.grouped) {
            const match = this._flatData.find((item) => !item.header && item.offsetIndex === index);
            if (match) {
                dataItem = match.value;
            }
        }
        else {
            dataItem = this.data[index];
        }
        return dataItem;
    }
    /**
     * @hidden
     * Used to get the group at the provided index.
     */
    groupAt(index) {
        if (this.itemsCount === 0 || !this.isGrouped) {
            return;
        }
        return this._flatData.find((item) => item.header && item.index === index);
    }
    /**
     * @hidden
     * Used to get the field by which the data is grouped.
     */
    groupField() {
        if (this.itemsCount === 0 || !this.isGrouped) {
            return;
        }
        return this._data[0].field;
    }
    /**
     * @hidden
     * Used to get the group to which a dataItem belongs.
     */
    itemGroup(item) {
        if (!item || this.itemsCount === 0 || !this.isGrouped) {
            return;
        }
        const fieldName = this.groupField();
        if (fieldName) {
            return item[fieldName];
        }
    }
    flatten(data, group = undefined, offset = 0, groupIndex = 0) {
        let flat = [];
        if (isPresent(group)) {
            flat.push({
                header: true,
                index: groupIndex + offset,
                offsetIndex: groupIndex,
                value: group
            });
        }
        for (let i = 0; i < data.length; i++) {
            let result = [];
            if (data[i].items) {
                result = this.flatten(data[i].items, data[i].value, offset, i);
                offset = offset + data[i].items.length;
            }
            else {
                result.push({
                    header: false,
                    index: groupIndex + offset + i + 1,
                    offsetIndex: offset + i,
                    value: data[i]
                });
            }
            flat = flat.concat(result);
        }
        return flat;
    }
}
DataService.ɵfac = function DataService_Factory(t) { return new (t || DataService)(); };
DataService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DataService, factory: DataService.ɵfac });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataService, [{
        type: Injectable
    }], function () { return []; }, null); })();

/**
 * @hidden
 */
class DisabledItemsService {
    constructor(dataService) {
        this.dataService = dataService;
        this.itemDisabled = null;
    }
    isIndexDisabled(index) {
        if (this.itemDisabled) {
            const item = this.dataService.itemAt(index);
            if (isPresent(item)) {
                return this.itemDisabled({ dataItem: item, index });
            }
            else if (isPresent(this.defaultItem)) {
                return this.itemDisabled({ dataItem: this.defaultItem, index: -1 });
            }
        }
    }
    isItemDisabled(item) {
        if (this.itemDisabled) {
            const index = this.dataService.indexOf(item);
            if (index !== -1) {
                return this.itemDisabled({ dataItem: item, index });
            }
            else if (isPresent(this.defaultItem)) {
                return this.itemDisabled({ dataItem: this.defaultItem, index: -1 });
            }
        }
    }
}
DisabledItemsService.ɵfac = function DisabledItemsService_Factory(t) { return new (t || DisabledItemsService)(ɵngcc0.ɵɵinject(DataService)); };
DisabledItemsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DisabledItemsService, factory: DisabledItemsService.ɵfac });
/** @nocollapse */
DisabledItemsService.ctorParameters = () => [
    { type: DataService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DisabledItemsService, [{
        type: Injectable
    }], function () { return [{ type: DataService }]; }, null); })();

const MIN_INDEX = 0;
/**
 * @hidden
 */
class NavigationEvent {
    /**
     * The index of the item to which the user navigated.
     */
    constructor(index, originalEvent) {
        this.index = index;
        this.originalEvent = originalEvent;
    }
}
/**
 * @hidden
 */
class NavigationService {
    constructor(disabledItemsService, selectionService) {
        this.disabledItemsService = disabledItemsService;
        this.selectionService = selectionService;
        this.open = new EventEmitter();
        this.close = new EventEmitter();
        this.enter = new EventEmitter();
        this.tab = new EventEmitter();
        this.esc = new EventEmitter();
        this.up = new EventEmitter();
        this.right = new EventEmitter();
        this.down = new EventEmitter();
        this.left = new EventEmitter();
        this.delete = new EventEmitter();
        this.backspace = new EventEmitter();
        this.home = new EventEmitter();
        this.end = new EventEmitter();
    }
    process(args) {
        const keyCode = args.originalEvent.keyCode;
        const altKey = args.originalEvent.altKey;
        let index;
        let action = NavigationAction.Undefined;
        if (altKey && keyCode === Keys.ArrowDown) {
            action = NavigationAction.Open;
        }
        else if (altKey && keyCode === Keys.ArrowUp) {
            action = NavigationAction.Close;
        }
        else if (keyCode === Keys.Enter) {
            action = NavigationAction.Enter;
        }
        else if (keyCode === Keys.Escape) {
            action = NavigationAction.Esc;
        }
        else if (keyCode === Keys.Tab) {
            action = NavigationAction.Tab;
        }
        else if (keyCode === Keys.ArrowUp) {
            index = this.next({ current: args.current, start: args.min, end: args.max, step: -1 });
            action = NavigationAction.Up;
        }
        else if (keyCode === Keys.ArrowLeft) {
            index = this.next({ current: args.current, start: args.min, end: args.max, step: -1 });
            action = NavigationAction.Left;
        }
        else if (keyCode === Keys.ArrowDown) {
            index = this.next({ current: args.current, start: args.min, end: args.max, step: 1 });
            action = NavigationAction.Down;
        }
        else if (keyCode === Keys.ArrowRight) {
            index = this.next({ current: args.current, start: args.min, end: args.max, step: 1 });
            action = NavigationAction.Right;
        }
        else if (keyCode === Keys.Home) {
            index = this.isDisabled(MIN_INDEX) ? args.current : MIN_INDEX;
            action = NavigationAction.Home;
        }
        else if (keyCode === Keys.End) {
            index = this.isDisabled(args.max) ? args.current : args.max;
            action = NavigationAction.End;
        }
        else if (keyCode === Keys.Delete) {
            action = NavigationAction.Delete;
        }
        else if (keyCode === Keys.Backspace) {
            action = NavigationAction.Backspace;
        }
        const eventData = new NavigationEvent(index, args.originalEvent);
        if (action !== NavigationAction.Undefined) {
            this[NavigationAction[action].toLowerCase()].emit(eventData);
        }
        return action;
    }
    next(args) {
        const { current, start, end, step } = args;
        const nextIndex = !isPresent(current) ? start : this.clampIndex(current + step, start, end);
        const firstFocusableIndex = this.firstFocusableIndex(nextIndex, start, end, step);
        if (isPresent(firstFocusableIndex)) {
            return firstFocusableIndex;
        }
        if (this.selectionService.isSelected(current) && current >= start) {
            return current;
        }
        const inversedStep = -1 * step;
        return this.firstFocusableIndex(nextIndex, start, end, inversedStep);
    }
    clampIndex(index, min, max) {
        if (!isPresent(index) || index < min) {
            return min;
        }
        if (index > max) {
            return max;
        }
        return index;
    }
    firstFocusableIndex(startIndex, min, max, step) {
        while (min <= startIndex && startIndex <= max) {
            if (!this.isDisabled(startIndex)) {
                return startIndex;
            }
            startIndex += step;
        }
        return undefined;
    }
    isDisabled(index) {
        if (this.disabledItemsService) {
            return this.disabledItemsService.isIndexDisabled(index);
        }
    }
}
NavigationService.ɵfac = function NavigationService_Factory(t) { return new (t || NavigationService)(ɵngcc0.ɵɵinject(DisabledItemsService), ɵngcc0.ɵɵinject(SelectionService)); };
NavigationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NavigationService, factory: NavigationService.ɵfac });
/** @nocollapse */
NavigationService.ctorParameters = () => [
    { type: DisabledItemsService },
    { type: SelectionService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NavigationService, [{
        type: Injectable
    }], function () { return [{ type: DisabledItemsService }, { type: SelectionService }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders content when no data is available. To define the no-data template, nest a `<ng-template>` tag
 * with the `kendo<ComponentName>NoDataTemplate` directive inside the component tag.
 *
 * - [Using `NoDataTemplate` with the AutoComplete]({% slug templates_autocomplete %}#toc-no-data-template)
 * - [Using `NoDataTemplate` with the ComboBox]({% slug templates_combobox %}#toc-no-data-template)
 * - [Using `NoDataTemplate` with the DropDownList]({% slug templates_ddl %}#toc-no-data-template)
 * - [Using `NoDataTemplate` with the MultiSelect]({% slug templates_multiselect %}#toc-no-data-template)
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="listItems">
 *    <ng-template kendoComboBoxNoDataTemplate>
 *      <h4>No data!</h4>
 *    </ng-template>
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = [];
 * }
 * ```
 */
class NoDataTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
NoDataTemplateDirective.ɵfac = function NoDataTemplateDirective_Factory(t) { return new (t || NoDataTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
NoDataTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NoDataTemplateDirective, selectors: [["", "kendoDropDownListNoDataTemplate", ""], ["", "kendoComboBoxNoDataTemplate", ""], ["", "kendoAutoCompleteNoDataTemplate", ""], ["", "kendoMultiSelectNoDataTemplate", ""]] });
/** @nocollapse */
NoDataTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NoDataTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListNoDataTemplate],[kendoComboBoxNoDataTemplate],[kendoAutoCompleteNoDataTemplate],[kendoMultiSelectNoDataTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/**
 * @hidden
 */
class PreventableEvent {
    constructor() {
        this.prevented = false;
    }
    /**
     * Prevents the default action for a specified event.
     * In this way, the source component suppresses the built-in behavior that follows the event.
     */
    preventDefault() {
        this.prevented = true;
    }
    /**
     * If the event is prevented by any of its subscribers, returns `true`.
     *
     * @returns `true` if the default action was prevented. Otherwise, returns `false`.
     */
    isDefaultPrevented() {
        return this.prevented;
    }
}

/**
 * Defines the mandatory properties of the `kendoDropDownFilter` directive
 * so that `kendoDropDownFilter` can be used with any of the DropDowns components
 * which implement the `FilterableDropDownComponentBase` class.
 *
 * @hidden
 */
class FilterableDropDownComponentBase {
}

/**
 * @hidden
 */
class ListItemDirective {
    constructor(element) {
        this.element = element;
    }
}
ListItemDirective.ɵfac = function ListItemDirective_Factory(t) { return new (t || ListItemDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ListItemDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ListItemDirective, selectors: [["li", "role", "option"], ["li", "role", "group"]] });
/** @nocollapse */
ListItemDirective.ctorParameters = () => [
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ListItemDirective, [{
        type: Directive,
        args: [{
                selector: '"li[role=option], li[role=group]"' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();

/**
 * @hidden
 */
class ListComponent {
    /* tslint:disable:member-ordering */
    constructor(dataService, wrapper, selectionService, disabledItemsService, cdr, zone, renderer) {
        this.dataService = dataService;
        this.wrapper = wrapper;
        this.selectionService = selectionService;
        this.disabledItemsService = disabledItemsService;
        this.cdr = cdr;
        this.zone = zone;
        this.renderer = renderer;
        this.selected = [];
        this.focused = -1;
        this.show = true;
        this.multipleSelection = false;
        this.onClick = new EventEmitter();
        this.pageChange = new EventEmitter();
        this.startFrom = 0;
        this.lastLoaded = 0;
        this.lastScrollTop = 0;
        this.scrollToFocused = false;
        this.selectSubscription = merge(this.selectionService.onSelect.pipe(map((args) => args.indices[0])), this.selectionService.onFocus)
            .pipe(
        // handle only the very last onSelect/onFocus emission
        switchMap(event => this.zone.onStable.pipe(take(1), map(() => event))))
            .subscribe(this.scrollToItem.bind(this));
    }
    set data(data) {
        this._data = data[0] && data[0].header ? data.slice(0) : data;
    }
    get data() {
        return this._data;
    }
    set items(items) {
        this._items = items;
    }
    get items() {
        return this._items;
    }
    get pageSize() {
        if (this.virtual.pageSize) {
            return this.virtual.pageSize;
        }
        let size = Math.round(this.height / this.virtual.itemHeight);
        return size;
    }
    get scrollHeight() {
        return (this.dataService.grouped ? this.virtual.total - 1 : this.virtual.total) * this.virtual.itemHeight;
    }
    ngOnChanges(changes) {
        if (isChanged('data', changes, false)) {
            if (this.lastLoaded <= 0) {
                this.lastLoaded = this.data.length - 1;
                this.scrollToFocused = !changes.data.isFirstChange();
            }
        }
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.scrollSubscription = fromEvent(this.content.nativeElement, "scroll").pipe(auditTime(100), tap(this.prefetchData.bind(this)), tap(this.findCurrentGroup.bind(this))).subscribe(() => {
                this.lastScrollTop = this.content.nativeElement.scrollTop;
            });
        });
    }
    ngAfterViewChecked() {
        if (this.virtual) {
            this.positionItems();
        }
        if (this.items && this.scrollToFocused) {
            this.scrollToFocused = false;
            const scrollTarget = this.items.length && this.selectionService.focused === -1 ? 0 : this.selectionService.focused;
            this.scrollToItem(scrollTarget);
        }
        if (this.dataService.grouped) {
            this.findCurrentGroup();
        }
    }
    ngOnDestroy() {
        this.selectSubscription.unsubscribe();
        if (this.scrollSubscription) {
            this.scrollSubscription.unsubscribe();
        }
    }
    firstVisibleItem() {
        const content = this.content.nativeElement;
        const rect = content.getBoundingClientRect();
        // IE9 hack
        const disabled = Array.prototype.slice.call(content.querySelectorAll(".k-state-disabled"));
        // This is a workaround for finding elements with pointer-events: none;
        disabled.forEach((el) => this.renderer.setStyle(el, "pointer-events", "auto"));
        const item = document.elementFromPoint(rect.left + 1, rect.top + 1);
        disabled.forEach((el) => this.renderer.setStyle(el, "pointer-events", "none"));
        return item;
    }
    findCurrentGroup() {
        if (!this.dataService.grouped) {
            this.currentGroup = undefined;
            return;
        }
        const item = this.firstVisibleItem();
        if (item) {
            let index;
            if (item.getAttribute("role") === "group") {
                index = parseInt(item.getAttribute("group-index"), 10);
                this.currentGroup = this.dataService.groupAt(index).value;
            }
            else {
                index = parseInt(item.getAttribute("index"), 10);
                this.currentGroup = this.dataService.itemGroup(this.dataService.itemAt(index));
            }
        }
        else {
            this.currentGroup = undefined;
        }
        this.cdr.detectChanges();
    }
    prefetchData() {
        if (!this.virtual) {
            return;
        }
        const visibleItems = Math.trunc(this.content.nativeElement.clientHeight / this.virtual.itemHeight);
        const offsetY = this.content.nativeElement.scrollTop;
        const start = Math.trunc(offsetY / this.virtual.itemHeight);
        const down = offsetY > this.lastScrollTop;
        const nextPage = (start + visibleItems >= this.lastLoaded) && this.lastLoaded < this.virtual.total - 1;
        const leftOver = this.pageSize - (this.lastLoaded - this.startFrom);
        const prevPage = this.lastLoaded - this.pageSize + visibleItems >= start - leftOver;
        if (down && nextPage) {
            this.changePage(start);
        }
        if (!down && prevPage) {
            this.changePage(start - this.pageSize + visibleItems + 1);
        }
    }
    changePage(start) {
        this.zone.run(() => {
            let end = this.pageSize + start;
            if (end > this.virtual.total) {
                start--;
                end = this.virtual.total;
            }
            if (start < 0) {
                start = 0;
            }
            this.startFrom = start;
            this.lastLoaded = end;
            this.pageChange.emit({ skip: start, take: this.pageSize });
        });
    }
    index(groupIndex, itemIndex) {
        return groupIndex > 0 ? (this.dataService.groupIndices[groupIndex - 1] + itemIndex) : itemIndex;
    }
    getText(dataItem) {
        return getter(dataItem, this.textField);
    }
    getValue(dataItem) {
        return getter(dataItem, this.valueField);
    }
    isDisabled(index) {
        if (isPresent(this.virtual)) {
            index += this.virtual.skip;
        }
        return this.disabledItemsService.isIndexDisabled(index);
    }
    scrollToItem(index) {
        let flatIndex = index;
        if (this.dataService.grouped) {
            // takes into account the group header items
            flatIndex = this.dataService.flatIndex(index);
            /* The first group header item is not rendered in the list (see template), so subtract 1 when calulating the flat index.
               With virtualization enabled, the first group header could be in a previous page, in which case don't subtract anything. */
            const groupHeaderOffset = this.firstGroupHeaderInTargetedPage(flatIndex) ? -1 : 0;
            flatIndex += groupHeaderOffset;
        }
        if (this.virtual && flatIndex > -1) {
            this.scrollToIndex(flatIndex);
            return;
        }
        const items = this.items.toArray();
        if (isPresent(items[flatIndex]) && flatIndex !== -1) {
            this.scroll(items[flatIndex].element);
        }
    }
    scrollToIndex(index) {
        let content = this.content.nativeElement;
        let contentScrollTop = content.scrollTop;
        const itemOffsetTop = index * this.virtual.itemHeight;
        const itemOffsetHeight = this.virtual.itemHeight;
        const contentOffsetHeight = content.clientHeight;
        const bottomDistance = itemOffsetTop + itemOffsetHeight;
        if (contentScrollTop > itemOffsetTop) {
            contentScrollTop = itemOffsetTop;
        }
        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
            contentScrollTop = (bottomDistance - contentOffsetHeight);
        }
        content.scrollTop = contentScrollTop;
    }
    scroll(item) {
        if (!item) {
            return;
        }
        const nativeElement = item.nativeElement;
        let content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;
        if (contentScrollTop > itemOffsetTop) {
            contentScrollTop = itemOffsetTop;
        }
        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
            contentScrollTop = (bottomDistance - contentOffsetHeight);
        }
        content.scrollTop = contentScrollTop;
    }
    positionItems() {
        this.items.forEach((item, index) => {
            const offsetY = (index + this.startFrom) * this.virtual.itemHeight;
            this.renderer.setStyle(item.element.nativeElement, "transform", `translateY(${offsetY}px`);
        });
    }
    /**
     * Indicates whether the first group header from the data set is in the targeted virtual page.
     */
    firstGroupHeaderInTargetedPage(itemIndex) {
        if (!isPresent(this.virtual)) {
            return true;
        }
        return this.virtual.skip === 0 && (this.virtual.pageSize > itemIndex);
    }
}
ListComponent.ɵfac = function ListComponent_Factory(t) { return new (t || ListComponent)(ɵngcc0.ɵɵdirectiveInject(DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(DisabledItemsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
ListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ListComponent, selectors: [["kendo-list"]], viewQuery: function ListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, true);
        ɵngcc0.ɵɵviewQuery(_c3, true);
        ɵngcc0.ɵɵviewQuery(ListItemDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.content = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.list = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, inputs: { selected: "selected", focused: "focused", show: "show", multipleSelection: "multipleSelection", data: "data", textField: "textField", valueField: "valueField", height: "height", template: "template", groupTemplate: "groupTemplate", fixedGroupTemplate: "fixedGroupTemplate", id: "id", optionPrefix: "optionPrefix", virtual: "virtual" }, outputs: { onClick: "onClick", pageChange: "pageChange" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 8, vars: 15, consts: [["class", "k-outer-group-header k-first", 3, "ngClass", "ngStyle", 4, "ngIf"], ["unselectable", "on", 3, "ngClass"], ["content", ""], ["role", "listbox", 1, "k-list", "k-reset", 3, "ngClass"], ["list", ""], [4, "ngIf"], ["class", "k-height-container", "role", "presentation", 4, "ngIf"], [1, "k-outer-group-header", "k-first", 3, "ngClass", "ngStyle"], [3, "ngIf"], [3, "templateContext"], ["ngFor", "", 3, "ngForOf"], ["role", "option", "kendoDropDownsSelectable", "", 1, "k-item", 3, "height", "index", "multipleSelection", "ngClass"], ["role", "group", "class", "k-outer-group-header", 3, "ngClass", "ngStyle", 4, "ngIf"], ["role", "option", "kendoDropDownsSelectable", "", "class", "k-item", 3, "height", "index", "multipleSelection", "ngClass", 4, "ngIf"], ["role", "group", 1, "k-outer-group-header", 3, "ngClass", "ngStyle"], ["role", "presentation", 1, "k-height-container"]], template: function ListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ListComponent_div_0_Template, 3, 10, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "div", 1, 2);
        ɵngcc0.ɵɵelementStart(3, "ul", 3, 4);
        ɵngcc0.ɵɵtemplate(5, ListComponent_5_Template, 1, 1, undefined, 5);
        ɵngcc0.ɵɵtemplate(6, ListComponent_6_Template, 1, 1, undefined, 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, ListComponent_div_7_Template, 2, 2, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.dataService.grouped);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵstyleProp("max-height", ctx.height, "px");
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(10, _c8, ctx.virtual, !ctx.virtual));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(13, _c9, ctx.virtual));
        ɵngcc0.ɵɵattribute("id", ctx.id)("aria-hidden", !ctx.show);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.dataService.grouped && ctx.show);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dataService.grouped);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.virtual);
    } }, directives: function () { return [ɵngcc3.NgIf, ɵngcc3.NgClass, ɵngcc3.NgStyle, TemplateContextDirective, ɵngcc3.NgForOf, ListItemDirective,
        SelectableDirective]; }, encapsulation: 2 });
/** @nocollapse */
ListComponent.ctorParameters = () => [
    { type: DataService },
    { type: ElementRef },
    { type: SelectionService },
    { type: DisabledItemsService },
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 }
];
ListComponent.propDecorators = {
    selected: [{ type: Input }],
    focused: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    height: [{ type: Input }],
    template: [{ type: Input }],
    groupTemplate: [{ type: Input }],
    fixedGroupTemplate: [{ type: Input }],
    show: [{ type: Input }],
    id: [{ type: Input }],
    optionPrefix: [{ type: Input }],
    multipleSelection: [{ type: Input }],
    virtual: [{ type: Input }],
    data: [{ type: Input }],
    onClick: [{ type: Output }],
    pageChange: [{ type: Output }],
    items: [{ type: ViewChildren, args: [ListItemDirective,] }],
    content: [{ type: ViewChild, args: ['content',] }],
    list: [{ type: ViewChild, args: ['list',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ListComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-list',
                template: `
    <div *ngIf="dataService.grouped"
        class='k-outer-group-header k-first'
        [ngClass]="{'k-virtual-item': virtual}"
        [ngStyle]="{
            'height.px': virtual?.itemHeight,
            'minHeight.px' : virtual?.itemHeight,
            'boxSizing' : virtual ? 'border-box' : 'inherit'}"
        >
        <ng-template *ngIf="fixedGroupTemplate"
            [templateContext]="{
                templateRef: fixedGroupTemplate.templateRef,
                $implicit: currentGroup
            }">
        </ng-template>
        <ng-template [ngIf]="!fixedGroupTemplate"><strong>{{ currentGroup }}</strong> </ng-template>
    </div>
    <div #content
         [ngClass]="{ 'k-virtual-content': virtual, 'k-list-scroller': !virtual }"
         [style.maxHeight.px]="height"
         unselectable="on">
    <ul #list
        role="listbox"
        class="k-list k-reset"
        [ngClass]="{ 'k-virtual-list': virtual }"
        [attr.id]="id"
        [attr.aria-hidden]="!show">
         <ng-template *ngIf="!dataService.grouped && show" ngFor let-dataItem let-itemIndex="index" [ngForOf]="data">
            <li
                role="option"
                kendoDropDownsSelectable
                [height]="virtual?.itemHeight"
                [index]="itemIndex + startFrom"
                [multipleSelection]="multipleSelection"
                [attr.id]="optionPrefix + '-' + getValue(dataItem)"
                [attr.tabIndex]="-1"
                class="k-item"
                [ngClass]="{ 'k-virtual-item': virtual, 'k-state-disabled': isDisabled(itemIndex) }">
                <ng-template *ngIf="template"
                    [templateContext]="{
                        templateRef: template.templateRef,
                        $implicit: dataItem
                    }">
                </ng-template>
                <ng-template [ngIf]="!template">{{ getText(dataItem) }}</ng-template>
            </li>
         </ng-template>
         <ng-template *ngIf="dataService.grouped" ngFor let-dataItem let-itemIndex="index" [ngForOf]="data">
            <li
                *ngIf="dataItem.header && dataItem.index > 0"
                role="group"
                class='k-outer-group-header'
                [ngClass]="{ 'k-virtual-item': virtual }"
                [ngStyle]="{
                    'height.px': virtual?.itemHeight,
                    'minHeight.px' : virtual?.itemHeight,
                    'boxSizing' : virtual ? 'border-box' : 'inherit'}"
                [attr.group-index]="dataItem.index"
                [attr.id]="optionPrefix + '-' + getValue(dataItem.value)"
                [attr.tabIndex]="-1">
                    <ng-template *ngIf="groupTemplate"
                          [templateContext]="{
                            templateRef: groupTemplate.templateRef,
                            $implicit: dataItem.value
                    }">
                    </ng-template>
                    <ng-template [ngIf]="!groupTemplate"><strong> {{ dataItem.value }}</strong> </ng-template>
              </li>
            <li
                *ngIf="!dataItem.header"
                role="option"
                kendoDropDownsSelectable
                [height]="virtual?.itemHeight"
                [index]="dataItem.offsetIndex"
                [multipleSelection]="multipleSelection"
                [attr.absolute-index]="dataItem.index"
                [attr.id]="optionPrefix + '-' + getValue(dataItem.value)"
                [attr.tabIndex]="-1"
                class="k-item"
                [ngClass]="{ 'k-virtual-item': virtual, 'k-state-disabled': isDisabled(dataItem.offsetIndex) }">
                <ng-template *ngIf="template"
                    [templateContext]="{
                        templateRef: template.templateRef,
                        $implicit: dataItem.value
                    }">
                </ng-template>
                <ng-template [ngIf]="!template">{{ getText(dataItem.value) }}</ng-template>
            </li>
        </ng-template>
    </ul>
    <div *ngIf="virtual" class="k-height-container" role="presentation">
        <div [style.height.px]="scrollHeight"></div>
    </div>
    </div>
  `
            }]
    }], function () { return [{ type: DataService }, { type: ɵngcc0.ElementRef }, { type: SelectionService }, { type: DisabledItemsService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }]; }, { selected: [{
            type: Input
        }], focused: [{
            type: Input
        }], show: [{
            type: Input
        }], multipleSelection: [{
            type: Input
        }], onClick: [{
            type: Output
        }], pageChange: [{
            type: Output
        }], data: [{
            type: Input
        }], items: [{
            type: ViewChildren,
            args: [ListItemDirective]
        }], textField: [{
            type: Input
        }], valueField: [{
            type: Input
        }], height: [{
            type: Input
        }], template: [{
            type: Input
        }], groupTemplate: [{
            type: Input
        }], fixedGroupTemplate: [{
            type: Input
        }], id: [{
            type: Input
        }], optionPrefix: [{
            type: Input
        }], virtual: [{
            type: Input
        }], content: [{
            type: ViewChild,
            args: ['content']
        }], list: [{
            type: ViewChild,
            args: ['list']
        }] }); })();

/**
 * @hidden
 */
const DEFAULTS = {
    pageSize: 50,
    itemHeight: 28
};
/**
 * @hidden
 */
const normalizeVirtualizationSettings = (settings) => {
    if (settings === true) {
        return DEFAULTS;
    }
    if (!settings) {
        return null;
    }
    return Object.assign({ pageSize: DEFAULTS.pageSize }, settings);
};

/* tslint:disable:member-ordering */
const NO_VALUE = "";
/**
 * @hidden
 */
const AUTOCOMPLETE_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => AutoCompleteComponent)
};
/**
 * Represents the [Kendo UI AutoComplete component for Angular]({% slug overview_autocomplete %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-autocomplete
 *      [data]="listItems"
 *      [placeholder]="placeholder"
 *  >
 * `
 * })
 * class AppComponent {
 *   public placeholder: string = 'Type "it" for suggestions';
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class AutoCompleteComponent {
    constructor(localization, dataService, popupService, selectionService, navigationService, disabledItemsService, _zone, cdr, renderer, wrapper) {
        this.localization = localization;
        this.dataService = dataService;
        this.popupService = popupService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this.disabledItemsService = disabledItemsService;
        this._zone = _zone;
        this.cdr = cdr;
        this.renderer = renderer;
        /**
         * Defines whether the first match from the suggestions list will be automatically focused.
         * By default, `highlightFirst` is set to `true`.
         */
        this.highlightFirst = true;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * The hint which is displayed when the component is empty.
         */
        this.placeholder = "";
        /**
         * Sets the height of the suggestions list. By default, `listHeight` is 200px.
         *
         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.
         * > To set the height of the popup container, use `popupSettings.height`.
         */
        this.listHeight = 200;
        /**
         * @hidden
         *
         * If set to `true`, renders a button on hovering over the component.
         * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.
         */
        this.clearButton = true;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         */
        this.readonly = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Enables the [filtering]({% slug filtering_autocomplete %}) functionality.
         * If set to `true`, the component emits the `filterChange` event.
         */
        this.filterable = false;
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button
         * ([see example]({% slug overview_autocomplete %}#toc-events)).
         * When the value of the component is programmatically changed to `ngModel` or `formControl`
         * through its API or form binding, the `valueChange` event is not triggered because it
         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user types in the input field.
         * You can filter the source based on the passed filtration value
         * ([see example]({% slug overview_autocomplete %}#toc-events)).
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the AutoComplete.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the AutoComplete gets blurred.
         */
        this.onBlur = new EventEmitter();
        this.widgetClasses = true;
        this.listBoxId = guid();
        this.optionPrefix = guid();
        this.onChangeCallback = noop;
        this.onTouchedCallback = noop;
        this.popupMouseDownHandler = (event) => event.preventDefault();
        this._popupSettings = { animate: true };
        this._open = false;
        this._value = "";
        this.valueChangeSubject = new Subject();
        this._isFocused = false;
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.wrapper = wrapper.nativeElement;
        this.data = [];
        this.subscribeEvents();
        this.selectionService.resetSelection([-1]);
    }
    get width() {
        let wrapperOffsetWidth = 0;
        if (isDocumentAvailable()) {
            wrapperOffsetWidth = this.wrapper.offsetWidth;
        }
        const width = this.popupSettings.width || wrapperOffsetWidth;
        const minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : `${wrapperOffsetWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        const popupHeight = this.popupSettings.height;
        return isPresent(popupHeight) ? `${popupHeight}px` : 'auto';
    }
    get listContainerClasses() {
        const containerClasses = ['k-list-container', 'k-reset'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    get suggestion() {
        if (!this.text || !this.suggestedText) {
            this.suggestedText = undefined;
            return;
        }
        const hasMatch = this.suggestedText.toLowerCase().startsWith(this.text.toLowerCase());
        const shouldSuggest = this.suggest && !this.backspacePressed;
        if (shouldSuggest && hasMatch) {
            return this.suggestedText;
        }
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * Toggles the visibility of the popup.
     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        Promise.resolve(null).then(() => {
            const shouldOpen = isPresent(open) ? open : !this._open;
            this._toggle(shouldOpen);
        });
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this._open;
    }
    /**
     * @hidden
     */
    togglePopup(open) {
        const isDisabled = this.disabled || this.readonly;
        const sameState = this.isOpen === open;
        if (isDisabled || sameState) {
            return;
        }
        const isDefaultPrevented = this.triggerPopupEvents(open);
        if (!isDefaultPrevented) {
            this._toggle(open);
        }
    }
    get activeDescendant() {
        if (!this.isOpen || !isPresent(this.selectionService.focused) || this.selectionService.focused === -1) {
            return null;
        }
        const dataItem = this.dataService.itemAt(this.selectionService.focused);
        return this.optionPrefix + "-" + getter(dataItem, this.valueField);
    }
    get noDataLabel() {
        if (this.data.length === 0) {
            return this.noDataText;
        }
    }
    get clearTitle() {
        return this.localization.get('clearTitle');
    }
    /**
     * Sets the data of the AutoComplete.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this.dataService.data = data || [];
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        if (this.filterable) {
            this.selectionService.focused = this.isOpen && this.data.length && this.highlightFirst ? this.firstFocusableIndex(0) : -1;
        }
        if (this.suggest && this.dataService.itemsCount > 0) {
            this.suggestedText = getter(this.dataService.itemAt(0), this.valueField);
        }
    }
    get data() {
        const virtual = this.virtual;
        if (virtual) {
            const start = virtual.skip || 0;
            const end = start + virtual.pageSize;
            // Use length instead of itemsCount because of the grouping.
            virtual.total = this.dataService.data.length;
            return this.dataService.data.slice(start, end);
        }
        return this.dataService.data;
    }
    /**
     * Sets the value of the AutoComplete.
     */
    set value(newValue) {
        this.verifySettings(newValue);
        this._value = newValue || NO_VALUE;
        this.text = this.value;
        this.cdr.markForCheck();
    }
    get value() {
        return this._value || NO_VALUE;
    }
    /**
     * Configures the popup of the AutoComplete.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.
     * - `height: Number`&mdash;Sets the height of the popup container.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Defines a Boolean function that is executed for each data item in the component
     * ([see examples]({% slug disableditems_autocomplete %})).
     * Determines whether the item will be disabled.
     */
    set itemDisabled(fn) {
        if (typeof fn !== 'function') {
            throw new Error(`itemDisabled must be a function, but received ${JSON.stringify(fn)}.`);
        }
        this.disabledItemsService.itemDisabled = fn;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Enables the [virtualization]({% slug virtualization_autocomplete %}) functionality.
     */
    set virtual(settings) {
        this._virtualSettings = normalizeVirtualizationSettings(settings);
    }
    get virtual() {
        return this._virtualSettings;
    }
    get isFocused() {
        return this._isFocused;
    }
    set isFocused(isFocused) {
        this.renderer[isFocused ? 'addClass' : 'removeClass'](this.wrapper, "k-state-focused");
        this._isFocused = isFocused;
    }
    get isDisabled() {
        return this.disabled;
    }
    get dir() {
        return this.direction;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.wrapper, "tabindex");
        this.localizationChangeSubscription = this.localization
            .changes
            .subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            this.setMessages();
        });
        this.setMessages();
    }
    ngOnDestroy() {
        this.destroyPopup();
        this.unsubscribeEvents();
        clearTimeout(this.messagesTimeout);
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        const virtual = this.virtual;
        const requestInitialData = virtual && changes.data && changes.data.isFirstChange();
        if (requestInitialData) {
            this.pageChange({ skip: 0, take: virtual.pageSize });
        }
    }
    /**
     * Resets the value of the AutoComplete.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    reset() {
        this.value = NO_VALUE;
    }
    /**
     * @hidden
     */
    clearValue(event) {
        event.stopImmediatePropagation();
        this.focus();
        this.change(NO_VALUE);
        if (this.filterable) {
            this.filterChange.emit('');
        }
        this.selectionService.resetSelection([]);
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Focuses the AutoComplete.
     */
    focus() {
        if (!this.disabled) {
            this.searchbar.focus();
        }
    }
    /**
     * Blurs the AutoComplete.
     */
    blur() {
        if (!this.disabled) {
            this.searchbar.blur();
        }
    }
    /**
     * @hidden
     */
    onResize() {
        if (this._open) {
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    }
    emitChange(value) {
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    }
    verifySettings(newValue) {
        if (!isDevMode()) {
            return;
        }
        if (isPresent(newValue) && typeof newValue !== "string") {
            throw new Error("Expected value of type string. See https://www.telerik.com/kendo-angular-ui/components/dropdowns/autocomplete/value-binding/");
        }
    }
    search(text, startFrom = 0) {
        let index;
        if (text.length && this.dataService.itemsCount) {
            index = this.dataService.findIndex(this.findIndexPredicate(text), startFrom);
        }
        else {
            index = -1;
        }
        if (this.disabledItemsService.isIndexDisabled(index)) {
            if (index + 1 < this.dataService.itemsCount) {
                this.search(text, index + 1);
            }
            else {
                this.selectionService.focus(-1);
            }
        }
        else {
            this.selectionService.focus(index);
            if (this.suggest) {
                this.suggestedText = getter(this.dataService.itemAt(index), this.valueField);
            }
        }
    }
    navigate(index) {
        if (!this.isOpen) {
            return;
        }
        this.selectionService.focus(index);
    }
    /**
     * @hidden
     */
    handleNavigate(event) {
        const focused = isNaN(this.selectionService.focused) ? this.firstFocusableIndex(0) : this.selectionService.focused;
        if (this.disabled || this.readonly || isNaN(focused)) {
            return;
        }
        const action = this.navigationService.process({
            current: focused,
            max: this.dataService.itemsCount - 1,
            min: 0,
            originalEvent: event
        });
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Backspace &&
            action !== NavigationAction.Delete &&
            action !== NavigationAction.Home &&
            action !== NavigationAction.End &&
            action !== NavigationAction.Left &&
            action !== NavigationAction.Right &&
            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {
            event.preventDefault();
        }
    }
    handleEnter(event) {
        const focused = this.selectionService.focused;
        let value;
        if (this.isOpen) {
            event.originalEvent.preventDefault();
        }
        if (focused >= 0) {
            value = getter(this.dataService.itemAt(focused), this.valueField);
        }
        else {
            const match = this.suggest && this.suggestedText && this.data.length &&
                getter(this.dataService.itemAt(0), this.valueField, true).toLowerCase() === this.searchbar.value.toLowerCase();
            if (this.isOpen && match) {
                value = this.suggestedText;
            }
            else {
                value = this.searchbar.value;
            }
        }
        this.change(value);
    }
    handleEscape() {
        this.togglePopup(false);
        this.selectionService.focused = -1;
        this.suggestedText = null;
    }
    /**
     * @hidden
     */
    searchBarChange(text) {
        const currentTextLength = isPresent(this.text) ? this.text.length : 0;
        this.backspacePressed = (text.length < currentTextLength) ? true : false;
        this.text = text;
        this.togglePopup(text.length > 0);
        if (!this.highlightFirst) {
            this.selectionService.focused = -1;
        }
        if (this.filterable) {
            this.filterChange.emit(text);
        }
        else if (this.highlightFirst) {
            this.search(text);
        }
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.isFocused = true;
        if (hasObservers(this.onFocus)) {
            this._zone.run(() => {
                this.onFocus.emit();
            });
        }
    }
    /**
     * @hidden
     */
    handleBlur() {
        const focused = this.filterable ? this.selectionService.focused : -1;
        this.searchbar.input.nativeElement.scrollLeft = 0; // Firefox doesn't auto-scroll to the left on blur like other browsers
        let dataItem;
        let text;
        if (focused !== -1) {
            dataItem = this.dataService.itemAt(focused);
            text = getter(dataItem, this.valueField, true) || "";
        }
        else {
            text = this.searchbar.value;
        }
        const exactMatch = text === this.searchbar.value;
        const insensitiveMatch = text.toLowerCase() === this.searchbar.value.toLowerCase();
        if (!exactMatch && insensitiveMatch) {
            this.selectionService.resetSelection([]);
        }
        this.isFocused = false;
        const valueHasChanged = this.value !== this.text;
        const runInZone = hasObservers(this.onBlur) || hasObservers(this.close) || isUntouched(this.wrapper) || valueHasChanged;
        if (runInZone) {
            this._zone.run(() => {
                if (valueHasChanged) {
                    this.change(this.searchbar.value);
                }
                this.onBlur.emit();
                this.onTouchedCallback();
                this.togglePopup(false);
            });
        }
        else {
            this.togglePopup(false);
        }
    }
    /**
     * @hidden
     */
    pageChange(event) {
        const virtual = this.virtual;
        virtual.skip = event.skip;
    }
    change(value) {
        this.togglePopup(false);
        this.valueChangeSubject.next(value);
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.valueChangeSubscription = this.valueChangeSubject
            .subscribe(value => {
            const hasChange = this.value !== value;
            this.value = value;
            this.text = value;
            // emit change after assigning `this.value` => allows the user to modify the component value on `valueChange`
            if (hasChange) {
                this.emitChange(value);
            }
        });
        this.changeSubscription = this.selectionService.onChange.subscribe(this.handleItemChange.bind(this));
        this.focusSubscription = this.selectionService.onFocus.subscribe(this.handleItemFocus.bind(this));
        this.navigationSubscription = merge(this.navigationService.up, this.navigationService.down).subscribe((event) => this.navigate(event.index));
        this.closeSubscription = this.navigationService.close.subscribe(() => this.togglePopup(false));
        this.enterSubscription = this.navigationService.enter.subscribe(this.handleEnter.bind(this));
        this.escSubscription = this.navigationService.esc.subscribe(this.handleEscape.bind(this));
    }
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.changeSubscription.unsubscribe();
        this.navigationSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
        this.enterSubscription.unsubscribe();
        this.escSubscription.unsubscribe();
        this.valueChangeSubscription.unsubscribe();
        this.focusSubscription.unsubscribe();
    }
    handleItemChange(event) {
        const index = event.indices.length ? event.indices[0] : undefined;
        this.selectionService.resetSelection([-1]);
        if (!isPresent(index)) {
            return;
        }
        let text = getter(this.dataService.itemAt(index), this.valueField);
        this.change(text);
    }
    handleItemFocus(_event) {
        const focused = this.selectionService.focused;
        const shouldSuggest = Boolean(this.suggest && this.data && this.data.length && focused >= 0);
        if (shouldSuggest) {
            this.suggestedText = getter(this.dataService.itemAt(focused), this.valueField);
        }
    }
    createPopup() {
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        const horizontalAlign = this.direction === "rtl" ? "right" : "left";
        const anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        const popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            content: this.popupTemplate,
            popupClass: this.listContainerClasses,
            positionMode: 'absolute',
            popupAlign: popupPosition,
            anchorAlign: anchorPosition
        });
        const popupWrapper = this.popupRef.popupElement;
        const { min, max } = this.width;
        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
        popupWrapper.style.minWidth = min;
        popupWrapper.style.width = max;
        popupWrapper.style.height = this.height;
        popupWrapper.setAttribute("dir", this.direction);
        this.popupRef.popupOpen.subscribe(() => {
            this.cdr.detectChanges();
            this.optionsList.scrollToItem(this.selectionService.focused);
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.togglePopup(false));
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    _toggle(open) {
        this._open = open;
        this.destroyPopup();
        if (this._open) {
            this.createPopup();
        }
    }
    triggerPopupEvents(open) {
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        return eventArgs.isDefaultPrevented();
    }
    firstFocusableIndex(index) {
        const maxIndex = this.data.length - 1;
        if (this.disabledItemsService.isIndexDisabled(index)) {
            return (index < maxIndex) ? this.firstFocusableIndex(index + 1) : undefined;
        }
        else {
            return index;
        }
    }
    findIndexPredicate(text) {
        if (this.dataService.grouped) {
            return (item) => {
                let itemText = getter(item.value, this.valueField);
                itemText = !isPresent(itemText) ? "" : itemText.toString().toLowerCase();
                return itemText.startsWith(text.toLowerCase());
            };
        }
        else {
            return (item) => {
                let itemText = getter(item, this.valueField);
                itemText = !isPresent(itemText) ? "" : itemText.toString().toLowerCase();
                return itemText.startsWith(text.toLowerCase());
            };
        }
    }
    setMessages() {
        this._zone.runOutsideAngular(() => {
            clearTimeout(this.messagesTimeout);
            this.messagesTimeout = setTimeout(() => {
                this.noDataText = this.localization.get('noDataText');
                this.cdr.detectChanges();
            });
        });
    }
}
AutoCompleteComponent.ɵfac = function AutoCompleteComponent_Factory(t) { return new (t || AutoCompleteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.PopupService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(DisabledItemsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AutoCompleteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AutoCompleteComponent, selectors: [["kendo-autocomplete"]], contentQueries: function AutoCompleteComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ItemTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NoDataTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GroupTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FixedGroupTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noDataTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fixedGroupTemplate = _t.first);
    } }, viewQuery: function AutoCompleteComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c10, true, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c11, true);
        ɵngcc0.ɵɵviewQuery(SearchBarComponent, true);
        ɵngcc0.ɵɵviewQuery(_c12, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchbar = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionsList = _t.first);
    } }, hostVars: 9, hostBindings: function AutoCompleteComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.widgetClasses)("k-autocomplete", ctx.widgetClasses)("k-header", ctx.widgetClasses)("k-state-disabled", ctx.isDisabled);
    } }, inputs: { highlightFirst: "highlightFirst", focusableId: "focusableId", placeholder: "placeholder", listHeight: "listHeight", clearButton: "clearButton", disabled: "disabled", readonly: "readonly", tabindex: "tabindex", filterable: "filterable", data: "data", value: "value", popupSettings: "popupSettings", itemDisabled: "itemDisabled", tabIndex: "tabIndex", virtual: "virtual", valueField: "valueField", loading: "loading", suggest: "suggest" }, outputs: { valueChange: "valueChange", filterChange: "filterChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendoAutoComplete"], features: [ɵngcc0.ɵɵProvidersFeature([
            AUTOCOMPLETE_VALUE_ACCESSOR,
            DataService,
            SelectionService,
            NavigationService,
            DisabledItemsService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.autocomplete'
            },
            {
                provide: FilterableDropDownComponentBase,
                useExisting: forwardRef(() => AutoCompleteComponent)
            },
            {
                provide: KendoInput,
                useExisting: forwardRef(() => AutoCompleteComponent)
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 11, vars: 15, consts: [["kendoAutoCompleteLocalizedMessages", "", 6, "noDataText", "clearTitle"], [3, "role", "id", "listId", "activeDescendant", "noDataLabel", "userInput", "suggestedText", "disabled", "readonly", "tabIndex", "popupOpen", "placeholder", "onNavigate", "valueChange", "onBlur", "onFocus"], ["searchbar", ""], ["class", "k-icon k-clear-value k-i-close", "role", "button", "tabindex", "-1", 3, "click", "mousedown", 4, "ngIf"], ["class", "k-icon k-i-loading", 4, "ngIf"], ["popupTemplate", ""], [3, "ngIf"], ["container", ""], ["role", "button", "tabindex", "-1", 1, "k-icon", "k-clear-value", "k-i-close", 3, "click", "mousedown"], [1, "k-icon", "k-i-loading"], [4, "ngIf"], [3, "id", "optionPrefix", "data", "textField", "valueField", "template", "groupTemplate", "fixedGroupTemplate", "height", "show", "virtual", "pageChange"], ["optionsList", ""], ["class", "k-nodata", 4, "ngIf"], [3, "templateContext"], [1, "k-nodata"], [3, "ngIf", "templateContext"], [3, "resize"]], template: function AutoCompleteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵi18nAttributes(1, _c17);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(2, "kendo-searchbar", 1, 2);
        ɵngcc0.ɵɵlistener("onNavigate", function AutoCompleteComponent_Template_kendo_searchbar_onNavigate_2_listener($event) { return ctx.handleNavigate($event); })("valueChange", function AutoCompleteComponent_Template_kendo_searchbar_valueChange_2_listener($event) { return ctx.searchBarChange($event); })("onBlur", function AutoCompleteComponent_Template_kendo_searchbar_onBlur_2_listener() { return ctx.handleBlur(); })("onFocus", function AutoCompleteComponent_Template_kendo_searchbar_onFocus_2_listener() { return ctx.handleFocus(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, AutoCompleteComponent_span_4_Template, 1, 1, "span", 3);
        ɵngcc0.ɵɵtemplate(5, AutoCompleteComponent_span_5_Template, 1, 0, "span", 4);
        ɵngcc0.ɵɵtemplate(6, AutoCompleteComponent_ng_template_6_Template, 5, 14, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(8, AutoCompleteComponent_ng_template_8_Template, 1, 0, "ng-template", 6);
        ɵngcc0.ɵɵelementContainer(9, null, 7);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("role", "combobox")("id", ctx.focusableId)("listId", ctx.listBoxId)("activeDescendant", ctx.activeDescendant)("noDataLabel", ctx.noDataLabel)("userInput", ctx.text)("suggestedText", ctx.suggestion)("disabled", ctx.disabled)("readonly", ctx.readonly)("tabIndex", ctx.tabIndex)("popupOpen", ctx.isOpen)("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading && !ctx.readonly && (ctx.clearButton && (ctx.text == null ? null : ctx.text.length)));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpen);
    } }, directives: function () { return [LocalizedMessagesDirective,
        SearchBarComponent, ɵngcc3.NgIf, ListComponent,
        TemplateContextDirective, ɵngcc2.ResizeSensorComponent]; }, encapsulation: 2 });
/** @nocollapse */
AutoCompleteComponent.ctorParameters = () => [
    { type: LocalizationService },
    { type: DataService },
    { type: PopupService },
    { type: SelectionService },
    { type: NavigationService },
    { type: DisabledItemsService },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
AutoCompleteComponent.propDecorators = {
    highlightFirst: [{ type: Input }],
    focusableId: [{ type: Input }],
    data: [{ type: Input }],
    value: [{ type: Input }],
    valueField: [{ type: Input }],
    placeholder: [{ type: Input }],
    popupSettings: [{ type: Input }],
    listHeight: [{ type: Input }],
    loading: [{ type: Input }],
    clearButton: [{ type: Input }],
    suggest: [{ type: Input }],
    disabled: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    readonly: [{ type: Input }],
    tabindex: [{ type: Input }],
    tabIndex: [{ type: Input, args: ["tabIndex",] }],
    filterable: [{ type: Input }],
    virtual: [{ type: Input }],
    valueChange: [{ type: Output }],
    filterChange: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    onFocus: [{ type: Output, args: ['focus',] }],
    onBlur: [{ type: Output, args: ['blur',] }],
    template: [{ type: ContentChild, args: [ItemTemplateDirective,] }],
    headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],
    footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],
    noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],
    groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],
    fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    searchbar: [{ type: ViewChild, args: [SearchBarComponent,] }],
    optionsList: [{ type: ViewChild, args: ['optionsList',] }],
    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-autocomplete',] }, { type: HostBinding, args: ['class.k-header',] }],
    isDisabled: [{ type: HostBinding, args: ['class.k-state-disabled',] }],
    dir: [{ type: HostBinding, args: ['attr.dir',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoAutoComplete',
                providers: [
                    AUTOCOMPLETE_VALUE_ACCESSOR,
                    DataService,
                    SelectionService,
                    NavigationService,
                    DisabledItemsService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.autocomplete'
                    },
                    {
                        provide: FilterableDropDownComponentBase,
                        useExisting: forwardRef(() => AutoCompleteComponent)
                    },
                    {
                        provide: KendoInput,
                        useExisting: forwardRef(() => AutoCompleteComponent)
                    }
                ],
                selector: 'kendo-autocomplete',
                template: `
        <ng-container kendoAutoCompleteLocalizedMessages
            i18n-noDataText="kendo.autocomplete.noDataText|The text displayed in the popup when there are no items"
            noDataText="NO DATA FOUND"

            i18n-clearTitle="kendo.autocomplete.clearTitle|The title of the clear button"
            clearTitle="clear"
        >
        </ng-container>
        <kendo-searchbar #searchbar
            [role]="'combobox'"
            [id]="focusableId"
            [listId]="listBoxId"
            [activeDescendant]="activeDescendant"
            [noDataLabel]="noDataLabel"
            [userInput]="text"
            [suggestedText]="suggestion"
            [disabled]="disabled"
            [readonly]="readonly"
            [tabIndex]="tabIndex"
            [popupOpen]="isOpen"
            [placeholder]="placeholder"
            (onNavigate)="handleNavigate($event)"
            (valueChange)="searchBarChange($event)"
            (onBlur)="handleBlur()"
            (onFocus)="handleFocus()"
        ></kendo-searchbar>
        <span *ngIf="!loading && !readonly && (clearButton && text?.length)" class="k-icon k-clear-value k-i-close" [attr.title]="clearTitle" role="button" tabindex="-1" (click)="clearValue($event)" (mousedown)="$event.preventDefault()">
</span>
        <span *ngIf="loading" class="k-icon k-i-loading"></span>
        <ng-template #popupTemplate>
            <!--header template-->
            <ng-template *ngIf="headerTemplate"
                [templateContext]="{
                    templateRef: headerTemplate.templateRef
                }">
            </ng-template>
            <!--list-->
            <kendo-list
                #optionsList
                [id]="listBoxId"
                [optionPrefix]="optionPrefix"
                [data]="data"
                [textField]="valueField"
                [valueField]="valueField"
                [template]="template"
                [groupTemplate]="groupTemplate"
                [fixedGroupTemplate]="fixedGroupTemplate"
                [height]="listHeight"
                [show]="isOpen"
                [virtual]="virtual"
                (pageChange)="pageChange($event)"
            >
            </kendo-list>
            <!--no-data template-->
            <div class="k-nodata" *ngIf="data.length === 0">
                <ng-template [ngIf]="noDataTemplate"
                    [templateContext]="{
                        templateRef: noDataTemplate?.templateRef
                    }">
                </ng-template>
                <ng-template [ngIf]="!noDataTemplate">
                    <div>{{ noDataText }}</div>
                </ng-template>
            </div>
            <!--footer template-->
            <ng-template *ngIf="footerTemplate"
                [templateContext]="{
                    templateRef: footerTemplate.templateRef
                }">
            </ng-template>
        </ng-template>
        <ng-template [ngIf]="isOpen">
            <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
        </ng-template>
        <ng-container #container></ng-container>
  `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }, { type: DataService }, { type: ɵngcc4.PopupService }, { type: SelectionService }, { type: NavigationService }, { type: DisabledItemsService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { highlightFirst: [{
            type: Input
        }], focusableId: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], listHeight: [{
            type: Input
        }], clearButton: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], filterable: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-autocomplete']
        }, {
            type: HostBinding,
            args: ['class.k-header']
        }], data: [{
            type: Input
        }], value: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], itemDisabled: [{
            type: Input
        }], tabIndex: [{
            type: Input,
            args: ["tabIndex"]
        }], virtual: [{
            type: Input
        }], isDisabled: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], valueField: [{
            type: Input
        }], loading: [{
            type: Input
        }], suggest: [{
            type: Input
        }], template: [{
            type: ContentChild,
            args: [ItemTemplateDirective]
        }], headerTemplate: [{
            type: ContentChild,
            args: [HeaderTemplateDirective]
        }], footerTemplate: [{
            type: ContentChild,
            args: [FooterTemplateDirective]
        }], noDataTemplate: [{
            type: ContentChild,
            args: [NoDataTemplateDirective]
        }], groupTemplate: [{
            type: ContentChild,
            args: [GroupTemplateDirective]
        }], fixedGroupTemplate: [{
            type: ContentChild,
            args: [FixedGroupTemplateDirective]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate']
        }], searchbar: [{
            type: ViewChild,
            args: [SearchBarComponent]
        }], optionsList: [{
            type: ViewChild,
            args: ['optionsList']
        }] }); })();

/**
 * @hidden
 */
const TOUCH_ENABLED = new InjectionToken('dropdowns-touch-enabled');

/**
 * @hidden
 */
/* tslint:disable:max-line-length */
/* tslint:disable:variable-name */
const MultiselectMessages = {
    'array': 'Expected values of array type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#value-selection',
    'object': 'Expected values of Object type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#value-selection',
    'primitive': 'Expected values of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#value-selection',
    'textAndValue': 'Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/multiselect/#toc-bind-to-arrays-of-complex-data'
};
/**
 * @hidden
 */
/* tslint:disable:max-line-length */
/* tslint:disable:variable-name */
const ComboBoxMessages = {
    'object': 'Expected value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#toc-value-selection',
    'primitive': 'Expected value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#toc-value-selection',
    'textAndValue': 'Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/combobox/#toc-bind-to-arrays-of-complex-data',
    'noItemHeight': 'Expected virtual.itemHeight of type number.'
};
/**
 * @hidden
 */
/* tslint:disable:max-line-length */
/* tslint:disable:variable-name */
const DropDownListMessages = {
    'defaultItem': 'defaultItem and data items must be of same type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/api/DropDownListComponent/#toc-defaultitem',
    'object': 'Expected value of type Object. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection',
    'primitive': 'Expected value of primitive type. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-value-selection',
    'textAndValue': 'Expected textField and valueField options to be set. See http://www.telerik.com/kendo-angular-ui/components/dropdowns/dropdownlist/#toc-bind-to-arrays-of-complex-data'
};

/* tslint:disable:member-ordering */
/**
 * @hidden
 */
const COMBOBOX_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => ComboBoxComponent)
};
/**
 * Represents the [Kendo UI ComboBox component for Angular]({% slug overview_combobox %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-combobox [data]="listItems">
 *  </kendo-combobox>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class ComboBoxComponent {
    constructor(localization, popupService, selectionService, navigationService, disabledItemsService, dataService, _zone, cdr, renderer, hostElement, touchEnabled$$1) {
        this.localization = localization;
        this.popupService = popupService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this.disabledItemsService = disabledItemsService;
        this.dataService = dataService;
        this._zone = _zone;
        this.cdr = cdr;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.touchEnabled = touchEnabled$$1;
        this.selected = [];
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Specifies whether the ComboBox allows user-defined values that are not present in the dataset
         * ([more information and examples]({% slug custom_values_combobox %})).
         * Defaults to `false`.
         */
        this.allowCustom = false;
        /**
         * A user-defined callback which returns normalized custom values.
         * Typically used when the data items are different from type `string`.
         * @param { Any } value - The custom value defined by the user.
         * @returns { Any }
         *
         * @example
         * ```ts
         * import { map } from 'rxjs/operators';
         *
         * _@Component({
         * selector: 'my-app',
         * template: `
         *   <kendo-combobox
         *       [allowCustom]="true"
         *       [data]="listItems"
         *       [textField]="'text'"
         *       [valueField]="'value'"
         *       [valueNormalizer]="valueNormalizer"
         *       (valueChange)="onValueChange($event)"
         *   >
         *   </kendo-combobox>
         * `
         * })
         *
         * class AppComponent {
         *   public listItems: Array<{ text: string, value: number }> = [
         *       { text: "Small", value: 1 },
         *       { text: "Medium", value: 2 },
         *       { text: "Large", value: 3 }
         *   ];
         *
         *   public onValueChange(value) {
         *       console.log("valueChange : ", value);
         *   }
         *
         *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {
         *      return { ProductID: null, ProductName: text };
         *   }));
         *
         * }
         * ```
         */
        this.valueNormalizer = (text) => text.pipe(map((userInput) => userInput));
        /**
         * The hint that is displayed when the component is empty.
         *
         */
        this.placeholder = "";
        /**
         * Sets the height of the suggestions list. By default, `listHeight` is 200px.
         *
         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.
         * > To set the height of the popup container, use `popupSettings.height`.
         */
        this.listHeight = 200;
        /**
         * Enables the auto-completion of the text based on the first data item.
         */
        this.suggest = false;
        /**
         * If set to `true`, renders a button on hovering over the component.
         * Clicking this button resets the value of the component to `undefined` and triggers the `change` event.
         */
        this.clearButton = true;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         */
        this.readonly = false;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Enables the [filtering]({% slug filtering_combobox %}) functionality.
         * If set to `true`, the component emits the `filterChange` event.
         */
        this.filterable = false;
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button
         * ([see example]({% slug overview_combobox %}#toc-events)).
         * When the value of the component is programmatically changed to `ngModel` or `formControl`
         * through its API or form binding, the `valueChange` event is not triggered because it
         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time an item selection is changed
         * ([see example]({% slug overview_combobox %}#toc-events)).
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires each time the user types in the input field.
         * You can filter the source based on the passed filtration value
         * ([see example]({% slug overview_combobox %}#toc-events)).
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open.
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close.
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the ComboBox.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the ComboBox gets blurred.
         */
        this.onBlur = new EventEmitter();
        this.widgetClasses = true;
        this._isFocused = false;
        this.listBoxId = guid();
        this.optionPrefix = guid();
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = (_) => { };
        this._filtering = false;
        this._text = '';
        this.filterText = '';
        this._open = false;
        this._popupSettings = { animate: true };
        this.popupMouseDownHandler = (event) => event.preventDefault();
        this.customValueSubject = new Subject();
        this.valueSubject = new Subject();
        this.clearValueSubject = new Subject();
        this.subs = new Subscription();
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.data = [];
    }
    get width() {
        let wrapperOffsetWidth = 0;
        if (isDocumentAvailable()) {
            wrapperOffsetWidth = this.wrapper.nativeElement.offsetWidth;
        }
        const width = this.popupSettings.width || wrapperOffsetWidth;
        const minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : `${wrapperOffsetWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        const popupHeight = this.popupSettings.height;
        return isPresent(popupHeight) ? `${popupHeight}px` : 'auto';
    }
    set text(text) {
        this._text = isPresent(text) ? text.toString() : "";
    }
    get text() {
        return this._text;
    }
    /**
     * @hidden
     */
    togglePopup(open) {
        const isDisabled = this.disabled || this.readonly;
        const sameState = this.isOpen === open;
        if (isDisabled || sameState) {
            return;
        }
        const isDefaultPrevented = this.triggerPopupEvents(open);
        if (!isDefaultPrevented) {
            this._toggle(open);
        }
    }
    get activeDescendant() {
        if (!this.isOpen || !isPresent(this.selectionService.focused) || this.selectionService.focused === -1) {
            return null;
        }
        const dataItem = this.dataService.itemAt(this.selectionService.focused);
        return this.optionPrefix + "-" + (dataItem ? getter(dataItem, this.valueField) : "");
    }
    get noDataLabel() {
        if (this.data.length === 0) {
            return this.noDataText;
        }
    }
    get clearTitle() {
        return this.localization.get('clearTitle');
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * Sets the data of the ComboBox.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this.dataService.data = data || [];
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        this.setState();
        if (this._filtering) {
            const queryAndDataPresent = this.text.length > 0 && this.dataService.itemsCount > 0;
            const index = queryAndDataPresent ? this.firstFocusableIndex(0) : -1;
            this.selectionService.focused = index;
        }
        if (this.suggest && this.dataService.itemsCount && this.text) {
            this.suggestedText = getter(this.dataService.itemAt(0), this.textField);
        }
    }
    get data() {
        const virtual = this.virtual;
        if (virtual) {
            const start = virtual.skip || 0;
            const end = start + virtual.pageSize;
            // Use length instead of itemsCount because of the grouping.
            virtual.total = this.dataService.data.length;
            return this.dataService.data.slice(start, end);
        }
        return this.dataService.data;
    }
    /**
     * Sets the value of the ComboBox.
     * It can either be of the primitive (string, numbers) or of the complex (objects) type.
     * To define the type, use the `valuePrimitive` option.
     *
     * > All selected values which are not present in the dataset are considered custom values.
     * > When the `Enter` key is pressed or the component loses focus, custom values get dismissed unless `allowCustom` is set to `true`.
     */
    set value(newValue) {
        this._value = newValue;
        this.setState();
        this.cdr.markForCheck();
    }
    get value() {
        return this._value;
    }
    /**
     * Specifies the type of the selected value.
     * If set to `true`, the selected value has to be of the primitive type
     * ([more information and example]({% slug valuebinding_combobox %}#toc-primitive-values-from-object-fields)).
     */
    set valuePrimitive(isPrimitive) {
        this._valuePrimitive = isPrimitive;
    }
    get valuePrimitive() {
        if (!isPresent(this._valuePrimitive)) {
            return !isPresent(this.valueField);
        }
        return this._valuePrimitive;
    }
    /**
     * Configures the popup of the ComboBox.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.
     * - `height: Number`&mdash;Sets the height of the popup container.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Defines a Boolean function that is executed for each data item in the component
     * ([see examples]({% slug disableditems_combobox %})). Determines whether the item will be disabled.
     */
    set itemDisabled(fn) {
        if (typeof fn !== 'function') {
            throw new Error(`itemDisabled must be a function, but received ${JSON.stringify(fn)}.`);
        }
        this.disabledItemsService.itemDisabled = fn;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * Enables the [virtualization]({% slug virtualization_combobox %}) functionality.
     */
    set virtual(settings) {
        this._virtualSettings = normalizeVirtualizationSettings(settings);
    }
    get virtual() {
        return this._virtualSettings;
    }
    get clearable() {
        return this.clearButton;
    }
    get dir() {
        return this.direction;
    }
    get isFocused() {
        return this._isFocused;
    }
    set isFocused(value) {
        this.renderer[value ? 'addClass' : 'removeClass'](this.wrapper.nativeElement, "k-state-focused");
        this._isFocused = value;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.hostElement.nativeElement, 'tabindex');
        this.attachStreams();
        this.createValueStream();
        this.setMessages();
    }
    createValueStream() {
        const valueStream = this.valueSubject.pipe(filter((candidate) => {
            const valueFrom = this.prop(this.valueField, this.valuePrimitive);
            const textFrom = this.prop(this.textField, this.valuePrimitive);
            const current = valueFrom(this.value);
            const newValue = valueFrom(candidate);
            let newText = textFrom(candidate);
            if (!isPresent(this.value) && !isPresent(newValue)) {
                return false;
            }
            if (isPresent(newText)) {
                newText = newText.toString();
            }
            if (current === newValue && this.text === newText) {
                this.clearFilter();
                return false;
            }
            else {
                return true;
            }
        }), map((candidate) => {
            const valueFrom = this.prop(this.valueField, this.valuePrimitive);
            const textFrom = this.prop(this.textField, this.valuePrimitive);
            const newValue = valueFrom(candidate);
            const newText = textFrom(candidate);
            return {
                dataItem: candidate,
                text: newText,
                value: this.valuePrimitive ? newValue : candidate
            };
        }));
        const customValueStreams = partition(() => this.allowCustom)(this.customValueSubject.pipe(throttleTime(300)));
        const allowCustomValueStream = customValueStreams[0].pipe(tap(() => {
            this.loading = true;
            this.disabled = true;
            this.cdr.detectChanges();
        }), filter(() => {
            const valueFrom = this.prop(this.valueField, this.valuePrimitive);
            const hasChange = this.text !== valueFrom(this.value);
            this.loading = hasChange;
            this.disabled = hasChange;
            if (!hasChange) {
                this.clearFilter();
            }
            return hasChange;
        }), this.valueNormalizer, map((normalizedValue) => {
            return {
                custom: true,
                dataItem: normalizedValue,
                text: this.text,
                value: normalizedValue
            };
        }));
        const disableCustomValueStream = customValueStreams[1].pipe(map(() => {
            return {
                custom: true,
                dataItem: undefined,
                text: undefined,
                value: undefined
            };
        }));
        const clearValueStream = this.clearValueSubject.pipe(map(() => ({
            dataItem: undefined,
            text: undefined,
            value: undefined
        })));
        if (this.valueSubscription) {
            this.valueSubscription.unsubscribe();
        }
        const merged = merge(valueStream, allowCustomValueStream, disableCustomValueStream, clearValueStream);
        this.valueSubscription = merged.pipe(catchError(() => {
            const valueFrom = this.prop(this.valueField, this.valuePrimitive);
            const selectionChanged = valueFrom(this.dataItem) !== undefined;
            this.dataItem = undefined;
            this.value = undefined;
            this.text = undefined;
            this.loading = false;
            this.disabled = false;
            if (selectionChanged) {
                this.selectionChange.emit(undefined);
            }
            this.emitValueChange();
            this.createValueStream();
            return of(null);
        }))
            .subscribe((state) => {
            const valueFrom = this.prop(this.valueField, this.valuePrimitive);
            const selectionChanged = valueFrom(this.dataItem) !== valueFrom(state.dataItem);
            this.dataItem = state.dataItem;
            this.value = state.value;
            this.text = state.text;
            this.loading = false;
            this.disabled = false;
            this.clearFilter();
            if (state.custom) {
                this.selectionService.focused = -1;
            }
            if (selectionChanged) {
                const selectionArgs = state.custom ? undefined : this.dataItem;
                this.selectionChange.emit(selectionArgs);
            }
            this.emitValueChange();
        });
    }
    attachStreams() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.subs.add(this.localization
            .changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            this.setMessages();
        }));
        this.subs.add(merge(this.navigationService.up, this.navigationService.down, this.navigationService.home, this.navigationService.end)
            .pipe(filter((event) => isPresent(event.index)))
            .subscribe((event) => this.navigate(event.index)));
        this.subs.add(this.navigationService.open.subscribe(this.handleNavigationOpen.bind(this)));
        this.subs.add(this.navigationService.close.subscribe(() => this.togglePopup(false)));
        this.subs.add(this.navigationService.esc.subscribe(this.handleEscape.bind(this)));
        this.subs.add(this.navigationService.enter.pipe(tap((event) => {
            if (this.isOpen) {
                event.originalEvent.preventDefault();
            }
        }))
            .subscribe(this.handleEnter.bind(this)));
        this.subs.add(merge(this.selectionService.onChange, this.selectionService.onSelect.pipe(filter(_ => !this.isOpen)))
            .pipe(tap(_ => {
            this._filtering = false;
            this.togglePopup(false);
        }), map((event) => this.dataService.itemAt(event.indices[0])))
            .subscribe(dataItem => {
            this.change(dataItem);
        }));
        this.subs.add(this.selectionService.onSelect.pipe(filter(_ => this.isOpen), tap(_ => this._filtering = false), map((event) => this.dataService.itemAt(event.indices[0])))
            .subscribe(dataItem => {
            const valueFrom = this.prop(this.valueField, this.valuePrimitive);
            const selectionChanged = valueFrom(dataItem) !== valueFrom(this.dataItem);
            this.updateState({ dataItem });
            if (selectionChanged) {
                this.selectionChange.emit(dataItem);
            }
        }));
    }
    ngOnDestroy() {
        this.destroyPopup();
        clearTimeout(this.messagesTimeout);
        this.subs.unsubscribe();
        if (isPresent(this.valueSubscription)) {
            this.valueSubscription.unsubscribe();
        }
    }
    ngOnChanges(changes) {
        const virtual = this.virtual;
        const requestInitialData = virtual && changes.data && changes.data.isFirstChange();
        if (requestInitialData) {
            this.pageChange({ skip: 0, take: virtual.pageSize });
        }
        if (isChanged('valueNormalizer', changes)) {
            this.createValueStream();
        }
        if (anyChanged(['textField', 'valueField', 'valuePrimitive'], changes, false)) {
            this.setState();
        }
    }
    ngAfterContentChecked() {
        this.verifySettings();
    }
    /**
     * Focuses the ComboBox.
     */
    focus() {
        if (!this.disabled) {
            this.searchbar.focus();
        }
    }
    /**
     * Blurs the ComboBox.
     */
    blur() {
        if (!this.disabled) {
            this.searchbar.blur();
        }
    }
    /**
     * Toggles the visibility of the popup. If you use the `toggle` method to open or close the popup,
     * the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        Promise.resolve(null).then(() => {
            const shouldOpen = isPresent(open) ? open : !this._open;
            this._toggle(shouldOpen);
            this.cdr.markForCheck();
        });
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this._open;
    }
    /**
     * Resets the value of the ComboBox.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    reset() {
        this.value = undefined;
        this.clearState();
        this.resetSelection();
    }
    /**
     * @hidden
     *
     * Used by the TextBoxContainer to determine if the floating label
     * should be rendered in the input when the component is not focused.
     */
    isEmpty() {
        const textEmpty = !isPresent(this.text) || isEmptyString(this.text);
        const valueEmpty = !isPresent(this.value) || isEmptyString(this.value);
        return textEmpty && valueEmpty;
    }
    /**
     * @hidden
     */
    clearValue(event) {
        event.stopImmediatePropagation();
        this.focus();
        this._filtering = true;
        this._previousDataItem = undefined;
        this.selectionService.resetSelection([]);
        this.clearValueSubject.next();
        this._filtering = false;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    get buttonClasses() {
        return this.loading ? 'k-i-loading' : this.iconClass || 'k-i-arrow-s';
    }
    /**
     * @hidden
     */
    onResize() {
        if (this.isOpen) {
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    }
    verifySettings() {
        if (!isDevMode()) {
            return;
        }
        if (this.valuePrimitive === true && isPresent(this.value) && typeof this.value === "object") {
            throw new Error(ComboBoxMessages.primitive);
        }
        if (this.valuePrimitive === false && isPresent(this.value) && typeof this.value !== "object") {
            throw new Error(ComboBoxMessages.object);
        }
        const valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);
        if (valueOrText) {
            throw new Error(ComboBoxMessages.textAndValue);
        }
        if (this.virtual && isNaN(this.virtual.itemHeight)) {
            throw new Error(ComboBoxMessages.noItemHeight);
        }
    }
    setState() {
        // Filtering in process, do nothing.
        if (this._filtering) {
            return;
        }
        const value = this.value;
        const valueField = this.valueField;
        const primitive = this.valuePrimitive;
        const resolved = this.findDataItem({ primitive, valueField, value });
        if (isPresent(resolved.index) && resolved.index !== -1) {
            this.updateState({ dataItem: resolved.dataItem, confirm: true });
            this.resetSelection(resolved.index);
        }
        else if (isPresent(value) && this.allowCustom) {
            this.updateState({ dataItem: value });
            this.resetSelection(-1);
        }
        else if (this._previousDataItem && this.value) {
            this.updateState({ dataItem: this._previousDataItem });
            this.resetSelection();
        }
        else {
            this.clearState();
            this.resetSelection(-1);
        }
    }
    updateState({ dataItem, confirm = false }) {
        this.dataItem = dataItem;
        this.text = this.prop(this.textField, this.valuePrimitive)(dataItem);
        if (confirm) {
            this._previousDataItem = dataItem;
        }
    }
    clearState() {
        this.text = undefined;
        this.dataItem = undefined;
    }
    resetSelection(index) {
        const clear = !isPresent(index) || index < 0;
        this.selectionService.resetSelection(clear ? [] : [index]);
        this.selectionService.focused = index;
    }
    firstFocusableIndex(index) {
        const maxIndex = this.data.length - 1;
        if (this.disabledItemsService.isIndexDisabled(index)) {
            return (index < maxIndex) ? this.firstFocusableIndex(index + 1) : undefined;
        }
        else {
            return index;
        }
    }
    findIndexPredicate(text) {
        if (this.dataService.grouped) {
            return (item) => {
                let itemText = this.prop(this.textField, this.valuePrimitive)(item.value);
                itemText = !isPresent(itemText) ? "" : itemText.toString().toLowerCase();
                return itemText.startsWith(text.toLowerCase());
            };
        }
        else {
            return (item) => {
                let itemText = this.prop(this.textField, this.valuePrimitive)(item);
                itemText = !isPresent(itemText) ? "" : itemText.toString().toLowerCase();
                return itemText.startsWith(text.toLowerCase());
            };
        }
    }
    prop(field, usePrimitive) {
        return (dataItem) => {
            if (isPresent(dataItem)) {
                if (usePrimitive) {
                    return field && isObject(dataItem) ? dataItem[field] : dataItem;
                }
                else {
                    return dataItem[field];
                }
            }
            return null;
        };
    }
    findDataItem({ primitive, valueField, value }) {
        const result = {
            dataItem: null,
            index: -1
        };
        const prop = this.prop(valueField, primitive);
        let comparer;
        if (this.dataService.grouped) {
            comparer = (element) => {
                return prop(element.value) === prop(value);
            };
        }
        else {
            comparer = (element) => {
                return prop(element) === prop(value);
            };
        }
        const index = this.dataService.findIndex(comparer);
        result.dataItem = this.dataService.itemAt(index);
        result.index = index;
        return result;
    }
    search(text, startFrom = 0) {
        let index;
        if (text.length && this.dataService.itemsCount) {
            index = this.dataService.findIndex(this.findIndexPredicate(text), startFrom);
        }
        else {
            index = -1;
        }
        if (this.disabledItemsService.isIndexDisabled(index)) {
            if (index + 1 < this.dataService.itemsCount) {
                this.search(text, index + 1);
            }
            else {
                this.selectionService.focus(-1);
            }
        }
        else {
            this.selectionService.focus(index);
            if (this.suggest) {
                this.suggestedText = getter(this.dataService.itemAt(index), this.textField);
            }
        }
    }
    /**
     * @hidden
     */
    getSuggestion() {
        const hasSelected = !!this.selectionService.selected.length;
        const shouldSuggest = this.suggest && !this.backspacePressed && this.suggestedText && this.text;
        if (!hasSelected && shouldSuggest && this.suggestedText.toLowerCase().startsWith(this.text.toLowerCase())) {
            return this.suggestedText;
        }
        else {
            this.suggestedText = undefined;
        }
    }
    navigate(index) {
        if (this.dataService.itemsCount === 0) {
            return;
        }
        this.text = this.prop(this.textField, this.valuePrimitive)(this.dataService.itemAt(index));
        this.selectionService.select(index);
    }
    /**
     * @hidden
     */
    handleNavigate(event) {
        const hasSelected = isPresent(this.selectionService.selected[0]);
        const focused = isNaN(this.selectionService.focused) ? this.firstFocusableIndex(0) : this.selectionService.focused;
        let offset = 0;
        if (this.disabled || this.readonly) {
            return;
        }
        if (event.keyCode === Keys.Home || event.keyCode === Keys.End) {
            return;
        }
        if (!hasSelected) {
            if (event.keyCode === Keys.ArrowDown) {
                offset = -1;
            }
            else if (event.keyCode === Keys.ArrowUp) {
                offset = 1;
            }
        }
        const action = this.navigationService.process({
            current: offset + focused,
            max: this.dataService.itemsCount - 1,
            min: 0,
            originalEvent: event
        });
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Left &&
            action !== NavigationAction.Right &&
            action !== NavigationAction.Backspace &&
            action !== NavigationAction.Delete &&
            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {
            event.preventDefault();
        }
    }
    handleEnter() {
        const text = this.text;
        const focused = this.selectionService.focused;
        const hasFocused = isPresent(focused) && focused !== -1;
        const previousText = getter(this._previousDataItem, this.textField, this.valuePrimitive) || "";
        const focusedItemText = getter(this.dataService.itemAt(focused), this.textField);
        const textHasChanged = text !== previousText;
        this.togglePopup(false);
        this._filtering = false;
        if (this.allowCustom && textHasChanged) {
            if (text === focusedItemText || this.useSuggestion()) {
                this.selectionService.change(focused);
            }
            else {
                this.change(text, true);
            }
        }
        if (!this.allowCustom) {
            if (hasFocused) {
                this.selectionService.change(focused);
            }
            else if (textHasChanged) {
                this.change(text, true);
            }
        }
    }
    /**
     * @hidden
     */
    handleBlur() {
        this._filtering = false;
        this.searchbar.input.nativeElement.scrollLeft = 0; // Firefox doesn't auto-scroll to the left on blur like other browsers
        this.isFocused = false;
        const valueFrom = this.prop(this.valueField, this.valuePrimitive);
        const unresolvedSelection = valueFrom(this.dataItem) !== valueFrom(this.value);
        const currentText = this.searchbar.value;
        const textFrom = this.prop(this.textField, this.valuePrimitive);
        const textHasChanged = currentText !== (textFrom(this.dataItem) || '');
        const valueHasChanged = unresolvedSelection || textHasChanged;
        const runInZone = valueHasChanged || hasObservers(this.onBlur) || hasObservers(this.close) || isUntouched(this.hostElement.nativeElement);
        if (runInZone) {
            this._zone.run(() => {
                if (valueHasChanged) {
                    const lowerCaseMatch = isPresent(this.focusedItemText) && this.focusedItemText.toLowerCase() === currentText.toLowerCase();
                    if (lowerCaseMatch || unresolvedSelection) {
                        this.selectionService.change(this.selectionService.focused);
                    }
                    else {
                        this.change(currentText, true);
                    }
                }
                this.onBlur.emit();
                this.onTouchedCallback();
                this.togglePopup(false);
            });
        }
        else {
            this.togglePopup(false);
        }
    }
    /**
     * @hidden
     */
    handleEscape() {
        this.togglePopup(false);
        // clear the focus only if the focused item is not selected
        const hasSelected = this.selectionService.selected.length > 0;
        if (!hasSelected) {
            this.suggestedText = null;
            this.selectionService.focused = -1;
        }
    }
    /**
     * @hidden
     */
    handleNavigationOpen() {
        this.restoreItemFocus();
        this.togglePopup(true);
    }
    /**
     * @hidden
     */
    searchBarChange(text) {
        const currentTextLength = this.text ? this.text.length : 0;
        this.backspacePressed = (text.length < currentTextLength) ? true : false;
        this.text = text;
        // Reset the selection prior to filter. If a match is present, it will be resolved. If a match is not present, it is not needed.
        this.selectionService.resetSelection([]);
        this.togglePopup(true);
        this._filtering = true;
        if (this.filterable && this.filterText !== text) {
            this.filterText = text;
            this.filterChange.emit(text);
        }
        else {
            this.search(text);
        }
    }
    /**
     * @hidden
     */
    handleFocus() {
        this.isFocused = true;
        if (hasObservers(this.onFocus)) {
            this._zone.run(() => this.onFocus.emit());
        }
    }
    /**
     * @hidden
     */
    pageChange(event) {
        const virtual = this.virtual;
        virtual.skip = event.skip;
    }
    change(candidate, isCustom = false) {
        if (isCustom) {
            this.customValueSubject.next(candidate);
        }
        else {
            this.valueSubject.next(candidate);
        }
    }
    emitValueChange() {
        this.onChangeCallback(this.value);
        this.valueChange.emit(this.value);
        this._previousDataItem = this.dataItem;
    }
    /**
     * @hidden
     */
    selectClick() {
        if (!this.touchEnabled) {
            this.searchbar.focus();
        }
        if (!this.isOpen) {
            this.restoreItemFocus();
        }
        this.togglePopup(!this.isOpen);
    }
    get listContainerClasses() {
        const containerClasses = ['k-list-container', 'k-reset'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    get focusedItemText() {
        const focused = this.selectionService.focused;
        if (!isPresent(focused) || focused === -1) {
            return null;
        }
        const itemText = getter(this.dataService.itemAt(focused), this.textField);
        return !isPresent(itemText) ? "" : itemText.toString();
    }
    /**
     * Focuses the first match when there's text in the input field, but no focused item.
     */
    restoreItemFocus() {
        const hasFocus = isPresent(this.selectionService.focused) && this.selectionService.focused > -1;
        if (!hasFocus && this.text && this.dataService.itemsCount) {
            if (this.filterable) {
                this.selectionService.focused = this.firstFocusableIndex(0);
            }
            else {
                this.search(this.text);
            }
        }
    }
    useSuggestion() {
        if (!(this.suggest && isPresent(this.searchbar.value))) {
            return false;
        }
        const focusedDataItem = this.dataService.itemAt(this.selectionService.focused);
        const focusedItemText = this.prop(this.textField, this.valuePrimitive)(focusedDataItem);
        if (!isPresent(focusedItemText)) {
            return false;
        }
        return this.searchbar.value.toLowerCase() === focusedItemText.toLowerCase();
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    createPopup() {
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        const horizontalAlign = this.direction === "rtl" ? "right" : "left";
        const anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        const popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            content: this.popupTemplate,
            popupClass: this.listContainerClasses,
            positionMode: 'absolute',
            anchorAlign: anchorPosition,
            popupAlign: popupPosition
        });
        const popupWrapper = this.popupRef.popupElement;
        const { min, max } = this.width;
        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
        popupWrapper.style.minWidth = min;
        popupWrapper.style.width = max;
        popupWrapper.style.height = this.height;
        popupWrapper.setAttribute("dir", this.direction);
        this.popupRef.popupOpen.subscribe(() => {
            this.cdr.detectChanges();
            this.optionsList.scrollToItem(this.selectionService.focused);
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => this.togglePopup(false));
    }
    _toggle(open) {
        this._open = open;
        this.destroyPopup();
        if (this._open) {
            this.createPopup();
        }
    }
    triggerPopupEvents(open) {
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        return eventArgs.isDefaultPrevented();
    }
    clearFilter() {
        if (!(this.filterable && this.filterText)) {
            return;
        }
        this.filterText = '';
        this.filterChange.emit(this.filterText);
    }
    setMessages() {
        this._zone.runOutsideAngular(() => {
            clearTimeout(this.messagesTimeout);
            this.messagesTimeout = setTimeout(() => {
                this.noDataText = this.localization.get('noDataText');
                this.cdr.detectChanges();
            });
        });
    }
}
ComboBoxComponent.ɵfac = function ComboBoxComponent_Factory(t) { return new (t || ComboBoxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.PopupService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(DisabledItemsService), ɵngcc0.ɵɵdirectiveInject(DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(TOUCH_ENABLED, 8)); };
ComboBoxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ComboBoxComponent, selectors: [["kendo-combobox"]], contentQueries: function ComboBoxComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ItemTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NoDataTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GroupTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FixedGroupTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noDataTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fixedGroupTemplate = _t.first);
    } }, viewQuery: function ComboBoxComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c10, true, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c11, true);
        ɵngcc0.ɵɵviewQuery(SearchBarComponent, true);
        ɵngcc0.ɵɵviewQuery(_c12, true);
        ɵngcc0.ɵɵstaticViewQuery(_c19, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchbar = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionsList = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);
    } }, hostVars: 9, hostBindings: function ComboBoxComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.widgetClasses)("k-combobox", ctx.widgetClasses)("k-header", ctx.widgetClasses)("k-combobox-clearable", ctx.clearable);
    } }, inputs: { focusableId: "focusableId", allowCustom: "allowCustom", valueNormalizer: "valueNormalizer", placeholder: "placeholder", listHeight: "listHeight", suggest: "suggest", clearButton: "clearButton", disabled: "disabled", readonly: "readonly", tabindex: "tabindex", filterable: "filterable", data: "data", value: "value", valuePrimitive: "valuePrimitive", popupSettings: "popupSettings", itemDisabled: "itemDisabled", tabIndex: "tabIndex", virtual: "virtual", loading: "loading", textField: "textField", valueField: "valueField", iconClass: "iconClass" }, outputs: { valueChange: "valueChange", selectionChange: "selectionChange", filterChange: "filterChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendoComboBox"], features: [ɵngcc0.ɵɵProvidersFeature([
            COMBOBOX_VALUE_ACCESSOR,
            DataService,
            SelectionService,
            NavigationService,
            DisabledItemsService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.combobox'
            },
            {
                provide: FilterableDropDownComponentBase, useExisting: forwardRef(() => ComboBoxComponent)
            },
            {
                provide: KendoInput, useExisting: forwardRef(() => ComboBoxComponent)
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 14, vars: 19, consts: [["kendoComboBoxLocalizedMessages", "", 6, "noDataText", "clearTitle"], ["unselectable", "on", 1, "k-dropdown-wrap", 3, "ngClass"], ["wrapper", ""], [3, "role", "id", "listId", "activeDescendant", "noDataLabel", "userInput", "suggestedText", "disabled", "readonly", "tabIndex", "popupOpen", "placeholder", "onNavigate", "valueChange", "onBlur", "onFocus"], ["searchbar", ""], ["class", "k-icon k-clear-value k-i-close", "role", "button", "tabindex", "-1", 3, "click", "mousedown", 4, "ngIf"], ["unselectable", "on", 1, "k-select", 3, "click", "mousedown"], [1, "k-icon", 3, "ngClass"], ["popupTemplate", ""], [3, "ngIf"], ["container", ""], ["role", "button", "tabindex", "-1", 1, "k-icon", "k-clear-value", "k-i-close", 3, "click", "mousedown"], [4, "ngIf"], [3, "id", "optionPrefix", "data", "textField", "valueField", "template", "groupTemplate", "fixedGroupTemplate", "height", "show", "virtual", "pageChange"], ["optionsList", ""], ["class", "k-nodata", 4, "ngIf"], [3, "templateContext"], [1, "k-nodata"], [3, "ngIf", "templateContext"], [3, "resize"]], template: function ComboBoxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵi18nAttributes(1, _c24);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(2, "span", 1, 2);
        ɵngcc0.ɵɵelementStart(4, "kendo-searchbar", 3, 4);
        ɵngcc0.ɵɵlistener("onNavigate", function ComboBoxComponent_Template_kendo_searchbar_onNavigate_4_listener($event) { return ctx.handleNavigate($event); })("valueChange", function ComboBoxComponent_Template_kendo_searchbar_valueChange_4_listener($event) { return ctx.searchBarChange($event); })("onBlur", function ComboBoxComponent_Template_kendo_searchbar_onBlur_4_listener() { return ctx.handleBlur(); })("onFocus", function ComboBoxComponent_Template_kendo_searchbar_onFocus_4_listener() { return ctx.handleFocus(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, ComboBoxComponent_span_6_Template, 1, 1, "span", 5);
        ɵngcc0.ɵɵelementStart(7, "span", 6);
        ɵngcc0.ɵɵlistener("click", function ComboBoxComponent_Template_span_click_7_listener() { return ctx.selectClick(); })("mousedown", function ComboBoxComponent_Template_span_mousedown_7_listener($event) { return $event.preventDefault(); });
        ɵngcc0.ɵɵelement(8, "span", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, ComboBoxComponent_ng_template_9_Template, 5, 14, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, ComboBoxComponent_ng_template_11_Template, 1, 0, "ng-template", 9);
        ɵngcc0.ɵɵelementContainer(12, null, 10);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(16, _c25, !ctx.disabled, ctx.disabled));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("role", "combobox")("id", ctx.focusableId)("listId", ctx.listBoxId)("activeDescendant", ctx.activeDescendant)("noDataLabel", ctx.noDataLabel)("userInput", ctx.text)("suggestedText", ctx.getSuggestion())("disabled", ctx.disabled)("readonly", ctx.readonly)("tabIndex", ctx.tabIndex)("popupOpen", ctx.isOpen)("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading && !ctx.readonly && (ctx.clearButton && (ctx.text == null ? null : ctx.text.length)));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.buttonClasses);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpen);
    } }, directives: function () { return [LocalizedMessagesDirective, ɵngcc3.NgClass, SearchBarComponent, ɵngcc3.NgIf, ListComponent,
        TemplateContextDirective, ɵngcc2.ResizeSensorComponent]; }, encapsulation: 2 });
/** @nocollapse */
ComboBoxComponent.ctorParameters = () => [
    { type: LocalizationService },
    { type: PopupService },
    { type: SelectionService },
    { type: NavigationService },
    { type: DisabledItemsService },
    { type: DataService },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }
];
ComboBoxComponent.propDecorators = {
    focusableId: [{ type: Input }],
    allowCustom: [{ type: Input }],
    data: [{ type: Input }],
    value: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    valuePrimitive: [{ type: Input }],
    valueNormalizer: [{ type: Input }],
    placeholder: [{ type: Input }],
    popupSettings: [{ type: Input }],
    listHeight: [{ type: Input }],
    iconClass: [{ type: Input }],
    loading: [{ type: Input }],
    suggest: [{ type: Input }],
    clearButton: [{ type: Input }],
    disabled: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    readonly: [{ type: Input }],
    tabindex: [{ type: Input }],
    tabIndex: [{ type: Input, args: ["tabIndex",] }],
    filterable: [{ type: Input }],
    virtual: [{ type: Input }],
    valueChange: [{ type: Output }],
    selectionChange: [{ type: Output }],
    filterChange: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    onFocus: [{ type: Output, args: ['focus',] }],
    onBlur: [{ type: Output, args: ['blur',] }],
    template: [{ type: ContentChild, args: [ItemTemplateDirective,] }],
    headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],
    footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],
    noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],
    groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],
    fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    searchbar: [{ type: ViewChild, args: [SearchBarComponent,] }],
    optionsList: [{ type: ViewChild, args: ['optionsList',] }],
    wrapper: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-combobox',] }, { type: HostBinding, args: ['class.k-header',] }],
    clearable: [{ type: HostBinding, args: ['class.k-combobox-clearable',] }],
    dir: [{ type: HostBinding, args: ['attr.dir',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ComboBoxComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoComboBox',
                providers: [
                    COMBOBOX_VALUE_ACCESSOR,
                    DataService,
                    SelectionService,
                    NavigationService,
                    DisabledItemsService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.combobox'
                    },
                    {
                        provide: FilterableDropDownComponentBase, useExisting: forwardRef(() => ComboBoxComponent)
                    },
                    {
                        provide: KendoInput, useExisting: forwardRef(() => ComboBoxComponent)
                    }
                ],
                selector: 'kendo-combobox',
                template: `
        <ng-container kendoComboBoxLocalizedMessages
            i18n-noDataText="kendo.combobox.noDataText|The text displayed in the popup when there are no items"
            noDataText="NO DATA FOUND"

            i18n-clearTitle="kendo.combobox.clearTitle|The title of the clear button"
            clearTitle="clear"
        >
        </ng-container>
        <span #wrapper unselectable="on"
            class="k-dropdown-wrap"
            [ngClass]="{ 'k-state-default': !disabled, 'k-state-disabled': disabled }"
        >
          <kendo-searchbar #searchbar
              [role]="'combobox'"
              [id]="focusableId"
              [listId]="listBoxId"
              [activeDescendant]="activeDescendant"
              [noDataLabel]="noDataLabel"
              [userInput]="text"
              [suggestedText]="getSuggestion()"
              [disabled]="disabled"
              [readonly]="readonly"
              [tabIndex]="tabIndex"
              [popupOpen]="isOpen"
              [placeholder]="placeholder"
              (onNavigate)="handleNavigate($event)"
              (valueChange)="searchBarChange($event)"
              (onBlur)="handleBlur()"
              (onFocus)="handleFocus()"
          ></kendo-searchbar>
          <span *ngIf="!loading && !readonly && (clearButton && text?.length)" class="k-icon k-clear-value k-i-close" [attr.title]="clearTitle" role="button" tabindex="-1" (click)="clearValue($event)" (mousedown)="$event.preventDefault()"></span>
          <span unselectable="on"
              class="k-select"
              (click)="selectClick()"
              (mousedown)="$event.preventDefault()" >
              <span class="k-icon" [ngClass]="buttonClasses">
               </span>
          </span>
          <ng-template #popupTemplate>
              <!--header template-->
              <ng-template *ngIf="headerTemplate"
                  [templateContext]="{
                      templateRef: headerTemplate.templateRef
                  }">
              </ng-template>
              <!--list-->
              <kendo-list
                  #optionsList
                  [id]="listBoxId"
                  [optionPrefix]="optionPrefix"
                  [data]="data"
                  [textField]="textField"
                  [valueField]="valueField"
                  [template]="template"
                  [groupTemplate]="groupTemplate"
                  [fixedGroupTemplate]="fixedGroupTemplate"
                  [height]="listHeight"
                  [show]="isOpen"
                  [virtual]="virtual"
                  (pageChange)="pageChange($event)"
              >
              </kendo-list>
              <!--no-data template-->
              <div class="k-nodata" *ngIf="data.length === 0">
                  <ng-template [ngIf]="noDataTemplate"
                      [templateContext]="{
                          templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined
                      }">
                  </ng-template>
                  <ng-template [ngIf]="!noDataTemplate">
                      <div>{{ noDataText }}</div>
                  </ng-template>
              </div>
              <!--footer template-->
              <ng-template *ngIf="footerTemplate"
                  [templateContext]="{
                      templateRef: footerTemplate.templateRef
                  }">
              </ng-template>
          </ng-template>
        </span>
        <ng-template [ngIf]="isOpen">
            <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
        </ng-template>
        <ng-container #container></ng-container>
  `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }, { type: ɵngcc4.PopupService }, { type: SelectionService }, { type: NavigationService }, { type: DisabledItemsService }, { type: DataService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TOUCH_ENABLED]
            }] }]; }, { focusableId: [{
            type: Input
        }], allowCustom: [{
            type: Input
        }], valueNormalizer: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], listHeight: [{
            type: Input
        }], suggest: [{
            type: Input
        }], clearButton: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], filterable: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], selectionChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-combobox']
        }, {
            type: HostBinding,
            args: ['class.k-header']
        }], data: [{
            type: Input
        }], value: [{
            type: Input
        }], valuePrimitive: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], itemDisabled: [{
            type: Input
        }], tabIndex: [{
            type: Input,
            args: ["tabIndex"]
        }], virtual: [{
            type: Input
        }], clearable: [{
            type: HostBinding,
            args: ['class.k-combobox-clearable']
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], loading: [{
            type: Input
        }], textField: [{
            type: Input
        }], valueField: [{
            type: Input
        }], iconClass: [{
            type: Input
        }], template: [{
            type: ContentChild,
            args: [ItemTemplateDirective]
        }], headerTemplate: [{
            type: ContentChild,
            args: [HeaderTemplateDirective]
        }], footerTemplate: [{
            type: ContentChild,
            args: [FooterTemplateDirective]
        }], noDataTemplate: [{
            type: ContentChild,
            args: [NoDataTemplateDirective]
        }], groupTemplate: [{
            type: ContentChild,
            args: [GroupTemplateDirective]
        }], fixedGroupTemplate: [{
            type: ContentChild,
            args: [FixedGroupTemplateDirective]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate']
        }], searchbar: [{
            type: ViewChild,
            args: [SearchBarComponent]
        }], optionsList: [{
            type: ViewChild,
            args: ['optionsList']
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }] }); })();

/* tslint:disable:max-line-length */
/**
 * Renders the selected value of the DropDownList
 * ([see example]({% slug templates_ddl %}#toc-value-template)).
 * The template context is set to the current component.
 * To get a reference to the current data item, use the `let-dataItem` directive.
 *
 * > The `ValueTemplate` directive can only be used with the DropDownList component.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-dropdownlist [data]="listItems">
 *    <ng-template kendoDropDownListValueTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-dropdownlist>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class ValueTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
ValueTemplateDirective.ɵfac = function ValueTemplateDirective_Factory(t) { return new (t || ValueTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
ValueTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValueTemplateDirective, selectors: [["", "kendoDropDownListValueTemplate", ""]] });
/** @nocollapse */
ValueTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ValueTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownListValueTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:member-ordering */
/**
 * @hidden
 */
const DROPDOWNLIST_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DropDownListComponent)
};
/**
 * Represents the [Kendo UI DropDownList component for Angular]({% slug overview_ddl %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-dropdownlist [data]="listItems">
 *  </kendo-dropdownlist>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class DropDownListComponent {
    constructor(localization, popupService, selectionService, navigationService, disabledItemsService, dataService, _zone, renderer, hostElement, cdr, touchEnabled$$1) {
        this.localization = localization;
        this.popupService = popupService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this.disabledItemsService = disabledItemsService;
        this.dataService = dataService;
        this._zone = _zone;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this.cdr = cdr;
        this.touchEnabled = touchEnabled$$1;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Sets the height of the options list. By default, `listHeight` is 200px.
         *
         * > The `listHeight` property affects only the list of options and not the whole popup container.
         * > To set the height of the popup container, use `popupSettings.height`.
         */
        this.listHeight = 200;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         */
        this.readonly = false;
        /**
         * Enables the [filtering]({% slug filtering_ddl %}) functionality of the DropDownList.
         */
        this.filterable = false;
        /**
         * Enables a case-insensitive search. When filtration is disabled, use this option.
         */
        this.ignoreCase = true;
        /**
         * Sets the delay before an item search is performed. When filtration is disabled, use this option.
         */
        this.delay = 500;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Fires each time the value is changed ([see example]({% slug overview_ddl %}#toc-events)).
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the user types in the input field
         * ([see example]({% slug overview_ddl %}#toc-events)).
         * You can filter the source based on the passed filtration value.
         * When the value of the component is programmatically changed to `ngModel` or `formControl`
         * through its API or form binding, the `valueChange` event is not triggered because it
         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires each time the item selection is changed
         * ([see example]({% slug overview_ddl %}#toc-events)).
         */
        this.selectionChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open
         * ([see example]({% slug openstate_ddl %}#toc-preventing-opening-and-closing)).
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close
         * ([see example]({% slug openstate_ddl %}#toc-preventing-opening-and-closing)).
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the DropDownList.
         */
        this.onFocus = new EventEmitter();
        /**
         * Fires each time the DropDownList gets blurred.
         */
        this.onBlur = new EventEmitter();
        this.widgetClasses = true;
        this.groupIndices = [];
        this.listBoxId = guid();
        this.optionPrefix = guid();
        this.filterText = "";
        this._isFocused = false;
        this.onTouchedCallback = (_) => { };
        this.onChangeCallback = (_) => { };
        this.word = "";
        this.last = "";
        this.filterFocused = new EventEmitter();
        this.filterBlurred = new EventEmitter();
        this.wrapperFocused = new EventEmitter();
        this.wrapperBlurred = new EventEmitter();
        this.selectionSubscription = new Subscription();
        this._open = false;
        this._popupSettings = { animate: true };
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.data = [];
        this.subscribeEvents();
        this.popupMouseDownHandler = this.onMouseDown.bind(this);
    }
    get width() {
        const wrapperWidth = isDocumentAvailable() ? this.wrapper.nativeElement.offsetWidth : 0;
        const width = this.popupSettings.width || wrapperWidth;
        const minWidth = isNaN(wrapperWidth) ? wrapperWidth : `${wrapperWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        const popupHeight = this.popupSettings.height;
        return isPresent(popupHeight) ? `${popupHeight}px` : 'auto';
    }
    get widgetTabIndex() {
        if (this.disabled) {
            return undefined;
        }
        const providedTabIndex = Number(this.tabIndex);
        const defaultTabIndex = 0;
        return !isNaN(providedTabIndex) ? providedTabIndex : defaultTabIndex;
    }
    get ariaExpanded() {
        return this.isOpen;
    }
    get ariaOwns() {
        if (!this.isOpen) {
            return;
        }
        return this.listBoxId;
    }
    get ariaActivedescendant() {
        if (!isPresent(this.dataItem)) {
            return;
        }
        return this.optionPrefix + "-" + getter(this.dataItem, this.valueField);
    }
    get noDataLabel() {
        if (this.dataService.itemsCount === 0) {
            return this.noDataText;
        }
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * Sets the data of the DropDownList.
     *
     * > The data has to be provided in an array-like list.
     */
    set data(data) {
        this.dataService.data = data || [];
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        this.setState();
    }
    get data() {
        const virtual = this.virtual;
        if (virtual) {
            const start = virtual.skip || 0;
            const end = start + virtual.pageSize;
            // Use length instead of itemsCount because of the grouping.
            virtual.total = this.dataService.data.length;
            return this.dataService.data.slice(start, end);
        }
        return this.dataService.data;
    }
    /**
     * Sets the value of the DropDownList.
     * It can either be of the primitive (string, numbers) or of the complex (objects) type.
     * To define the type, use the `valuePrimitive` option.
     *
     * > All selected values which are not present in the source are ignored.
     */
    set value(newValue) {
        if (!isPresent(newValue)) {
            this._previousDataItem = undefined;
        }
        this._value = newValue;
        this.setState();
        this.cdr.markForCheck();
    }
    get value() {
        return this._value;
    }
    /**
     * Configures the popup of the DropDownList.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.
     * - `height: Number`&mdash;Sets the height of the popup container.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Defines a Boolean function that is executed for each data item in the component
     * ([see examples]({% slug disableditems_ddl %})). Determines whether the item will be disabled.
     */
    set itemDisabled(fn) {
        if (typeof fn !== 'function') {
            throw new Error(`itemDisabled must be a function, but received ${JSON.stringify(fn)}.`);
        }
        this.disabledItemsService.itemDisabled = fn;
    }
    /**
     * Enables the [virtualization]({% slug virtualization_ddl %}) functionality.
     */
    set virtual(settings) {
        this._virtualSettings = normalizeVirtualizationSettings(settings);
    }
    get virtual() {
        return this._virtualSettings;
    }
    /**
     * Specifies the type of the selected value
     * ([more information and example]({% slug valuebinding_ddl %}#toc-primitive-values-from-object-fields)).
     * If set to `true`, the selected value has to be of a primitive value.
     */
    set valuePrimitive(isPrimitive) {
        this._valuePrimitive = isPrimitive;
    }
    get valuePrimitive() {
        if (!isPresent(this._valuePrimitive)) {
            return !isPresent(this.valueField);
        }
        return this._valuePrimitive;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * @hidden
     */
    blurComponent() {
        this.wrapperBlurred.emit();
    }
    /**
     * @hidden
     */
    blurFilterInput() {
        this.filterBlurred.emit();
    }
    /**
     * @hidden
     */
    focusComponent() {
        this.wrapperFocused.emit();
        if (!this.isFocused) {
            this.isFocused = true;
            if (hasObservers(this.onFocus)) {
                this._zone.run(() => {
                    this.onFocus.emit();
                });
            }
        }
    }
    /**
     * @hidden
     */
    keydown(event) {
        const firstIndex = isPresent(this.defaultItem) ? -1 : 0;
        let focused = isNaN(this.selectionService.focused) ? this.firstFocusableIndex(firstIndex) : this.selectionService.focused;
        let offset = 0;
        if (this.disabled || this.readonly) {
            return;
        }
        const isHomeEnd = event.keyCode === Keys.Home || event.keyCode === Keys.End;
        const isFilterFocused = this.filterable && this.isFocused && this.isOpen;
        if (isFilterFocused && isHomeEnd) {
            return;
        }
        const hasSelected = isPresent(this.selectionService.selected[0]);
        const focusedItemNotSelected = isPresent(this.selectionService.focused) && !this.selectionService.isSelected(this.selectionService.focused);
        if (!hasSelected || focusedItemNotSelected) {
            if (event.keyCode === Keys.ArrowDown || event.keyCode === Keys.ArrowRight) {
                offset = -1;
            }
            else if (event.keyCode === Keys.ArrowUp || event.keyCode === Keys.ArrowLeft) {
                offset = 1;
            }
        }
        const eventData = event;
        const action = this.navigationService.process({
            current: focused + offset,
            max: this.dataService.itemsCount - 1,
            min: this.defaultItem ? -1 : 0,
            originalEvent: eventData
        });
        const leftRightKeys = (action === NavigationAction.Left) || (action === NavigationAction.Right);
        if (action !== NavigationAction.Undefined &&
            action !== NavigationAction.Tab &&
            action !== NavigationAction.Backspace &&
            action !== NavigationAction.Delete &&
            !(leftRightKeys && this.filterable) &&
            action !== NavigationAction.Enter //enter when popup is opened is handled before `handleEnter`
        ) {
            eventData.preventDefault();
        }
    }
    /**
     * @hidden
     */
    keypress(event) {
        if (this.disabled || this.readonly || this.filterable) {
            return;
        }
        this.onKeyPress(event);
    }
    /**
     * @hidden
     */
    click(event) {
        event.preventDefault();
        this.focus();
        this.togglePopup(!this.isOpen);
    }
    /**
     * @hidden
     */
    onResize() {
        if (this._open) {
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    }
    get dir() {
        return this.direction;
    }
    set isFocused(isFocused) {
        this.renderer[isFocused ? 'addClass' : 'removeClass'](this.wrapper.nativeElement, 'k-state-focused');
        this._isFocused = isFocused;
    }
    get isFocused() {
        return this._isFocused;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        this.localizationChangesSubscription = this.localization
            .changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            this.setMessages();
        });
        this.setMessages();
        this.assignAriaDescribedBy();
    }
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty() {
        const value = this.value;
        return !(value === 0 || value === false || value || this.defaultItem);
    }
    /**
     * @hidden
     */
    onFilterFocus() {
        this.filterFocused.emit();
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroyPopup();
        this.unsubscribeEvents();
        clearTimeout(this.messagesTimeout);
        if (this.localizationChangesSubscription) {
            this.localizationChangesSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        const virtual = this.virtual;
        const requestInitialData = virtual && changes.data && changes.data.isFirstChange();
        if (requestInitialData) {
            this.pageChange({ skip: 0, take: virtual.pageSize });
        }
        if (isChanged('defaultItem', changes, false)) {
            this.disabledItemsService.defaultItem = this.defaultItem;
        }
        if (anyChanged(['textField', 'valueField', 'valuePrimitive', 'defaultItem', 'itemDisabled'], changes, false)) {
            this.setState();
        }
    }
    /**
     * @hidden
     */
    ngAfterContentChecked() {
        this.verifySettings();
    }
    /**
     * Focuses the DropDownList.
     */
    focus() {
        if (!this.disabled) {
            this.wrapper.nativeElement.focus();
        }
    }
    /**
     * Blurs the DropDownList.
     */
    blur() {
        if (!this.disabled) {
            this.wrapper.nativeElement.blur();
        }
    }
    /**
     * Toggles the visibility of the popup
     * ([see example]({% slug openstate_ddl %}#toc-setting-the-initially-opened-component)).
     * If you use the `toggle` method to open or close the popup, the `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        // The Promise is required to open the popup on load.
        // Otherwise, the "Expression has changed..." type error will be thrown.
        Promise.resolve(null).then(() => {
            const shouldOpen = isPresent(open) ? open : !this._open;
            this._toggle(shouldOpen);
        });
    }
    _toggle(open) {
        this._open = open;
        this.destroyPopup();
        if (this._open) {
            this.createPopup();
        }
    }
    triggerPopupEvents(open) {
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        return eventArgs.isDefaultPrevented();
    }
    /**
     * @hidden
     */
    togglePopup(open) {
        const isDisabled = this.disabled || this.readonly;
        const sameState = this.isOpen === open;
        if (isDisabled || sameState) {
            return;
        }
        const isDefaultPrevented = this.triggerPopupEvents(open);
        if (!isDefaultPrevented) {
            if (!open && this.filterable && this.isFocused) {
                this.focus();
            }
            this._toggle(open);
        }
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this._open;
    }
    /**
     * Resets the value of the DropDownList.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    reset() {
        this.value = undefined;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.value = value === null ? undefined : value;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    get buttonClasses() {
        return this.loading ? 'k-i-loading' : this.iconClass || 'k-i-arrow-s';
    }
    /**
     * @hidden
     */
    get listContainerClasses() {
        const containerClasses = ['k-list-container', 'k-reset'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    /**
     * @hidden
     */
    get isDisabledDefaultItem() {
        return this.disabledItemsService.isItemDisabled(this.defaultItem);
    }
    /**
     * @hidden
     */
    getText() {
        return this.text;
    }
    /**
     * @hidden
     */
    getDefaultItemText() {
        return getter(this.defaultItem, this.textField);
    }
    createPopup() {
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        const horizontalAlign = this.direction === "rtl" ? "right" : "left";
        const anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        const popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            anchorAlign: anchorPosition,
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            content: this.popupTemplate,
            popupAlign: popupPosition,
            popupClass: this.listContainerClasses,
            positionMode: 'absolute'
        });
        const popupWrapper = this.popupRef.popupElement;
        const { min, max } = this.width;
        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
        popupWrapper.style.minWidth = min;
        popupWrapper.style.width = max;
        popupWrapper.style.height = this.height;
        popupWrapper.setAttribute("dir", this.direction);
        this.popupRef.popupOpen.subscribe(() => {
            this.cdr.detectChanges();
            this.optionsList.scrollToItem(this.selectionService.focused);
        });
        if (!this.filterable) {
            this.popupRef.popupAnchorViewportLeave.subscribe(() => this.togglePopup(false));
        }
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    updateState({ dataItem, confirm = false }) {
        this.dataItem = dataItem;
        this.text = this.prop(this.textField, this.valuePrimitive)(dataItem);
        if (confirm) {
            this._previousDataItem = dataItem;
        }
    }
    clearState() {
        this.text = undefined;
        this.dataItem = undefined;
    }
    resetSelection(index) {
        const clear = !isPresent(index);
        this.selectionService.resetSelection(clear ? [] : [index]);
        this.selectionService.focused = clear ? this.firstFocusableIndex(0) : index;
    }
    onSelectionChange({ dataItem }) {
        this.updateState({ dataItem });
        this.selectionChange.emit(dataItem);
        // reassigning the value label ID as aria-deascibedby forces firefox/nvda, forefox/jaws to read
        // the new value when the popup is closed and the value is changed with the arrow keys (up/down)
        this.assignAriaDescribedBy();
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        // Item selection when the popup is open.
        this.selectionSubscription.add(this.selectionService.onSelect.pipe(filter(_ => this.isOpen), map(this.itemFromEvent.bind(this)))
            .subscribe(this.onSelectionChange.bind(this)));
        // Item selection when the popup is closed | clicked | enter, and so on.
        this.selectionSubscription.add(merge(this.selectionService.onSelect.pipe(filter(_ => !this.isOpen)), this.selectionService.onChange).pipe(map(this.itemFromEvent.bind(this)), tap(_ => this.togglePopup(false)))
            .subscribe(({ dataItem, value: newValue, newSelection }) => {
            if (newSelection) {
                this.onSelectionChange({ dataItem });
            }
            const shouldUsePrevious = !isPresent(dataItem) && this._previousDataItem;
            const shouldUseNewValue = newValue !== this.prop(this.valueField, this.valuePrimitive)(this.value);
            if (shouldUsePrevious) {
                this.updateState({ dataItem: this._previousDataItem });
                this.resetSelection();
            }
            else if (shouldUseNewValue) {
                this.value = this.valuePrimitive ? newValue : dataItem;
                this._previousDataItem = dataItem;
                this.emitChange(this.value);
            }
            this.clearFilter();
        }));
        this.navigationSubscription = merge(this.navigationService.up, this.navigationService.down, this.navigationService.left.pipe(skipWhile(() => this.filterable)), this.navigationService.right.pipe(skipWhile(() => this.filterable)), this.navigationService.home, this.navigationService.end)
            .pipe(filter((event) => !isNaN(event.index)))
            .subscribe((event) => this.selectionService.select(event.index));
        this.openSubscription = this.navigationService.open.subscribe(() => this.togglePopup(true));
        this.closeSubscription = this.navigationService.close.subscribe(() => {
            this.togglePopup(false);
            this.focus();
        });
        this.enterSubscription = this.navigationService.enter
            .pipe(tap((event) => event.originalEvent.preventDefault()))
            .subscribe(this.handleEnter.bind(this));
        this.escSubscription = this.navigationService.esc
            .subscribe(this.handleEscape.bind(this));
        this.filterBlurredSubscription = this.filterBlurred.pipe(concatMap(() => interval(10).pipe(take(1), takeUntil(this.wrapperFocused))))
            .subscribe(() => {
            this.wrapperBlurred.emit();
        });
        this._zone.runOutsideAngular(() => {
            this.componentBlurredSubscription =
                merge(this.wrapperBlurred.pipe(concatMap(() => interval(10).pipe(take(1), takeUntil(this.filterFocused)))), this.navigationService.tab).pipe(tap(event => event instanceof NavigationEvent && this.focus()), filter(() => this.isFocused))
                    .subscribe(() => this.componentBlur());
        });
    }
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.navigationSubscription.unsubscribe();
        this.openSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
        this.enterSubscription.unsubscribe();
        this.escSubscription.unsubscribe();
        this.componentBlurredSubscription.unsubscribe();
        this.filterBlurredSubscription.unsubscribe();
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
    }
    itemFromEvent(event) {
        const index = event.indices[0];
        let dataItem = this.dataService.itemAt(index);
        dataItem = isPresent(dataItem) ? dataItem : this.currentOrDefault(index);
        const value = this.prop(this.valueField, this.valuePrimitive)(dataItem);
        const newSelection = event.newSelection;
        return {
            dataItem,
            index,
            newSelection,
            value
        };
    }
    currentOrDefault(selectedIndex) {
        const defaultItemIndex = -1;
        if (isPresent(this.dataItem) && selectedIndex !== defaultItemIndex) {
            return this.dataItem;
        }
        else {
            return this.defaultItem;
        }
    }
    firstFocusableIndex(index) {
        const maxIndex = this.dataService.itemsCount - 1;
        if (this.disabledItemsService.isIndexDisabled(index)) {
            return (index < maxIndex) ? this.firstFocusableIndex(index + 1) : undefined;
        }
        else {
            return index;
        }
    }
    handleEnter() {
        if (this.isOpen) {
            this.selectionService.change(this.selectionService.focused);
            this.focus();
        }
        else {
            this.togglePopup(true);
        }
    }
    handleEscape() {
        if (isPresent(this.selectionService.selected[0])) {
            this.selectionService.change(this.selectionService.selected[0]);
        }
        else {
            this.togglePopup(false);
            this.clearFilter();
        }
        this.focus();
    }
    clearFilter() {
        if (!(this.filterable && this.filterText)) {
            return;
        }
        this.filterText = "";
        this.cdr.markForCheck();
        this.filterChange.emit(this.filterText);
    }
    verifySettings() {
        if (!isDevMode()) {
            return;
        }
        if (this.defaultItem && this.valueField && typeof this.defaultItem !== "object") {
            throw new Error(DropDownListMessages.defaultItem);
        }
        if (this.valuePrimitive === true && isPresent(this.value) && typeof this.value === "object") {
            throw new Error(DropDownListMessages.primitive);
        }
        if (this.valuePrimitive === false && isPresent(this.value) && typeof this.value !== "object") {
            throw new Error(DropDownListMessages.object);
        }
        const valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);
        if (valueOrText) {
            throw new Error(DropDownListMessages.textAndValue);
        }
    }
    componentBlur() {
        this.isFocused = false;
        const valueFrom = this.prop(this.valueField, this.valuePrimitive);
        const selectionPresent = isPresent(this.selectionService.selected[0]);
        const valueHasChanged = selectionPresent && valueFrom(this.value) !== valueFrom(this.dataService.itemAt(this.selectionService.selected[0]));
        if (valueHasChanged ||
            hasObservers(this.close) ||
            hasObservers(this.onBlur) ||
            hasObservers(this.filterChange) ||
            isUntouched(this.hostElement.nativeElement)) {
            this._zone.run(() => {
                if (valueHasChanged) {
                    this.selectionService.change(this.selectionService.selected[0]);
                }
                this.togglePopup(false);
                this.clearFilter();
                this.onBlur.emit();
                this.onTouchedCallback();
            });
        }
        else {
            this.togglePopup(false);
        }
    }
    /**
     * @hidden
     */
    onMouseDown(event) {
        const tagName = event.target.tagName.toLowerCase();
        if (tagName !== "input") {
            event.preventDefault();
        }
    }
    onKeyPress(event) {
        if (event.which === 0 || event.keyCode === Keys.Enter) {
            return;
        }
        let character = String.fromCharCode(event.charCode || event.keyCode);
        if (this.ignoreCase) {
            character = character.toLowerCase();
        }
        if (character === " ") {
            event.preventDefault();
        }
        this.word += character;
        this.last = character;
        this.search();
    }
    search() {
        clearTimeout(this.typingTimeout);
        if (!this.filterable) {
            this.typingTimeout = setTimeout(() => { this.word = ""; }, this.delay);
            this.selectNext();
        }
    }
    selectNext() {
        let data = this.dataService
            .filter((item) => isPresent(item) && !item.header && !this.disabledItemsService.isItemDisabled(item))
            .map((item) => {
            if (this.dataService.grouped) {
                return { item: item.value, itemIndex: item.offsetIndex };
            }
            return { item: item, itemIndex: this.dataService.indexOf(item) };
        });
        const isInLoop = sameCharsOnly(this.word, this.last);
        let dataLength = data.length;
        let hasSelected = !isNaN(this.selectionService.selected[0]);
        let startIndex = !hasSelected ? 0 : this.selectionService.selected[0];
        let text, index, defaultItem;
        if (this.defaultItem && !this.disabledItemsService.isItemDisabled(this.defaultItem)) {
            defaultItem = { item: this.defaultItem, itemIndex: -1 };
            dataLength += 1;
            startIndex += 1;
        }
        startIndex += isInLoop && hasSelected ? 1 : 0;
        data = shuffleData(data, startIndex, defaultItem);
        index = 0;
        for (; index < dataLength; index++) {
            text = getter(data[index].item, this.textField);
            const loopMatch = Boolean(isInLoop && matchText(text, this.last, this.ignoreCase));
            const nextMatch = Boolean(matchText(text, this.word, this.ignoreCase));
            if (loopMatch || nextMatch) {
                index = data[index].itemIndex;
                break;
            }
        }
        if (index !== dataLength) {
            this.navigate(index);
        }
    }
    emitChange(value) {
        this.onChangeCallback(value);
        this.valueChange.emit(value);
    }
    navigate(index) {
        this.selectionService.select(index);
    }
    prop(field, usePrimitive) {
        return (dataItem) => {
            if (isPresent(dataItem)) {
                if (usePrimitive) {
                    return field && isObject(dataItem) ? dataItem[field] : dataItem;
                }
                else {
                    return dataItem[field];
                }
            }
            return null;
        };
    }
    findDataItem({ primitive, valueField, value }) {
        const result = {
            dataItem: null,
            index: -1
        };
        const prop = this.prop(valueField, primitive);
        let comparer;
        if (this.dataService.grouped) {
            comparer = (element) => {
                return prop(element.value) === prop(value);
            };
        }
        else {
            comparer = (element) => {
                return prop(element) === prop(value);
            };
        }
        const index = this.dataService.findIndex(comparer);
        result.dataItem = this.dataService.itemAt(index);
        result.index = index;
        return result;
    }
    setState() {
        const value = this.value;
        const valueField = this.valueField;
        const textField = this.textField;
        const primitive = this.valuePrimitive;
        if (this.defaultItem) {
            const defaultValue = this.prop(valueField, primitive)(this.defaultItem);
            const currentValue = this.prop(valueField, primitive)(value);
            if (!isPresent(value) || (currentValue === defaultValue)) {
                this.updateState({ dataItem: this.defaultItem, confirm: true });
                this.resetSelection(-1);
                if (this.filterable && this.filterText && this.dataService.itemsCount) {
                    this.selectionService.focused = this.firstFocusableIndex(0);
                }
                return;
            }
        }
        const resolved = this.findDataItem({ primitive, valueField, value });
        // The data and value are of same shape,
        // for example, value: 'foo', data: ['foo', 'bar']
        // or value: { value: 1, text: 'foo' }, data: [{ value: 1, text: 'foo' }].
        const ofSameType = !(primitive && textField);
        if (resolved.dataItem) {
            this.updateState({ dataItem: resolved.dataItem, confirm: true });
            this.resetSelection(resolved.index);
        }
        else if (isPresent(value) && ofSameType) {
            this.updateState({ dataItem: value });
            this.resetSelection();
        }
        else if (this._previousDataItem) {
            this.updateState({ dataItem: this._previousDataItem });
            this.resetSelection();
        }
        else {
            this.clearState();
            this.resetSelection();
        }
    }
    /**
     * @hidden
     */
    handleFilter(event) {
        this.filterChange.emit(event.target.value);
    }
    /**
     * @hidden
     */
    pageChange(event) {
        const virtual = this.virtual;
        virtual.skip = event.skip;
    }
    setMessages() {
        this._zone.runOutsideAngular(() => {
            clearTimeout(this.messagesTimeout);
            this.messagesTimeout = setTimeout(() => {
                this.noDataText = this.localization.get('noDataText');
                this.cdr.detectChanges();
            });
        });
    }
    assignAriaDescribedBy() {
        const currentValue = this.wrapper.nativeElement.getAttribute('aria-describedby') || '';
        const trimmed = currentValue.replace(this.valueLabelId, '').trim();
        // reset the value label ID to force readers to read the new value
        this.valueLabelId = guid();
        // add to the current value - don't replace it
        const newValue = `${this.valueLabelId} ${trimmed}`.trim();
        this.renderer.setAttribute(this.wrapper.nativeElement, 'aria-describedby', newValue);
    }
}
DropDownListComponent.ɵfac = function DropDownListComponent_Factory(t) { return new (t || DropDownListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.PopupService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(DisabledItemsService), ɵngcc0.ɵɵdirectiveInject(DataService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TOUCH_ENABLED, 8)); };
DropDownListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropDownListComponent, selectors: [["kendo-dropdownlist"]], contentQueries: function DropDownListComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ItemTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GroupTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FixedGroupTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ValueTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NoDataTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fixedGroupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.valueTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noDataTemplate = _t.first);
    } }, viewQuery: function DropDownListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c10, true, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c11, true);
        ɵngcc0.ɵɵstaticViewQuery(_c19, true);
        ɵngcc0.ɵɵviewQuery(_c12, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionsList = _t.first);
    } }, hostVars: 7, hostBindings: function DropDownListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.widgetClasses)("k-dropdown", ctx.widgetClasses)("k-header", ctx.widgetClasses);
    } }, inputs: { focusableId: "focusableId", listHeight: "listHeight", disabled: "disabled", readonly: "readonly", filterable: "filterable", ignoreCase: "ignoreCase", delay: "delay", tabindex: "tabindex", data: "data", value: "value", popupSettings: "popupSettings", itemDisabled: "itemDisabled", virtual: "virtual", valuePrimitive: "valuePrimitive", tabIndex: "tabIndex", iconClass: "iconClass", loading: "loading", textField: "textField", valueField: "valueField", defaultItem: "defaultItem" }, outputs: { valueChange: "valueChange", filterChange: "filterChange", selectionChange: "selectionChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur" }, exportAs: ["kendoDropDownList"], features: [ɵngcc0.ɵɵProvidersFeature([
            DROPDOWNLIST_VALUE_ACCESSOR,
            DataService,
            SelectionService,
            NavigationService,
            DisabledItemsService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.dropdownlist'
            },
            {
                provide: FilterableDropDownComponentBase, useExisting: forwardRef(() => DropDownListComponent)
            },
            {
                provide: KendoInput, useExisting: forwardRef(() => DropDownListComponent)
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 14, vars: 24, consts: [["kendoDropDownListLocalizedMessages", "", 6, "noDataText"], ["unselectable", "on", "role", "listbox", "aria-haspopup", "listbox", 3, "id", "ngClass", "kendoEventsOutsideAngular", "scope", "keydown", "keypress", "click"], ["wrapper", ""], ["unselectable", "on", 1, "k-input", 3, "id"], [4, "ngIf"], [3, "ngIf"], ["unselectable", "on", 1, "k-select"], ["unselectable", "on", 1, "k-icon", 3, "ngClass"], ["popupTemplate", ""], ["container", ""], [3, "templateContext"], [3, "id", "optionPrefix", "data", "textField", "valueField", "template", "groupTemplate", "fixedGroupTemplate", "height", "show", "virtual", "pageChange"], ["optionsList", ""], ["class", "k-nodata", 4, "ngIf"], [1, "k-list-filter", 3, "click"], ["tabindex", "-1", 1, "k-textbox", 3, "filterInput", "dir", "ngModel", "ngModelChange", "keydown", "input", "focus", "blur"], ["unselectable", "on", 1, "k-icon", "k-i-search"], ["kendoDropDownsSelectable", "", 1, "k-list-optionlabel", 3, "ngClass", "index"], [1, "k-nodata"], [3, "ngIf", "templateContext"], [3, "resize"]], template: function DropDownListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵi18nAttributes(1, _c28);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(2, "span", 1, 2);
        ɵngcc0.ɵɵlistener("keydown", function DropDownListComponent_Template_span_keydown_2_listener($event) { return ctx.keydown($event); })("keypress", function DropDownListComponent_Template_span_keypress_2_listener($event) { return ctx.keypress($event); })("click", function DropDownListComponent_Template_span_click_2_listener($event) { return ctx.click($event); });
        ɵngcc0.ɵɵelementStart(4, "span", 3);
        ɵngcc0.ɵɵtemplate(5, DropDownListComponent_5_Template, 1, 4, undefined, 4);
        ɵngcc0.ɵɵtemplate(6, DropDownListComponent_ng_template_6_Template, 1, 1, "ng-template", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "span", 6);
        ɵngcc0.ɵɵelement(8, "span", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, DropDownListComponent_ng_template_9_Template, 8, 17, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, DropDownListComponent_ng_template_11_Template, 1, 0, "ng-template", 5);
        ɵngcc0.ɵɵelementContainer(12, null, 9);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("ngClass", ɵngcc0.ɵɵpureFunction2(18, _c30, !ctx.disabled, ctx.disabled))("kendoEventsOutsideAngular", ɵngcc0.ɵɵpureFunction2(21, _c1, ctx.focusComponent, ctx.blurComponent))("scope", ctx);
        ɵngcc0.ɵɵattribute("dir", ctx.direction)("readonly", ctx.readonly)("tabindex", ctx.widgetTabIndex)("aria-disabled", ctx.disabled)("aria-readonly", ctx.readonly)("aria-expanded", ctx.ariaExpanded)("aria-owns", ctx.ariaOwns)("aria-activedescendant", ctx.ariaActivedescendant)("aria-label", ctx.noDataLabel);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.valueLabelId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.valueTemplate);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.valueTemplate);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngClass", ctx.buttonClasses);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpen);
    } }, directives: function () { return [LocalizedMessagesDirective, ɵngcc3.NgClass, ɵngcc2.EventsOutsideAngularDirective, ɵngcc3.NgIf, TemplateContextDirective,
        ListComponent, ɵngcc5.DefaultValueAccessor, FilterInputDirective, ɵngcc5.NgControlStatus, ɵngcc5.NgModel, SelectableDirective, ɵngcc2.ResizeSensorComponent]; }, encapsulation: 2 });
/** @nocollapse */
DropDownListComponent.ctorParameters = () => [
    { type: LocalizationService },
    { type: PopupService },
    { type: SelectionService },
    { type: NavigationService },
    { type: DisabledItemsService },
    { type: DataService },
    { type: NgZone },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }
];
DropDownListComponent.propDecorators = {
    focusableId: [{ type: Input }],
    iconClass: [{ type: Input }],
    loading: [{ type: Input }],
    data: [{ type: Input }],
    value: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    popupSettings: [{ type: Input }],
    listHeight: [{ type: Input }],
    defaultItem: [{ type: Input }],
    disabled: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    readonly: [{ type: Input }],
    filterable: [{ type: Input }],
    virtual: [{ type: Input }],
    ignoreCase: [{ type: Input }],
    delay: [{ type: Input }],
    valuePrimitive: [{ type: Input }],
    tabindex: [{ type: Input }],
    tabIndex: [{ type: Input, args: ["tabIndex",] }],
    valueChange: [{ type: Output }],
    filterChange: [{ type: Output }],
    selectionChange: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    onFocus: [{ type: Output, args: ['focus',] }],
    onBlur: [{ type: Output, args: ['blur',] }],
    itemTemplate: [{ type: ContentChild, args: [ItemTemplateDirective,] }],
    groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],
    fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],
    valueTemplate: [{ type: ContentChild, args: [ValueTemplateDirective,] }],
    headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],
    footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],
    noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    wrapper: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
    optionsList: [{ type: ViewChild, args: ['optionsList',] }],
    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-dropdown',] }, { type: HostBinding, args: ['class.k-header',] }],
    dir: [{ type: HostBinding, args: ['attr.dir',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownListComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoDropDownList',
                providers: [
                    DROPDOWNLIST_VALUE_ACCESSOR,
                    DataService,
                    SelectionService,
                    NavigationService,
                    DisabledItemsService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.dropdownlist'
                    },
                    {
                        provide: FilterableDropDownComponentBase, useExisting: forwardRef(() => DropDownListComponent)
                    },
                    {
                        provide: KendoInput, useExisting: forwardRef(() => DropDownListComponent)
                    }
                ],
                selector: 'kendo-dropdownlist',
                template: `
        <ng-container kendoDropDownListLocalizedMessages
            i18n-noDataText="kendo.dropdownlist.noDataText|The text displayed in the popup when there are no items"
            noDataText="NO DATA FOUND"
        >
        </ng-container>
        <span #wrapper unselectable="on"
          role="listbox"
          [id]="focusableId"
          [ngClass]="{
            'k-dropdown-wrap': true,
            'k-state-default': !this.disabled,
            'k-state-disabled': this.disabled
          }"
          [attr.dir]="direction"
          [attr.readonly]="readonly"
          [attr.tabindex]="widgetTabIndex"
          [attr.aria-disabled]="disabled"
          [attr.aria-readonly]="readonly"
          aria-haspopup="listbox"
          [attr.aria-expanded]="ariaExpanded"
          [attr.aria-owns]="ariaOwns"
          [attr.aria-activedescendant]="ariaActivedescendant"
          [attr.aria-label]="noDataLabel"
          (keydown)="keydown($event)"
          (keypress)="keypress($event)"
          (click)="click($event)"
          [kendoEventsOutsideAngular]="{
            focus: focusComponent,
            blur: blurComponent
            }"
          [scope]="this"
        >
            <span class="k-input" unselectable="on" [id]="valueLabelId">
               <ng-template *ngIf="valueTemplate"
                   [templateContext]="{
                       templateRef: valueTemplate.templateRef,
                       $implicit: dataItem
                   }">
               </ng-template>
               <ng-template [ngIf]="!valueTemplate">{{ getText() }}</ng-template>
           </span>
           <span class="k-select" unselectable="on">
               <span
                    class="k-icon"
                    unselectable="on"
                    [ngClass]="buttonClasses"
                >
                </span>
           </span>
           <ng-template #popupTemplate>
               <!--filterable-->

               <ng-template [ngIf]="filterable">
                   <span class="k-list-filter" (click)="$event.stopImmediatePropagation()">
                       <input
                           [attr.aria-owns]="ariaOwns"
                           [attr.aria-activedescendant]="ariaActivedescendant"
                           [attr.aria-label]="noDataLabel"
                           tabindex="-1"
                           [filterInput]="isFocused && !touchEnabled"
                           [dir]="direction"
                           [(ngModel)]="filterText"
                           class="k-textbox"
                           (keydown)="keydown($event)"
                           (input)="handleFilter($event)"
                           (focus)="onFilterFocus()"
                           (blur)="blurFilterInput()" />
                       <span class="k-icon k-i-search" unselectable="on"></span>
                   </span>
               </ng-template>
               <!--default item-->
               <ng-template [ngIf]="defaultItem && !itemTemplate">
                   <div class="k-list-optionlabel" [ngClass]="{ 'k-state-disabled': isDisabledDefaultItem }" kendoDropDownsSelectable [index]="-1">
                       {{ getDefaultItemText() }}
                   </div>
               </ng-template>
               <ng-template [ngIf]="defaultItem && itemTemplate">
                   <div class="k-list-optionlabel" [ngClass]="{ 'k-state-disabled': isDisabledDefaultItem }" kendoDropDownsSelectable [index]="-1">
                       <ng-template
                           [templateContext]="{
                               templateRef: itemTemplate.templateRef,
                               $implicit: defaultItem
                           }">
                       </ng-template>
                   </div>
               </ng-template>
               <!--header template-->
               <ng-template *ngIf="headerTemplate"
                   [templateContext]="{
                       templateRef: headerTemplate.templateRef
                   }">
               </ng-template>
               <!--list-->
               <kendo-list
                   #optionsList
                   [id]="listBoxId"
                   [optionPrefix]="optionPrefix"
                   [data]="data"
                   [textField]="textField"
                   [valueField]="valueField"
                   [template]="itemTemplate"
                   [groupTemplate]="groupTemplate"
                   [fixedGroupTemplate]="fixedGroupTemplate"
                   [height]="listHeight"
                   [show]="isOpen"
                   [virtual]="virtual"
                   (pageChange)="pageChange($event)"
                   >
               </kendo-list>
               <!--no-data template-->
               <div class="k-nodata" *ngIf="data.length === 0">
                   <ng-template [ngIf]="noDataTemplate"
                       [templateContext]="{
                           templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined
                       }">
                   </ng-template>
                   <ng-template [ngIf]="!noDataTemplate">
                       <div>{{ noDataText }}</div>
                   </ng-template>
               </div>
               <!--footer template-->
               <ng-template *ngIf="footerTemplate"
                   [templateContext]="{
                       templateRef: footerTemplate.templateRef
                   }">
               </ng-template>
            </ng-template>
        </span>
        <ng-template [ngIf]="isOpen">
            <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
        </ng-template>
        <ng-container #container></ng-container>
  `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }, { type: ɵngcc4.PopupService }, { type: SelectionService }, { type: NavigationService }, { type: DisabledItemsService }, { type: DataService }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TOUCH_ENABLED]
            }] }]; }, { focusableId: [{
            type: Input
        }], listHeight: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], filterable: [{
            type: Input
        }], ignoreCase: [{
            type: Input
        }], delay: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], selectionChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-dropdown']
        }, {
            type: HostBinding,
            args: ['class.k-header']
        }], data: [{
            type: Input
        }], value: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], itemDisabled: [{
            type: Input
        }], virtual: [{
            type: Input
        }], valuePrimitive: [{
            type: Input
        }], tabIndex: [{
            type: Input,
            args: ["tabIndex"]
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], iconClass: [{
            type: Input
        }], loading: [{
            type: Input
        }], textField: [{
            type: Input
        }], valueField: [{
            type: Input
        }], defaultItem: [{
            type: Input
        }], itemTemplate: [{
            type: ContentChild,
            args: [ItemTemplateDirective]
        }], groupTemplate: [{
            type: ContentChild,
            args: [GroupTemplateDirective]
        }], fixedGroupTemplate: [{
            type: ContentChild,
            args: [FixedGroupTemplateDirective]
        }], valueTemplate: [{
            type: ContentChild,
            args: [ValueTemplateDirective]
        }], headerTemplate: [{
            type: ContentChild,
            args: [HeaderTemplateDirective]
        }], footerTemplate: [{
            type: ContentChild,
            args: [FooterTemplateDirective]
        }], noDataTemplate: [{
            type: ContentChild,
            args: [NoDataTemplateDirective]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate']
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }], optionsList: [{
            type: ViewChild,
            args: ['optionsList']
        }] }); })();

/* tslint:disable:max-line-length */
/**
 * Renders the content of the custom list item in the MultiSelect
 * ([see example]({% slug templates_multiselect %}#toc-customizing-the-item-content)).
 * The template context is set to the current component.
 * To get a reference to the current text that is typed by the
 * user, use the `let-customItem` directive.
 *
 * > The `CustomItemTemplate` directive can only be used with the MultiSelect component.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiselect [data]="listItems" [allowCustom]="true">
 *    <ng-template kendoMultiSelectCustomItemTemplate let-customItem>
 *      <span>New Item: {{customItem}}</span>
 *    </ng-template>
 *  </kendo-multiselect>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 *
 */
class CustomItemTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
CustomItemTemplateDirective.ɵfac = function CustomItemTemplateDirective_Factory(t) { return new (t || CustomItemTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
CustomItemTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CustomItemTemplateDirective, selectors: [["", "kendoMultiSelectCustomItemTemplate", ""]] });
/** @nocollapse */
CustomItemTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomItemTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoMultiSelectCustomItemTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders the selected tag value of the MultiSelect
 * ([see example]({% slug templates_multiselect %}#toc-tag-template)).
 * The template context is set to the current component.
 * To get a reference to the current data item, use the `let-dataItem` directive.
 *
 * > The `TagTemplate` directive can only be used with the MultiSelect component.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiselect [data]="items">
 *    <ng-template kendoMultiSelectTagTemplate let-dataItem>
 *      <span>{{dataItem}} option</span>
 *    </ng-template>
 *  </kendo-multiselect>
 * `
 * })
 * class AppComponent {
 *   public items: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class TagTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
TagTemplateDirective.ɵfac = function TagTemplateDirective_Factory(t) { return new (t || TagTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
TagTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TagTemplateDirective, selectors: [["", "kendoMultiSelectTagTemplate", ""]] });
/** @nocollapse */
TagTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoMultiSelectTagTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/* tslint:disable:max-line-length */
/**
 * Renders the grouped tag values in the MultiSelect
 * ([see example]({% slug summarytagmode_multiselect %})).
 * The template context is set to the current component.
 * To get a reference to the current grouped
 * data items collection, use the `let-dataItems` directive.
 *
 * > The `GroupTagTemplate` directive can only be used with the MultiSelect component.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiselect kendoMultiSelectSummaryTag [data]="items">
 *    <ng-template kendoMultiSelectGroupTagTemplate let-dataItems>
 *      <span>{{dataItems.length}} item(s) selected</span>
 *    </ng-template>
 *  </kendo-multiselect>
 * `
 * })
 * class AppComponent {
 *   public items: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class GroupTagTemplateDirective {
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
GroupTagTemplateDirective.ɵfac = function GroupTagTemplateDirective_Factory(t) { return new (t || GroupTagTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
GroupTagTemplateDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GroupTagTemplateDirective, selectors: [["", "kendoMultiSelectGroupTagTemplate", ""]] });
/** @nocollapse */
GroupTagTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GroupTagTemplateDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoMultiSelectGroupTagTemplate]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();

/**
 * Arguments for the `removeTag` event. The `removeTag` event fires when a tag is about
 * to the removed. If you cancel the event, the removal is prevented.
 */
class RemoveTagEvent extends PreventableEvent {
    /**
     * Constructs the event arguments for the `remove` event.
     * @param dataItem - The data item or an array of data items that will be removed.
     */
    constructor(dataItem) {
        super();
        this.dataItem = dataItem;
    }
}

/* tslint:disable:member-ordering */
const MULTISELECT_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    // tslint:disable-next-line:no-use-before-declare
    useExisting: forwardRef(() => MultiSelectComponent)
};
/**
 * Represents the [Kendo UI MultiSelect component for Angular]({% slug overview_multiselect %}).
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-multiselect [data]="listItems">
 *  </kendo-multiselect>
 * `
 * })
 * class AppComponent {
 *   public listItems: Array<string> = ["Item 1", "Item 2", "Item 3", "Item 4"];
 * }
 * ```
 */
class MultiSelectComponent {
    constructor(localization, popupService, dataService, selectionService, navigationService, disabledItemsService, cdr, differs, renderer, hostElement, _zone, touchEnabled$$1) {
        this.localization = localization;
        this.popupService = popupService;
        this.dataService = dataService;
        this.selectionService = selectionService;
        this.navigationService = navigationService;
        this.disabledItemsService = disabledItemsService;
        this.cdr = cdr;
        this.differs = differs;
        this.renderer = renderer;
        this.hostElement = hostElement;
        this._zone = _zone;
        this.touchEnabled = touchEnabled$$1;
        this.listBoxId = guid();
        this.tagListId = guid();
        this.tagPrefix = "tag-" + guid();
        this.optionPrefix = "option-" + guid();
        this.focusedTagIndex = undefined;
        /**
         * @hidden
         */
        this.focusableId = `k-${guid()}`;
        /**
         * Determines whether to close the options list of the MultiSelect after the item selection is finished
         * ([see example]({% slug openstate_multiselect %}#toc-keeping-the-options-list-open-while-on-focus)).
         * @default true
         */
        this.autoClose = true;
        /**
         * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
         */
        this.tabindex = 0;
        /**
         * Sets the disabled state of the component.
         */
        this.disabled = false;
        /**
         * Sets the read-only state of the component.
         */
        this.readonly = false;
        /**
         * Enables the [filtering]({% slug filtering_multiselect %}) functionality of the MultiSelect.
         */
        this.filterable = false;
        /**
         * Sets the height of the suggestions list. By default, `listHeight` is 200px.
         *
         * > The `listHeight` property affects only the list of suggestions and not the whole popup container.
         * > To set the height of the popup container, use `popupSettings.height`.
         */
        this.listHeight = 200;
        /**
         * If set to `true`, renders a button on hovering over the component.
         * Clicking this button resets the value of the component to an empty array and triggers the `change` event.
         */
        this.clearButton = true;
        /**
         * A user-defined callback function which receives an array of selected data items and maps them to an array of tags.
         *
         * @param { Any[] } dataItems - The selected data items from the list.
         * @returns { Any[] } - The tags that will be rendered by the component.
         */
        this.tagMapper = (tags) => tags || [];
        /**
         * Specifies whether the MultiSelect allows user-defined values that are not present in the dataset
         * ([more information and examples]({% slug custom_values_multiselect %})).
         * Defaults to `false`.
         */
        this.allowCustom = false;
        /**
         * A user-defined callback function which returns normalized custom values.
         * Typically used when the data items are different from type `string`.
         *
         * @param { Any } value - The custom value that is defined by the user.
         * @returns { Any }
         *
         * @example
         * ```ts
         * import { map } from 'rxjs/operators';
         *
         * _@Component({
         * selector: 'my-app',
         * template: `
         *   <kendo-multiselect
         *       [allowCustom]="true"
         *       [data]="listItems"
         *       [textField]="'text'"
         *       [valueField]="'value'"
         *       [valueNormalizer]="valueNormalizer"
         *       (valueChange)="onValueChange($event)"
         *   >
         *   </kendo-multiselect>
         * `
         * })
         *
         * class AppComponent {
         *   public listItems: Array<{ text: string, value: number }> = [
         *       { text: "Small", value: 1 },
         *       { text: "Medium", value: 2 },
         *       { text: "Large", value: 3 }
         *   ];
         *
         *   public onValueChange(value) {
         *       console.log("valueChange : ", value);
         *   }
         *
         *   public valueNormalizer = (text$: Observable<string>) => text$.pipe(map((text: string) => {
         *      return {
         *         value: Math.floor(Math.random() * (1000 - 100) + 1000), //generate unique valueField
         *         text: text };
         *   }));
         *
         * }
         * ```
         */
        this.valueNormalizer = (text) => text.pipe(map((userInput) => {
            const comparer = (item) => typeof item === 'string' && userInput.toLowerCase() === item.toLowerCase();
            const matchingValue = this.value.find(comparer);
            if (matchingValue) {
                return matchingValue;
            }
            const matchingItem = this.dataService.find(comparer);
            return matchingItem ? matchingItem : userInput;
        }));
        /**
         * Fires each time the user types in the input field.
         * You can filter the source based on the passed filtration value.
         */
        this.filterChange = new EventEmitter();
        /**
         * Fires each time the value is changed&mdash;
         * when the component is blurred or the value is cleared through the **Clear** button
         * ([see example]({% slug overview_multiselect %}#toc-events)).
         * When the value of the component is programmatically changed to `ngModel` or `formControl`
         * through its API or form binding, the `valueChange` event is not triggered because it
         * might cause a mix-up with the built-in `valueChange` mechanisms of the `ngModel` or `formControl` bindings.
         */
        this.valueChange = new EventEmitter();
        /**
         * Fires each time the popup is about to open
         * ([see example]({% slug openstate_multiselect %}#toc-preventing-opening-and-closing)).
         * This event is preventable. If you cancel it, the popup will remain closed.
         */
        this.open = new EventEmitter();
        /**
         * Fires each time the popup is about to close
         * ([see example]({% slug openstate_multiselect %}#toc-preventing-opening-and-closing)).
         * This event is preventable. If you cancel it, the popup will remain open.
         */
        this.close = new EventEmitter();
        /**
         * Fires each time the user focuses the MultiSelect.
         */
        this.onFocus = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time the MultiSelect gets blurred.
         */
        this.onBlur = new EventEmitter(); //tslint:disable-line:no-output-rename
        /**
         * Fires each time a tag is about to be removed.
         * This event is preventable. If you cancel it, the tag will not be removed.
         */
        this.removeTag = new EventEmitter();
        this.widgetClasses = true;
        this.initialized = false;
        this.onChangeCallback = (_) => { };
        this.onTouchedCallback = (_) => { };
        this._placeholder = '';
        this._open = false;
        this._value = [];
        this._popupSettings = { animate: true };
        this._isFocused = false;
        this.selectedDataItems = [];
        this.customValueSubject = new Subject();
        this.observableSubscriptions = new Subscription();
        this.popupMouseDownHandler = this.onMouseDown.bind(this);
        this.data = [];
        this.direction = this.localization.rtl ? 'rtl' : 'ltr';
        this.subscribeEvents();
    }
    /**
     * Focuses the MultiSelect.
     */
    focus() {
        if (!this.disabled) {
            this.searchbar.focus();
        }
    }
    /**
     * @hidden
     */
    onSearchBarFocus() {
        if (!this.isFocused) {
            this.isFocused = true;
            if (hasObservers(this.onFocus)) {
                this._zone.run(() => {
                    this.onFocus.emit();
                });
            }
        }
    }
    /**
     * Blurs the MultiSelect.
     */
    blur() {
        if (!this.disabled) {
            this.searchbar.blur();
        }
    }
    /**
     * @hidden
     */
    onSearchBarBlur() {
        if (!this.isFocused) {
            return;
        }
        this.isFocused = false;
        if (hasObservers(this.onBlur) ||
            hasObservers(this.filterChange) ||
            hasObservers(this.close) ||
            isUntouched(this.hostElement.nativeElement)) {
            this._zone.run(() => {
                this.closePopup();
                if (!(this.isOpen && this.allowCustom)) {
                    this.clearFilter();
                }
                this.onBlur.emit();
                this.onTouchedCallback();
            });
        }
        else {
            if (!this.allowCustom) {
                this.clearFilter();
            }
            this.closePopup();
        }
    }
    /**
     * @hidden
     */
    wrapperMousedown(event) {
        const inputElement = this.searchbar.input.nativeElement;
        if (event.button === 0) {
            if (this.isFocused && this.isOpen && event.target === inputElement) {
                return;
            }
            if (!this.touchEnabled || (this.touchEnabled && event.target.tagName !== 'SPAN')) {
                this.searchbar.focus();
            }
            this.togglePopup(!this.isOpen);
            event.preventDefault();
        }
    }
    /**
     * @hidden
     */
    onMouseDown(event) {
        event.preventDefault();
    }
    /**
     * @hidden
     */
    onResize() {
        if (this._open) {
            const popupWrapper = this.popupRef.popupElement;
            const { min, max } = this.width;
            popupWrapper.style.minWidth = min;
            popupWrapper.style.width = max;
        }
    }
    get appendTo() {
        const { appendTo } = this.popupSettings;
        if (!appendTo || appendTo === 'root') {
            return undefined;
        }
        return appendTo === 'component' ? this.container : appendTo;
    }
    /**
     * Sets the data of the MultiSelect.
     *
     * > The data has to be provided in an array-like list of items.
     */
    set data(data) {
        this.dataService.data = data || [];
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        if (this.initialized) {
            this.setState(this.value);
        }
    }
    get data() {
        const virtual = this.virtual;
        if (virtual) {
            const start = virtual.skip || 0;
            const end = start + virtual.pageSize;
            //Use length instead of itemsCount because of grouping
            virtual.total = this.dataService.data.length;
            return this.dataService.data.slice(start, end);
        }
        return this.dataService.data;
    }
    /**
     * Sets the value of the MultiSelect. It can be either of the primitive (string, numbers) or of the complex (objects) type.
     * To define the type, use the `valuePrimitive` option.
     *
     * > All selected values which are not present in the source are ignored.
     */
    set value(values) {
        this._value = values ? values : [];
        if (!this.differ && this.value) {
            this.differ = this.differs.find(this.value).create();
        }
        this.valueChangeDetected = true;
        if (this.initialized) {
            this.setState(this.value);
        }
    }
    get value() {
        return this._value;
    }
    /**
     * @hidden
     */
    set tabIndex(tabIndex) {
        this.tabindex = tabIndex;
    }
    get tabIndex() {
        return this.tabindex;
    }
    /**
     * The hint which is displayed when the component is empty.
     * When the values are selected, it disappears.
     */
    set placeholder(text) {
        this._placeholder = text || '';
    }
    get placeholder() {
        return this.selectedDataItems.length ? '' : this._placeholder;
    }
    /**
     * Defines a Boolean function that is executed for each data item in the component
     * ([see examples]({% slug disableditems_multiselect %})). Determines whether the item will be disabled.
     */
    set itemDisabled(fn) {
        if (typeof fn !== 'function') {
            throw new Error(`itemDisabled must be a function, but received ${JSON.stringify(fn)}.`);
        }
        this.disabledItemsService.itemDisabled = fn;
    }
    /**
     * Enables the [virtualization]({% slug virtualization_multiselect %}) functionality.
     */
    set virtual(settings) {
        this._virtualSettings = normalizeVirtualizationSettings(settings);
    }
    get virtual() {
        return this._virtualSettings;
    }
    /**
     * Configures the popup of the MultiSelect.
     *
     * The available options are:
     * - `animate: Boolean`&mdash;Controls the popup animation. By default, the open and close animations are enabled.
     * - `width: Number | String`&mdash;Sets the width of the popup container. By default, the width of the host element is used. If set to `auto`, the component automatically adjusts the width of the popup and no item labels are wrapped. The `auto` mode is not supported when virtual scrolling is enabled.
     * - `height: Number`&mdash;Sets the height of the popup container.
     * - `popupClass: String`&mdash;Specifies a list of CSS classes that are used to style the popup.
     * - `appendTo: "root" | "component" | ViewContainerRef`&mdash;Specifies the component to which the popup will be appended.
     */
    set popupSettings(settings) {
        this._popupSettings = Object.assign({ animate: true }, settings);
    }
    get popupSettings() {
        return this._popupSettings;
    }
    /**
     * Specifies the type of the selected value.
     * If set to `true`, the selected value has to be of the primitive type
     * ([more information and example]({% slug valuebinding_multiselect %}#toc-primitive-values-from-object-fields)).
     */
    set valuePrimitive(isPrimitive) {
        this._valuePrimitive = isPrimitive;
    }
    get valuePrimitive() {
        if (!isPresent(this._valuePrimitive)) {
            return !isPresent(this.valueField);
        }
        return this._valuePrimitive;
    }
    get dir() {
        return this.direction;
    }
    get disabledClass() {
        return this.disabled;
    }
    get listContainerClasses() {
        const containerClasses = ['k-list-container', 'k-reset'];
        if (this.popupSettings.popupClass) {
            containerClasses.push(this.popupSettings.popupClass);
        }
        return containerClasses;
    }
    get width() {
        let wrapperOffsetWidth = 0;
        if (isDocumentAvailable()) {
            wrapperOffsetWidth = this.wrapper.nativeElement.offsetWidth;
        }
        const width = this.popupSettings.width || wrapperOffsetWidth;
        const minWidth = isNaN(wrapperOffsetWidth) ? wrapperOffsetWidth : `${wrapperOffsetWidth}px`;
        const maxWidth = isNaN(width) ? width : `${width}px`;
        return { min: minWidth, max: maxWidth };
    }
    get height() {
        const popupHeight = this.popupSettings.height;
        return isPresent(popupHeight) ? `${popupHeight}px` : 'auto';
    }
    get activeDescendant() {
        const focusedTagIndex = this.focusedTagIndex;
        const focusedListIndex = this.selectionService.focused;
        let prefix;
        let item;
        if (isPresent(focusedTagIndex) && !this.isOpen) {
            item = this.tags[focusedTagIndex];
            prefix = this.tagPrefix;
        }
        else if (isPresent(focusedListIndex) && focusedListIndex !== -1 && this.isOpen) {
            item = this.dataService.itemAt(focusedListIndex);
            prefix = this.optionPrefix;
        }
        else {
            return null;
        }
        return prefix + "-" + this.prop(this.valueField, this.valuePrimitive)(item);
    }
    get noDataLabel() {
        if (this.dataService.itemsCount === 0) {
            return this.noDataText;
        }
    }
    get clearTitle() {
        return this.localization.get('clearTitle');
    }
    /**
     * @hidden
     */
    verifySettings() {
        if (!isDevMode() || this.value.length === 0) {
            return;
        }
        if (!isArray(this.value)) {
            throw new Error(MultiselectMessages.array);
        }
        if (this.valuePrimitive === true && isObjectArray(this.value)) {
            throw new Error(MultiselectMessages.primitive);
        }
        if (this.valuePrimitive === false && !isObjectArray(this.value)) {
            throw new Error(MultiselectMessages.object);
        }
        const valueOrText = !isPresent(this.valueField) !== !isPresent(this.textField);
        if (valueOrText) {
            throw new Error(MultiselectMessages.textAndValue);
        }
    }
    /**
     * @hidden
     */
    change(event) {
        const isCustomItem = (isPresent(event.added) || isPresent(event.removed)) && (event.added === -1 || event.removed === -1);
        if (isCustomItem) {
            this.addCustomValue(this.text);
            return; // The change is emited asynchronosly.
        }
        // Existing items.
        if (isPresent(event.added)) {
            const dataItem = this.dataService.itemAt(event.added);
            const newItem = (this.valuePrimitive && isPresent(dataItem) && isPresent(dataItem[this.valueField])) ? dataItem[this.valueField] : dataItem;
            this.value = [...this.value, newItem];
        }
        if (isPresent(event.removed)) {
            const dataItem = this.dataService.itemAt(event.removed);
            const prop = this.prop(this.valueField, this.valuePrimitive);
            const filter$$1 = (item) => prop(item) !== prop(dataItem);
            this.value = this.value.filter(filter$$1);
            this.selectionService.focused = event.removed;
            this.cdr.detectChanges();
        }
        this.emitValueChange();
    }
    /**
     * @hidden
     */
    setState(value) {
        let data = this.dataService.data;
        if (this.dataService.grouped) {
            data = data.filter(item => !item.header).map(item => item.value);
        }
        const selection = selectedIndices(this.value, data, this.valueField);
        this.selectionService.resetSelection(selection);
        if (this.isOpen && this.selectionService.focused === undefined) {
            if (this.dataService.itemsCount > 0) {
                this.selectionService.focused = this.firstFocusableIndex(0);
            }
            else if (this.allowCustom) {
                this.selectionService.focused = -1;
            }
        }
        if (this.valuePrimitive && !this.valueField) {
            this.selectedDataItems = value.slice();
        }
        if (isObjectArray(value) || this.valuePrimitive && this.valueField) {
            this.selectedDataItems = resolveAllValues(value, data, this.valueField);
        }
        if (this.selectedDataItems.length < value.length) {
            const prop = this.prop(this.valueField, this.valuePrimitive);
            this.selectedDataItems = value
                .map(current => {
                const dataItem = this.selectedDataItems.find(item => prop(item) === prop(current));
                return isPresent(dataItem) ? dataItem : this.resolveDataItemFromTags(current);
            })
                .filter(dataItem => isPresent(dataItem));
        }
        this.tags = this.tagMapper(this.selectedDataItems.slice(0));
        this.cdr.markForCheck();
    }
    /**
     * @hidden
     */
    handleFilter(text) {
        this.text = text;
        if (text && !this.isOpen) {
            this.openPopup();
        }
        if (this.filterable) {
            this.filterChange.emit(text);
        }
        else {
            this.searchTextAndFocus(text);
        }
        this.searchbar.setInputSize();
    }
    /**
     * @hidden
     */
    pageChange(event) {
        const virtual = this.virtual;
        virtual.skip = event.skip;
    }
    /**
     * @hidden
     */
    clearFilter() {
        if (this.filterable && this.text) {
            this.filterChange.emit("");
        }
        this.text = "";
        /* Clearing the value from the input as the setInputSize calculation will be incorrect otherwise.
         Calling cdr.detectChanges to clear the input value as a result of property binding
         causes JAWS to read outdated tag values in IE upon tag selection for some reason. */
        this.searchbar.input.nativeElement.value = "";
        this.searchbar.setInputSize();
    }
    /**
     * @hidden
     */
    handleNavigate(event) {
        const navigateInput = this.text && event.keyCode !== Keys.ArrowDown && event.keyCode !== Keys.ArrowUp;
        const selectValue = this.text && event.keyCode === Keys.Enter || event.keyCode === Keys.Escape;
        const deleteTag = !this.text && event.keyCode === Keys.Backspace && this.tags.length > 0;
        if (deleteTag) {
            this.handleBackspace();
            return;
        }
        if (this.disabled || navigateInput && !selectValue) {
            return;
        }
        const eventData = event;
        const focused = isNaN(this.selectionService.focused) ? -1 : this.selectionService.focused;
        const action = this.navigationService.process({
            current: focused,
            max: this.dataService.itemsCount - 1,
            min: this.allowCustom && this.text ? -1 : 0,
            open: this.isOpen,
            originalEvent: eventData
        });
        if (action !== NavigationAction.Undefined &&
            ((action === NavigationAction.Enter && this.isOpen) || action !== NavigationAction.Enter)) {
            event.preventDefault();
        }
    }
    /**
     * @hidden
     */
    handleRemoveTag(tagData) {
        const eventArgs = new RemoveTagEvent(tagData);
        if (this.disabled || this.readonly) {
            return;
        }
        this.focus();
        this.removeTag.emit(eventArgs);
        if (eventArgs.isDefaultPrevented()) {
            return;
        }
        if (tagData instanceof Array) {
            this.removeGroupTag(tagData);
        }
        else {
            this.removeSingleTag(tagData);
        }
        this.cdr.detectChanges();
    }
    /**
     * @hidden
     */
    clearAll(event) {
        event.stopImmediatePropagation();
        event.preventDefault();
        this.focus();
        this.clearFilter();
        this.reset();
        this.emitValueChange();
    }
    /**
     * @hidden
     */
    addCustomValue(text) {
        this.customValueSubject.next(text);
    }
    ngAfterContentChecked() {
        this.verifySettings();
    }
    ngDoCheck() {
        const valueChanges = this.differ && this.differ.diff(this.value);
        if (valueChanges && !this.valueChangeDetected) {
            this.setState(this.value);
        }
        this.valueChangeDetected = false;
    }
    ngOnInit() {
        this.renderer.removeAttribute(this.hostElement.nativeElement, "tabindex");
        this.createCustomValueStream();
        this.localizationChangeSubscription = this.localization
            .changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            this.setMessages();
        });
        this.setMessages();
        this.setState(this.value);
        this.initialized = true;
    }
    ngOnChanges(changes) {
        const virtual = this.virtual;
        const requestInitialData = virtual && changes.data && changes.data.isFirstChange();
        if (requestInitialData) {
            this.pageChange({ skip: 0, take: virtual.pageSize });
        }
        if (isChanged('valueNormalizer', changes)) {
            this.createCustomValueStream();
        }
        if (anyChanged(['textField', 'valueField', 'valuePrimitive'], changes)) {
            this.setState(this.value);
        }
    }
    ngAfterViewInit() {
        this.searchbar.setInputSize();
    }
    ngOnDestroy() {
        this._toggle(false);
        this.unsubscribeEvents();
        clearTimeout(this.messagesTimeout);
        if (this.localizationChangeSubscription) {
            this.localizationChangeSubscription.unsubscribe();
        }
    }
    /**
     * Toggles the visibility of the popup
     * ([see example]({% slug openstate_multiselect %}#toc-setting-the-initially-opened-component)).
     * If you use the `toggle` method to open or close the popup, the respective `open` and `close` events will not be fired.
     *
     * @param open - The state of the popup.
     */
    toggle(open) {
        // The Promise is required for opening the popup on load.
        // Otherwise, the "Expression has changed..." type error will be thrown.
        Promise.resolve(null).then(() => {
            const shouldOpen = isPresent(open) ? open : !this._open;
            this._toggle(shouldOpen);
            this.cdr.markForCheck();
        });
    }
    /**
     * Returns the current open state of the popup.
     */
    get isOpen() {
        return this._open;
    }
    /**
     * Resets the value of the MultiSelect.
     * If you use the `reset` method to clear the value of the component,
     * the model will not update automatically and the `selectionChange` and `valueChange` events will not be fired.
     */
    reset() {
        this.text = "";
        this.value = [];
    }
    // NG MODEL BINDINGS
    /**
     * @hidden
     */
    writeValue(value) {
        this.value = value || [];
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     */
    onTagMapperChange() {
        this.tags = this.tagMapper(this.selectedDataItems.slice(0));
        this.cdr.markForCheck();
    }
    prop(field, usePrimitive) {
        return (dataItem) => {
            if (isPresent(dataItem)) {
                if (usePrimitive) {
                    return field && isObject(dataItem) ? dataItem[field] : dataItem;
                }
                else {
                    return dataItem[field];
                }
            }
            return null;
        };
    }
    set isFocused(isFocused) {
        this.renderer[isFocused ? 'addClass' : 'removeClass'](this.hostElement.nativeElement, 'k-state-focused');
        this._isFocused = isFocused;
    }
    get isFocused() {
        return this._isFocused;
    }
    subscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        const isOpen = () => this.isOpen;
        const isClosed = () => !this.isOpen;
        const isTagFocused = () => !this.isOpen && this.focusedTagIndex !== undefined;
        [
            this.selectionService.onChange.subscribe(this.handleItemChange.bind(this)),
            this.navigationService.esc.subscribe(this.closePopup.bind(this)),
            this.navigationService.enter.pipe(filter(isOpen)).subscribe(this.handleEnter.bind(this)),
            this.navigationService.open.subscribe(this.openPopup.bind(this)),
            this.navigationService.close.subscribe(this.handleClose.bind(this)),
            this.navigationService.up.pipe(filter(isOpen)).subscribe((event) => this.handleUp(event.index)),
            this.navigationService.home.pipe(filter(() => isClosed)).subscribe(this.handleHome.bind(this)),
            this.navigationService.end.pipe(filter(() => isClosed)).subscribe(this.handleEnd.bind(this)),
            this.navigationService.backspace.pipe(filter(isTagFocused)).subscribe(this.handleBackspace.bind(this)),
            this.navigationService.delete.pipe(filter(isTagFocused)).subscribe(this.handleDelete.bind(this)),
            this.navigationService.left.subscribe(this.direction === 'rtl' ? this.handleRightKey.bind(this) : this.handleLeftKey.bind(this)),
            this.navigationService.right.subscribe(this.direction === 'rtl' ? this.handleLeftKey.bind(this) : this.handleRightKey.bind(this)),
            this.navigationService.down.subscribe((event) => this.handleDownKey(event.index))
        ].forEach(s => this.observableSubscriptions.add(s));
    }
    unsubscribeEvents() {
        if (!isDocumentAvailable()) {
            return;
        }
        this.observableSubscriptions.unsubscribe();
        if (this.customValueSubscription) {
            this.customValueSubscription.unsubscribe();
        }
    }
    removeGroupTag(dataItems) {
        const prop = this.prop(this.valueField, this.valuePrimitive);
        let data = this.dataService.data;
        if (this.dataService.grouped) {
            data = data.filter(item => !item.header).map(item => item.value);
        }
        const dataItemValues = new Set(dataItems.map(item => prop(item)));
        this.value = this.value.filter(value => !dataItemValues.has(prop(value)));
        this.emitValueChange();
    }
    removeSingleTag(dataItem) {
        const prop = this.prop(this.valueField, this.valuePrimitive);
        let data = this.dataService.data;
        if (this.dataService.grouped) {
            data = data.filter(item => !item.header).map(item => item.value);
        }
        const index = selectedIndices([dataItem], data, this.valueField)[0];
        if (isNumber(index)) {
            this.selectionService.unselect(index);
            this.selectionService.focused = index;
            this.togglePopup(false);
        }
        else { // the deleted item is not present in the source
            const filter$$1 = item => prop(item) !== prop(dataItem);
            this.value = this.value.filter(filter$$1);
            this.emitValueChange();
        }
    }
    createCustomValueStream() {
        if (this.customValueSubscription) {
            this.customValueSubscription.unsubscribe();
        }
        this.customValueSubscription = this.customValueSubject.pipe(tap(() => {
            this.loading = true;
            this.disabled = true;
            this.cdr.detectChanges();
        }), this.valueNormalizer, catchError(() => {
            this.loading = false;
            this.disabled = false;
            if (this.autoClose) {
                this.togglePopup(false);
            }
            if (this.autoClose || !this.filterable) {
                this.clearFilter();
            }
            this.nextTick(() => {
                this.searchbar.focus();
            });
            this.createCustomValueStream();
            return of(null);
        }))
            .subscribe((normalizedValue) => {
            this.loading = false;
            this.disabled = false;
            if (isPresent(normalizedValue)) { // if valueNormalizer returns `null` or `undefined` custom value is discarded
                const newValue = this.valuePrimitive ? getter(normalizedValue, this.valueField) : normalizedValue;
                const itemIndex = this.dataService.indexOf(newValue);
                const customItem = itemIndex === -1;
                if (this.value.indexOf(newValue) === -1) {
                    this.tags = this.tagMapper([...this.selectedDataItems, normalizedValue]);
                    if (!customItem) {
                        this.selectionService.add(itemIndex);
                    }
                    else {
                        this.value = [...this.value, newValue];
                    }
                }
                else {
                    if (!customItem && this.selectionService.isSelected(itemIndex)) {
                        this.selectionService.unselect(itemIndex);
                        this.selectionService.focused = itemIndex;
                    }
                    else {
                        this.value = this.value.filter(item => getter(item, this.valueField) !== newValue);
                    }
                }
                this.emitValueChange();
            }
            if (this.autoClose) {
                this.togglePopup(false);
            }
            if (this.autoClose || !this.filterable) {
                this.clearFilter();
            }
            this.nextTick(() => {
                this.searchbar.focus();
            });
        });
    }
    handleItemChange(event) {
        this.change(event);
        if (this.autoClose) {
            this.togglePopup(false);
        }
        if (this.autoClose || !this.filterable) {
            this.clearFilter();
        }
    }
    handleEnter(event) {
        const service = this.selectionService;
        const focusedIndex = this.selectionService.focused;
        if (this.isOpen) {
            event.originalEvent.preventDefault();
        }
        if (focusedIndex === -1) {
            if (this.allowCustom && this.text) {
                this.addCustomValue(this.text);
            }
            return; // Clear filter & close are done at customValueSubscription due to race conditions.
        }
        if (service.isSelected(focusedIndex)) {
            service.unselect(focusedIndex);
            service.focused = focusedIndex;
        }
        else {
            service.add(focusedIndex);
        }
        if (this.autoClose) {
            this.togglePopup(false);
        }
        if (this.autoClose || !this.filterable) {
            this.clearFilter();
        }
    }
    handleClose() {
        this.closePopup();
        this.searchbar.focus();
    }
    handleEnd() {
        this.focusedTagIndex = this.tags.length - 1;
    }
    handleHome() {
        this.focusedTagIndex = 0;
    }
    handleUp(index) {
        this.selectionService.focused = index;
    }
    handleBackspace() {
        if (this.focusedTagIndex !== undefined) {
            this.handleDelete();
        }
        else {
            this.handleRemoveTag(this.tags[this.tags.length - 1]);
            this.searchbar.focus();
        }
    }
    handleDelete() {
        this.handleRemoveTag(this.tags[this.focusedTagIndex]);
        if (this.focusedTagIndex === this.tags.length) {
            this.focusedTagIndex = undefined;
        }
    }
    handleLeftKey() {
        if (this.focusedTagIndex === undefined || this.focusedTagIndex < 0) {
            this.focusedTagIndex = this.tags.length - 1;
        }
        else if (this.focusedTagIndex !== 0) {
            this.focusedTagIndex--;
        }
    }
    handleDownKey(index) {
        if (this.isOpen) {
            this.selectionService.focused = index || this.firstFocusableIndex(0);
        }
        else {
            this.openPopup();
        }
    }
    handleRightKey() {
        const last = this.tags.length - 1;
        if (this.focusedTagIndex === last) {
            this.focusedTagIndex = undefined;
        }
        else if (this.focusedTagIndex < last) {
            this.focusedTagIndex++;
        }
    }
    findIndex(text, startsFrom = 0) {
        let itemText;
        text = text.toLowerCase();
        let index = this.dataService.findIndex(item => {
            if (this.dataService.grouped) {
                itemText = this.prop(this.textField, this.valuePrimitive)(item.value);
            }
            else {
                itemText = this.prop(this.textField, this.valuePrimitive)(item);
            }
            itemText = !isPresent(itemText) ? "" : itemText.toString().toLowerCase();
            return text && itemText.startsWith(text);
        }, startsFrom);
        if (this.disabledItemsService.isIndexDisabled(index)) {
            return (index + 1 > this.dataService.itemsCount) ? -1 : this.findIndex(text, index + 1);
        }
        else {
            return index;
        }
    }
    searchTextAndFocus(text) {
        const index = this.findIndex(text);
        this.selectionService.focused = index;
    }
    closePopup() {
        this.togglePopup(false);
        this.focusedTagIndex = undefined;
    }
    openPopup() {
        this.togglePopup(true);
        this.focusedTagIndex = undefined;
    }
    togglePopup(open) {
        const isDisabled = this.disabled || this.readonly;
        const sameState = this.isOpen === open;
        if (isDisabled || sameState) {
            return;
        }
        const isDefaultPrevented = this.triggerPopupEvents(open);
        if (!isDefaultPrevented) {
            this._toggle(open);
        }
    }
    triggerPopupEvents(open) {
        const eventArgs = new PreventableEvent();
        if (open) {
            this.open.emit(eventArgs);
        }
        else {
            this.close.emit(eventArgs);
        }
        return eventArgs.isDefaultPrevented();
    }
    _toggle(open) {
        this._open = open;
        this.destroyPopup();
        if (this._open) {
            this.createPopup();
        }
    }
    destroyPopup() {
        if (this.popupRef) {
            this.popupRef.popupElement
                .removeEventListener('mousedown', this.popupMouseDownHandler);
            this.popupRef.close();
            this.popupRef = null;
        }
    }
    createPopup() {
        if (this.virtual) {
            this.virtual.skip = 0;
        }
        const horizontalAlign = this.direction === "rtl" ? "right" : "left";
        const anchorPosition = { horizontal: horizontalAlign, vertical: "bottom" };
        const popupPosition = { horizontal: horizontalAlign, vertical: "top" };
        this.popupRef = this.popupService.open({
            anchor: this.wrapper,
            anchorAlign: anchorPosition,
            animate: this.popupSettings.animate,
            appendTo: this.appendTo,
            content: this.popupTemplate,
            popupAlign: popupPosition,
            popupClass: this.listContainerClasses,
            positionMode: 'absolute'
        });
        const popupWrapper = this.popupRef.popupElement;
        const { min, max } = this.width;
        popupWrapper.addEventListener('mousedown', this.popupMouseDownHandler);
        popupWrapper.style.minWidth = min;
        popupWrapper.style.width = max;
        popupWrapper.style.height = this.height;
        popupWrapper.setAttribute("dir", this.direction);
        this.popupRef.popupOpen.subscribe(() => {
            this.cdr.detectChanges();
            this.optionsList.scrollToItem(this.selectionService.focused);
        });
        this.popupRef.popupAnchorViewportLeave.subscribe(() => {
            this.togglePopup(false);
        });
    }
    emitValueChange() {
        this.onChangeCallback(this.value);
        this.valueChange.emit(this.value);
    }
    resolveDataItemFromTags(value) {
        if (!(this.tags && this.tags.length && isPresent(value))) {
            return undefined;
        }
        // Flattening the tags array in case of a summary tag occurrence.
        const tags = this.tags.reduce((acc, tag) => {
            const items = isArray(tag) ? tag : [tag];
            acc.push(...items);
            return acc;
        }, []);
        const prop = this.prop(this.valueField, this.valuePrimitive);
        return tags.find(tag => prop(tag) === prop(value));
    }
    firstFocusableIndex(index) {
        const maxIndex = this.dataService.itemsCount;
        if (this.disabledItemsService.isIndexDisabled(index)) {
            const nextIndex = index + 1;
            return (nextIndex < maxIndex) ? this.firstFocusableIndex(nextIndex) : undefined;
        }
        else {
            return index;
        }
    }
    nextTick(f) {
        this._zone.runOutsideAngular(() => {
            // Use `setTimeout` instead of a resolved promise
            // because the latter does not wait long enough.
            setTimeout(() => this._zone.run(f));
        });
    }
    setMessages() {
        this._zone.runOutsideAngular(() => {
            clearTimeout(this.messagesTimeout);
            this.messagesTimeout = setTimeout(() => {
                this.noDataText = this.localization.get('noDataText');
                this.cdr.detectChanges();
            });
        });
    }
}
MultiSelectComponent.ɵfac = function MultiSelectComponent_Factory(t) { return new (t || MultiSelectComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.PopupService), ɵngcc0.ɵɵdirectiveInject(DataService), ɵngcc0.ɵɵdirectiveInject(SelectionService), ɵngcc0.ɵɵdirectiveInject(NavigationService), ɵngcc0.ɵɵdirectiveInject(DisabledItemsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TOUCH_ENABLED, 8)); };
MultiSelectComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MultiSelectComponent, selectors: [["kendo-multiselect"]], contentQueries: function MultiSelectComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ItemTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomItemTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GroupTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FixedGroupTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, HeaderTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, TagTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, GroupTagTemplateDirective, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, NoDataTemplateDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customItemTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fixedGroupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tagTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.groupTagTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.noDataTemplate = _t.first);
    } }, viewQuery: function MultiSelectComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c10, true, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(SearchBarComponent, true);
        ɵngcc0.ɵɵviewQuery(_c11, true);
        ɵngcc0.ɵɵviewQuery(_c19, true);
        ɵngcc0.ɵɵviewQuery(_c12, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.container = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.searchbar = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionsList = _t.first);
    } }, hostVars: 9, hostBindings: function MultiSelectComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.dir);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.widgetClasses)("k-multiselect", ctx.widgetClasses)("k-header", ctx.widgetClasses)("k-state-disabled", ctx.disabledClass);
    } }, inputs: { focusableId: "focusableId", autoClose: "autoClose", tabindex: "tabindex", disabled: "disabled", readonly: "readonly", filterable: "filterable", listHeight: "listHeight", clearButton: "clearButton", tagMapper: "tagMapper", allowCustom: "allowCustom", valueNormalizer: "valueNormalizer", data: "data", value: "value", tabIndex: "tabIndex", placeholder: "placeholder", itemDisabled: "itemDisabled", virtual: "virtual", popupSettings: "popupSettings", valuePrimitive: "valuePrimitive", loading: "loading", valueField: "valueField", textField: "textField" }, outputs: { filterChange: "filterChange", valueChange: "valueChange", open: "open", close: "close", onFocus: "focus", onBlur: "blur", removeTag: "removeTag" }, exportAs: ["kendoMultiSelect"], features: [ɵngcc0.ɵɵProvidersFeature([
            MULTISELECT_VALUE_ACCESSOR,
            DataService,
            SelectionService,
            NavigationService,
            DisabledItemsService,
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.multiselect'
            },
            {
                provide: FilterableDropDownComponentBase, useExisting: forwardRef(() => MultiSelectComponent)
            },
            {
                provide: KendoInput, useExisting: forwardRef(() => MultiSelectComponent)
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 14, vars: 23, consts: [["kendoMultiSelectLocalizedMessages", "", 6, "noDataText", "clearTitle"], [1, "k-multiselect-wrap", "k-floatwrap", 3, "mousedown"], ["wrapper", ""], [3, "id", "tags", "textField", "valueField", "focused", "disabled", "template", "groupTemplate", "tagPrefix", "removeTag"], [3, "id", "role", "tagListId", "activeDescendant", "noDataLabel", "userInput", "disabled", "readonly", "tabIndex", "popupOpen", "placeholder", "onNavigate", "valueChange", "onBlur", "onFocus"], ["searchbar", ""], ["class", "k-icon k-clear-value k-i-close", "role", "button", "tabindex", "-1", 3, "mousedown", 4, "ngIf"], ["class", "k-icon k-i-loading", 4, "ngIf"], ["popupTemplate", ""], [3, "ngIf"], ["container", ""], ["role", "button", "tabindex", "-1", 1, "k-icon", "k-clear-value", "k-i-close", 3, "mousedown"], [1, "k-icon", "k-i-loading"], [4, "ngIf"], ["class", "k-list", 4, "ngIf"], [3, "id", "optionPrefix", "data", "textField", "valueField", "height", "template", "groupTemplate", "fixedGroupTemplate", "show", "multipleSelection", "virtual", "pageChange"], ["optionsList", ""], ["class", "k-nodata", 4, "ngIf"], [3, "templateContext"], [1, "k-list"], ["kendoDropDownsSelectable", "", 1, "k-item", "k-custom-item", 3, "multipleSelection", "index"], [4, "ngIf", "ngIfElse"], ["default_custom_item_template", ""], [1, "k-icon", "k-i-plus", 2, "float", "right"], [1, "k-nodata"], [3, "ngIf", "templateContext"], [3, "resize"]], template: function MultiSelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0, 0);
        ɵngcc0.ɵɵi18nAttributes(1, _c35);
        ɵngcc0.ɵɵelementContainerEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1, 2);
        ɵngcc0.ɵɵlistener("mousedown", function MultiSelectComponent_Template_div_mousedown_2_listener($event) { return ctx.wrapperMousedown($event); });
        ɵngcc0.ɵɵelementStart(4, "kendo-taglist", 3);
        ɵngcc0.ɵɵlistener("removeTag", function MultiSelectComponent_Template_kendo_taglist_removeTag_4_listener($event) { return ctx.handleRemoveTag($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "kendo-searchbar", 4, 5);
        ɵngcc0.ɵɵlistener("onNavigate", function MultiSelectComponent_Template_kendo_searchbar_onNavigate_5_listener($event) { return ctx.handleNavigate($event); })("valueChange", function MultiSelectComponent_Template_kendo_searchbar_valueChange_5_listener($event) { return ctx.handleFilter($event); })("onBlur", function MultiSelectComponent_Template_kendo_searchbar_onBlur_5_listener() { return ctx.onSearchBarBlur(); })("onFocus", function MultiSelectComponent_Template_kendo_searchbar_onFocus_5_listener() { return ctx.onSearchBarFocus(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, MultiSelectComponent_span_7_Template, 1, 1, "span", 6);
        ɵngcc0.ɵɵtemplate(8, MultiSelectComponent_span_8_Template, 1, 0, "span", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, MultiSelectComponent_ng_template_9_Template, 6, 16, "ng-template", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);
        ɵngcc0.ɵɵtemplate(11, MultiSelectComponent_ng_template_11_Template, 1, 0, "ng-template", 9);
        ɵngcc0.ɵɵelementContainer(12, null, 10);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("id", ctx.tagListId)("tags", ctx.tags)("textField", ctx.textField)("valueField", ctx.valueField)("focused", ctx.focusedTagIndex)("disabled", ctx.disabled)("template", ctx.tagTemplate)("groupTemplate", ctx.groupTagTemplate)("tagPrefix", ctx.tagPrefix);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.focusableId)("role", "listbox")("tagListId", ctx.tagListId)("activeDescendant", ctx.activeDescendant)("noDataLabel", ctx.noDataLabel)("userInput", ctx.text)("disabled", ctx.disabled)("readonly", ctx.readonly)("tabIndex", ctx.tabIndex)("popupOpen", ctx.isOpen)("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.loading && !ctx.readonly && ctx.clearButton && ((ctx.tags == null ? null : ctx.tags.length) || (ctx.text == null ? null : ctx.text.length)));
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOpen);
    } }, directives: function () { return [LocalizedMessagesDirective,
        TagListComponent,
        SearchBarComponent, ɵngcc3.NgIf, ListComponent,
        TemplateContextDirective,
        SelectableDirective, ɵngcc2.ResizeSensorComponent]; }, encapsulation: 2 });
/** @nocollapse */
MultiSelectComponent.ctorParameters = () => [
    { type: LocalizationService },
    { type: PopupService },
    { type: DataService },
    { type: SelectionService },
    { type: NavigationService },
    { type: DisabledItemsService },
    { type: ChangeDetectorRef },
    { type: KeyValueDiffers },
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [TOUCH_ENABLED,] }] }
];
MultiSelectComponent.propDecorators = {
    focusableId: [{ type: Input }],
    autoClose: [{ type: Input }],
    loading: [{ type: Input }],
    data: [{ type: Input }],
    value: [{ type: Input }],
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    tabindex: [{ type: Input }],
    tabIndex: [{ type: Input, args: ["tabIndex",] }],
    placeholder: [{ type: Input }],
    disabled: [{ type: Input }],
    itemDisabled: [{ type: Input }],
    readonly: [{ type: Input }],
    filterable: [{ type: Input }],
    virtual: [{ type: Input }],
    popupSettings: [{ type: Input }],
    listHeight: [{ type: Input }],
    valuePrimitive: [{ type: Input }],
    clearButton: [{ type: Input }],
    tagMapper: [{ type: Input }],
    allowCustom: [{ type: Input }],
    valueNormalizer: [{ type: Input }],
    filterChange: [{ type: Output }],
    valueChange: [{ type: Output }],
    open: [{ type: Output }],
    close: [{ type: Output }],
    onFocus: [{ type: Output, args: ['focus',] }],
    onBlur: [{ type: Output, args: ['blur',] }],
    removeTag: [{ type: Output }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    searchbar: [{ type: ViewChild, args: [SearchBarComponent,] }],
    popupTemplate: [{ type: ViewChild, args: ['popupTemplate',] }],
    wrapper: [{ type: ViewChild, args: ['wrapper',] }],
    optionsList: [{ type: ViewChild, args: ['optionsList',] }],
    template: [{ type: ContentChild, args: [ItemTemplateDirective,] }],
    customItemTemplate: [{ type: ContentChild, args: [CustomItemTemplateDirective,] }],
    groupTemplate: [{ type: ContentChild, args: [GroupTemplateDirective,] }],
    fixedGroupTemplate: [{ type: ContentChild, args: [FixedGroupTemplateDirective,] }],
    headerTemplate: [{ type: ContentChild, args: [HeaderTemplateDirective,] }],
    footerTemplate: [{ type: ContentChild, args: [FooterTemplateDirective,] }],
    tagTemplate: [{ type: ContentChild, args: [TagTemplateDirective,] }],
    groupTagTemplate: [{ type: ContentChild, args: [GroupTagTemplateDirective,] }],
    noDataTemplate: [{ type: ContentChild, args: [NoDataTemplateDirective,] }],
    widgetClasses: [{ type: HostBinding, args: ['class.k-widget',] }, { type: HostBinding, args: ['class.k-multiselect',] }, { type: HostBinding, args: ['class.k-header',] }],
    dir: [{ type: HostBinding, args: ['attr.dir',] }],
    disabledClass: [{ type: HostBinding, args: ['class.k-state-disabled',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MultiSelectComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoMultiSelect',
                providers: [
                    MULTISELECT_VALUE_ACCESSOR,
                    DataService,
                    SelectionService,
                    NavigationService,
                    DisabledItemsService,
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.multiselect'
                    },
                    {
                        provide: FilterableDropDownComponentBase, useExisting: forwardRef(() => MultiSelectComponent)
                    },
                    {
                        provide: KendoInput, useExisting: forwardRef(() => MultiSelectComponent)
                    }
                ],
                selector: 'kendo-multiselect',
                template: `
        <ng-container kendoMultiSelectLocalizedMessages
            i18n-noDataText="kendo.multiselect.noDataText|The text displayed in the popup when there are no items"
            noDataText="NO DATA FOUND"

            i18n-clearTitle="kendo.combobox.clearTitle|The title of the clear button"
            clearTitle="clear"
        >
        </ng-container>
        <div class="k-multiselect-wrap k-floatwrap"
            #wrapper
            (mousedown)="wrapperMousedown($event)"
        >
            <kendo-taglist
                [id]="tagListId"
                [tags]="tags"
                [textField]="textField"
                [valueField]="valueField"
                [focused]="focusedTagIndex"
                [disabled]="disabled"
                [template]="tagTemplate"
                [groupTemplate]="groupTagTemplate"
                [tagPrefix]="tagPrefix"
                (removeTag)="handleRemoveTag($event)"
            >
            </kendo-taglist>
            <kendo-searchbar
                #searchbar
                [id]="focusableId"
                [role]="'listbox'"
                [tagListId]="tagListId"
                [activeDescendant]="activeDescendant"
                [noDataLabel]="noDataLabel"
                [userInput]="text"
                [disabled]="disabled"
                [readonly]="readonly"
                [tabIndex]="tabIndex"
                [popupOpen]="isOpen"
                [placeholder]="placeholder"
                (onNavigate)="handleNavigate($event)"
                (valueChange)="handleFilter($event)"
                (onBlur)="onSearchBarBlur()"
                (onFocus)="onSearchBarFocus()"
            >
            </kendo-searchbar>
            <span
                *ngIf="!loading && !readonly && clearButton && (tags?.length || text?.length)"
                class="k-icon k-clear-value k-i-close"
                [attr.title]="clearTitle"
                role="button"
                tabindex="-1"
                (mousedown)="clearAll($event)"
            >
            </span>
            <span
                *ngIf="loading"
                class="k-icon k-i-loading"
            >
            </span>
        </div>
        <ng-template #popupTemplate>
            <!--header template-->
            <ng-template *ngIf="headerTemplate"
                [templateContext]="{
                    templateRef: headerTemplate.templateRef
                }">
            </ng-template>
            <!--custom item template-->
            <div class="k-list" *ngIf="allowCustom && text">
                <div class="k-item k-custom-item" kendoDropDownsSelectable [multipleSelection]="true" [index]="-1">
                    <ng-template *ngIf="customItemTemplate;else default_custom_item_template"
                        [templateContext]="{
                            templateRef: customItemTemplate.templateRef,
                            $implicit: text
                        }">
                    </ng-template>
                    <ng-template #default_custom_item_template>{{ text }}</ng-template>
                    <span class="k-icon k-i-plus" style="float: right"></span>
                </div>
            </div>
            <!--list-->
            <kendo-list
                #optionsList
                [id]="listBoxId"
                [optionPrefix]="optionPrefix"
                [data]="data"
                [textField]="textField"
                [valueField]="valueField"
                [height]="listHeight"
                [template]="template"
                [groupTemplate]="groupTemplate"
                [fixedGroupTemplate]="fixedGroupTemplate"
                [show]="isOpen"
                [multipleSelection]="true"
                [virtual]="virtual"
                (pageChange)="pageChange($event)"
                >
            </kendo-list>
            <!--no data template-->
            <div class="k-nodata" *ngIf="data.length === 0">
                <ng-template [ngIf]="noDataTemplate"
                    [templateContext]="{
                        templateRef: noDataTemplate ? noDataTemplate.templateRef : undefined
                    }">
                </ng-template>
                <ng-template [ngIf]="!noDataTemplate">
                    <div>{{ noDataText }}</div>
                </ng-template>
            </div>
            <!--footer template-->
            <ng-template *ngIf="footerTemplate"
                [templateContext]="{
                    templateRef: footerTemplate.templateRef
                }">
            </ng-template>
        </ng-template>
        <ng-template [ngIf]="isOpen">
            <kendo-resize-sensor (resize)="onResize()"></kendo-resize-sensor>
        </ng-template>
        <ng-container #container></ng-container>
  `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }, { type: ɵngcc4.PopupService }, { type: DataService }, { type: SelectionService }, { type: NavigationService }, { type: DisabledItemsService }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.KeyValueDiffers }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [TOUCH_ENABLED]
            }] }]; }, { focusableId: [{
            type: Input
        }], autoClose: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], filterable: [{
            type: Input
        }], listHeight: [{
            type: Input
        }], clearButton: [{
            type: Input
        }], tagMapper: [{
            type: Input
        }], allowCustom: [{
            type: Input
        }], valueNormalizer: [{
            type: Input
        }], filterChange: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], removeTag: [{
            type: Output
        }], widgetClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-multiselect']
        }, {
            type: HostBinding,
            args: ['class.k-header']
        }], data: [{
            type: Input
        }], value: [{
            type: Input
        }], tabIndex: [{
            type: Input,
            args: ["tabIndex"]
        }], placeholder: [{
            type: Input
        }], itemDisabled: [{
            type: Input
        }], virtual: [{
            type: Input
        }], popupSettings: [{
            type: Input
        }], valuePrimitive: [{
            type: Input
        }], dir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], loading: [{
            type: Input
        }], valueField: [{
            type: Input
        }], textField: [{
            type: Input
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }], searchbar: [{
            type: ViewChild,
            args: [SearchBarComponent]
        }], popupTemplate: [{
            type: ViewChild,
            args: ['popupTemplate']
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper']
        }], optionsList: [{
            type: ViewChild,
            args: ['optionsList']
        }], template: [{
            type: ContentChild,
            args: [ItemTemplateDirective]
        }], customItemTemplate: [{
            type: ContentChild,
            args: [CustomItemTemplateDirective]
        }], groupTemplate: [{
            type: ContentChild,
            args: [GroupTemplateDirective]
        }], fixedGroupTemplate: [{
            type: ContentChild,
            args: [FixedGroupTemplateDirective]
        }], headerTemplate: [{
            type: ContentChild,
            args: [HeaderTemplateDirective]
        }], footerTemplate: [{
            type: ContentChild,
            args: [FooterTemplateDirective]
        }], tagTemplate: [{
            type: ContentChild,
            args: [TagTemplateDirective]
        }], groupTagTemplate: [{
            type: ContentChild,
            args: [GroupTagTemplateDirective]
        }], noDataTemplate: [{
            type: ContentChild,
            args: [NoDataTemplateDirective]
        }] }); })();

/**
 * @hidden
 */
class TagListComponent {
    constructor() {
        this.removeTag = new EventEmitter();
    }
    tagProp(tag, prop) {
        return prop && isObject(tag) ? tag[prop] : tag;
    }
    deleteTag(event, tag) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (!this.disabled && event.which === 1) {
            this.removeTag.emit(tag);
        }
    }
    itemId(tag) {
        if (tag) { //because of custom values
            return this.tagPrefix + "-" + this.tagProp(tag, this.valueField);
        }
    }
    isGroupTag(tag) {
        return tag instanceof Array;
    }
}
TagListComponent.ɵfac = function TagListComponent_Factory(t) { return new (t || TagListComponent)(); };
TagListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TagListComponent, selectors: [["kendo-taglist"]], inputs: { tags: "tags", textField: "textField", valueField: "valueField", focused: "focused", template: "template", groupTemplate: "groupTemplate", disabled: "disabled", tagPrefix: "tagPrefix", id: "id" }, outputs: { removeTag: "removeTag" }, decls: 2, vars: 2, consts: [[1, "k-reset"], ["role", "option", "aria-selected", "true", "class", "k-button", 3, "ngClass", 4, "ngFor", "ngForOf"], ["role", "option", "aria-selected", "true", 1, "k-button", 3, "ngClass"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["groupTag", ""], ["singleTag", ""], ["aria-label", "delete", 1, "k-select"], [1, "k-icon", "k-i-close", 3, "mousedown"], [4, "ngIf"], [3, "ngIf"], [3, "templateContext"]], template: function TagListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "ul", 0);
        ɵngcc0.ɵɵtemplate(1, TagListComponent_li_1_Template, 8, 9, "li", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tags);
    } }, directives: function () { return [ɵngcc3.NgForOf, ListItemDirective, ɵngcc3.NgClass, ɵngcc3.NgIf, TemplateContextDirective]; }, encapsulation: 2 });
TagListComponent.propDecorators = {
    tags: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    focused: [{ type: Input }],
    template: [{ type: Input }],
    groupTemplate: [{ type: Input }],
    disabled: [{ type: Input }],
    tagPrefix: [{ type: Input }],
    id: [{ type: Input }],
    removeTag: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TagListComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-taglist',
                template: `
        <ul [attr.id]="id" class="k-reset">
            <li role="option" *ngFor="let tag of tags; let i = index;" aria-selected="true" [attr.aria-setsize]="tags?.length"
                class="k-button" [ngClass]="{ 'k-state-focused': i === focused }" [attr.id]="itemId(tag)"
            >
                <ng-template *ngIf="isGroupTag(tag); then groupTag else singleTag"></ng-template>
                    <ng-template #groupTag>
                        <span>
                            <ng-template *ngIf="groupTemplate"
                                [templateContext]="{
                                templateRef: groupTemplate.templateRef,
                                $implicit: tag
                            }">
                            </ng-template>
                            <ng-template [ngIf]="!groupTemplate">{{ tag.length }} {{ tag.length === 1 ? 'item' : 'items' }} selected</ng-template>
                        </span>
                    </ng-template>
                    <ng-template #singleTag>
                        <span>
                        <ng-template *ngIf="template"
                                [templateContext]="{
                                templateRef: template.templateRef,
                                $implicit: tag
                            }">
                            </ng-template>
                            <ng-template [ngIf]="!template">{{ tagProp(tag, textField) }}</ng-template>
                        </span>
                    </ng-template>

                <span aria-label="delete" [attr.aria-hidden]="i !== focused" class="k-select">
                    <span class="k-icon k-i-close" (mousedown)="deleteTag($event, tag)">
                    </span>
                </span>
            </li>
        </ul>
  `
            }]
    }], function () { return []; }, { removeTag: [{
            type: Output
        }], tags: [{
            type: Input
        }], textField: [{
            type: Input
        }], valueField: [{
            type: Input
        }], focused: [{
            type: Input
        }], template: [{
            type: Input
        }], groupTemplate: [{
            type: Input
        }], disabled: [{
            type: Input
        }], tagPrefix: [{
            type: Input
        }], id: [{
            type: Input
        }] }); })();

/**
 * @hidden
 */
class TemplateContextDirective {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
    }
    set templateContext(context) {
        if (this.insertedViewRef) {
            this.viewContainerRef.remove(this.viewContainerRef.indexOf(this.insertedViewRef));
            this.insertedViewRef = undefined;
        }
        if (context.templateRef) {
            this.insertedViewRef = this.viewContainerRef.createEmbeddedView(context.templateRef, context);
        }
    }
}
TemplateContextDirective.ɵfac = function TemplateContextDirective_Factory(t) { return new (t || TemplateContextDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
TemplateContextDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplateContextDirective, selectors: [["", "templateContext", ""]], inputs: { templateContext: "templateContext" } });
/** @nocollapse */
TemplateContextDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
TemplateContextDirective.propDecorators = {
    templateContext: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplateContextDirective, [{
        type: Directive,
        args: [{
                selector: '[templateContext]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }]; }, { templateContext: [{
            type: Input
        }] }); })();

/**
 * @hidden
 */
class SelectableDirective {
    constructor(selectionService) {
        // @HostBinding('attr.offset-index')
        // @Input() public offsetIndex: number;
        this.multipleSelection = false;
        this.selectionService = selectionService;
    }
    get focusedClassName() {
        return this.selectionService.isFocused(this.index);
    }
    get selectedClassName() {
        return this.selectionService.isSelected(this.index);
    }
    onClick(event) {
        event.stopPropagation();
        if (this.multipleSelection) {
            if (this.selectionService.isSelected(this.index)) {
                this.selectionService.unselect(this.index);
            }
            else {
                this.selectionService.add(this.index);
            }
        }
        else {
            this.selectionService.change(this.index);
        }
    }
}
SelectableDirective.ɵfac = function SelectableDirective_Factory(t) { return new (t || SelectableDirective)(ɵngcc0.ɵɵdirectiveInject(SelectionService)); };
SelectableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SelectableDirective, selectors: [["", "kendoDropDownsSelectable", ""]], hostVars: 9, hostBindings: function SelectableDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SelectableDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("index", ctx.index);
        ɵngcc0.ɵɵstyleProp("height", ctx.height, "px")("min-height", ctx.height, "px");
        ɵngcc0.ɵɵclassProp("k-state-focused", ctx.focusedClassName)("k-state-selected", ctx.selectedClassName);
    } }, inputs: { multipleSelection: "multipleSelection", index: "index", height: "height" } });
/** @nocollapse */
SelectableDirective.ctorParameters = () => [
    { type: SelectionService }
];
SelectableDirective.propDecorators = {
    index: [{ type: HostBinding, args: ['attr.index',] }, { type: Input }],
    height: [{ type: HostBinding, args: ['style.height.px',] }, { type: HostBinding, args: ['style.minHeight.px',] }, { type: Input }],
    multipleSelection: [{ type: Input }],
    focusedClassName: [{ type: HostBinding, args: ['class.k-state-focused',] }],
    selectedClassName: [{ type: HostBinding, args: ['class.k-state-selected',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SelectableDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownsSelectable]'
            }]
    }], function () { return [{ type: SelectionService }]; }, { multipleSelection: [{
            type: Input
        }], focusedClassName: [{
            type: HostBinding,
            args: ['class.k-state-focused']
        }], selectedClassName: [{
            type: HostBinding,
            args: ['class.k-state-selected']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], index: [{
            type: HostBinding,
            args: ['attr.index']
        }, {
            type: Input
        }], height: [{
            type: HostBinding,
            args: ['style.height.px']
        }, {
            type: HostBinding,
            args: ['style.minHeight.px']
        }, {
            type: Input
        }] }); })();

/**
 * A directive which configures the MultiSelect to show one single summary tag for all selected data items.
 * When a number is provided, the summary tag is displayed after the given amount of data items are selected
 * ([more information and examples]({% slug summarytagmode_multiselect %})).
 *
 * @example
 * ```ts-no-run
 * <kendo-multiselect kendoMultiSelectSummaryTag [data]="data"></kendo-multiselect>
 * ```
 *
 * @example
 * ```ts-no-run
 * <kendo-multiselect [kendoMultiSelectSummaryTag]="2" [data]="data"></kendo-multiselect>
 * ```
 */
class SummaryTagDirective {
    constructor(multiSelectComponent) {
        this.multiSelectComponent = multiSelectComponent;
        /**
         * A numeric value that indicates the number of selected data items after which the summary tag will appear.
         */
        this.showAfter = 0; // tslint:disable-line:no-input-rename
        this.createTagMapper();
    }
    ngOnChanges(changes) {
        if (isPresent(changes.showAfter)) {
            this.createTagMapper();
            this.multiSelectComponent.onTagMapperChange();
        }
    }
    createTagMapper() {
        this.multiSelectComponent.tagMapper = (tags) => {
            if (tags.length > this.showAfter) {
                let result;
                result = tags.slice(0, this.showAfter);
                result.push(tags.slice(this.showAfter, tags.length));
                return result;
            }
            else {
                return tags;
            }
        };
    }
}
SummaryTagDirective.ɵfac = function SummaryTagDirective_Factory(t) { return new (t || SummaryTagDirective)(ɵngcc0.ɵɵdirectiveInject(MultiSelectComponent)); };
SummaryTagDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SummaryTagDirective, selectors: [["", "kendoMultiSelectSummaryTag", ""]], inputs: { showAfter: ["kendoMultiSelectSummaryTag", "showAfter"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
SummaryTagDirective.ctorParameters = () => [
    { type: MultiSelectComponent }
];
SummaryTagDirective.propDecorators = {
    showAfter: [{ type: Input, args: ['kendoMultiSelectSummaryTag',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SummaryTagDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoMultiSelectSummaryTag]'
            }]
    }], function () { return [{ type: MultiSelectComponent }]; }, { showAfter: [{
            type: Input,
            args: ['kendoMultiSelectSummaryTag']
        }] }); })();

const DEFAULT_FILTER_SETTINGS = {
    caseSensitive: false,
    operator: 'startsWith'
};
/**
 * Implements an event handler for the `filterChange` event of a DropDowns component
 * which performs simple data filtering.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <kendo-autocomplete
 *      [data]="data"
 *      kendoDropDownFilter
 *      placeholder="e.g. Andorra">
 *  </kendo-autocomplete>
 * `
 * })
 * class AppComponent {
 *     public data: Array<string> = ["Albania", "Andorra", "Armenia", "Austria", "Azerbaijan"];
 * }
 * ```
 */
class FilterDirective {
    constructor(component) {
        this.component = component;
        /**
         * @hidden
         *
         * Sets whether the filtering functionality is enabled on component init.
         */
        this.filterable = true;
        this._data = [];
        this._filterSettings = DEFAULT_FILTER_SETTINGS;
    }
    /**
     * The initial data that will be used as a source array for the filtering operations.
     */
    set data(data) {
        this._data = data || [];
    }
    get data() {
        return this._data;
    }
    /**
     * The configuration object which sets the behavior of the `kendoDropDownFilter` directive.
     */
    set filterSettings(settings) {
        this._filterSettings = Object.assign({}, DEFAULT_FILTER_SETTINGS, settings);
    }
    get filterSettings() {
        return this._filterSettings;
    }
    ngOnInit() {
        this.component.filterable = this.filterable;
        this.filterChangeSubscription = this.component.filterChange
            .subscribe(query => this.component.data = this.getFilteredData(query));
    }
    ngOnDestroy() {
        this.filterChangeSubscription.unsubscribe();
    }
    getFilteredData(query) {
        const field = this.component.textField || this.component.valueField;
        return this.data.filter(item => this.checkItem(getter(item, field), query));
    }
    checkItem(target, query) {
        target = this.normalizeValue(target);
        query = this.normalizeValue(query);
        return this.filterSettings.operator === 'contains' ? target.indexOf(query) !== -1 : target.indexOf(query) === 0;
    }
    normalizeValue(value) {
        const normalizedValue = isPresent(value) ? value.toString() : '';
        return this.filterSettings.caseSensitive ? normalizedValue : normalizedValue.toLowerCase();
    }
}
FilterDirective.ɵfac = function FilterDirective_Factory(t) { return new (t || FilterDirective)(ɵngcc0.ɵɵdirectiveInject(FilterableDropDownComponentBase)); };
FilterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilterDirective, selectors: [["", "kendoDropDownFilter", ""]], inputs: { filterable: "filterable", data: "data", filterSettings: ["kendoDropDownFilter", "filterSettings"] } });
/** @nocollapse */
FilterDirective.ctorParameters = () => [
    { type: FilterableDropDownComponentBase }
];
FilterDirective.propDecorators = {
    data: [{ type: Input }],
    filterSettings: [{ type: Input, args: ['kendoDropDownFilter',] }],
    filterable: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoDropDownFilter]'
            }]
    }], function () { return [{ type: FilterableDropDownComponentBase }]; }, { filterable: [{
            type: Input
        }], data: [{
            type: Input
        }], filterSettings: [{
            type: Input,
            args: ['kendoDropDownFilter']
        }] }); })();

/**
 * @hidden
 */
class Messages extends ComponentMessages {
}
Messages.ɵfac = function Messages_Factory(t) { return ɵMessages_BaseFactory(t || Messages); };
Messages.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Messages, inputs: { noDataText: "noDataText", clearTitle: "clearTitle" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
Messages.propDecorators = {
    noDataText: [{ type: Input }],
    clearTitle: [{ type: Input }]
};
const ɵMessages_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Messages);

/**
 * @hidden
 */
class LocalizedMessagesDirective extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
}
LocalizedMessagesDirective.ɵfac = function LocalizedMessagesDirective_Factory(t) { return new (t || LocalizedMessagesDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
LocalizedMessagesDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: LocalizedMessagesDirective, selectors: [["", "kendoDropDownListLocalizedMessages", ""], ["", "kendoComboBoxLocalizedMessages", ""], ["", "kendoAutoCompleteLocalizedMessages", ""], ["", "kendoMultiSelectLocalizedMessages", ""]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(() => LocalizedMessagesDirective)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });
/** @nocollapse */
LocalizedMessagesDirective.ctorParameters = () => [
    { type: LocalizationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LocalizedMessagesDirective, [{
        type: Directive,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(() => LocalizedMessagesDirective)
                    }
                ],
                selector: `
    [kendoDropDownListLocalizedMessages],
    [kendoComboBoxLocalizedMessages],
    [kendoAutoCompleteLocalizedMessages],
    [kendoMultiSelectLocalizedMessages]
  `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }]; }, null); })();

/**
 * Custom component messages override default component messages
 * ([see example]({% slug rtl_dropdowns %}#toc-messages)).
 */
class CustomMessagesComponent extends Messages {
    constructor(service) {
        super();
        this.service = service;
    }
    get override() {
        return true;
    }
}
CustomMessagesComponent.ɵfac = function CustomMessagesComponent_Factory(t) { return new (t || CustomMessagesComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
CustomMessagesComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CustomMessagesComponent, selectors: [["kendo-dropdownlist-messages"], ["kendo-combobox-messages"], ["kendo-autocomplete-messages"], ["kendo-multiselect-messages"]], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: Messages,
                useExisting: forwardRef(() => CustomMessagesComponent)
            }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function CustomMessagesComponent_Template(rf, ctx) { }, encapsulation: 2 });
/** @nocollapse */
CustomMessagesComponent.ctorParameters = () => [
    { type: LocalizationService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomMessagesComponent, [{
        type: Component,
        args: [{
                providers: [
                    {
                        provide: Messages,
                        useExisting: forwardRef(() => CustomMessagesComponent)
                    }
                ],
                selector: 'kendo-dropdownlist-messages, kendo-combobox-messages, kendo-autocomplete-messages, kendo-multiselect-messages',
                template: ``
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }]; }, null); })();

const SHARED_DIRECTIVES = [
    HeaderTemplateDirective,
    FooterTemplateDirective,
    ItemTemplateDirective,
    GroupTemplateDirective,
    FixedGroupTemplateDirective,
    NoDataTemplateDirective,
    LocalizedMessagesDirective,
    CustomMessagesComponent,
    FilterDirective
];
/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `ItemTemplateDirective`&mdash;The item template directive.
 * - `HeaderTemplateDirective`&mdash;The header template directive.
 * - `FooterTemplateDirective`&mdash;The footer template directive.
 * - `NoDataTemplateDirective`&mdash;The noData template directive.
 */
class SharedDirectivesModule {
}
SharedDirectivesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SharedDirectivesModule });
SharedDirectivesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SharedDirectivesModule_Factory(t) { return new (t || SharedDirectivesModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SharedDirectivesModule, { declarations: [HeaderTemplateDirective,
        FooterTemplateDirective,
        ItemTemplateDirective,
        GroupTemplateDirective,
        FixedGroupTemplateDirective,
        NoDataTemplateDirective,
        LocalizedMessagesDirective,
        CustomMessagesComponent,
        FilterDirective], exports: [HeaderTemplateDirective,
        FooterTemplateDirective,
        ItemTemplateDirective,
        GroupTemplateDirective,
        FixedGroupTemplateDirective,
        NoDataTemplateDirective,
        LocalizedMessagesDirective,
        CustomMessagesComponent,
        FilterDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SharedDirectivesModule, [{
        type: NgModule,
        args: [{
                declarations: [SHARED_DIRECTIVES],
                exports: [SHARED_DIRECTIVES]
            }]
    }], null, null); })();

const INTERNAL_DIRECTIVES = [
    ListComponent,
    ListItemDirective,
    SelectableDirective,
    SearchBarComponent,
    TemplateContextDirective
];
/**
 * @hidden
 */
class SharedModule {
}
SharedModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SharedModule });
SharedModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SharedModule_Factory(t) { return new (t || SharedModule)(); }, imports: [[CommonModule, FormsModule, PopupModule, ResizeSensorModule, SharedDirectivesModule, EventsModule],
        CommonModule, FormsModule, PopupModule, ResizeSensorModule,
        SharedDirectivesModule,
        EventsModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SharedModule, { declarations: function () { return [ListComponent,
        ListItemDirective,
        SelectableDirective,
        SearchBarComponent,
        TemplateContextDirective]; }, imports: function () { return [CommonModule, FormsModule, PopupModule, ResizeSensorModule,
        SharedDirectivesModule,
        EventsModule]; }, exports: function () { return [ListComponent,
        ListItemDirective,
        SelectableDirective,
        SearchBarComponent,
        TemplateContextDirective,
        CommonModule, FormsModule, PopupModule, ResizeSensorModule,
        SharedDirectivesModule,
        EventsModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SharedModule, [{
        type: NgModule,
        args: [{
                declarations: [INTERNAL_DIRECTIVES],
                exports: [INTERNAL_DIRECTIVES, CommonModule, FormsModule, PopupModule, ResizeSensorModule, SharedDirectivesModule, EventsModule],
                imports: [CommonModule, FormsModule, PopupModule, ResizeSensorModule, SharedDirectivesModule, EventsModule]
            }]
    }], null, null); })();

const AUTOCOMPLETE_DIRECTIVES = [
    AutoCompleteComponent
];
/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `AutoCompleteComponent`&mdash;The AutoComplete component class.
 * - `ItemTemplateDirective`&mdash;The item template directive.
 * - `HeaderTemplateDirective`&mdash;The header template directive.
 * - `FooterTemplateDirective`&mdash;The footer template directive.
 */
class AutoCompleteModule {
}
AutoCompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AutoCompleteModule });
AutoCompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AutoCompleteModule_Factory(t) { return new (t || AutoCompleteModule)(); }, imports: [[SharedModule],
        SharedDirectivesModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AutoCompleteModule, { declarations: [AutoCompleteComponent], imports: [SharedModule], exports: [AutoCompleteComponent,
        SharedDirectivesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutoCompleteModule, [{
        type: NgModule,
        args: [{
                declarations: [AUTOCOMPLETE_DIRECTIVES],
                exports: [AUTOCOMPLETE_DIRECTIVES, SharedDirectivesModule],
                imports: [SharedModule]
            }]
    }], null, null); })();

const COMBOBOX_DIRECTIVES = [
    ComboBoxComponent
];
const ɵ0 = touchEnabled;
/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `ComboBoxComponent`&mdash;The ComboBox component class.
 * - `ItemTemplateDirective`&mdash;The item template directive.
 * - `HeaderTemplateDirective`&mdash;The header template directive.
 * - `FooterTemplateDirective`&mdash;The footer template directive.
 */
class ComboBoxModule {
}
ComboBoxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ComboBoxModule });
ComboBoxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ComboBoxModule_Factory(t) { return new (t || ComboBoxModule)(); }, providers: [{ provide: TOUCH_ENABLED, useValue: ɵ0 }], imports: [[SharedModule],
        SharedDirectivesModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ComboBoxModule, { declarations: [ComboBoxComponent], imports: [SharedModule], exports: [ComboBoxComponent,
        SharedDirectivesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ComboBoxModule, [{
        type: NgModule,
        args: [{
                declarations: [COMBOBOX_DIRECTIVES],
                exports: [COMBOBOX_DIRECTIVES, SharedDirectivesModule],
                imports: [SharedModule],
                providers: [{ provide: TOUCH_ENABLED, useValue: ɵ0 }]
            }]
    }], null, null); })();

/**
 * @hidden
 */
class FilterInputDirective {
    constructor(element, zone) {
        this.element = element;
        this.zone = zone;
    }
    ngOnChanges() {
        if (this.focused) {
            this.nextTick(() => this.element.nativeElement.focus());
        }
    }
    nextTick(fn) {
        this.zone.runOutsideAngular(() => setTimeout(fn));
    }
}
FilterInputDirective.ɵfac = function FilterInputDirective_Factory(t) { return new (t || FilterInputDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
FilterInputDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilterInputDirective, selectors: [["", "filterInput", ""]], inputs: { focused: ["filterInput", "focused"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
FilterInputDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone }
];
FilterInputDirective.propDecorators = {
    focused: [{ type: Input, args: ['filterInput',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilterInputDirective, [{
        type: Directive,
        args: [{
                selector: '[filterInput]' // tslint:disable-line
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { focused: [{
            type: Input,
            args: ['filterInput']
        }] }); })();

const DROPDOWNLIST_DIRECTIVES = [
    DropDownListComponent,
    ValueTemplateDirective,
    FilterInputDirective
];
/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `DropDownListComponent`&mdash;The DropDownList component class.
 * - `ItemTemplateDirective`&mdash;The item template directive.
 * - `ValueTemplateDirective`&mdash;The value template directive.
 * - `HeaderTemplateDirective`&mdash;The header template directive.
 * - `FooterTemplateDirective`&mdash;The footer template directive.
 */
class DropDownListModule {
}
DropDownListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownListModule });
DropDownListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownListModule_Factory(t) { return new (t || DropDownListModule)(); }, imports: [[SharedModule],
        SharedDirectivesModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownListModule, { declarations: [DropDownListComponent,
        ValueTemplateDirective,
        FilterInputDirective], imports: [SharedModule], exports: [DropDownListComponent,
        ValueTemplateDirective,
        FilterInputDirective,
        SharedDirectivesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownListModule, [{
        type: NgModule,
        args: [{
                declarations: [DROPDOWNLIST_DIRECTIVES],
                exports: [DROPDOWNLIST_DIRECTIVES, SharedDirectivesModule],
                imports: [SharedModule]
            }]
    }], null, null); })();

const MULTISELECT_DIRECTIVES = [
    MultiSelectComponent,
    TagListComponent,
    TagTemplateDirective,
    GroupTagTemplateDirective,
    SummaryTagDirective,
    CustomItemTemplateDirective
];
const ɵ0$1 = touchEnabled;
/**
 * @hidden
 *
 * The exported package module.
 *
 * The package exports:
 * - `MultiSelectComponent`&mdash;The MultiSelect component class.
 * - `SummaryTagDirective`&mdash;The MultiSelect summary tag directive.
 * - `ItemTemplateDirective`&mdash;The item template directive.
 * - `CustomItemTemplateDirective`&mdash;The custom item template directive.
 * - `TagTemplateDirective`&mdash;The tag template directive.
 * - `SummaryTagTemplateDirective`&mdash;The summary tag template directive.
 * - `HeaderTemplateDirective`&mdash;The header template directive.
 * - `FooterTemplateDirective`&mdash;The footer template directive.
 * - `NoDataTemplateDirective`&mdash;The no-data template directive.
 */
class MultiSelectModule {
}
MultiSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MultiSelectModule });
MultiSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MultiSelectModule_Factory(t) { return new (t || MultiSelectModule)(); }, providers: [{ provide: TOUCH_ENABLED, useValue: ɵ0$1 }], imports: [[SharedModule],
        SharedDirectivesModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MultiSelectModule, { declarations: [MultiSelectComponent,
        TagListComponent,
        TagTemplateDirective,
        GroupTagTemplateDirective,
        SummaryTagDirective,
        CustomItemTemplateDirective], imports: [SharedModule], exports: [MultiSelectComponent,
        TagListComponent,
        TagTemplateDirective,
        GroupTagTemplateDirective,
        SummaryTagDirective,
        CustomItemTemplateDirective,
        SharedDirectivesModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MultiSelectModule, [{
        type: NgModule,
        args: [{
                declarations: [MULTISELECT_DIRECTIVES],
                exports: [MULTISELECT_DIRECTIVES, SharedDirectivesModule],
                imports: [SharedModule],
                providers: [{ provide: TOUCH_ENABLED, useValue: ɵ0$1 }]
            }]
    }], null, null); })();

/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the Dropdowns components.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Dropdowns module
 * import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare the app component
 *     imports:      [BrowserModule, DropDownsModule], // import the Dropdowns module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
class DropDownsModule {
}
DropDownsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DropDownsModule });
DropDownsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DropDownsModule_Factory(t) { return new (t || DropDownsModule)(); }, imports: [AutoCompleteModule,
        ComboBoxModule,
        DropDownListModule,
        MultiSelectModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DropDownsModule, { exports: [AutoCompleteModule,
        ComboBoxModule,
        DropDownListModule,
        MultiSelectModule] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropDownsModule, [{
        type: NgModule,
        args: [{
                exports: [AutoCompleteModule, ComboBoxModule, DropDownListModule, MultiSelectModule]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { AUTOCOMPLETE_VALUE_ACCESSOR, COMBOBOX_VALUE_ACCESSOR, TOUCH_ENABLED, DataService, DisabledItemsService, FilterableDropDownComponentBase, ListItemDirective, CustomMessagesComponent, LocalizedMessagesDirective, Messages, NavigationService, SearchBarComponent, SelectionService, NoDataTemplateDirective, TagTemplateDirective, DROPDOWNLIST_VALUE_ACCESSOR, FilterInputDirective, AutoCompleteComponent, ComboBoxComponent, DropDownListComponent, MultiSelectComponent, TagListComponent, ItemTemplateDirective, GroupTemplateDirective, FixedGroupTemplateDirective, CustomItemTemplateDirective, HeaderTemplateDirective, FooterTemplateDirective, ValueTemplateDirective, TemplateContextDirective, GroupTagTemplateDirective, SelectableDirective, SummaryTagDirective, FilterDirective, DropDownsModule, MultiSelectModule, SharedModule, AutoCompleteModule, ComboBoxModule, DropDownListModule, SharedDirectivesModule, ListComponent, PreventableEvent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O2lGQWlDRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzsyUUFLRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7NEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O3VSQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs0RUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7dVJBS0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozs7OzRFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O2lSQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs0RUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzsrU0FLRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7NEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Z0RBR0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Z0RBR0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs0SEFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7cUVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzttSEFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OzswR0FBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7dVJBS0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozs7OzRFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OytJQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7OzsyRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cURBb0dFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0ZBdUdFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0ZBK0dFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O2tKQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs0RUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2TEE4SkU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztnS0FLRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7NEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzsySUFLRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7NEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OzBKQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs0RUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzttRkFpSkU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OzZKQXlDRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O3VMQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O29CQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7aUdBS0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7cVBBS0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O29CQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzt3T0FLRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7NEtBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtxRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O2tEQWdCRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztvRkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7eUpBWUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztvRkFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswQkFNRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBT0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OzBCQU9FO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OzswQkFRRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7cU5BS0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7b0JBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OzswQkFPRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBUUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OzBCQUtFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBDb21wb25lbnQsIFJlbmRlcmVyMiwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLCBIb3N0QmluZGluZywgRGlyZWN0aXZlLCBUZW1wbGF0ZVJlZiwgSW5qZWN0YWJsZSwgRWxlbWVudFJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgVmlld0NoaWxkcmVuLCBmb3J3YXJkUmVmLCBpc0Rldk1vZGUsIENvbnRlbnRDaGlsZCwgVmlld0NvbnRhaW5lclJlZiwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBJbmplY3QsIEtleVZhbHVlRGlmZmVycywgSG9zdExpc3RlbmVyLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNEb2N1bWVudEF2YWlsYWJsZSwgS2V5cywgaXNDaGFuZ2VkLCBoYXNPYnNlcnZlcnMsIEtlbmRvSW5wdXQsIGFueUNoYW5nZWQsIFJlc2l6ZVNlbnNvck1vZHVsZSwgRXZlbnRzTW9kdWxlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItY29tbW9uJztcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UsIEwxME5fUFJFRklYLCBDb21wb25lbnRNZXNzYWdlcyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgbWVyZ2UsIGZyb21FdmVudCwgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCBvZiwgaW50ZXJ2YWwgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFBvcHVwU2VydmljZSwgUG9wdXBNb2R1bGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1wb3B1cCc7XG5leHBvcnQgeyBQb3B1cENvbXBvbmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLXBvcHVwJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCB0YWtlLCBhdWRpdFRpbWUsIHRhcCwgZmlsdGVyLCBwYXJ0aXRpb24sIHRocm90dGxlVGltZSwgY2F0Y2hFcnJvciwgc2tpcFdoaWxlLCBjb25jYXRNYXAsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyB0b3VjaEVuYWJsZWQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tY29tbW9uJztcblxuLyogdHNsaW50OmRpc2FibGU6bm8tYml0d2lzZSAqL1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IGlzUHJlc2VudCA9ICh2YWx1ZSkgPT4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBpc051bWJlciA9ICh2YWx1ZSkgPT4gIWlzTmFOKHZhbHVlKTtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBndWlkID0gKCkgPT4ge1xuICAgIGxldCBpZCA9IFwiXCI7XG4gICAgbGV0IGk7XG4gICAgbGV0IHJhbmRvbTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgICByYW5kb20gPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xuICAgICAgICBpZiAoaSA9PT0gOCB8fCBpID09PSAxMiB8fCBpID09PSAxNiB8fCBpID09PSAyMCkge1xuICAgICAgICAgICAgaWQgKz0gXCItXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWQgKz0gKGkgPT09IDEyID8gNCA6IChpID09PSAxNiA/IChyYW5kb20gJiAzIHwgOCkgOiByYW5kb20pKS50b1N0cmluZygxNik7XG4gICAgfVxuICAgIHJldHVybiBpZDtcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgY29tYmluZVN0ciA9IChiZWdpbiwgZW5kKSA9PiB7XG4gICAgcmV0dXJuIGJlZ2luLmNvbmNhdChlbmQuc3Vic3RyKGVuZC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoYmVnaW4udG9Mb3dlckNhc2UoKSkgKyBiZWdpbi5sZW5ndGgpKTtcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgaXNBcnJheSA9ICh2YWx1ZSkgPT4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodmFsdWUpID0+IGlzUHJlc2VudCh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBpc0VtcHR5U3RyaW5nID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCByZXNvbHZlVmFsdWVzSW5BcnJheSA9ICh2YWx1ZXMsIGRhdGEgPSBbXSwgdmFsdWVGaWVsZCkgPT4gdmFsdWVzXG4gICAgLm1hcCh2YWx1ZSA9PiB7XG4gICAgcmV0dXJuIGRhdGEuZmluZChpdGVtID0+IGl0ZW1bdmFsdWVGaWVsZF0gPT09IHZhbHVlKTtcbn0pXG4gICAgLmZpbHRlcih2YWx1ZSA9PiB2YWx1ZSAhPT0gdW5kZWZpbmVkKTtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCB2YWxpZGF0ZUNvbXBsZXhWYWx1ZXMgPSAodmFsdWVzLCB2YWx1ZUZpZWxkKSA9PiBpc0FycmF5KHZhbHVlcykgJiYgdmFsdWVzLmZpbHRlcihpdGVtID0+IHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXRlbSkgJiYgaXRlbVt2YWx1ZUZpZWxkXTtcbn0pO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IHJlc29sdmVBbGxWYWx1ZXMgPSAodmFsdWUsIGRhdGEsIHZhbHVlRmllbGQpID0+IHtcbiAgICBjb25zdCBjdXN0b21WYWx1ZXMgPSB2YWxpZGF0ZUNvbXBsZXhWYWx1ZXModmFsdWUsIHZhbHVlRmllbGQpIHx8IFtdO1xuICAgIGNvbnN0IHJlc29sdmVkVmFsdWVzID0gcmVzb2x2ZVZhbHVlc0luQXJyYXkodmFsdWUsIGRhdGEsIHZhbHVlRmllbGQpIHx8IFtdO1xuICAgIHJldHVybiByZXNvbHZlZFZhbHVlcy5jb25jYXQoY3VzdG9tVmFsdWVzKTtcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgaXNPYmplY3RBcnJheSA9ICh2YWx1ZXMpID0+IHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZXMpICYmIHZhbHVlcy5ldmVyeShpdGVtID0+IGlzT2JqZWN0KGl0ZW0pKTtcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3Qgc2VsZWN0ZWRJbmRpY2VzID0gKHZhbHVlcywgZGF0YSwgdmFsdWVGaWVsZCkgPT4ge1xuICAgIGNvbnN0IGV4dHJhY3RlZFZhbHVlcyA9IGRhdGEubWFwKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KGl0ZW0pICYmIGlzUHJlc2VudChpdGVtW3ZhbHVlRmllbGRdKSA/IGl0ZW1bdmFsdWVGaWVsZF0gOiBpdGVtO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXMucmVkdWNlKChhcnIsIGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpc1ByZXNlbnQoaXRlbSkgJiYgaXNQcmVzZW50KGl0ZW1bdmFsdWVGaWVsZF0pID8gaXRlbVt2YWx1ZUZpZWxkXSA6IGl0ZW07XG4gICAgICAgIGNvbnN0IGluZGV4ID0gZXh0cmFjdGVkVmFsdWVzLmluZGV4T2YodmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBhcnIucHVzaChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9LCBbXSk7XG59O1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IGdldHRlciA9IChkYXRhSXRlbSwgZmllbGQsIHVzZVByaW1pdGl2ZSA9IGZhbHNlKSA9PiB7XG4gICAgaWYgKGlzUHJlc2VudChkYXRhSXRlbSkpIHtcbiAgICAgICAgaWYgKHVzZVByaW1pdGl2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkICYmIGlzUHJlc2VudChkYXRhSXRlbVtmaWVsZF0pID8gZGF0YUl0ZW1bZmllbGRdIDogZGF0YUl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGQgPyBkYXRhSXRlbVtmaWVsZF0gOiBkYXRhSXRlbTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3Qgc2FtZUNoYXJzT25seSA9ICh3b3JkLCBjaGFyYWN0ZXIpID0+IHtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB3b3JkLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgaWYgKHdvcmQuY2hhckF0KGlkeCkgIT09IGNoYXJhY3Rlcikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBzaHVmZmxlRGF0YSA9IChkYXRhLCBzcGxpdEluZGV4LCBkZWZhdWx0SXRlbSkgPT4ge1xuICAgIGxldCByZXN1bHQgPSBkYXRhO1xuICAgIGlmIChkZWZhdWx0SXRlbSkge1xuICAgICAgICByZXN1bHQgPSBbZGVmYXVsdEl0ZW1dLmNvbmNhdChyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnNsaWNlKHNwbGl0SW5kZXgpLmNvbmNhdChyZXN1bHQuc2xpY2UoMCwgc3BsaXRJbmRleCkpO1xufTtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBtYXRjaFRleHQgPSAodGV4dCwgd29yZCwgaWdub3JlQ2FzZSkgPT4ge1xuICAgIGlmICghaXNQcmVzZW50KHRleHQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHRlbXAgPSBTdHJpbmcodGV4dCk7XG4gICAgaWYgKGlnbm9yZUNhc2UpIHtcbiAgICAgICAgdGVtcCA9IHRlbXAudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXAuaW5kZXhPZih3b3JkKSA9PT0gMDtcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgcGFzc2VkIG9iamVjdCBoYXMgYWxsIG9mIHRoZSBsaXN0ZWQgcHJvcGVydGllcy5cbiAqL1xuY29uc3QgaGFzUHJvcHMgPSAob2JqLCBwcm9wcykgPT4ge1xuICAgIGlmICghaXNQcmVzZW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuZXZlcnkocHJvcCA9PiBvYmouaGFzT3duUHJvcGVydHkocHJvcCkpO1xufTtcbi8qKlxuICogQGhpZGRlblxuICpcbiAqIENoZWNrcyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgdW50b3VjaGVkIGJ5IGxvb2tpbmcgZm9yIHRoZSBuZy11bnRvdWNoZWQgY3NzIGNsYXNzXG4gKi9cbmNvbnN0IGlzVW50b3VjaGVkID0gKGVsZW1lbnQpID0+IGVsZW1lbnQuY2xhc3NOYW1lLmluY2x1ZGVzKCduZy11bnRvdWNoZWQnKTtcbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBub29wID0gKF8pID0+IHsgfTtcblxuLyogdHNsaW50OmRpc2FibGU6bWVtYmVyLW9yZGVyaW5nICovXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY2xhc3MgU2VhcmNoQmFyQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGl6YXRpb24sIHJlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uID0gbG9jYWxpemF0aW9uO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25OYXZpZ2F0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5zZWFyY2hCYXJDbGFzcyA9IHRydWU7XG4gICAgICAgIHRoaXMuX3VzZXJJbnB1dCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzVmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLl9wbGFjZWhvbGRlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gbG9jYWxpemF0aW9uLnJ0bCA/ICdydGwnIDogJ2x0cic7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB9XG4gICAgZ2V0IHVzZXJJbnB1dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJJbnB1dDtcbiAgICB9XG4gICAgc2V0IHVzZXJJbnB1dCh1c2VySW5wdXQpIHtcbiAgICAgICAgdGhpcy5fdXNlcklucHV0ID0gdXNlcklucHV0IHx8IFwiXCI7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHBsYWNlaG9sZGVyKHRleHQpIHtcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIgPSB0ZXh0IHx8ICcnO1xuICAgICAgICB0aGlzLnNldElucHV0U2l6ZSgpO1xuICAgIH1cbiAgICBnZXQgcGxhY2Vob2xkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uID0gdGhpcy5sb2NhbGl6YXRpb25cbiAgICAgICAgICAgIC5jaGFuZ2VzLnN1YnNjcmliZSgoeyBydGwgfSkgPT4gdGhpcy5kaXJlY3Rpb24gPSBydGwgPyAncnRsJyA6ICdsdHInKTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBsZXQgcHJldmlvdXNVc2VySW5wdXQ7XG4gICAgICAgIGlmICh0aGlzLmlucHV0ICYmIChjaGFuZ2VzLnVzZXJJbnB1dCB8fCBjaGFuZ2VzLnN1Z2dlc3RlZFRleHQpKSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlcy51c2VySW5wdXQgJiYgY2hhbmdlcy51c2VySW5wdXQucHJldmlvdXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcmV2aW91c1ZhbHVlID09PSBjaGFuZ2VzLnVzZXJJbnB1dC5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVXNlcklucHV0ID0gdGhpcy5fcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVXNlcklucHV0ID0gY2hhbmdlcy51c2VySW5wdXQuY3VycmVudFZhbHVlIHx8IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNVc2VySW5wdXQgPSB0aGlzLl9wcmV2aW91c1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2FyZXRJbmRleCA9IHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudC5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIGNvbnN0IGNhcmV0QXRFbmQgPSBwcmV2aW91c1VzZXJJbnB1dC5sZW5ndGggPT09IGNhcmV0SW5kZXg7XG4gICAgICAgICAgICB0aGlzLndyaXRlSW5wdXRWYWx1ZSh0aGlzLnN1Z2dlc3RlZFRleHQgPyBjb21iaW5lU3RyKHRoaXMudXNlcklucHV0LCB0aGlzLnN1Z2dlc3RlZFRleHQpIDogdGhpcy51c2VySW5wdXQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3VnZ2VzdGVkVGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SW5wdXRTZWxlY3Rpb24odGhpcy51c2VySW5wdXQubGVuZ3RoLCB0aGlzLnN1Z2dlc3RlZFRleHQubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNhcmV0QXRFbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldElucHV0U2VsZWN0aW9uKHRoaXMudXNlcklucHV0Lmxlbmd0aCwgdGhpcy51c2VySW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0SW5wdXRTZWxlY3Rpb24oY2FyZXRJbmRleCwgY2FyZXRJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c1ZhbHVlID0gdGhpcy51c2VySW5wdXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLmxvY2FsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5sb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cml0ZUlucHV0VmFsdWUodGV4dCkge1xuICAgICAgICBpZiAoaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCwgJ3ZhbHVlJywgdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0SW5wdXRTZWxlY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAoaXNEb2N1bWVudEF2YWlsYWJsZSgpICYmIHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vTWFrZSBzdXJlIHRoYXQgdGhlIGVsZW1lbnQgaXMgaW4gdGhlIERPTSBiZWZvcmUgeW91IGludm9rZSBpdHMgbWV0aG9kc1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZUlucHV0KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgIT09IHRoaXMudXNlcklucHV0KSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c1ZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZUZvY3VzKGV2ZW50KSB7XG4gICAgICAgIHRoaXMub25Gb2N1cy5lbWl0KGV2ZW50KTtcbiAgICB9XG4gICAgaGFuZGxlQmx1cihldmVudCkge1xuICAgICAgICB0aGlzLm9uQmx1ci5lbWl0KGV2ZW50KTtcbiAgICB9XG4gICAgaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgICAgICBjb25zdCBrZXlDb2RlID0gZXZlbnQua2V5Q29kZTtcbiAgICAgICAgY29uc3Qga2V5cyA9IFtLZXlzLkFycm93VXAsIEtleXMuQXJyb3dEb3duLCBLZXlzLkFycm93TGVmdCwgS2V5cy5BcnJvd1JpZ2h0LCBLZXlzLkVudGVyLFxuICAgICAgICAgICAgS2V5cy5Fc2NhcGUsIEtleXMuRGVsZXRlLCBLZXlzLkJhY2tzcGFjZSwgS2V5cy5Ib21lLCBLZXlzLkVuZF07XG4gICAgICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5Q29kZSkgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5vbk5hdmlnYXRlLmVtaXQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvY3VzKCkge1xuICAgICAgICBpZiAoaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBibHVyKCkge1xuICAgICAgICBpZiAoaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldElucHV0U2l6ZSgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoT2YgPSB4ID0+IHggPyB4Lmxlbmd0aCA6IDA7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlckxlbmd0aCA9IGxlbmd0aE9mKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICBjb25zdCB0ZXh0TGVuZ3RoID0gbGVuZ3RoT2YodGhpcy52YWx1ZSk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBNYXRoLm1heChwbGFjZWhvbGRlckxlbmd0aCwgdGV4dExlbmd0aCwgMSk7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKGlucHV0LCAnc2l6ZScsIHNpemUudG9TdHJpbmcoKSk7XG4gICAgfVxufVxuU2VhcmNoQmFyQ29tcG9uZW50LmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdrZW5kby1zZWFyY2hiYXInLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxpbnB1dCAjaW5wdXRcbiAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICBbaWRdPVwiaWRcIlxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICAgICAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwicGxhY2Vob2xkZXJcIlxuICAgICAgICAgICAgW2NsYXNzXT1cIidrLWlucHV0J1wiXG4gICAgICAgICAgICAoaW5wdXQpPVwiaGFuZGxlSW5wdXQoJGV2ZW50KVwiXG4gICAgICAgICAgICAoa2V5ZG93bik9XCJoYW5kbGVLZXlkb3duKCRldmVudClcIlxuICAgICAgICAgICAgW2tlbmRvRXZlbnRzT3V0c2lkZUFuZ3VsYXJdPVwie1xuICAgICAgICAgICAgICAgIGZvY3VzOiBoYW5kbGVGb2N1cyxcbiAgICAgICAgICAgICAgICBibHVyOiBoYW5kbGVCbHVyXG4gICAgICAgICAgICB9XCJcbiAgICAgICAgICAgIFtzY29wZV09XCJ0aGlzXCJcbiAgICAgICAgICAgIFthdHRyLnRhYkluZGV4XT1cInRhYkluZGV4XCJcbiAgICAgICAgICAgIFthdHRyLmRpcl09XCJkaXJlY3Rpb25cIlxuICAgICAgICAgICAgW2F0dHIucm9sZV09XCJyb2xlXCJcbiAgICAgICAgICAgIFthdHRyLmFyaWEtZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgW2F0dHIuYXJpYS1yZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgICBhcmlhLWhhc3BvcHVwPVwibGlzdGJveFwiXG4gICAgICAgICAgICBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cInBvcHVwT3BlblwiXG4gICAgICAgICAgICBbYXR0ci5hcmlhLW93bnNdPVwibGlzdElkXCJcbiAgICAgICAgICAgIFthdHRyLmFyaWEtZGVzY3JpYmVkYnldPVwidGFnTGlzdElkXCJcbiAgICAgICAgICAgIFthdHRyLmFyaWEtYWN0aXZlZGVzY2VuZGFudF09XCJhY3RpdmVEZXNjZW5kYW50XCJcbiAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwibm9EYXRhTGFiZWxcIlxuICAgICAgICAvPlxuICAgYFxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5TZWFyY2hCYXJDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBMb2NhbGl6YXRpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBSZW5kZXJlcjIgfVxuXTtcblNlYXJjaEJhckNvbXBvbmVudC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICBpZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbGlzdElkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0YWdMaXN0SWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGFjdGl2ZURlc2NlbmRhbnQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIG5vRGF0YUxhYmVsOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBkaXNhYmxlZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcmVhZG9ubHk6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRhYkluZGV4OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBwb3B1cE9wZW46IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHJvbGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHVzZXJJbnB1dDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgc3VnZ2VzdGVkVGV4dDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWVDaGFuZ2U6IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBvbkJsdXI6IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBvbkZvY3VzOiBbeyB0eXBlOiBPdXRwdXQgfV0sXG4gICAgb25DbGljazogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9uTmF2aWdhdGU6IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBpbnB1dDogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ2lucHV0JywgeyBzdGF0aWM6IHRydWUgfSxdIH1dLFxuICAgIHNlYXJjaEJhckNsYXNzOiBbeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLXNlYXJjaGJhcicsXSB9XSxcbiAgICBwbGFjZWhvbGRlcjogW3sgdHlwZTogSW5wdXQgfV1cbn07XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBSZW5kZXJzIHRoZSBsaXN0IGl0ZW0gY29udGVudC4gVG8gZGVmaW5lIHRoZSBpdGVtIHRlbXBsYXRlLCBuZXN0IGFuIGA8bmctdGVtcGxhdGU+YCB0YWdcbiAqIHdpdGggdGhlIGBrZW5kbzxDb21wb25lbnROYW1lPkl0ZW1UZW1wbGF0ZWAgZGlyZWN0aXZlIGluc2lkZSB0aGUgY29tcG9uZW50IHRhZy4gVGhlIHRlbXBsYXRlIGNvbnRleHQgaXNcbiAqIHNldCB0byB0aGUgY3VycmVudCBjb21wb25lbnQuIFRvIGdldCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBkYXRhIGl0ZW0sIHVzZSB0aGUgYGxldC1kYXRhSXRlbWAgZGlyZWN0aXZlLlxuICpcbiAqIC0gW1VzaW5nIGBJdGVtVGVtcGxhdGVgIHdpdGggdGhlIEF1dG9Db21wbGV0ZV0oeyUgc2x1ZyB0ZW1wbGF0ZXNfYXV0b2NvbXBsZXRlICV9I3RvYy1pdGVtLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYEl0ZW1UZW1wbGF0ZWAgd2l0aCB0aGUgQ29tYm9Cb3hdKHslIHNsdWcgdGVtcGxhdGVzX2NvbWJvYm94ICV9I3RvYy1pdGVtLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYEl0ZW1UZW1wbGF0ZWAgd2l0aCB0aGUgRHJvcERvd25MaXN0XSh7JSBzbHVnIHRlbXBsYXRlc19kZGwgJX0jdG9jLWl0ZW0tdGVtcGxhdGUpXG4gKiAtIFtVc2luZyBgSXRlbVRlbXBsYXRlYCB3aXRoIHRoZSBNdWx0aVNlbGVjdF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfbXVsdGlzZWxlY3QgJX0jdG9jLWl0ZW0tdGVtcGxhdGUpXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1jb21ib2JveCBbZGF0YV09XCJsaXN0SXRlbXNcIj5cbiAqICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0NvbWJvQm94SXRlbVRlbXBsYXRlIGxldC1kYXRhSXRlbT5cbiAqICAgICAgPHNwYW4+e3tkYXRhSXRlbX19IG9wdGlvbjwvc3Bhbj5cbiAqICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgPC9rZW5kby1jb21ib2JveD5cbiAqIGBcbiAqIH0pXG4gKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICBwdWJsaWMgbGlzdEl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW1wiSXRlbSAxXCIsIFwiSXRlbSAyXCIsIFwiSXRlbSAzXCIsIFwiSXRlbSA0XCJdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIEl0ZW1UZW1wbGF0ZURpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGVSZWYpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVJlZiA9IHRlbXBsYXRlUmVmO1xuICAgIH1cbn1cbkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2tlbmRvRHJvcERvd25MaXN0SXRlbVRlbXBsYXRlXSxba2VuZG9Db21ib0JveEl0ZW1UZW1wbGF0ZV0sW2tlbmRvQXV0b0NvbXBsZXRlSXRlbVRlbXBsYXRlXSxba2VuZG9NdWx0aVNlbGVjdEl0ZW1UZW1wbGF0ZV0nXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IFRlbXBsYXRlUmVmIH1cbl07XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBSZW5kZXJzIHRoZSBoZWFkZXIgY29udGVudCBvZiB0aGUgbGlzdC4gVG8gZGVmaW5lIHRoZSBoZWFkZXIgdGVtcGxhdGUsIG5lc3QgYW4gYDxuZy10ZW1wbGF0ZT5gIHRhZ1xuICogd2l0aCB0aGUgYGtlbmRvPENvbXBvbmVudE5hbWU+SGVhZGVyVGVtcGxhdGVgIGRpcmVjdGl2ZSBpbnNpZGUgdGhlIGNvbXBvbmVudCB0YWcuXG4gKlxuICogLSBbVXNpbmcgYEhlYWRlclRlbXBsYXRlYCB3aXRoIHRoZSBBdXRvQ29tcGxldGVdKHslIHNsdWcgdGVtcGxhdGVzX2F1dG9jb21wbGV0ZSAlfSN0b2MtaGVhZGVyLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYEhlYWRlclRlbXBsYXRlYCB3aXRoIHRoZSBDb21ib0JveF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfY29tYm9ib3ggJX0jdG9jLWhlYWRlci10ZW1wbGF0ZSlcbiAqIC0gW1VzaW5nIGBIZWFkZXJUZW1wbGF0ZWAgd2l0aCB0aGUgRHJvcERvd25MaXN0XSh7JSBzbHVnIHRlbXBsYXRlc19kZGwgJX0jdG9jLWhlYWRlci10ZW1wbGF0ZSlcbiAqIC0gW1VzaW5nIGBIZWFkZXJUZW1wbGF0ZWAgd2l0aCB0aGUgTXVsdGlTZWxlY3RdKHslIHNsdWcgdGVtcGxhdGVzX211bHRpc2VsZWN0ICV9I3RvYy1oZWFkZXItdGVtcGxhdGUpXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1jb21ib2JveCBbZGF0YV09XCJsaXN0SXRlbXNcIj5cbiAqICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0NvbWJvQm94SGVhZGVyVGVtcGxhdGU+XG4gKiAgICAgIDxoND5IZWFkZXIgdGVtcGxhdGU8L2g0PlxuICogICAgPC9uZy10ZW1wbGF0ZT5cbiAqICA8L2tlbmRvLWNvbWJvYm94PlxuICogYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgIHB1YmxpYyBsaXN0SXRlbXM6IEFycmF5PHN0cmluZz4gPSBbXCJJdGVtIDFcIiwgXCJJdGVtIDJcIiwgXCJJdGVtIDNcIiwgXCJJdGVtIDRcIl07XG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZjtcbiAgICB9XG59XG5IZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2tlbmRvRHJvcERvd25MaXN0SGVhZGVyVGVtcGxhdGVdLFtrZW5kb0NvbWJvQm94SGVhZGVyVGVtcGxhdGVdLFtrZW5kb0F1dG9Db21wbGV0ZUhlYWRlclRlbXBsYXRlXSxba2VuZG9NdWx0aVNlbGVjdEhlYWRlclRlbXBsYXRlXSdcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBUZW1wbGF0ZVJlZiB9XG5dO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogUmVuZGVycyB0aGUgZm9vdGVyIGNvbnRlbnQgb2YgdGhlIGxpc3QuIFRvIGRlZmluZSB0aGUgZm9vdGVyIHRlbXBsYXRlLCBuZXN0IGFuIGA8bmctdGVtcGxhdGU+YCB0YWdcbiAqIHdpdGggdGhlIGBrZW5kbzxDb21wb25lbnROYW1lPkZvb3RlclRlbXBsYXRlYCBkaXJlY3RpdmUgaW5zaWRlIHRoZSBjb21wb25lbnQgdGFnLlxuICpcbiAqIC0gW1VzaW5nIGBGb290ZXJUZW1wbGF0ZWAgd2l0aCB0aGUgQXV0b0NvbXBsZXRlXSh7JSBzbHVnIHRlbXBsYXRlc19hdXRvY29tcGxldGUgJX0jdG9jLWZvb3Rlci10ZW1wbGF0ZSlcbiAqIC0gW1VzaW5nIGBGb290ZXJUZW1wbGF0ZWAgd2l0aCB0aGUgQ29tYm9Cb3hdKHslIHNsdWcgdGVtcGxhdGVzX2NvbWJvYm94ICV9I3RvYy1mb290ZXItdGVtcGxhdGUpXG4gKiAtIFtVc2luZyBgRm9vdGVyVGVtcGxhdGVgIHdpdGggdGhlIERyb3BEb3duTGlzdF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfZGRsICV9I3RvYy1mb290ZXItdGVtcGxhdGUpXG4gKiAtIFtVc2luZyBgRm9vdGVyVGVtcGxhdGVgIHdpdGggdGhlIE11bHRpU2VsZWN0XSh7JSBzbHVnIHRlbXBsYXRlc19tdWx0aXNlbGVjdCAlfSN0b2MtZm9vdGVyLXRlbXBsYXRlKVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogX0BDb21wb25lbnQoe1xuICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICogdGVtcGxhdGU6IGBcbiAqICA8a2VuZG8tY29tYm9ib3ggW2RhdGFdPVwibGlzdEl0ZW1zXCI+XG4gKiAgICA8bmctdGVtcGxhdGUga2VuZG9Db21ib0JveEZvb3RlclRlbXBsYXRlPlxuICogICAgICA8aDQ+Rm9vdGVyIHRlbXBsYXRlPC9oND5cbiAqICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgPC9rZW5kby1jb21ib2JveD5cbiAqIGBcbiAqIH0pXG4gKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICBwdWJsaWMgbGlzdEl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW1wiSXRlbSAxXCIsIFwiSXRlbSAyXCIsIFwiSXRlbSAzXCIsIFwiSXRlbSA0XCJdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIEZvb3RlclRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZikge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWY7XG4gICAgfVxufVxuRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1trZW5kb0Ryb3BEb3duTGlzdEZvb3RlclRlbXBsYXRlXSxba2VuZG9Db21ib0JveEZvb3RlclRlbXBsYXRlXSxba2VuZG9BdXRvQ29tcGxldGVGb290ZXJUZW1wbGF0ZV0sW2tlbmRvTXVsdGlTZWxlY3RGb290ZXJUZW1wbGF0ZV0nXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkZvb3RlclRlbXBsYXRlRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogVGVtcGxhdGVSZWYgfVxuXTtcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKipcbiAqIFJlbmRlcnMgdGhlIGdyb3VwIGhlYWRlciBjb250ZW50LiBUbyBkZWZpbmUgdGhlIGdyb3VwIHRlbXBsYXRlLCBuZXN0IGFuIGA8bmctdGVtcGxhdGU+YCB0YWdcbiAqIHdpdGggdGhlIGBrZW5kbzxDb21wb25lbnROYW1lPkdyb3VwVGVtcGxhdGVgIGRpcmVjdGl2ZSBpbnNpZGUgdGhlIGNvbXBvbmVudCB0YWcuIFRoZSB0ZW1wbGF0ZSBjb250ZXh0IGlzXG4gKiBzZXQgdG8gdGhlIGN1cnJlbnQgY29tcG9uZW50LiBUbyBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgZGF0YSBpdGVtLCB1c2UgdGhlIGBsZXQtZ3JvdXBOYW1lYCBkaXJlY3RpdmUuXG4gKlxuICogLSBbVXNpbmcgYEdyb3VwVGVtcGxhdGVgIHdpdGggdGhlIEF1dG9Db21wbGV0ZV0oeyUgc2x1ZyB0ZW1wbGF0ZXNfYXV0b2NvbXBsZXRlICV9I3RvYy1ncm91cC10ZW1wbGF0ZSlcbiAqIC0gW1VzaW5nIGBHcm91cFRlbXBsYXRlYCB3aXRoIHRoZSBDb21ib0JveF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfY29tYm9ib3ggJX0jdG9jLWdyb3VwLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYEdyb3VwVGVtcGxhdGVgIHdpdGggdGhlIERyb3BEb3duTGlzdF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfZGRsICV9I3RvYy1ncm91cC10ZW1wbGF0ZSlcbiAqIC0gW1VzaW5nIGBHcm91cFRlbXBsYXRlYCB3aXRoIHRoZSBNdWx0aVNlbGVjdF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfbXVsdGlzZWxlY3QgJX0jdG9jLWdyb3VwLXRlbXBsYXRlKVxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZ3JvdXBCeSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbiAqIF9AQ29tcG9uZW50KHtcbiAqIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqIHRlbXBsYXRlOiBgXG4gKiAgPGtlbmRvLWNvbWJvYm94IFtkYXRhXT1cImdyb3VwZWREYXRhXCIgW3RleHRGaWVsZF09XCInbmFtZSdcIiBbdmFsdWVGaWVsZF09XCInbmFtZSdcIj5cbiAqICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0NvbWJvQm94R3JvdXBUZW1wbGF0ZSBsZXQtZ3JvdXBOYW1lPlxuICogICAgICA8c3Bhbj5Gb29kIHR5cGU6IHt7Z3JvdXBOYW1lfX0gb3B0aW9uPC9zcGFuPlxuICogICAgPC9uZy10ZW1wbGF0ZT5cbiAqICA8L2tlbmRvLWNvbWJvYm94PlxuICogYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgIHB1YmxpYyBkYXRhID0gW1xuICogICAgICAgeyBuYW1lOiBcIlBvcmtcIiwgY2F0ZWdvcnk6IFwiRm9vZFwiLCBzdWJjYXRlZ29yeTogXCJNZWF0XCIgfSxcbiAqICAgICAgIHsgbmFtZTogXCJQZXBwZXJcIiwgY2F0ZWdvcnk6IFwiRm9vZFwiLCBzdWJjYXRlZ29yeTogXCJWZWdldGFibGVzXCIgfSxcbiAqICAgICAgIHsgbmFtZTogXCJCZWVmXCIsIGNhdGVnb3J5OiBcIkZvb2RcIiwgc3ViY2F0ZWdvcnk6IFwiTWVhdFwiIH1cbiAqICAgXTtcbiAqICAgcHVibGljIGdyb3VwZWREYXRhID0gZ3JvdXBCeSh0aGlzLmRhdGEsIFt7ZmllbGQ6IFwic3ViY2F0ZWdvcnlcIn1dKTtcbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBHcm91cFRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZikge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWY7XG4gICAgfVxufVxuR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2tlbmRvRHJvcERvd25MaXN0R3JvdXBUZW1wbGF0ZV0sW2tlbmRvQ29tYm9Cb3hHcm91cFRlbXBsYXRlXSxba2VuZG9BdXRvQ29tcGxldGVHcm91cFRlbXBsYXRlXSxba2VuZG9NdWx0aVNlbGVjdEdyb3VwVGVtcGxhdGVdJ1xuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5Hcm91cFRlbXBsYXRlRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogVGVtcGxhdGVSZWYgfVxuXTtcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKipcbiAqIFJlbmRlcnMgdGhlIGZpeGVkIGdyb3VwIGhlYWRlciBjb250ZW50LiBUbyBkZWZpbmUgdGhlIGZpeGVkIGdyb3VwIHRlbXBsYXRlLCBuZXN0IGFuIGA8bmctdGVtcGxhdGU+YCB0YWdcbiAqIHdpdGggdGhlIGBrZW5kbzxDb21wb25lbnROYW1lPkZpeGVkR3JvdXBUZW1wbGF0ZWAgZGlyZWN0aXZlIGluc2lkZSB0aGUgY29tcG9uZW50IHRhZy4gVGhlIHRlbXBsYXRlIGNvbnRleHQgaXNcbiAqIHNldCB0byB0aGUgY3VycmVudCBjb21wb25lbnQuIFRvIGdldCBhIHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBkYXRhIGl0ZW0sIHVzZSB0aGUgYGxldC1ncm91cE5hbWVgIGRpcmVjdGl2ZS5cbiAqXG4gKiAtIFtVc2luZyBgRml4ZWRHcm91cFRlbXBsYXRlYCB3aXRoIHRoZSBBdXRvQ29tcGxldGVdKHslIHNsdWcgdGVtcGxhdGVzX2F1dG9jb21wbGV0ZSAlfSN0b2MtZml4ZWQtZ3JvdXAtdGVtcGxhdGUpXG4gKiAtIFtVc2luZyBgRml4ZWRHcm91cFRlbXBsYXRlYCB3aXRoIHRoZSBDb21ib0JveF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfY29tYm9ib3ggJX0jdG9jLWZpeGVkLWdyb3VwLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYEZpeGVkR3JvdXBUZW1wbGF0ZWAgd2l0aCB0aGUgRHJvcERvd25MaXN0XSh7JSBzbHVnIHRlbXBsYXRlc19kZGwgJX0jdG9jLWZpeGVkLWdyb3VwLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYEZpeGVkR3JvdXBUZW1wbGF0ZWAgd2l0aCB0aGUgTXVsdGlTZWxlY3RdKHslIHNsdWcgdGVtcGxhdGVzX211bHRpc2VsZWN0ICV9I3RvYy1maXhlZC1ncm91cC10ZW1wbGF0ZSlcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGdyb3VwQnkgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZGF0YS1xdWVyeSc7XG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1jb21ib2JveCBbZGF0YV09XCJncm91cGVkRGF0YVwiIFt0ZXh0RmllbGRdPVwiJ25hbWUnXCIgW3ZhbHVlRmllbGRdPVwiJ25hbWUnXCI+XG4gKiAgICA8bmctdGVtcGxhdGUga2VuZG9Db21ib0JveEZpeGVkR3JvdXBUZW1wbGF0ZSBsZXQtZ3JvdXBOYW1lPlxuICogICAgICA8c3Bhbj5Gb29kIHR5cGU6IHt7Z3JvdXBOYW1lfX0gb3B0aW9uPC9zcGFuPlxuICogICAgPC9uZy10ZW1wbGF0ZT5cbiAqICA8L2tlbmRvLWNvbWJvYm94PlxuICogYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgIHB1YmxpYyBkYXRhID0gW1xuICogICAgICAgeyBuYW1lOiBcIlBvcmtcIiwgY2F0ZWdvcnk6IFwiRm9vZFwiLCBzdWJjYXRlZ29yeTogXCJNZWF0XCIgfSxcbiAqICAgICAgIHsgbmFtZTogXCJQZXBwZXJcIiwgY2F0ZWdvcnk6IFwiRm9vZFwiLCBzdWJjYXRlZ29yeTogXCJWZWdldGFibGVzXCIgfSxcbiAqICAgICAgIHsgbmFtZTogXCJCZWVmXCIsIGNhdGVnb3J5OiBcIkZvb2RcIiwgc3ViY2F0ZWdvcnk6IFwiTWVhdFwiIH1cbiAqICAgXTtcbiAqICAgcHVibGljIGdyb3VwZWREYXRhID0gZ3JvdXBCeSh0aGlzLmRhdGEsIFt7ZmllbGQ6IFwic3ViY2F0ZWdvcnlcIn1dKTtcbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZjtcbiAgICB9XG59XG5GaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1trZW5kb0Ryb3BEb3duTGlzdEZpeGVkR3JvdXBUZW1wbGF0ZV0sW2tlbmRvQ29tYm9Cb3hGaXhlZEdyb3VwVGVtcGxhdGVdLFtrZW5kb0F1dG9Db21wbGV0ZUZpeGVkR3JvdXBUZW1wbGF0ZV0sW2tlbmRvTXVsdGlTZWxlY3RGaXhlZEdyb3VwVGVtcGxhdGVdJ1xuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5GaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBUZW1wbGF0ZVJlZiB9XG5dO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY2xhc3MgU2VsZWN0aW9uU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMub25TZWxlY3QgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy50b3RhbCA9IDA7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRpY2VzID0gW107XG4gICAgfVxuICAgIGdldFRvdGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b3RhbDtcbiAgICB9XG4gICAgaXNTZWxlY3RlZChpbmRleCkge1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMuc2VsZWN0ZWRJbmRpY2VzLmZpbmQoY3VycmVudCA9PiBjdXJyZW50ID09PSBpbmRleCkpO1xuICAgIH1cbiAgICBpc0ZvY3VzZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID09PSB0aGlzLmZvY3VzZWQ7XG4gICAgfVxuICAgIGZvY3VzKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzRm9jdXNlZChpbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvY3VzZWQgPSBpbmRleDtcbiAgICAgICAgdGhpcy5vbkZvY3VzLmVtaXQoaW5kZXgpO1xuICAgIH1cbiAgICBzZWxlY3QoaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RlZChpbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kaWNlcyA9IFtpbmRleF07XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IGluZGV4O1xuICAgICAgICB0aGlzLm9uU2VsZWN0LmVtaXQoe1xuICAgICAgICAgICAgaW5kaWNlczogW2luZGV4XSxcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbjogaXNQcmVzZW50KGluZGV4KVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzU2VsZWN0ZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGljZXMucHVzaChpbmRleCk7XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IGluZGV4O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlLmVtaXQoe1xuICAgICAgICAgICAgYWRkZWQ6IGluZGV4LFxuICAgICAgICAgICAgaW5kaWNlczogdGhpcy5zZWxlY3RlZEluZGljZXMuc2xpY2UoKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdW5zZWxlY3QoaW5kZXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU2VsZWN0ZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnNlbGVjdGVkSW5kaWNlcy5pbmRleE9mKGluZGV4KTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGljZXMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgdGhpcy5mb2N1c2VkID0gaW5kZXg7XG4gICAgICAgIHRoaXMub25DaGFuZ2UuZW1pdCh7XG4gICAgICAgICAgICBpbmRpY2VzOiB0aGlzLnNlbGVjdGVkSW5kaWNlcy5zbGljZSgpLFxuICAgICAgICAgICAgcmVtb3ZlZDogaW5kZXhcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNoYW5nZShpbmRleCkge1xuICAgICAgICBjb25zdCBuZXdTZWxlY3Rpb24gPSBpc1ByZXNlbnQoaW5kZXgpICYmICF0aGlzLmlzU2VsZWN0ZWQoaW5kZXgpO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kaWNlcyA9IFtpbmRleF07XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IGluZGV4O1xuICAgICAgICB0aGlzLm9uQ2hhbmdlLmVtaXQoe1xuICAgICAgICAgICAgaW5kaWNlczogW2luZGV4XSxcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbjogbmV3U2VsZWN0aW9uXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXNldFNlbGVjdGlvbihpbmRleCkge1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kaWNlcyA9IGluZGV4IGluc3RhbmNlb2YgQXJyYXkgPyBpbmRleCA6IFtpbmRleF07XG4gICAgICAgIHRoaXMuZm9jdXNlZCA9IHRoaXMuc2VsZWN0ZWRJbmRpY2VzW3RoaXMuc2VsZWN0ZWRJbmRpY2VzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSW5kaWNlcy5zbGljZSgpO1xuICAgIH1cbiAgICBnZXQgZm9jdXNlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNlZEluZGV4O1xuICAgIH1cbiAgICBzZXQgZm9jdXNlZChpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5mb2N1c2VkSW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy5vbkZvY3VzLmVtaXQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxufVxuU2VsZWN0aW9uU2VydmljZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuXTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBOYXZpZ2F0aW9uQWN0aW9uO1xuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uQWN0aW9uKSB7XG4gICAgTmF2aWdhdGlvbkFjdGlvbltOYXZpZ2F0aW9uQWN0aW9uW1wiVW5kZWZpbmVkXCJdID0gMF0gPSBcIlVuZGVmaW5lZFwiO1xuICAgIE5hdmlnYXRpb25BY3Rpb25bTmF2aWdhdGlvbkFjdGlvbltcIk9wZW5cIl0gPSAxXSA9IFwiT3BlblwiO1xuICAgIE5hdmlnYXRpb25BY3Rpb25bTmF2aWdhdGlvbkFjdGlvbltcIkNsb3NlXCJdID0gMl0gPSBcIkNsb3NlXCI7XG4gICAgTmF2aWdhdGlvbkFjdGlvbltOYXZpZ2F0aW9uQWN0aW9uW1wiRW50ZXJcIl0gPSAzXSA9IFwiRW50ZXJcIjtcbiAgICBOYXZpZ2F0aW9uQWN0aW9uW05hdmlnYXRpb25BY3Rpb25bXCJUYWJcIl0gPSA0XSA9IFwiVGFiXCI7XG4gICAgTmF2aWdhdGlvbkFjdGlvbltOYXZpZ2F0aW9uQWN0aW9uW1wiRXNjXCJdID0gNV0gPSBcIkVzY1wiO1xuICAgIE5hdmlnYXRpb25BY3Rpb25bTmF2aWdhdGlvbkFjdGlvbltcIkRlbGV0ZVwiXSA9IDZdID0gXCJEZWxldGVcIjtcbiAgICBOYXZpZ2F0aW9uQWN0aW9uW05hdmlnYXRpb25BY3Rpb25bXCJCYWNrc3BhY2VcIl0gPSA3XSA9IFwiQmFja3NwYWNlXCI7XG4gICAgTmF2aWdhdGlvbkFjdGlvbltOYXZpZ2F0aW9uQWN0aW9uW1wiSG9tZVwiXSA9IDhdID0gXCJIb21lXCI7XG4gICAgTmF2aWdhdGlvbkFjdGlvbltOYXZpZ2F0aW9uQWN0aW9uW1wiRW5kXCJdID0gOV0gPSBcIkVuZFwiO1xuICAgIE5hdmlnYXRpb25BY3Rpb25bTmF2aWdhdGlvbkFjdGlvbltcIlVwXCJdID0gMTBdID0gXCJVcFwiO1xuICAgIE5hdmlnYXRpb25BY3Rpb25bTmF2aWdhdGlvbkFjdGlvbltcIkRvd25cIl0gPSAxMV0gPSBcIkRvd25cIjtcbiAgICBOYXZpZ2F0aW9uQWN0aW9uW05hdmlnYXRpb25BY3Rpb25bXCJMZWZ0XCJdID0gMTJdID0gXCJMZWZ0XCI7XG4gICAgTmF2aWdhdGlvbkFjdGlvbltOYXZpZ2F0aW9uQWN0aW9uW1wiUmlnaHRcIl0gPSAxM10gPSBcIlJpZ2h0XCI7XG59KShOYXZpZ2F0aW9uQWN0aW9uIHx8IChOYXZpZ2F0aW9uQWN0aW9uID0ge30pKTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIERhdGFTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ncm91cGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZ3JvdXBJbmRpY2VzID0gW107XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ3JvdXBlZCA9IHRoaXMuaXNHcm91cGVkKGRhdGEpO1xuICAgICAgICBpZiAodGhpcy5ncm91cGVkKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwSW5kaWNlcyA9IHRoaXMuZ2V0R3JvdXBJbmRpY2VzKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5fZmxhdERhdGEgPSB0aGlzLmZsYXR0ZW4oZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIGlmICh0aGlzLmdyb3VwZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mbGF0RGF0YTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVzZWQgdG8gZ2V0IHRoZSBhY3R1YWwgaXRlbXMgY291bnQsIGkuZS4gZXhjbHVkaW5nIHRoZSBoZWFkZXIgaXRlbXMgaW4gY2FzZSBvZiBncm91cGluZy5cbiAgICAgKi9cbiAgICBnZXQgaXRlbXNDb3VudCgpIHtcbiAgICAgICAgaWYgKCFpc1ByZXNlbnQodGhpcy5kYXRhKSB8fCB0aGlzLmRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ3JvdXBlZCA/IHRoaXMuX2ZsYXREYXRhLmZpbHRlcihpdGVtID0+ICFpdGVtLmhlYWRlcikgOiB0aGlzLmRhdGE7XG4gICAgICAgIHJldHVybiBpdGVtcy5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBVc2VkIHRvIGRldGVybWluZSBpZiB0aGUgY29tcG9uZW50IHJlY2VpdmVkIGdyb3VwZWQgZGF0YS5cbiAgICAgKi9cbiAgICBpc0dyb3VwZWQoZGF0YSkge1xuICAgICAgICAvLyBHcm91cFJlc3VsdCB7IGFnZ3JlZ2F0ZXM6IEFnZ3JlZ2F0ZVJlc3VsdCwgZmllbGQ6IHN0cmluZywgaXRlbXM6IG9iamVjdFtdLCB2YWx1ZTogYW55IH1cbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudGVsZXJpay5jb20va2VuZG8tYW5ndWxhci11aS9jb21wb25lbnRzL2RhdGFxdWVyeS9hcGkvR3JvdXBSZXN1bHQvXG4gICAgICAgIHJldHVybiAoaXNQcmVzZW50KGRhdGEpICYmIGRhdGEubGVuZ3RoICE9PSAwKSAmJiBpc1ByZXNlbnQoZGF0YVswXSkgJiYgaGFzUHJvcHMoZGF0YVswXSwgWydhZ2dyZWdhdGVzJywgJ2ZpZWxkJywgJ2l0ZW1zJywgJ3ZhbHVlJ10pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCB0byBjYWxjdWxhdGUgdGhlIGxhc3QgaXRlbSBpbmRleCBvZiBlYWNoIGdyb3VwLlxuICAgICAqL1xuICAgIGdldEdyb3VwSW5kaWNlcyhkYXRhKSB7XG4gICAgICAgIGxldCBncm91cEluZGljZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZGF0YS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGdyb3VwSW5kaWNlc1tpXSA9IChncm91cEluZGljZXNbaSAtIDFdIHx8IDApICsgZGF0YVtpXS5pdGVtcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdyb3VwSW5kaWNlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVzZWQgdG8gZ2V0IGEgZmxhdCBhcnJheSBjb250YWluaW5nIGFsbCBpdGVtcyBtYXRjaGluZyBjZXJ0YWluIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIGZpbHRlcihwcmVkaWNhdGUpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICBpZiAodGhpcy5pc0dyb3VwZWQodGhpcy5kYXRhKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy5ncm91cEluZGljZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHRoaXMuZGF0YVtpXS5pdGVtcy5maWx0ZXIocHJlZGljYXRlKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KG1hdGNoZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZGF0YS5maWx0ZXIocHJlZGljYXRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCB0byBnZXQgdGhlIGluZGV4IG9mIGEgZ2l2ZW4gZGF0YSBpdGVtLlxuICAgICAqL1xuICAgIGluZGV4T2YoaXRlbSwgc3RhcnRGcm9tID0gMCkge1xuICAgICAgICBsZXQgcHJlZGljYXRlID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50ID09PSBpdGVtO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5ncm91cGVkKSB7XG4gICAgICAgICAgICBwcmVkaWNhdGUgPSAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlID09PSBpdGVtO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5maW5kSW5kZXgocHJlZGljYXRlLCBzdGFydEZyb20pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCB0byBnZXQgdGhlIGluZGV4IG9mIGEgZGF0YSBpdGVtIGJhc2VkIG9uIGFuIGV4cHJlc3Npb24uXG4gICAgICovXG4gICAgZmluZEluZGV4KHByZWRpY2F0ZSwgc3RhcnRGcm9tID0gMCkge1xuICAgICAgICBsZXQgaW5kZXggPSAtMTtcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBlZCkge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2ZsYXREYXRhLmZpbHRlcihpdGVtID0+ICFpdGVtLmhlYWRlciAmJiBpdGVtLm9mZnNldEluZGV4ID49IHN0YXJ0RnJvbSk7XG4gICAgICAgICAgICBpbmRleCA9IGRhdGEuZmluZEluZGV4KHByZWRpY2F0ZSk7XG4gICAgICAgICAgICBpbmRleCA9IGRhdGFbaW5kZXhdID8gZGF0YVtpbmRleF0ub2Zmc2V0SW5kZXggOiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGEuc2xpY2Uoc3RhcnRGcm9tKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1JbmRleCA9IGRhdGEuZmluZEluZGV4KHByZWRpY2F0ZSk7XG4gICAgICAgICAgICBpbmRleCA9IGl0ZW1JbmRleCAhPT0gLTEgPyBpdGVtSW5kZXggKyBzdGFydEZyb20gOiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBVc2VkIHRvIGdldCB0aGUgY2xvc2VzdCBncm91cCBoZWFkZXIgcHJpb3IgdG8gYW4gaXRlbSBpbmRleC5cbiAgICAgKi9cbiAgICBjbG9zZXN0R3JvdXAoaW5kZXgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGluZGV4OyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2ZsYXREYXRhW2ldLmhlYWRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mbGF0RGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCB0byBnZXQgdGhlIGZpcnN0IGl0ZW0gbWF0Y2hpbmcgdGhlIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIGZpbmQocHJlZGljYXRlKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kSW5kZXgocHJlZGljYXRlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbUF0KGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVzZWQgdG8gZ2V0IHRoZSB0cnVlIGluZGV4IGluIGEgZmxhdHRlbmVkIGRhdGEgYXJyYXkuXG4gICAgICovXG4gICAgZmxhdEluZGV4KGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLml0ZW1zQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHRoaXMuX2ZsYXREYXRhLmZpbmQoKGl0ZW0pID0+ICFpdGVtLmhlYWRlciAmJiBpdGVtLm9mZnNldEluZGV4ID09PSBpbmRleCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCB0byBnZXQgdGhlIGl0ZW0gYXQgdGhlIHByb3ZpZGVkIGluZGV4LlxuICAgICAqL1xuICAgIGl0ZW1BdChpbmRleCkge1xuICAgICAgICBsZXQgZGF0YUl0ZW07XG4gICAgICAgIGlmICh0aGlzLml0ZW1zQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhSXRlbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9IHRoaXMuX2ZsYXREYXRhLmZpbmQoKGl0ZW0pID0+ICFpdGVtLmhlYWRlciAmJiBpdGVtLm9mZnNldEluZGV4ID09PSBpbmRleCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBkYXRhSXRlbSA9IG1hdGNoLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YUl0ZW0gPSB0aGlzLmRhdGFbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhSXRlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVzZWQgdG8gZ2V0IHRoZSBncm91cCBhdCB0aGUgcHJvdmlkZWQgaW5kZXguXG4gICAgICovXG4gICAgZ3JvdXBBdChpbmRleCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtc0NvdW50ID09PSAwIHx8ICF0aGlzLmlzR3JvdXBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9mbGF0RGF0YS5maW5kKChpdGVtKSA9PiBpdGVtLmhlYWRlciAmJiBpdGVtLmluZGV4ID09PSBpbmRleCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBVc2VkIHRvIGdldCB0aGUgZmllbGQgYnkgd2hpY2ggdGhlIGRhdGEgaXMgZ3JvdXBlZC5cbiAgICAgKi9cbiAgICBncm91cEZpZWxkKCkge1xuICAgICAgICBpZiAodGhpcy5pdGVtc0NvdW50ID09PSAwIHx8ICF0aGlzLmlzR3JvdXBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhWzBdLmZpZWxkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICogVXNlZCB0byBnZXQgdGhlIGdyb3VwIHRvIHdoaWNoIGEgZGF0YUl0ZW0gYmVsb25ncy5cbiAgICAgKi9cbiAgICBpdGVtR3JvdXAoaXRlbSkge1xuICAgICAgICBpZiAoIWl0ZW0gfHwgdGhpcy5pdGVtc0NvdW50ID09PSAwIHx8ICF0aGlzLmlzR3JvdXBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IHRoaXMuZ3JvdXBGaWVsZCgpO1xuICAgICAgICBpZiAoZmllbGROYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbVtmaWVsZE5hbWVdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZsYXR0ZW4oZGF0YSwgZ3JvdXAgPSB1bmRlZmluZWQsIG9mZnNldCA9IDAsIGdyb3VwSW5kZXggPSAwKSB7XG4gICAgICAgIGxldCBmbGF0ID0gW107XG4gICAgICAgIGlmIChpc1ByZXNlbnQoZ3JvdXApKSB7XG4gICAgICAgICAgICBmbGF0LnB1c2goe1xuICAgICAgICAgICAgICAgIGhlYWRlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbmRleDogZ3JvdXBJbmRleCArIG9mZnNldCxcbiAgICAgICAgICAgICAgICBvZmZzZXRJbmRleDogZ3JvdXBJbmRleCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogZ3JvdXBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgaWYgKGRhdGFbaV0uaXRlbXMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLmZsYXR0ZW4oZGF0YVtpXS5pdGVtcywgZGF0YVtpXS52YWx1ZSwgb2Zmc2V0LCBpKTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyBkYXRhW2ldLml0ZW1zLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGdyb3VwSW5kZXggKyBvZmZzZXQgKyBpICsgMSxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0SW5kZXg6IG9mZnNldCArIGksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhW2ldXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmbGF0ID0gZmxhdC5jb25jYXQocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmxhdDtcbiAgICB9XG59XG5EYXRhU2VydmljZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuXTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIERpc2FibGVkSXRlbXNTZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhU2VydmljZSkge1xuICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlID0gZGF0YVNlcnZpY2U7XG4gICAgICAgIHRoaXMuaXRlbURpc2FibGVkID0gbnVsbDtcbiAgICB9XG4gICAgaXNJbmRleERpc2FibGVkKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLml0ZW1EaXNhYmxlZCkge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGluZGV4KTtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtRGlzYWJsZWQoeyBkYXRhSXRlbTogaXRlbSwgaW5kZXggfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1ByZXNlbnQodGhpcy5kZWZhdWx0SXRlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtRGlzYWJsZWQoeyBkYXRhSXRlbTogdGhpcy5kZWZhdWx0SXRlbSwgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlzSXRlbURpc2FibGVkKGl0ZW0pIHtcbiAgICAgICAgaWYgKHRoaXMuaXRlbURpc2FibGVkKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZGF0YVNlcnZpY2UuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtRGlzYWJsZWQoeyBkYXRhSXRlbTogaXRlbSwgaW5kZXggfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1ByZXNlbnQodGhpcy5kZWZhdWx0SXRlbSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtRGlzYWJsZWQoeyBkYXRhSXRlbTogdGhpcy5kZWZhdWx0SXRlbSwgaW5kZXg6IC0xIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuRGlzYWJsZWRJdGVtc1NlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkRpc2FibGVkSXRlbXNTZXJ2aWNlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogRGF0YVNlcnZpY2UgfVxuXTtcblxuY29uc3QgTUlOX0lOREVYID0gMDtcbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBOYXZpZ2F0aW9uRXZlbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBvZiB0aGUgaXRlbSB0byB3aGljaCB0aGUgdXNlciBuYXZpZ2F0ZWQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW5kZXgsIG9yaWdpbmFsRXZlbnQpIHtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLm9yaWdpbmFsRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuICAgIH1cbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBOYXZpZ2F0aW9uU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoZGlzYWJsZWRJdGVtc1NlcnZpY2UsIHNlbGVjdGlvblNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZSA9IGRpc2FibGVkSXRlbXNTZXJ2aWNlO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UgPSBzZWxlY3Rpb25TZXJ2aWNlO1xuICAgICAgICB0aGlzLm9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuZW50ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMudGFiID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmVzYyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy51cCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5yaWdodCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5kb3duID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmxlZnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuZGVsZXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmJhY2tzcGFjZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5ob21lID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmVuZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgcHJvY2VzcyhhcmdzKSB7XG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSBhcmdzLm9yaWdpbmFsRXZlbnQua2V5Q29kZTtcbiAgICAgICAgY29uc3QgYWx0S2V5ID0gYXJncy5vcmlnaW5hbEV2ZW50LmFsdEtleTtcbiAgICAgICAgbGV0IGluZGV4O1xuICAgICAgICBsZXQgYWN0aW9uID0gTmF2aWdhdGlvbkFjdGlvbi5VbmRlZmluZWQ7XG4gICAgICAgIGlmIChhbHRLZXkgJiYga2V5Q29kZSA9PT0gS2V5cy5BcnJvd0Rvd24pIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IE5hdmlnYXRpb25BY3Rpb24uT3BlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbHRLZXkgJiYga2V5Q29kZSA9PT0gS2V5cy5BcnJvd1VwKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBOYXZpZ2F0aW9uQWN0aW9uLkNsb3NlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleUNvZGUgPT09IEtleXMuRW50ZXIpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IE5hdmlnYXRpb25BY3Rpb24uRW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5cy5Fc2NhcGUpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IE5hdmlnYXRpb25BY3Rpb24uRXNjO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleUNvZGUgPT09IEtleXMuVGFiKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBOYXZpZ2F0aW9uQWN0aW9uLlRhYjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlzLkFycm93VXApIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5uZXh0KHsgY3VycmVudDogYXJncy5jdXJyZW50LCBzdGFydDogYXJncy5taW4sIGVuZDogYXJncy5tYXgsIHN0ZXA6IC0xIH0pO1xuICAgICAgICAgICAgYWN0aW9uID0gTmF2aWdhdGlvbkFjdGlvbi5VcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlzLkFycm93TGVmdCkge1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLm5leHQoeyBjdXJyZW50OiBhcmdzLmN1cnJlbnQsIHN0YXJ0OiBhcmdzLm1pbiwgZW5kOiBhcmdzLm1heCwgc3RlcDogLTEgfSk7XG4gICAgICAgICAgICBhY3Rpb24gPSBOYXZpZ2F0aW9uQWN0aW9uLkxlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5cy5BcnJvd0Rvd24pIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5uZXh0KHsgY3VycmVudDogYXJncy5jdXJyZW50LCBzdGFydDogYXJncy5taW4sIGVuZDogYXJncy5tYXgsIHN0ZXA6IDEgfSk7XG4gICAgICAgICAgICBhY3Rpb24gPSBOYXZpZ2F0aW9uQWN0aW9uLkRvd247XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5cy5BcnJvd1JpZ2h0KSB7XG4gICAgICAgICAgICBpbmRleCA9IHRoaXMubmV4dCh7IGN1cnJlbnQ6IGFyZ3MuY3VycmVudCwgc3RhcnQ6IGFyZ3MubWluLCBlbmQ6IGFyZ3MubWF4LCBzdGVwOiAxIH0pO1xuICAgICAgICAgICAgYWN0aW9uID0gTmF2aWdhdGlvbkFjdGlvbi5SaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlDb2RlID09PSBLZXlzLkhvbWUpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5pc0Rpc2FibGVkKE1JTl9JTkRFWCkgPyBhcmdzLmN1cnJlbnQgOiBNSU5fSU5ERVg7XG4gICAgICAgICAgICBhY3Rpb24gPSBOYXZpZ2F0aW9uQWN0aW9uLkhvbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5cy5FbmQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5pc0Rpc2FibGVkKGFyZ3MubWF4KSA/IGFyZ3MuY3VycmVudCA6IGFyZ3MubWF4O1xuICAgICAgICAgICAgYWN0aW9uID0gTmF2aWdhdGlvbkFjdGlvbi5FbmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5Q29kZSA9PT0gS2V5cy5EZWxldGUpIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IE5hdmlnYXRpb25BY3Rpb24uRGVsZXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleUNvZGUgPT09IEtleXMuQmFja3NwYWNlKSB7XG4gICAgICAgICAgICBhY3Rpb24gPSBOYXZpZ2F0aW9uQWN0aW9uLkJhY2tzcGFjZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBldmVudERhdGEgPSBuZXcgTmF2aWdhdGlvbkV2ZW50KGluZGV4LCBhcmdzLm9yaWdpbmFsRXZlbnQpO1xuICAgICAgICBpZiAoYWN0aW9uICE9PSBOYXZpZ2F0aW9uQWN0aW9uLlVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpc1tOYXZpZ2F0aW9uQWN0aW9uW2FjdGlvbl0udG9Mb3dlckNhc2UoKV0uZW1pdChldmVudERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfVxuICAgIG5leHQoYXJncykge1xuICAgICAgICBjb25zdCB7IGN1cnJlbnQsIHN0YXJ0LCBlbmQsIHN0ZXAgfSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9ICFpc1ByZXNlbnQoY3VycmVudCkgPyBzdGFydCA6IHRoaXMuY2xhbXBJbmRleChjdXJyZW50ICsgc3RlcCwgc3RhcnQsIGVuZCk7XG4gICAgICAgIGNvbnN0IGZpcnN0Rm9jdXNhYmxlSW5kZXggPSB0aGlzLmZpcnN0Rm9jdXNhYmxlSW5kZXgobmV4dEluZGV4LCBzdGFydCwgZW5kLCBzdGVwKTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChmaXJzdEZvY3VzYWJsZUluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0Rm9jdXNhYmxlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU2VydmljZS5pc1NlbGVjdGVkKGN1cnJlbnQpICYmIGN1cnJlbnQgPj0gc3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludmVyc2VkU3RlcCA9IC0xICogc3RlcDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleChuZXh0SW5kZXgsIHN0YXJ0LCBlbmQsIGludmVyc2VkU3RlcCk7XG4gICAgfVxuICAgIGNsYW1wSW5kZXgoaW5kZXgsIG1pbiwgbWF4KSB7XG4gICAgICAgIGlmICghaXNQcmVzZW50KGluZGV4KSB8fCBpbmRleCA8IG1pbikge1xuICAgICAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggPiBtYXgpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICBmaXJzdEZvY3VzYWJsZUluZGV4KHN0YXJ0SW5kZXgsIG1pbiwgbWF4LCBzdGVwKSB7XG4gICAgICAgIHdoaWxlIChtaW4gPD0gc3RhcnRJbmRleCAmJiBzdGFydEluZGV4IDw9IG1heCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQoc3RhcnRJbmRleCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXJ0SW5kZXggKz0gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpc0Rpc2FibGVkKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZS5pc0luZGV4RGlzYWJsZWQoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxufVxuTmF2aWdhdGlvblNlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IEluamVjdGFibGUgfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbk5hdmlnYXRpb25TZXJ2aWNlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogRGlzYWJsZWRJdGVtc1NlcnZpY2UgfSxcbiAgICB7IHR5cGU6IFNlbGVjdGlvblNlcnZpY2UgfVxuXTtcblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG4vKipcbiAqIFJlbmRlcnMgY29udGVudCB3aGVuIG5vIGRhdGEgaXMgYXZhaWxhYmxlLiBUbyBkZWZpbmUgdGhlIG5vLWRhdGEgdGVtcGxhdGUsIG5lc3QgYSBgPG5nLXRlbXBsYXRlPmAgdGFnXG4gKiB3aXRoIHRoZSBga2VuZG88Q29tcG9uZW50TmFtZT5Ob0RhdGFUZW1wbGF0ZWAgZGlyZWN0aXZlIGluc2lkZSB0aGUgY29tcG9uZW50IHRhZy5cbiAqXG4gKiAtIFtVc2luZyBgTm9EYXRhVGVtcGxhdGVgIHdpdGggdGhlIEF1dG9Db21wbGV0ZV0oeyUgc2x1ZyB0ZW1wbGF0ZXNfYXV0b2NvbXBsZXRlICV9I3RvYy1uby1kYXRhLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYE5vRGF0YVRlbXBsYXRlYCB3aXRoIHRoZSBDb21ib0JveF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfY29tYm9ib3ggJX0jdG9jLW5vLWRhdGEtdGVtcGxhdGUpXG4gKiAtIFtVc2luZyBgTm9EYXRhVGVtcGxhdGVgIHdpdGggdGhlIERyb3BEb3duTGlzdF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfZGRsICV9I3RvYy1uby1kYXRhLXRlbXBsYXRlKVxuICogLSBbVXNpbmcgYE5vRGF0YVRlbXBsYXRlYCB3aXRoIHRoZSBNdWx0aVNlbGVjdF0oeyUgc2x1ZyB0ZW1wbGF0ZXNfbXVsdGlzZWxlY3QgJX0jdG9jLW5vLWRhdGEtdGVtcGxhdGUpXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1jb21ib2JveCBbZGF0YV09XCJsaXN0SXRlbXNcIj5cbiAqICAgIDxuZy10ZW1wbGF0ZSBrZW5kb0NvbWJvQm94Tm9EYXRhVGVtcGxhdGU+XG4gKiAgICAgIDxoND5ObyBkYXRhITwvaDQ+XG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogIDwva2VuZG8tY29tYm9ib3g+XG4gKiBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGxpc3RJdGVtczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIE5vRGF0YVRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZikge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWY7XG4gICAgfVxufVxuTm9EYXRhVGVtcGxhdGVEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1trZW5kb0Ryb3BEb3duTGlzdE5vRGF0YVRlbXBsYXRlXSxba2VuZG9Db21ib0JveE5vRGF0YVRlbXBsYXRlXSxba2VuZG9BdXRvQ29tcGxldGVOb0RhdGFUZW1wbGF0ZV0sW2tlbmRvTXVsdGlTZWxlY3ROb0RhdGFUZW1wbGF0ZV0nXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbk5vRGF0YVRlbXBsYXRlRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogVGVtcGxhdGVSZWYgfVxuXTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIFByZXZlbnRhYmxlRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnByZXZlbnRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gZm9yIGEgc3BlY2lmaWVkIGV2ZW50LlxuICAgICAqIEluIHRoaXMgd2F5LCB0aGUgc291cmNlIGNvbXBvbmVudCBzdXBwcmVzc2VzIHRoZSBidWlsdC1pbiBiZWhhdmlvciB0aGF0IGZvbGxvd3MgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLnByZXZlbnRlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZSBldmVudCBpcyBwcmV2ZW50ZWQgYnkgYW55IG9mIGl0cyBzdWJzY3JpYmVycywgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGRlZmF1bHQgYWN0aW9uIHdhcyBwcmV2ZW50ZWQuIE90aGVyd2lzZSwgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqL1xuICAgIGlzRGVmYXVsdFByZXZlbnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmVudGVkO1xuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIHRoZSBtYW5kYXRvcnkgcHJvcGVydGllcyBvZiB0aGUgYGtlbmRvRHJvcERvd25GaWx0ZXJgIGRpcmVjdGl2ZVxuICogc28gdGhhdCBga2VuZG9Ecm9wRG93bkZpbHRlcmAgY2FuIGJlIHVzZWQgd2l0aCBhbnkgb2YgdGhlIERyb3BEb3ducyBjb21wb25lbnRzXG4gKiB3aGljaCBpbXBsZW1lbnQgdGhlIGBGaWx0ZXJhYmxlRHJvcERvd25Db21wb25lbnRCYXNlYCBjbGFzcy5cbiAqXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIEZpbHRlcmFibGVEcm9wRG93bkNvbXBvbmVudEJhc2Uge1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY2xhc3MgTGlzdEl0ZW1EaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB9XG59XG5MaXN0SXRlbURpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnXCJsaVtyb2xlPW9wdGlvbl0sIGxpW3JvbGU9Z3JvdXBdXCInIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTGlzdEl0ZW1EaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH1cbl07XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBMaXN0Q29tcG9uZW50IHtcbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZTptZW1iZXItb3JkZXJpbmcgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhU2VydmljZSwgd3JhcHBlciwgc2VsZWN0aW9uU2VydmljZSwgZGlzYWJsZWRJdGVtc1NlcnZpY2UsIGNkciwgem9uZSwgcmVuZGVyZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhU2VydmljZSA9IGRhdGFTZXJ2aWNlO1xuICAgICAgICB0aGlzLndyYXBwZXIgPSB3cmFwcGVyO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UgPSBzZWxlY3Rpb25TZXJ2aWNlO1xuICAgICAgICB0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlID0gZGlzYWJsZWRJdGVtc1NlcnZpY2U7XG4gICAgICAgIHRoaXMuY2RyID0gY2RyO1xuICAgICAgICB0aGlzLnpvbmUgPSB6b25lO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBbXTtcbiAgICAgICAgdGhpcy5mb2N1c2VkID0gLTE7XG4gICAgICAgIHRoaXMuc2hvdyA9IHRydWU7XG4gICAgICAgIHRoaXMubXVsdGlwbGVTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLnBhZ2VDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuc3RhcnRGcm9tID0gMDtcbiAgICAgICAgdGhpcy5sYXN0TG9hZGVkID0gMDtcbiAgICAgICAgdGhpcy5sYXN0U2Nyb2xsVG9wID0gMDtcbiAgICAgICAgdGhpcy5zY3JvbGxUb0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RTdWJzY3JpcHRpb24gPSBtZXJnZSh0aGlzLnNlbGVjdGlvblNlcnZpY2Uub25TZWxlY3QucGlwZShtYXAoKGFyZ3MpID0+IGFyZ3MuaW5kaWNlc1swXSkpLCB0aGlzLnNlbGVjdGlvblNlcnZpY2Uub25Gb2N1cylcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAvLyBoYW5kbGUgb25seSB0aGUgdmVyeSBsYXN0IG9uU2VsZWN0L29uRm9jdXMgZW1pc3Npb25cbiAgICAgICAgc3dpdGNoTWFwKGV2ZW50ID0+IHRoaXMuem9uZS5vblN0YWJsZS5waXBlKHRha2UoMSksIG1hcCgoKSA9PiBldmVudCkpKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodGhpcy5zY3JvbGxUb0l0ZW0uYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGFbMF0gJiYgZGF0YVswXS5oZWFkZXIgPyBkYXRhLnNsaWNlKDApIDogZGF0YTtcbiAgICB9XG4gICAgZ2V0IGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cbiAgICBzZXQgaXRlbXMoaXRlbXMpIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICB9XG4gICAgZ2V0IGl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gICAgfVxuICAgIGdldCBwYWdlU2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbC5wYWdlU2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlydHVhbC5wYWdlU2l6ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2l6ZSA9IE1hdGgucm91bmQodGhpcy5oZWlnaHQgLyB0aGlzLnZpcnR1YWwuaXRlbUhlaWdodCk7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cbiAgICBnZXQgc2Nyb2xsSGVpZ2h0KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuZGF0YVNlcnZpY2UuZ3JvdXBlZCA/IHRoaXMudmlydHVhbC50b3RhbCAtIDEgOiB0aGlzLnZpcnR1YWwudG90YWwpICogdGhpcy52aXJ0dWFsLml0ZW1IZWlnaHQ7XG4gICAgfVxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICAgICAgaWYgKGlzQ2hhbmdlZCgnZGF0YScsIGNoYW5nZXMsIGZhbHNlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdExvYWRlZCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0TG9hZGVkID0gdGhpcy5kYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0ZvY3VzZWQgPSAhY2hhbmdlcy5kYXRhLmlzRmlyc3RDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbiA9IGZyb21FdmVudCh0aGlzLmNvbnRlbnQubmF0aXZlRWxlbWVudCwgXCJzY3JvbGxcIikucGlwZShhdWRpdFRpbWUoMTAwKSwgdGFwKHRoaXMucHJlZmV0Y2hEYXRhLmJpbmQodGhpcykpLCB0YXAodGhpcy5maW5kQ3VycmVudEdyb3VwLmJpbmQodGhpcykpKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdFNjcm9sbFRvcCA9IHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgICAgICBpZiAodGhpcy52aXJ0dWFsKSB7XG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uSXRlbXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLnNjcm9sbFRvRm9jdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHNjcm9sbFRhcmdldCA9IHRoaXMuaXRlbXMubGVuZ3RoICYmIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID09PSAtMSA/IDAgOiB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZDtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JdGVtKHNjcm9sbFRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YVNlcnZpY2UuZ3JvdXBlZCkge1xuICAgICAgICAgICAgdGhpcy5maW5kQ3VycmVudEdyb3VwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGlmICh0aGlzLnNjcm9sbFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXJzdFZpc2libGVJdGVtKCkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHJlY3QgPSBjb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAvLyBJRTkgaGFja1xuICAgICAgICBjb25zdCBkaXNhYmxlZCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGNvbnRlbnQucXVlcnlTZWxlY3RvckFsbChcIi5rLXN0YXRlLWRpc2FibGVkXCIpKTtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIGZpbmRpbmcgZWxlbWVudHMgd2l0aCBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgZGlzYWJsZWQuZm9yRWFjaCgoZWwpID0+IHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZWwsIFwicG9pbnRlci1ldmVudHNcIiwgXCJhdXRvXCIpKTtcbiAgICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQocmVjdC5sZWZ0ICsgMSwgcmVjdC50b3AgKyAxKTtcbiAgICAgICAgZGlzYWJsZWQuZm9yRWFjaCgoZWwpID0+IHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoZWwsIFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpKTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIGZpbmRDdXJyZW50R3JvdXAoKSB7XG4gICAgICAgIGlmICghdGhpcy5kYXRhU2VydmljZS5ncm91cGVkKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRHcm91cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5maXJzdFZpc2libGVJdGVtKCk7XG4gICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgICAgICBpZiAoaXRlbS5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpID09PSBcImdyb3VwXCIpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGl0ZW0uZ2V0QXR0cmlidXRlKFwiZ3JvdXAtaW5kZXhcIiksIDEwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRHcm91cCA9IHRoaXMuZGF0YVNlcnZpY2UuZ3JvdXBBdChpbmRleCkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IHBhcnNlSW50KGl0ZW0uZ2V0QXR0cmlidXRlKFwiaW5kZXhcIiksIDEwKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRHcm91cCA9IHRoaXMuZGF0YVNlcnZpY2UuaXRlbUdyb3VwKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRHcm91cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICAgIHByZWZldGNoRGF0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aXNpYmxlSXRlbXMgPSBNYXRoLnRydW5jKHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodCAvIHRoaXMudmlydHVhbC5pdGVtSGVpZ2h0KTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBNYXRoLnRydW5jKG9mZnNldFkgLyB0aGlzLnZpcnR1YWwuaXRlbUhlaWdodCk7XG4gICAgICAgIGNvbnN0IGRvd24gPSBvZmZzZXRZID4gdGhpcy5sYXN0U2Nyb2xsVG9wO1xuICAgICAgICBjb25zdCBuZXh0UGFnZSA9IChzdGFydCArIHZpc2libGVJdGVtcyA+PSB0aGlzLmxhc3RMb2FkZWQpICYmIHRoaXMubGFzdExvYWRlZCA8IHRoaXMudmlydHVhbC50b3RhbCAtIDE7XG4gICAgICAgIGNvbnN0IGxlZnRPdmVyID0gdGhpcy5wYWdlU2l6ZSAtICh0aGlzLmxhc3RMb2FkZWQgLSB0aGlzLnN0YXJ0RnJvbSk7XG4gICAgICAgIGNvbnN0IHByZXZQYWdlID0gdGhpcy5sYXN0TG9hZGVkIC0gdGhpcy5wYWdlU2l6ZSArIHZpc2libGVJdGVtcyA+PSBzdGFydCAtIGxlZnRPdmVyO1xuICAgICAgICBpZiAoZG93biAmJiBuZXh0UGFnZSkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VQYWdlKHN0YXJ0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRvd24gJiYgcHJldlBhZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlUGFnZShzdGFydCAtIHRoaXMucGFnZVNpemUgKyB2aXNpYmxlSXRlbXMgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VQYWdlKHN0YXJ0KSB7XG4gICAgICAgIHRoaXMuem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGVuZCA9IHRoaXMucGFnZVNpemUgKyBzdGFydDtcbiAgICAgICAgICAgIGlmIChlbmQgPiB0aGlzLnZpcnR1YWwudG90YWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydC0tO1xuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMudmlydHVhbC50b3RhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YXJ0RnJvbSA9IHN0YXJ0O1xuICAgICAgICAgICAgdGhpcy5sYXN0TG9hZGVkID0gZW5kO1xuICAgICAgICAgICAgdGhpcy5wYWdlQ2hhbmdlLmVtaXQoeyBza2lwOiBzdGFydCwgdGFrZTogdGhpcy5wYWdlU2l6ZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGluZGV4KGdyb3VwSW5kZXgsIGl0ZW1JbmRleCkge1xuICAgICAgICByZXR1cm4gZ3JvdXBJbmRleCA+IDAgPyAodGhpcy5kYXRhU2VydmljZS5ncm91cEluZGljZXNbZ3JvdXBJbmRleCAtIDFdICsgaXRlbUluZGV4KSA6IGl0ZW1JbmRleDtcbiAgICB9XG4gICAgZ2V0VGV4dChkYXRhSXRlbSkge1xuICAgICAgICByZXR1cm4gZ2V0dGVyKGRhdGFJdGVtLCB0aGlzLnRleHRGaWVsZCk7XG4gICAgfVxuICAgIGdldFZhbHVlKGRhdGFJdGVtKSB7XG4gICAgICAgIHJldHVybiBnZXR0ZXIoZGF0YUl0ZW0sIHRoaXMudmFsdWVGaWVsZCk7XG4gICAgfVxuICAgIGlzRGlzYWJsZWQoaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLnZpcnR1YWwpKSB7XG4gICAgICAgICAgICBpbmRleCArPSB0aGlzLnZpcnR1YWwuc2tpcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZS5pc0luZGV4RGlzYWJsZWQoaW5kZXgpO1xuICAgIH1cbiAgICBzY3JvbGxUb0l0ZW0oaW5kZXgpIHtcbiAgICAgICAgbGV0IGZsYXRJbmRleCA9IGluZGV4O1xuICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5ncm91cGVkKSB7XG4gICAgICAgICAgICAvLyB0YWtlcyBpbnRvIGFjY291bnQgdGhlIGdyb3VwIGhlYWRlciBpdGVtc1xuICAgICAgICAgICAgZmxhdEluZGV4ID0gdGhpcy5kYXRhU2VydmljZS5mbGF0SW5kZXgoaW5kZXgpO1xuICAgICAgICAgICAgLyogVGhlIGZpcnN0IGdyb3VwIGhlYWRlciBpdGVtIGlzIG5vdCByZW5kZXJlZCBpbiB0aGUgbGlzdCAoc2VlIHRlbXBsYXRlKSwgc28gc3VidHJhY3QgMSB3aGVuIGNhbHVsYXRpbmcgdGhlIGZsYXQgaW5kZXguXG4gICAgICAgICAgICAgICBXaXRoIHZpcnR1YWxpemF0aW9uIGVuYWJsZWQsIHRoZSBmaXJzdCBncm91cCBoZWFkZXIgY291bGQgYmUgaW4gYSBwcmV2aW91cyBwYWdlLCBpbiB3aGljaCBjYXNlIGRvbid0IHN1YnRyYWN0IGFueXRoaW5nLiAqL1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBIZWFkZXJPZmZzZXQgPSB0aGlzLmZpcnN0R3JvdXBIZWFkZXJJblRhcmdldGVkUGFnZShmbGF0SW5kZXgpID8gLTEgOiAwO1xuICAgICAgICAgICAgZmxhdEluZGV4ICs9IGdyb3VwSGVhZGVyT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWwgJiYgZmxhdEluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9JbmRleChmbGF0SW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcy50b0FycmF5KCk7XG4gICAgICAgIGlmIChpc1ByZXNlbnQoaXRlbXNbZmxhdEluZGV4XSkgJiYgZmxhdEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwoaXRlbXNbZmxhdEluZGV4XS5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzY3JvbGxUb0luZGV4KGluZGV4KSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gdGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGxldCBjb250ZW50U2Nyb2xsVG9wID0gY29udGVudC5zY3JvbGxUb3A7XG4gICAgICAgIGNvbnN0IGl0ZW1PZmZzZXRUb3AgPSBpbmRleCAqIHRoaXMudmlydHVhbC5pdGVtSGVpZ2h0O1xuICAgICAgICBjb25zdCBpdGVtT2Zmc2V0SGVpZ2h0ID0gdGhpcy52aXJ0dWFsLml0ZW1IZWlnaHQ7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRPZmZzZXRIZWlnaHQgPSBjb250ZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgY29uc3QgYm90dG9tRGlzdGFuY2UgPSBpdGVtT2Zmc2V0VG9wICsgaXRlbU9mZnNldEhlaWdodDtcbiAgICAgICAgaWYgKGNvbnRlbnRTY3JvbGxUb3AgPiBpdGVtT2Zmc2V0VG9wKSB7XG4gICAgICAgICAgICBjb250ZW50U2Nyb2xsVG9wID0gaXRlbU9mZnNldFRvcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChib3R0b21EaXN0YW5jZSA+IChjb250ZW50U2Nyb2xsVG9wICsgY29udGVudE9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgICAgIGNvbnRlbnRTY3JvbGxUb3AgPSAoYm90dG9tRGlzdGFuY2UgLSBjb250ZW50T2Zmc2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZW50LnNjcm9sbFRvcCA9IGNvbnRlbnRTY3JvbGxUb3A7XG4gICAgfVxuICAgIHNjcm9sbChpdGVtKSB7XG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSBpdGVtLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGxldCBjb250ZW50ID0gdGhpcy5jb250ZW50Lm5hdGl2ZUVsZW1lbnQsIGl0ZW1PZmZzZXRUb3AgPSBuYXRpdmVFbGVtZW50Lm9mZnNldFRvcCwgaXRlbU9mZnNldEhlaWdodCA9IG5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0LCBjb250ZW50U2Nyb2xsVG9wID0gY29udGVudC5zY3JvbGxUb3AsIGNvbnRlbnRPZmZzZXRIZWlnaHQgPSBjb250ZW50LmNsaWVudEhlaWdodCwgYm90dG9tRGlzdGFuY2UgPSBpdGVtT2Zmc2V0VG9wICsgaXRlbU9mZnNldEhlaWdodDtcbiAgICAgICAgaWYgKGNvbnRlbnRTY3JvbGxUb3AgPiBpdGVtT2Zmc2V0VG9wKSB7XG4gICAgICAgICAgICBjb250ZW50U2Nyb2xsVG9wID0gaXRlbU9mZnNldFRvcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChib3R0b21EaXN0YW5jZSA+IChjb250ZW50U2Nyb2xsVG9wICsgY29udGVudE9mZnNldEhlaWdodCkpIHtcbiAgICAgICAgICAgIGNvbnRlbnRTY3JvbGxUb3AgPSAoYm90dG9tRGlzdGFuY2UgLSBjb250ZW50T2Zmc2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZW50LnNjcm9sbFRvcCA9IGNvbnRlbnRTY3JvbGxUb3A7XG4gICAgfVxuICAgIHBvc2l0aW9uSXRlbXMoKSB7XG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSAoaW5kZXggKyB0aGlzLnN0YXJ0RnJvbSkgKiB0aGlzLnZpcnR1YWwuaXRlbUhlaWdodDtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoaXRlbS5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGVZKCR7b2Zmc2V0WX1weGApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGZpcnN0IGdyb3VwIGhlYWRlciBmcm9tIHRoZSBkYXRhIHNldCBpcyBpbiB0aGUgdGFyZ2V0ZWQgdmlydHVhbCBwYWdlLlxuICAgICAqL1xuICAgIGZpcnN0R3JvdXBIZWFkZXJJblRhcmdldGVkUGFnZShpdGVtSW5kZXgpIHtcbiAgICAgICAgaWYgKCFpc1ByZXNlbnQodGhpcy52aXJ0dWFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudmlydHVhbC5za2lwID09PSAwICYmICh0aGlzLnZpcnR1YWwucGFnZVNpemUgPiBpdGVtSW5kZXgpO1xuICAgIH1cbn1cbkxpc3RDb21wb25lbnQuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2tlbmRvLWxpc3QnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAqbmdJZj1cImRhdGFTZXJ2aWNlLmdyb3VwZWRcIlxuICAgICAgICBjbGFzcz0nay1vdXRlci1ncm91cC1oZWFkZXIgay1maXJzdCdcbiAgICAgICAgW25nQ2xhc3NdPVwieydrLXZpcnR1YWwtaXRlbSc6IHZpcnR1YWx9XCJcbiAgICAgICAgW25nU3R5bGVdPVwie1xuICAgICAgICAgICAgJ2hlaWdodC5weCc6IHZpcnR1YWw/Lml0ZW1IZWlnaHQsXG4gICAgICAgICAgICAnbWluSGVpZ2h0LnB4JyA6IHZpcnR1YWw/Lml0ZW1IZWlnaHQsXG4gICAgICAgICAgICAnYm94U2l6aW5nJyA6IHZpcnR1YWwgPyAnYm9yZGVyLWJveCcgOiAnaW5oZXJpdCd9XCJcbiAgICAgICAgPlxuICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCJmaXhlZEdyb3VwVGVtcGxhdGVcIlxuICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IGZpeGVkR3JvdXBUZW1wbGF0ZS50ZW1wbGF0ZVJlZixcbiAgICAgICAgICAgICAgICAkaW1wbGljaXQ6IGN1cnJlbnRHcm91cFxuICAgICAgICAgICAgfVwiPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIWZpeGVkR3JvdXBUZW1wbGF0ZVwiPjxzdHJvbmc+e3sgY3VycmVudEdyb3VwIH19PC9zdHJvbmc+IDwvbmctdGVtcGxhdGU+XG4gICAgPC9kaXY+XG4gICAgPGRpdiAjY29udGVudFxuICAgICAgICAgW25nQ2xhc3NdPVwieyAnay12aXJ0dWFsLWNvbnRlbnQnOiB2aXJ0dWFsLCAnay1saXN0LXNjcm9sbGVyJzogIXZpcnR1YWwgfVwiXG4gICAgICAgICBbc3R5bGUubWF4SGVpZ2h0LnB4XT1cImhlaWdodFwiXG4gICAgICAgICB1bnNlbGVjdGFibGU9XCJvblwiPlxuICAgIDx1bCAjbGlzdFxuICAgICAgICByb2xlPVwibGlzdGJveFwiXG4gICAgICAgIGNsYXNzPVwiay1saXN0IGstcmVzZXRcIlxuICAgICAgICBbbmdDbGFzc109XCJ7ICdrLXZpcnR1YWwtbGlzdCc6IHZpcnR1YWwgfVwiXG4gICAgICAgIFthdHRyLmlkXT1cImlkXCJcbiAgICAgICAgW2F0dHIuYXJpYS1oaWRkZW5dPVwiIXNob3dcIj5cbiAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdJZj1cIiFkYXRhU2VydmljZS5ncm91cGVkICYmIHNob3dcIiBuZ0ZvciBsZXQtZGF0YUl0ZW0gbGV0LWl0ZW1JbmRleD1cImluZGV4XCIgW25nRm9yT2ZdPVwiZGF0YVwiPlxuICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgcm9sZT1cIm9wdGlvblwiXG4gICAgICAgICAgICAgICAga2VuZG9Ecm9wRG93bnNTZWxlY3RhYmxlXG4gICAgICAgICAgICAgICAgW2hlaWdodF09XCJ2aXJ0dWFsPy5pdGVtSGVpZ2h0XCJcbiAgICAgICAgICAgICAgICBbaW5kZXhdPVwiaXRlbUluZGV4ICsgc3RhcnRGcm9tXCJcbiAgICAgICAgICAgICAgICBbbXVsdGlwbGVTZWxlY3Rpb25dPVwibXVsdGlwbGVTZWxlY3Rpb25cIlxuICAgICAgICAgICAgICAgIFthdHRyLmlkXT1cIm9wdGlvblByZWZpeCArICctJyArIGdldFZhbHVlKGRhdGFJdGVtKVwiXG4gICAgICAgICAgICAgICAgW2F0dHIudGFiSW5kZXhdPVwiLTFcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiay1pdGVtXCJcbiAgICAgICAgICAgICAgICBbbmdDbGFzc109XCJ7ICdrLXZpcnR1YWwtaXRlbSc6IHZpcnR1YWwsICdrLXN0YXRlLWRpc2FibGVkJzogaXNEaXNhYmxlZChpdGVtSW5kZXgpIH1cIj5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCJ0ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IHRlbXBsYXRlLnRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgJGltcGxpY2l0OiBkYXRhSXRlbVxuICAgICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIXRlbXBsYXRlXCI+e3sgZ2V0VGV4dChkYXRhSXRlbSkgfX08L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCJkYXRhU2VydmljZS5ncm91cGVkXCIgbmdGb3IgbGV0LWRhdGFJdGVtIGxldC1pdGVtSW5kZXg9XCJpbmRleFwiIFtuZ0Zvck9mXT1cImRhdGFcIj5cbiAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICpuZ0lmPVwiZGF0YUl0ZW0uaGVhZGVyICYmIGRhdGFJdGVtLmluZGV4ID4gMFwiXG4gICAgICAgICAgICAgICAgcm9sZT1cImdyb3VwXCJcbiAgICAgICAgICAgICAgICBjbGFzcz0nay1vdXRlci1ncm91cC1oZWFkZXInXG4gICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwieyAnay12aXJ0dWFsLWl0ZW0nOiB2aXJ0dWFsIH1cIlxuICAgICAgICAgICAgICAgIFtuZ1N0eWxlXT1cIntcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodC5weCc6IHZpcnR1YWw/Lml0ZW1IZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICdtaW5IZWlnaHQucHgnIDogdmlydHVhbD8uaXRlbUhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgJ2JveFNpemluZycgOiB2aXJ0dWFsID8gJ2JvcmRlci1ib3gnIDogJ2luaGVyaXQnfVwiXG4gICAgICAgICAgICAgICAgW2F0dHIuZ3JvdXAtaW5kZXhdPVwiZGF0YUl0ZW0uaW5kZXhcIlxuICAgICAgICAgICAgICAgIFthdHRyLmlkXT1cIm9wdGlvblByZWZpeCArICctJyArIGdldFZhbHVlKGRhdGFJdGVtLnZhbHVlKVwiXG4gICAgICAgICAgICAgICAgW2F0dHIudGFiSW5kZXhdPVwiLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiZ3JvdXBUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiBncm91cFRlbXBsYXRlLnRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbXBsaWNpdDogZGF0YUl0ZW0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIWdyb3VwVGVtcGxhdGVcIj48c3Ryb25nPiB7eyBkYXRhSXRlbS52YWx1ZSB9fTwvc3Ryb25nPiA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpXG4gICAgICAgICAgICAgICAgKm5nSWY9XCIhZGF0YUl0ZW0uaGVhZGVyXCJcbiAgICAgICAgICAgICAgICByb2xlPVwib3B0aW9uXCJcbiAgICAgICAgICAgICAgICBrZW5kb0Ryb3BEb3duc1NlbGVjdGFibGVcbiAgICAgICAgICAgICAgICBbaGVpZ2h0XT1cInZpcnR1YWw/Lml0ZW1IZWlnaHRcIlxuICAgICAgICAgICAgICAgIFtpbmRleF09XCJkYXRhSXRlbS5vZmZzZXRJbmRleFwiXG4gICAgICAgICAgICAgICAgW211bHRpcGxlU2VsZWN0aW9uXT1cIm11bHRpcGxlU2VsZWN0aW9uXCJcbiAgICAgICAgICAgICAgICBbYXR0ci5hYnNvbHV0ZS1pbmRleF09XCJkYXRhSXRlbS5pbmRleFwiXG4gICAgICAgICAgICAgICAgW2F0dHIuaWRdPVwib3B0aW9uUHJlZml4ICsgJy0nICsgZ2V0VmFsdWUoZGF0YUl0ZW0udmFsdWUpXCJcbiAgICAgICAgICAgICAgICBbYXR0ci50YWJJbmRleF09XCItMVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJrLWl0ZW1cIlxuICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInsgJ2stdmlydHVhbC1pdGVtJzogdmlydHVhbCwgJ2stc3RhdGUtZGlzYWJsZWQnOiBpc0Rpc2FibGVkKGRhdGFJdGVtLm9mZnNldEluZGV4KSB9XCI+XG4gICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwidGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiB0ZW1wbGF0ZS50ZW1wbGF0ZVJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbXBsaWNpdDogZGF0YUl0ZW0udmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIiF0ZW1wbGF0ZVwiPnt7IGdldFRleHQoZGF0YUl0ZW0udmFsdWUpIH19PC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPC91bD5cbiAgICA8ZGl2ICpuZ0lmPVwidmlydHVhbFwiIGNsYXNzPVwiay1oZWlnaHQtY29udGFpbmVyXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPlxuICAgICAgICA8ZGl2IFtzdHlsZS5oZWlnaHQucHhdPVwic2Nyb2xsSGVpZ2h0XCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGBcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTGlzdENvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IERhdGFTZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH0sXG4gICAgeyB0eXBlOiBTZWxlY3Rpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBEaXNhYmxlZEl0ZW1zU2VydmljZSB9LFxuICAgIHsgdHlwZTogQ2hhbmdlRGV0ZWN0b3JSZWYgfSxcbiAgICB7IHR5cGU6IE5nWm9uZSB9LFxuICAgIHsgdHlwZTogUmVuZGVyZXIyIH1cbl07XG5MaXN0Q29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xuICAgIHNlbGVjdGVkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBmb2N1c2VkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0ZXh0RmllbGQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHZhbHVlRmllbGQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGhlaWdodDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdGVtcGxhdGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGdyb3VwVGVtcGxhdGU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGZpeGVkR3JvdXBUZW1wbGF0ZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgc2hvdzogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgaWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIG9wdGlvblByZWZpeDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbXVsdGlwbGVTZWxlY3Rpb246IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHZpcnR1YWw6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGRhdGE6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIG9uQ2xpY2s6IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBwYWdlQ2hhbmdlOiBbeyB0eXBlOiBPdXRwdXQgfV0sXG4gICAgaXRlbXM6IFt7IHR5cGU6IFZpZXdDaGlsZHJlbiwgYXJnczogW0xpc3RJdGVtRGlyZWN0aXZlLF0gfV0sXG4gICAgY29udGVudDogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ2NvbnRlbnQnLF0gfV0sXG4gICAgbGlzdDogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ2xpc3QnLF0gfV1cbn07XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBERUZBVUxUUyA9IHtcbiAgICBwYWdlU2l6ZTogNTAsXG4gICAgaXRlbUhlaWdodDogMjhcbn07XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3Qgbm9ybWFsaXplVmlydHVhbGl6YXRpb25TZXR0aW5ncyA9IChzZXR0aW5ncykgPT4ge1xuICAgIGlmIChzZXR0aW5ncyA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gREVGQVVMVFM7XG4gICAgfVxuICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgcGFnZVNpemU6IERFRkFVTFRTLnBhZ2VTaXplIH0sIHNldHRpbmdzKTtcbn07XG5cbi8qIHRzbGludDpkaXNhYmxlOm1lbWJlci1vcmRlcmluZyAqL1xuY29uc3QgTk9fVkFMVUUgPSBcIlwiO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNvbnN0IEFVVE9DT01QTEVURV9WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgICBtdWx0aTogdHJ1ZSxcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBBdXRvQ29tcGxldGVDb21wb25lbnQpXG59O1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgQXV0b0NvbXBsZXRlIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19hdXRvY29tcGxldGUgJX0pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogX0BDb21wb25lbnQoe1xuICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICogdGVtcGxhdGU6IGBcbiAqICA8a2VuZG8tYXV0b2NvbXBsZXRlXG4gKiAgICAgIFtkYXRhXT1cImxpc3RJdGVtc1wiXG4gKiAgICAgIFtwbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gKiAgPlxuICogYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgIHB1YmxpYyBwbGFjZWhvbGRlcjogc3RyaW5nID0gJ1R5cGUgXCJpdFwiIGZvciBzdWdnZXN0aW9ucyc7XG4gKiAgIHB1YmxpYyBsaXN0SXRlbXM6IEFycmF5PHN0cmluZz4gPSBbXCJJdGVtIDFcIiwgXCJJdGVtIDJcIiwgXCJJdGVtIDNcIiwgXCJJdGVtIDRcIl07XG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgQXV0b0NvbXBsZXRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGl6YXRpb24sIGRhdGFTZXJ2aWNlLCBwb3B1cFNlcnZpY2UsIHNlbGVjdGlvblNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlLCBkaXNhYmxlZEl0ZW1zU2VydmljZSwgX3pvbmUsIGNkciwgcmVuZGVyZXIsIHdyYXBwZXIpIHtcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb24gPSBsb2NhbGl6YXRpb247XG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UgPSBkYXRhU2VydmljZTtcbiAgICAgICAgdGhpcy5wb3B1cFNlcnZpY2UgPSBwb3B1cFNlcnZpY2U7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZSA9IHNlbGVjdGlvblNlcnZpY2U7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UgPSBuYXZpZ2F0aW9uU2VydmljZTtcbiAgICAgICAgdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZSA9IGRpc2FibGVkSXRlbXNTZXJ2aWNlO1xuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XG4gICAgICAgIHRoaXMuY2RyID0gY2RyO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWZpbmVzIHdoZXRoZXIgdGhlIGZpcnN0IG1hdGNoIGZyb20gdGhlIHN1Z2dlc3Rpb25zIGxpc3Qgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGZvY3VzZWQuXG4gICAgICAgICAqIEJ5IGRlZmF1bHQsIGBoaWdobGlnaHRGaXJzdGAgaXMgc2V0IHRvIGB0cnVlYC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0Rmlyc3QgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGhpZGRlblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mb2N1c2FibGVJZCA9IGBrLSR7Z3VpZCgpfWA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgaGludCB3aGljaCBpcyBkaXNwbGF5ZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGVtcHR5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IFwiXCI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIHN1Z2dlc3Rpb25zIGxpc3QuIEJ5IGRlZmF1bHQsIGBsaXN0SGVpZ2h0YCBpcyAyMDBweC5cbiAgICAgICAgICpcbiAgICAgICAgICogPiBUaGUgYGxpc3RIZWlnaHRgIHByb3BlcnR5IGFmZmVjdHMgb25seSB0aGUgbGlzdCBvZiBzdWdnZXN0aW9ucyBhbmQgbm90IHRoZSB3aG9sZSBwb3B1cCBjb250YWluZXIuXG4gICAgICAgICAqID4gVG8gc2V0IHRoZSBoZWlnaHQgb2YgdGhlIHBvcHVwIGNvbnRhaW5lciwgdXNlIGBwb3B1cFNldHRpbmdzLmhlaWdodGAuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxpc3RIZWlnaHQgPSAyMDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaGlkZGVuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIHJlbmRlcnMgYSBidXR0b24gb24gaG92ZXJpbmcgb3ZlciB0aGUgY29tcG9uZW50LlxuICAgICAgICAgKiBDbGlja2luZyB0aGlzIGJ1dHRvbiByZXNldHMgdGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQgdG8gYHVuZGVmaW5lZGAgYW5kIHRyaWdnZXJzIHRoZSBgY2hhbmdlYCBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xlYXJCdXR0b24gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHJlYWQtb25seSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWFkb25seSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFiaW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlcyB0aGUgW2ZpbHRlcmluZ10oeyUgc2x1ZyBmaWx0ZXJpbmdfYXV0b2NvbXBsZXRlICV9KSBmdW5jdGlvbmFsaXR5LlxuICAgICAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgY29tcG9uZW50IGVtaXRzIHRoZSBgZmlsdGVyQ2hhbmdlYCBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkJm1kYXNoO1xuICAgICAgICAgKiB3aGVuIHRoZSBjb21wb25lbnQgaXMgYmx1cnJlZCBvciB0aGUgdmFsdWUgaXMgY2xlYXJlZCB0aHJvdWdoIHRoZSAqKkNsZWFyKiogYnV0dG9uXG4gICAgICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3ZlcnZpZXdfYXV0b2NvbXBsZXRlICV9I3RvYy1ldmVudHMpKS5cbiAgICAgICAgICogV2hlbiB0aGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudCBpcyBwcm9ncmFtbWF0aWNhbGx5IGNoYW5nZWQgdG8gYG5nTW9kZWxgIG9yIGBmb3JtQ29udHJvbGBcbiAgICAgICAgICogdGhyb3VnaCBpdHMgQVBJIG9yIGZvcm0gYmluZGluZywgdGhlIGB2YWx1ZUNoYW5nZWAgZXZlbnQgaXMgbm90IHRyaWdnZXJlZCBiZWNhdXNlIGl0XG4gICAgICAgICAqIG1pZ2h0IGNhdXNlIGEgbWl4LXVwIHdpdGggdGhlIGJ1aWx0LWluIGB2YWx1ZUNoYW5nZWAgbWVjaGFuaXNtcyBvZiB0aGUgYG5nTW9kZWxgIG9yIGBmb3JtQ29udHJvbGAgYmluZGluZ3MuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIHR5cGVzIGluIHRoZSBpbnB1dCBmaWVsZC5cbiAgICAgICAgICogWW91IGNhbiBmaWx0ZXIgdGhlIHNvdXJjZSBiYXNlZCBvbiB0aGUgcGFzc2VkIGZpbHRyYXRpb24gdmFsdWVcbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19hdXRvY29tcGxldGUgJX0jdG9jLWV2ZW50cykpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHBvcHVwIGlzIGFib3V0IHRvIG9wZW4uXG4gICAgICAgICAqIFRoaXMgZXZlbnQgaXMgcHJldmVudGFibGUuIElmIHlvdSBjYW5jZWwgaXQsIHRoZSBwb3B1cCB3aWxsIHJlbWFpbiBjbG9zZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHBvcHVwIGlzIGFib3V0IHRvIGNsb3NlLlxuICAgICAgICAgKiBUaGlzIGV2ZW50IGlzIHByZXZlbnRhYmxlLiBJZiB5b3UgY2FuY2VsIGl0LCB0aGUgcG9wdXAgd2lsbCByZW1haW4gb3Blbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgZm9jdXNlcyB0aGUgQXV0b0NvbXBsZXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBBdXRvQ29tcGxldGUgZ2V0cyBibHVycmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMud2lkZ2V0Q2xhc3NlcyA9IHRydWU7XG4gICAgICAgIHRoaXMubGlzdEJveElkID0gZ3VpZCgpO1xuICAgICAgICB0aGlzLm9wdGlvblByZWZpeCA9IGd1aWQoKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gbm9vcDtcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IG5vb3A7XG4gICAgICAgIHRoaXMucG9wdXBNb3VzZURvd25IYW5kbGVyID0gKGV2ZW50KSA9PiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLl9wb3B1cFNldHRpbmdzID0geyBhbmltYXRlOiB0cnVlIH07XG4gICAgICAgIHRoaXMuX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlU3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgIHRoaXMuX2lzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGxvY2FsaXphdGlvbi5ydGwgPyAncnRsJyA6ICdsdHInO1xuICAgICAgICB0aGlzLndyYXBwZXIgPSB3cmFwcGVyLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLnN1YnNjcmliZUV2ZW50cygpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UucmVzZXRTZWxlY3Rpb24oWy0xXSk7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgbGV0IHdyYXBwZXJPZmZzZXRXaWR0aCA9IDA7XG4gICAgICAgIGlmIChpc0RvY3VtZW50QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgIHdyYXBwZXJPZmZzZXRXaWR0aCA9IHRoaXMud3JhcHBlci5vZmZzZXRXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMucG9wdXBTZXR0aW5ncy53aWR0aCB8fCB3cmFwcGVyT2Zmc2V0V2lkdGg7XG4gICAgICAgIGNvbnN0IG1pbldpZHRoID0gaXNOYU4od3JhcHBlck9mZnNldFdpZHRoKSA/IHdyYXBwZXJPZmZzZXRXaWR0aCA6IGAke3dyYXBwZXJPZmZzZXRXaWR0aH1weGA7XG4gICAgICAgIGNvbnN0IG1heFdpZHRoID0gaXNOYU4od2lkdGgpID8gd2lkdGggOiBgJHt3aWR0aH1weGA7XG4gICAgICAgIHJldHVybiB7IG1pbjogbWluV2lkdGgsIG1heDogbWF4V2lkdGggfTtcbiAgICB9XG4gICAgZ2V0IGhlaWdodCgpIHtcbiAgICAgICAgY29uc3QgcG9wdXBIZWlnaHQgPSB0aGlzLnBvcHVwU2V0dGluZ3MuaGVpZ2h0O1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KHBvcHVwSGVpZ2h0KSA/IGAke3BvcHVwSGVpZ2h0fXB4YCA6ICdhdXRvJztcbiAgICB9XG4gICAgZ2V0IGxpc3RDb250YWluZXJDbGFzc2VzKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXJDbGFzc2VzID0gWydrLWxpc3QtY29udGFpbmVyJywgJ2stcmVzZXQnXTtcbiAgICAgICAgaWYgKHRoaXMucG9wdXBTZXR0aW5ncy5wb3B1cENsYXNzKSB7XG4gICAgICAgICAgICBjb250YWluZXJDbGFzc2VzLnB1c2godGhpcy5wb3B1cFNldHRpbmdzLnBvcHVwQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250YWluZXJDbGFzc2VzO1xuICAgIH1cbiAgICBnZXQgc3VnZ2VzdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRleHQgfHwgIXRoaXMuc3VnZ2VzdGVkVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZWRUZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc01hdGNoID0gdGhpcy5zdWdnZXN0ZWRUZXh0LnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCh0aGlzLnRleHQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGNvbnN0IHNob3VsZFN1Z2dlc3QgPSB0aGlzLnN1Z2dlc3QgJiYgIXRoaXMuYmFja3NwYWNlUHJlc3NlZDtcbiAgICAgICAgaWYgKHNob3VsZFN1Z2dlc3QgJiYgaGFzTWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1Z2dlc3RlZFRleHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFwcGVuZFRvKCkge1xuICAgICAgICBjb25zdCB7IGFwcGVuZFRvIH0gPSB0aGlzLnBvcHVwU2V0dGluZ3M7XG4gICAgICAgIGlmICghYXBwZW5kVG8gfHwgYXBwZW5kVG8gPT09ICdyb290Jykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwZW5kVG8gPT09ICdjb21wb25lbnQnID8gdGhpcy5jb250YWluZXIgOiBhcHBlbmRUbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgcG9wdXAuXG4gICAgICogSWYgeW91IHVzZSB0aGUgYHRvZ2dsZWAgbWV0aG9kIHRvIG9wZW4gb3IgY2xvc2UgdGhlIHBvcHVwLCB0aGUgYG9wZW5gIGFuZCBgY2xvc2VgIGV2ZW50cyB3aWxsIG5vdCBiZSBmaXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcGVuIC0gVGhlIHN0YXRlIG9mIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICB0b2dnbGUob3Blbikge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUobnVsbCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRPcGVuID0gaXNQcmVzZW50KG9wZW4pID8gb3BlbiA6ICF0aGlzLl9vcGVuO1xuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlKHNob3VsZE9wZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBvcGVuIHN0YXRlIG9mIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICBnZXQgaXNPcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRvZ2dsZVBvcHVwKG9wZW4pIHtcbiAgICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkb25seTtcbiAgICAgICAgY29uc3Qgc2FtZVN0YXRlID0gdGhpcy5pc09wZW4gPT09IG9wZW47XG4gICAgICAgIGlmIChpc0Rpc2FibGVkIHx8IHNhbWVTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzRGVmYXVsdFByZXZlbnRlZCA9IHRoaXMudHJpZ2dlclBvcHVwRXZlbnRzKG9wZW4pO1xuICAgICAgICBpZiAoIWlzRGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlKG9wZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhY3RpdmVEZXNjZW5kYW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuIHx8ICFpc1ByZXNlbnQodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpIHx8IHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YUl0ZW0gPSB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdCh0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCk7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvblByZWZpeCArIFwiLVwiICsgZ2V0dGVyKGRhdGFJdGVtLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgIH1cbiAgICBnZXQgbm9EYXRhTGFiZWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub0RhdGFUZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjbGVhclRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGl6YXRpb24uZ2V0KCdjbGVhclRpdGxlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGEgb2YgdGhlIEF1dG9Db21wbGV0ZS5cbiAgICAgKlxuICAgICAqID4gVGhlIGRhdGEgaGFzIHRvIGJlIHByb3ZpZGVkIGluIGFuIGFycmF5LWxpa2UgbGlzdC5cbiAgICAgKi9cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UuZGF0YSA9IGRhdGEgfHwgW107XG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlydHVhbC5za2lwID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5maWx0ZXJhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA9IHRoaXMuaXNPcGVuICYmIHRoaXMuZGF0YS5sZW5ndGggJiYgdGhpcy5oaWdobGlnaHRGaXJzdCA/IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleCgwKSA6IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN1Z2dlc3QgJiYgdGhpcy5kYXRhU2VydmljZS5pdGVtc0NvdW50ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZWRUZXh0ID0gZ2V0dGVyKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KDApLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICBjb25zdCB2aXJ0dWFsID0gdGhpcy52aXJ0dWFsO1xuICAgICAgICBpZiAodmlydHVhbCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB2aXJ0dWFsLnNraXAgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdmlydHVhbC5wYWdlU2l6ZTtcbiAgICAgICAgICAgIC8vIFVzZSBsZW5ndGggaW5zdGVhZCBvZiBpdGVtc0NvdW50IGJlY2F1c2Ugb2YgdGhlIGdyb3VwaW5nLlxuICAgICAgICAgICAgdmlydHVhbC50b3RhbCA9IHRoaXMuZGF0YVNlcnZpY2UuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5kYXRhLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLmRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBBdXRvQ29tcGxldGUuXG4gICAgICovXG4gICAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMudmVyaWZ5U2V0dGluZ3MobmV3VmFsdWUpO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlIHx8IE5PX1ZBTFVFO1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnZhbHVlO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWUgfHwgTk9fVkFMVUU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGhlIHBvcHVwIG9mIHRoZSBBdXRvQ29tcGxldGUuXG4gICAgICpcbiAgICAgKiBUaGUgYXZhaWxhYmxlIG9wdGlvbnMgYXJlOlxuICAgICAqIC0gYGFuaW1hdGU6IEJvb2xlYW5gJm1kYXNoO0NvbnRyb2xzIHRoZSBwb3B1cCBhbmltYXRpb24uIEJ5IGRlZmF1bHQsIHRoZSBvcGVuIGFuZCBjbG9zZSBhbmltYXRpb25zIGFyZSBlbmFibGVkLlxuICAgICAqIC0gYHdpZHRoOiBOdW1iZXIgfCBTdHJpbmdgJm1kYXNoO1NldHMgdGhlIHdpZHRoIG9mIHRoZSBwb3B1cCBjb250YWluZXIuIEJ5IGRlZmF1bHQsIHRoZSB3aWR0aCBvZiB0aGUgaG9zdCBlbGVtZW50IGlzIHVzZWQuIElmIHNldCB0byBgYXV0b2AsIHRoZSBjb21wb25lbnQgYXV0b21hdGljYWxseSBhZGp1c3RzIHRoZSB3aWR0aCBvZiB0aGUgcG9wdXAgYW5kIG5vIGl0ZW0gbGFiZWxzIGFyZSB3cmFwcGVkLiBUaGUgYGF1dG9gIG1vZGUgaXMgbm90IHN1cHBvcnRlZCB3aGVuIHZpcnR1YWwgc2Nyb2xsaW5nIGlzIGVuYWJsZWQuXG4gICAgICogLSBgaGVpZ2h0OiBOdW1iZXJgJm1kYXNoO1NldHMgdGhlIGhlaWdodCBvZiB0aGUgcG9wdXAgY29udGFpbmVyLlxuICAgICAqIC0gYHBvcHVwQ2xhc3M6IFN0cmluZ2AmbWRhc2g7U3BlY2lmaWVzIGEgbGlzdCBvZiBDU1MgY2xhc3NlcyB0aGF0IGFyZSB1c2VkIHRvIHN0eWxlIHRoZSBwb3B1cC5cbiAgICAgKiAtIGBhcHBlbmRUbzogXCJyb290XCIgfCBcImNvbXBvbmVudFwiIHwgVmlld0NvbnRhaW5lclJlZmAmbWRhc2g7U3BlY2lmaWVzIHRoZSBjb21wb25lbnQgdG8gd2hpY2ggdGhlIHBvcHVwIHdpbGwgYmUgYXBwZW5kZWQuXG4gICAgICovXG4gICAgc2V0IHBvcHVwU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fcG9wdXBTZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oeyBhbmltYXRlOiB0cnVlIH0sIHNldHRpbmdzKTtcbiAgICB9XG4gICAgZ2V0IHBvcHVwU2V0dGluZ3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cFNldHRpbmdzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIGEgQm9vbGVhbiBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGZvciBlYWNoIGRhdGEgaXRlbSBpbiB0aGUgY29tcG9uZW50XG4gICAgICogKFtzZWUgZXhhbXBsZXNdKHslIHNsdWcgZGlzYWJsZWRpdGVtc19hdXRvY29tcGxldGUgJX0pKS5cbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGl0ZW0gd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBzZXQgaXRlbURpc2FibGVkKGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaXRlbURpc2FibGVkIG11c3QgYmUgYSBmdW5jdGlvbiwgYnV0IHJlY2VpdmVkICR7SlNPTi5zdHJpbmdpZnkoZm4pfS5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlLml0ZW1EaXNhYmxlZCA9IGZuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2V0IHRhYkluZGV4KHRhYkluZGV4KSB7XG4gICAgICAgIHRoaXMudGFiaW5kZXggPSB0YWJJbmRleDtcbiAgICB9XG4gICAgZ2V0IHRhYkluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgW3ZpcnR1YWxpemF0aW9uXSh7JSBzbHVnIHZpcnR1YWxpemF0aW9uX2F1dG9jb21wbGV0ZSAlfSkgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBzZXQgdmlydHVhbChzZXR0aW5ncykge1xuICAgICAgICB0aGlzLl92aXJ0dWFsU2V0dGluZ3MgPSBub3JtYWxpemVWaXJ0dWFsaXphdGlvblNldHRpbmdzKHNldHRpbmdzKTtcbiAgICB9XG4gICAgZ2V0IHZpcnR1YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXJ0dWFsU2V0dGluZ3M7XG4gICAgfVxuICAgIGdldCBpc0ZvY3VzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0ZvY3VzZWQ7XG4gICAgfVxuICAgIHNldCBpc0ZvY3VzZWQoaXNGb2N1c2VkKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXJbaXNGb2N1c2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHRoaXMud3JhcHBlciwgXCJrLXN0YXRlLWZvY3VzZWRcIik7XG4gICAgICAgIHRoaXMuX2lzRm9jdXNlZCA9IGlzRm9jdXNlZDtcbiAgICB9XG4gICAgZ2V0IGlzRGlzYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVkO1xuICAgIH1cbiAgICBnZXQgZGlyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb247XG4gICAgfVxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLndyYXBwZXIsIFwidGFiaW5kZXhcIik7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uID0gdGhpcy5sb2NhbGl6YXRpb25cbiAgICAgICAgICAgIC5jaGFuZ2VzXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh7IHJ0bCB9KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHJ0bCA/ICdydGwnIDogJ2x0cic7XG4gICAgICAgICAgICB0aGlzLnNldE1lc3NhZ2VzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldE1lc3NhZ2VzKCk7XG4gICAgfVxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lQb3B1cCgpO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlRXZlbnRzKCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1lc3NhZ2VzVGltZW91dCk7XG4gICAgICAgIGlmICh0aGlzLmxvY2FsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5sb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWwgPSB0aGlzLnZpcnR1YWw7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RJbml0aWFsRGF0YSA9IHZpcnR1YWwgJiYgY2hhbmdlcy5kYXRhICYmIGNoYW5nZXMuZGF0YS5pc0ZpcnN0Q2hhbmdlKCk7XG4gICAgICAgIGlmIChyZXF1ZXN0SW5pdGlhbERhdGEpIHtcbiAgICAgICAgICAgIHRoaXMucGFnZUNoYW5nZSh7IHNraXA6IDAsIHRha2U6IHZpcnR1YWwucGFnZVNpemUgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgQXV0b0NvbXBsZXRlLlxuICAgICAqIElmIHlvdSB1c2UgdGhlIGByZXNldGAgbWV0aG9kIHRvIGNsZWFyIHRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LFxuICAgICAqIHRoZSBtb2RlbCB3aWxsIG5vdCB1cGRhdGUgYXV0b21hdGljYWxseSBhbmQgdGhlIGBzZWxlY3Rpb25DaGFuZ2VgIGFuZCBgdmFsdWVDaGFuZ2VgIGV2ZW50cyB3aWxsIG5vdCBiZSBmaXJlZC5cbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IE5PX1ZBTFVFO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2xlYXJWYWx1ZShldmVudCkge1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB0aGlzLmNoYW5nZShOT19WQUxVRSk7XG4gICAgICAgIGlmICh0aGlzLmZpbHRlcmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQoJycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5yZXNldFNlbGVjdGlvbihbXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm4pIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbikge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIEF1dG9Db21wbGV0ZS5cbiAgICAgKi9cbiAgICBmb2N1cygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEJsdXJzIHRoZSBBdXRvQ29tcGxldGUuXG4gICAgICovXG4gICAgYmx1cigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhci5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uUmVzaXplKCkge1xuICAgICAgICBpZiAodGhpcy5fb3Blbikge1xuICAgICAgICAgICAgY29uc3QgcG9wdXBXcmFwcGVyID0gdGhpcy5wb3B1cFJlZi5wb3B1cEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLm1pbldpZHRoID0gbWluO1xuICAgICAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLndpZHRoID0gbWF4O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVtaXRDaGFuZ2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHZhbHVlKTtcbiAgICB9XG4gICAgdmVyaWZ5U2V0dGluZ3MobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc0Rldk1vZGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQobmV3VmFsdWUpICYmIHR5cGVvZiBuZXdWYWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBzdHJpbmcuIFNlZSBodHRwczovL3d3dy50ZWxlcmlrLmNvbS9rZW5kby1hbmd1bGFyLXVpL2NvbXBvbmVudHMvZHJvcGRvd25zL2F1dG9jb21wbGV0ZS92YWx1ZS1iaW5kaW5nL1wiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWFyY2godGV4dCwgc3RhcnRGcm9tID0gMCkge1xuICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgIGlmICh0ZXh0Lmxlbmd0aCAmJiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5kYXRhU2VydmljZS5maW5kSW5kZXgodGhpcy5maW5kSW5kZXhQcmVkaWNhdGUodGV4dCksIHN0YXJ0RnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlLmlzSW5kZXhEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCArIDEgPCB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaCh0ZXh0LCBpbmRleCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzKC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1cyhpbmRleCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdWdnZXN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZWRUZXh0ID0gZ2V0dGVyKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGluZGV4KSwgdGhpcy52YWx1ZUZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBuYXZpZ2F0ZShpbmRleCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzKGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZU5hdmlnYXRlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGZvY3VzZWQgPSBpc05hTih0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCkgPyB0aGlzLmZpcnN0Rm9jdXNhYmxlSW5kZXgoMCkgOiB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZDtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkb25seSB8fCBpc05hTihmb2N1c2VkKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMubmF2aWdhdGlvblNlcnZpY2UucHJvY2Vzcyh7XG4gICAgICAgICAgICBjdXJyZW50OiBmb2N1c2VkLFxuICAgICAgICAgICAgbWF4OiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQgLSAxLFxuICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uVW5kZWZpbmVkICYmXG4gICAgICAgICAgICBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uQmFja3NwYWNlICYmXG4gICAgICAgICAgICBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uRGVsZXRlICYmXG4gICAgICAgICAgICBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uSG9tZSAmJlxuICAgICAgICAgICAgYWN0aW9uICE9PSBOYXZpZ2F0aW9uQWN0aW9uLkVuZCAmJlxuICAgICAgICAgICAgYWN0aW9uICE9PSBOYXZpZ2F0aW9uQWN0aW9uLkxlZnQgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5SaWdodCAmJlxuICAgICAgICAgICAgKChhY3Rpb24gPT09IE5hdmlnYXRpb25BY3Rpb24uRW50ZXIgJiYgdGhpcy5pc09wZW4pIHx8IGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5FbnRlcikpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRW50ZXIoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZm9jdXNlZCA9IHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkO1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb2N1c2VkID49IDApIHtcbiAgICAgICAgICAgIHZhbHVlID0gZ2V0dGVyKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGZvY3VzZWQpLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnN1Z2dlc3QgJiYgdGhpcy5zdWdnZXN0ZWRUZXh0ICYmIHRoaXMuZGF0YS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICBnZXR0ZXIodGhpcy5kYXRhU2VydmljZS5pdGVtQXQoMCksIHRoaXMudmFsdWVGaWVsZCwgdHJ1ZSkudG9Mb3dlckNhc2UoKSA9PT0gdGhpcy5zZWFyY2hiYXIudmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzT3BlbiAmJiBtYXRjaCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5zdWdnZXN0ZWRUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLnNlYXJjaGJhci52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNoYW5nZSh2YWx1ZSk7XG4gICAgfVxuICAgIGhhbmRsZUVzY2FwZSgpIHtcbiAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID0gLTE7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGVkVGV4dCA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZWFyY2hCYXJDaGFuZ2UodGV4dCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VGV4dExlbmd0aCA9IGlzUHJlc2VudCh0aGlzLnRleHQpID8gdGhpcy50ZXh0Lmxlbmd0aCA6IDA7XG4gICAgICAgIHRoaXMuYmFja3NwYWNlUHJlc3NlZCA9ICh0ZXh0Lmxlbmd0aCA8IGN1cnJlbnRUZXh0TGVuZ3RoKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy50b2dnbGVQb3B1cCh0ZXh0Lmxlbmd0aCA+IDApO1xuICAgICAgICBpZiAoIXRoaXMuaGlnaGxpZ2h0Rmlyc3QpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2UuZW1pdCh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmhpZ2hsaWdodEZpcnN0KSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaCh0ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlRm9jdXMoKSB7XG4gICAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgaWYgKGhhc09ic2VydmVycyh0aGlzLm9uRm9jdXMpKSB7XG4gICAgICAgICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkZvY3VzLmVtaXQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVCbHVyKCkge1xuICAgICAgICBjb25zdCBmb2N1c2VkID0gdGhpcy5maWx0ZXJhYmxlID8gdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgOiAtMTtcbiAgICAgICAgdGhpcy5zZWFyY2hiYXIuaW5wdXQubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID0gMDsgLy8gRmlyZWZveCBkb2Vzbid0IGF1dG8tc2Nyb2xsIHRvIHRoZSBsZWZ0IG9uIGJsdXIgbGlrZSBvdGhlciBicm93c2Vyc1xuICAgICAgICBsZXQgZGF0YUl0ZW07XG4gICAgICAgIGxldCB0ZXh0O1xuICAgICAgICBpZiAoZm9jdXNlZCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGRhdGFJdGVtID0gdGhpcy5kYXRhU2VydmljZS5pdGVtQXQoZm9jdXNlZCk7XG4gICAgICAgICAgICB0ZXh0ID0gZ2V0dGVyKGRhdGFJdGVtLCB0aGlzLnZhbHVlRmllbGQsIHRydWUpIHx8IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0ZXh0ID0gdGhpcy5zZWFyY2hiYXIudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhhY3RNYXRjaCA9IHRleHQgPT09IHRoaXMuc2VhcmNoYmFyLnZhbHVlO1xuICAgICAgICBjb25zdCBpbnNlbnNpdGl2ZU1hdGNoID0gdGV4dC50b0xvd2VyQ2FzZSgpID09PSB0aGlzLnNlYXJjaGJhci52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIWV4YWN0TWF0Y2ggJiYgaW5zZW5zaXRpdmVNYXRjaCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnJlc2V0U2VsZWN0aW9uKFtdKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWx1ZUhhc0NoYW5nZWQgPSB0aGlzLnZhbHVlICE9PSB0aGlzLnRleHQ7XG4gICAgICAgIGNvbnN0IHJ1bkluWm9uZSA9IGhhc09ic2VydmVycyh0aGlzLm9uQmx1cikgfHwgaGFzT2JzZXJ2ZXJzKHRoaXMuY2xvc2UpIHx8IGlzVW50b3VjaGVkKHRoaXMud3JhcHBlcikgfHwgdmFsdWVIYXNDaGFuZ2VkO1xuICAgICAgICBpZiAocnVuSW5ab25lKSB7XG4gICAgICAgICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlSGFzQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZSh0aGlzLnNlYXJjaGJhci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMub25CbHVyLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYWdlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWwgPSB0aGlzLnZpcnR1YWw7XG4gICAgICAgIHZpcnR1YWwuc2tpcCA9IGV2ZW50LnNraXA7XG4gICAgfVxuICAgIGNoYW5nZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZVN1YmplY3QubmV4dCh2YWx1ZSk7XG4gICAgfVxuICAgIHN1YnNjcmliZUV2ZW50cygpIHtcbiAgICAgICAgaWYgKCFpc0RvY3VtZW50QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlU3Vic2NyaXB0aW9uID0gdGhpcy52YWx1ZUNoYW5nZVN1YmplY3RcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodmFsdWUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaGFzQ2hhbmdlID0gdGhpcy52YWx1ZSAhPT0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIGVtaXQgY2hhbmdlIGFmdGVyIGFzc2lnbmluZyBgdGhpcy52YWx1ZWAgPT4gYWxsb3dzIHRoZSB1c2VyIHRvIG1vZGlmeSB0aGUgY29tcG9uZW50IHZhbHVlIG9uIGB2YWx1ZUNoYW5nZWBcbiAgICAgICAgICAgIGlmIChoYXNDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDaGFuZ2UodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLnNlbGVjdGlvblNlcnZpY2Uub25DaGFuZ2Uuc3Vic2NyaWJlKHRoaXMuaGFuZGxlSXRlbUNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5mb2N1c1N1YnNjcmlwdGlvbiA9IHRoaXMuc2VsZWN0aW9uU2VydmljZS5vbkZvY3VzLnN1YnNjcmliZSh0aGlzLmhhbmRsZUl0ZW1Gb2N1cy5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU3Vic2NyaXB0aW9uID0gbWVyZ2UodGhpcy5uYXZpZ2F0aW9uU2VydmljZS51cCwgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5kb3duKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB0aGlzLm5hdmlnYXRlKGV2ZW50LmluZGV4KSk7XG4gICAgICAgIHRoaXMuY2xvc2VTdWJzY3JpcHRpb24gPSB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmNsb3NlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKSk7XG4gICAgICAgIHRoaXMuZW50ZXJTdWJzY3JpcHRpb24gPSB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmVudGVyLnN1YnNjcmliZSh0aGlzLmhhbmRsZUVudGVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmVzY1N1YnNjcmlwdGlvbiA9IHRoaXMubmF2aWdhdGlvblNlcnZpY2UuZXNjLnN1YnNjcmliZSh0aGlzLmhhbmRsZUVzY2FwZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFuZ2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuY2xvc2VTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5lbnRlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmVzY1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuZm9jdXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgaGFuZGxlSXRlbUNoYW5nZShldmVudCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGV2ZW50LmluZGljZXMubGVuZ3RoID8gZXZlbnQuaW5kaWNlc1swXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnJlc2V0U2VsZWN0aW9uKFstMV0pO1xuICAgICAgICBpZiAoIWlzUHJlc2VudChpbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGV4dCA9IGdldHRlcih0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdChpbmRleCksIHRoaXMudmFsdWVGaWVsZCk7XG4gICAgICAgIHRoaXMuY2hhbmdlKHRleHQpO1xuICAgIH1cbiAgICBoYW5kbGVJdGVtRm9jdXMoX2V2ZW50KSB7XG4gICAgICAgIGNvbnN0IGZvY3VzZWQgPSB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZDtcbiAgICAgICAgY29uc3Qgc2hvdWxkU3VnZ2VzdCA9IEJvb2xlYW4odGhpcy5zdWdnZXN0ICYmIHRoaXMuZGF0YSAmJiB0aGlzLmRhdGEubGVuZ3RoICYmIGZvY3VzZWQgPj0gMCk7XG4gICAgICAgIGlmIChzaG91bGRTdWdnZXN0KSB7XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3RlZFRleHQgPSBnZXR0ZXIodGhpcy5kYXRhU2VydmljZS5pdGVtQXQoZm9jdXNlZCksIHRoaXMudmFsdWVGaWVsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlUG9wdXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlydHVhbC5za2lwID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3Jpem9udGFsQWxpZ24gPSB0aGlzLmRpcmVjdGlvbiA9PT0gXCJydGxcIiA/IFwicmlnaHRcIiA6IFwibGVmdFwiO1xuICAgICAgICBjb25zdCBhbmNob3JQb3NpdGlvbiA9IHsgaG9yaXpvbnRhbDogaG9yaXpvbnRhbEFsaWduLCB2ZXJ0aWNhbDogXCJib3R0b21cIiB9O1xuICAgICAgICBjb25zdCBwb3B1cFBvc2l0aW9uID0geyBob3Jpem9udGFsOiBob3Jpem9udGFsQWxpZ24sIHZlcnRpY2FsOiBcInRvcFwiIH07XG4gICAgICAgIHRoaXMucG9wdXBSZWYgPSB0aGlzLnBvcHVwU2VydmljZS5vcGVuKHtcbiAgICAgICAgICAgIGFuY2hvcjogdGhpcy53cmFwcGVyLFxuICAgICAgICAgICAgYW5pbWF0ZTogdGhpcy5wb3B1cFNldHRpbmdzLmFuaW1hdGUsXG4gICAgICAgICAgICBhcHBlbmRUbzogdGhpcy5hcHBlbmRUbyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMucG9wdXBUZW1wbGF0ZSxcbiAgICAgICAgICAgIHBvcHVwQ2xhc3M6IHRoaXMubGlzdENvbnRhaW5lckNsYXNzZXMsXG4gICAgICAgICAgICBwb3NpdGlvbk1vZGU6ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICBwb3B1cEFsaWduOiBwb3B1cFBvc2l0aW9uLFxuICAgICAgICAgICAgYW5jaG9yQWxpZ246IGFuY2hvclBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwb3B1cFdyYXBwZXIgPSB0aGlzLnBvcHVwUmVmLnBvcHVwRWxlbWVudDtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy53aWR0aDtcbiAgICAgICAgcG9wdXBXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMucG9wdXBNb3VzZURvd25IYW5kbGVyKTtcbiAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLm1pbldpZHRoID0gbWluO1xuICAgICAgICBwb3B1cFdyYXBwZXIuc3R5bGUud2lkdGggPSBtYXg7XG4gICAgICAgIHBvcHVwV3JhcHBlci5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgcG9wdXBXcmFwcGVyLnNldEF0dHJpYnV0ZShcImRpclwiLCB0aGlzLmRpcmVjdGlvbik7XG4gICAgICAgIHRoaXMucG9wdXBSZWYucG9wdXBPcGVuLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNMaXN0LnNjcm9sbFRvSXRlbSh0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBvcHVwUmVmLnBvcHVwQW5jaG9yVmlld3BvcnRMZWF2ZS5zdWJzY3JpYmUoKCkgPT4gdGhpcy50b2dnbGVQb3B1cChmYWxzZSkpO1xuICAgIH1cbiAgICBkZXN0cm95UG9wdXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnBvcHVwUmVmKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHVwUmVmLnBvcHVwRWxlbWVudFxuICAgICAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnBvcHVwTW91c2VEb3duSGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLnBvcHVwUmVmLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLnBvcHVwUmVmID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfdG9nZ2xlKG9wZW4pIHtcbiAgICAgICAgdGhpcy5fb3BlbiA9IG9wZW47XG4gICAgICAgIHRoaXMuZGVzdHJveVBvcHVwKCk7XG4gICAgICAgIGlmICh0aGlzLl9vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVBvcHVwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJpZ2dlclBvcHVwRXZlbnRzKG9wZW4pIHtcbiAgICAgICAgY29uc3QgZXZlbnRBcmdzID0gbmV3IFByZXZlbnRhYmxlRXZlbnQoKTtcbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMub3Blbi5lbWl0KGV2ZW50QXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlLmVtaXQoZXZlbnRBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRBcmdzLmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuICAgIH1cbiAgICBmaXJzdEZvY3VzYWJsZUluZGV4KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gdGhpcy5kYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlLmlzSW5kZXhEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybiAoaW5kZXggPCBtYXhJbmRleCkgPyB0aGlzLmZpcnN0Rm9jdXNhYmxlSW5kZXgoaW5kZXggKyAxKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5kSW5kZXhQcmVkaWNhdGUodGV4dCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5ncm91cGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgaXRlbVRleHQgPSBnZXR0ZXIoaXRlbS52YWx1ZSwgdGhpcy52YWx1ZUZpZWxkKTtcbiAgICAgICAgICAgICAgICBpdGVtVGV4dCA9ICFpc1ByZXNlbnQoaXRlbVRleHQpID8gXCJcIiA6IGl0ZW1UZXh0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVRleHQuc3RhcnRzV2l0aCh0ZXh0LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtVGV4dCA9IGdldHRlcihpdGVtLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgICAgICAgICAgICAgIGl0ZW1UZXh0ID0gIWlzUHJlc2VudChpdGVtVGV4dCkgPyBcIlwiIDogaXRlbVRleHQudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtVGV4dC5zdGFydHNXaXRoKHRleHQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldE1lc3NhZ2VzKCkge1xuICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1lc3NhZ2VzVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubm9EYXRhVGV4dCA9IHRoaXMubG9jYWxpemF0aW9uLmdldCgnbm9EYXRhVGV4dCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5BdXRvQ29tcGxldGVDb21wb25lbnQuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBleHBvcnRBczogJ2tlbmRvQXV0b0NvbXBsZXRlJyxcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgQVVUT0NPTVBMRVRFX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgICAgICAgICBEYXRhU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgU2VsZWN0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgTmF2aWdhdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIERpc2FibGVkSXRlbXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBMb2NhbGl6YXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBMMTBOX1BSRUZJWCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZVZhbHVlOiAna2VuZG8uYXV0b2NvbXBsZXRlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBGaWx0ZXJhYmxlRHJvcERvd25Db21wb25lbnRCYXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQXV0b0NvbXBsZXRlQ29tcG9uZW50KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBLZW5kb0lucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQXV0b0NvbXBsZXRlQ29tcG9uZW50KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2tlbmRvLWF1dG9jb21wbGV0ZScsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPG5nLWNvbnRhaW5lciBrZW5kb0F1dG9Db21wbGV0ZUxvY2FsaXplZE1lc3NhZ2VzXG4gICAgICAgICAgICBpMThuLW5vRGF0YVRleHQ9XCJrZW5kby5hdXRvY29tcGxldGUubm9EYXRhVGV4dHxUaGUgdGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHBvcHVwIHdoZW4gdGhlcmUgYXJlIG5vIGl0ZW1zXCJcbiAgICAgICAgICAgIG5vRGF0YVRleHQ9XCJOTyBEQVRBIEZPVU5EXCJcblxuICAgICAgICAgICAgaTE4bi1jbGVhclRpdGxlPVwia2VuZG8uYXV0b2NvbXBsZXRlLmNsZWFyVGl0bGV8VGhlIHRpdGxlIG9mIHRoZSBjbGVhciBidXR0b25cIlxuICAgICAgICAgICAgY2xlYXJUaXRsZT1cImNsZWFyXCJcbiAgICAgICAgPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPGtlbmRvLXNlYXJjaGJhciAjc2VhcmNoYmFyXG4gICAgICAgICAgICBbcm9sZV09XCInY29tYm9ib3gnXCJcbiAgICAgICAgICAgIFtpZF09XCJmb2N1c2FibGVJZFwiXG4gICAgICAgICAgICBbbGlzdElkXT1cImxpc3RCb3hJZFwiXG4gICAgICAgICAgICBbYWN0aXZlRGVzY2VuZGFudF09XCJhY3RpdmVEZXNjZW5kYW50XCJcbiAgICAgICAgICAgIFtub0RhdGFMYWJlbF09XCJub0RhdGFMYWJlbFwiXG4gICAgICAgICAgICBbdXNlcklucHV0XT1cInRleHRcIlxuICAgICAgICAgICAgW3N1Z2dlc3RlZFRleHRdPVwic3VnZ2VzdGlvblwiXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cInJlYWRvbmx5XCJcbiAgICAgICAgICAgIFt0YWJJbmRleF09XCJ0YWJJbmRleFwiXG4gICAgICAgICAgICBbcG9wdXBPcGVuXT1cImlzT3BlblwiXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwicGxhY2Vob2xkZXJcIlxuICAgICAgICAgICAgKG9uTmF2aWdhdGUpPVwiaGFuZGxlTmF2aWdhdGUoJGV2ZW50KVwiXG4gICAgICAgICAgICAodmFsdWVDaGFuZ2UpPVwic2VhcmNoQmFyQ2hhbmdlKCRldmVudClcIlxuICAgICAgICAgICAgKG9uQmx1cik9XCJoYW5kbGVCbHVyKClcIlxuICAgICAgICAgICAgKG9uRm9jdXMpPVwiaGFuZGxlRm9jdXMoKVwiXG4gICAgICAgID48L2tlbmRvLXNlYXJjaGJhcj5cbiAgICAgICAgPHNwYW4gKm5nSWY9XCIhbG9hZGluZyAmJiAhcmVhZG9ubHkgJiYgKGNsZWFyQnV0dG9uICYmIHRleHQ/Lmxlbmd0aClcIiBjbGFzcz1cImstaWNvbiBrLWNsZWFyLXZhbHVlIGstaS1jbG9zZVwiIFthdHRyLnRpdGxlXT1cImNsZWFyVGl0bGVcIiByb2xlPVwiYnV0dG9uXCIgdGFiaW5kZXg9XCItMVwiIChjbGljayk9XCJjbGVhclZhbHVlKCRldmVudClcIiAobW91c2Vkb3duKT1cIiRldmVudC5wcmV2ZW50RGVmYXVsdCgpXCI+XG48L3NwYW4+XG4gICAgICAgIDxzcGFuICpuZ0lmPVwibG9hZGluZ1wiIGNsYXNzPVwiay1pY29uIGstaS1sb2FkaW5nXCI+PC9zcGFuPlxuICAgICAgICA8bmctdGVtcGxhdGUgI3BvcHVwVGVtcGxhdGU+XG4gICAgICAgICAgICA8IS0taGVhZGVyIHRlbXBsYXRlLS0+XG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCJoZWFkZXJUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiBoZWFkZXJUZW1wbGF0ZS50ZW1wbGF0ZVJlZlxuICAgICAgICAgICAgICAgIH1cIj5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8IS0tbGlzdC0tPlxuICAgICAgICAgICAgPGtlbmRvLWxpc3RcbiAgICAgICAgICAgICAgICAjb3B0aW9uc0xpc3RcbiAgICAgICAgICAgICAgICBbaWRdPVwibGlzdEJveElkXCJcbiAgICAgICAgICAgICAgICBbb3B0aW9uUHJlZml4XT1cIm9wdGlvblByZWZpeFwiXG4gICAgICAgICAgICAgICAgW2RhdGFdPVwiZGF0YVwiXG4gICAgICAgICAgICAgICAgW3RleHRGaWVsZF09XCJ2YWx1ZUZpZWxkXCJcbiAgICAgICAgICAgICAgICBbdmFsdWVGaWVsZF09XCJ2YWx1ZUZpZWxkXCJcbiAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwidGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgIFtncm91cFRlbXBsYXRlXT1cImdyb3VwVGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgIFtmaXhlZEdyb3VwVGVtcGxhdGVdPVwiZml4ZWRHcm91cFRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICBbaGVpZ2h0XT1cImxpc3RIZWlnaHRcIlxuICAgICAgICAgICAgICAgIFtzaG93XT1cImlzT3BlblwiXG4gICAgICAgICAgICAgICAgW3ZpcnR1YWxdPVwidmlydHVhbFwiXG4gICAgICAgICAgICAgICAgKHBhZ2VDaGFuZ2UpPVwicGFnZUNoYW5nZSgkZXZlbnQpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwva2VuZG8tbGlzdD5cbiAgICAgICAgICAgIDwhLS1uby1kYXRhIHRlbXBsYXRlLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiay1ub2RhdGFcIiAqbmdJZj1cImRhdGEubGVuZ3RoID09PSAwXCI+XG4gICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIm5vRGF0YVRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlZjogbm9EYXRhVGVtcGxhdGU/LnRlbXBsYXRlUmVmXG4gICAgICAgICAgICAgICAgICAgIH1cIj5cbiAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCIhbm9EYXRhVGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj57eyBub0RhdGFUZXh0IH19PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPCEtLWZvb3RlciB0ZW1wbGF0ZS0tPlxuICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiZm9vdGVyVGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlZjogZm9vdGVyVGVtcGxhdGUudGVtcGxhdGVSZWZcbiAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiaXNPcGVuXCI+XG4gICAgICAgICAgICA8a2VuZG8tcmVzaXplLXNlbnNvciAocmVzaXplKT1cIm9uUmVzaXplKClcIj48L2tlbmRvLXJlc2l6ZS1zZW5zb3I+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgIDxuZy1jb250YWluZXIgI2NvbnRhaW5lcj48L25nLWNvbnRhaW5lcj5cbiAgYFxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5BdXRvQ29tcGxldGVDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBMb2NhbGl6YXRpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBEYXRhU2VydmljZSB9LFxuICAgIHsgdHlwZTogUG9wdXBTZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBTZWxlY3Rpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBOYXZpZ2F0aW9uU2VydmljZSB9LFxuICAgIHsgdHlwZTogRGlzYWJsZWRJdGVtc1NlcnZpY2UgfSxcbiAgICB7IHR5cGU6IE5nWm9uZSB9LFxuICAgIHsgdHlwZTogQ2hhbmdlRGV0ZWN0b3JSZWYgfSxcbiAgICB7IHR5cGU6IFJlbmRlcmVyMiB9LFxuICAgIHsgdHlwZTogRWxlbWVudFJlZiB9XG5dO1xuQXV0b0NvbXBsZXRlQ29tcG9uZW50LnByb3BEZWNvcmF0b3JzID0ge1xuICAgIGhpZ2hsaWdodEZpcnN0OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBmb2N1c2FibGVJZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZGF0YTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHZhbHVlRmllbGQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHBsYWNlaG9sZGVyOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBwb3B1cFNldHRpbmdzOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBsaXN0SGVpZ2h0OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBsb2FkaW5nOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBjbGVhckJ1dHRvbjogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgc3VnZ2VzdDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZGlzYWJsZWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGl0ZW1EaXNhYmxlZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcmVhZG9ubHk6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRhYmluZGV4OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0YWJJbmRleDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFtcInRhYkluZGV4XCIsXSB9XSxcbiAgICBmaWx0ZXJhYmxlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2aXJ0dWFsOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2YWx1ZUNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIGZpbHRlckNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9wZW46IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBjbG9zZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9uRm9jdXM6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydmb2N1cycsXSB9XSxcbiAgICBvbkJsdXI6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydibHVyJyxdIH1dLFxuICAgIHRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtJdGVtVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBoZWFkZXJUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBmb290ZXJUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBub0RhdGFUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbTm9EYXRhVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBncm91cFRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtHcm91cFRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgZml4ZWRHcm91cFRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBjb250YWluZXI6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydjb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSxdIH1dLFxuICAgIHBvcHVwVGVtcGxhdGU6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydwb3B1cFRlbXBsYXRlJyxdIH1dLFxuICAgIHNlYXJjaGJhcjogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbU2VhcmNoQmFyQ29tcG9uZW50LF0gfV0sXG4gICAgb3B0aW9uc0xpc3Q6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydvcHRpb25zTGlzdCcsXSB9XSxcbiAgICB3aWRnZXRDbGFzc2VzOiBbeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLXdpZGdldCcsXSB9LCB7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstYXV0b2NvbXBsZXRlJyxdIH0sIHsgdHlwZTogSG9zdEJpbmRpbmcsIGFyZ3M6IFsnY2xhc3Muay1oZWFkZXInLF0gfV0sXG4gICAgaXNEaXNhYmxlZDogW3sgdHlwZTogSG9zdEJpbmRpbmcsIGFyZ3M6IFsnY2xhc3Muay1zdGF0ZS1kaXNhYmxlZCcsXSB9XSxcbiAgICBkaXI6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2F0dHIuZGlyJyxdIH1dXG59O1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgVE9VQ0hfRU5BQkxFRCA9IG5ldyBJbmplY3Rpb25Ub2tlbignZHJvcGRvd25zLXRvdWNoLWVuYWJsZWQnKTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xuY29uc3QgTXVsdGlzZWxlY3RNZXNzYWdlcyA9IHtcbiAgICAnYXJyYXknOiAnRXhwZWN0ZWQgdmFsdWVzIG9mIGFycmF5IHR5cGUuIFNlZSBodHRwOi8vd3d3LnRlbGVyaWsuY29tL2tlbmRvLWFuZ3VsYXItdWkvY29tcG9uZW50cy9kcm9wZG93bnMvbXVsdGlzZWxlY3QvI3ZhbHVlLXNlbGVjdGlvbicsXG4gICAgJ29iamVjdCc6ICdFeHBlY3RlZCB2YWx1ZXMgb2YgT2JqZWN0IHR5cGUuIFNlZSBodHRwOi8vd3d3LnRlbGVyaWsuY29tL2tlbmRvLWFuZ3VsYXItdWkvY29tcG9uZW50cy9kcm9wZG93bnMvbXVsdGlzZWxlY3QvI3ZhbHVlLXNlbGVjdGlvbicsXG4gICAgJ3ByaW1pdGl2ZSc6ICdFeHBlY3RlZCB2YWx1ZXMgb2YgcHJpbWl0aXZlIHR5cGUuIFNlZSBodHRwOi8vd3d3LnRlbGVyaWsuY29tL2tlbmRvLWFuZ3VsYXItdWkvY29tcG9uZW50cy9kcm9wZG93bnMvbXVsdGlzZWxlY3QvI3ZhbHVlLXNlbGVjdGlvbicsXG4gICAgJ3RleHRBbmRWYWx1ZSc6ICdFeHBlY3RlZCB0ZXh0RmllbGQgYW5kIHZhbHVlRmllbGQgb3B0aW9ucyB0byBiZSBzZXQuIFNlZSBodHRwOi8vd3d3LnRlbGVyaWsuY29tL2tlbmRvLWFuZ3VsYXItdWkvY29tcG9uZW50cy9kcm9wZG93bnMvbXVsdGlzZWxlY3QvI3RvYy1iaW5kLXRvLWFycmF5cy1vZi1jb21wbGV4LWRhdGEnXG59O1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xuY29uc3QgQ29tYm9Cb3hNZXNzYWdlcyA9IHtcbiAgICAnb2JqZWN0JzogJ0V4cGVjdGVkIHZhbHVlIG9mIHR5cGUgT2JqZWN0LiBTZWUgaHR0cDovL3d3dy50ZWxlcmlrLmNvbS9rZW5kby1hbmd1bGFyLXVpL2NvbXBvbmVudHMvZHJvcGRvd25zL2NvbWJvYm94LyN0b2MtdmFsdWUtc2VsZWN0aW9uJyxcbiAgICAncHJpbWl0aXZlJzogJ0V4cGVjdGVkIHZhbHVlIG9mIHByaW1pdGl2ZSB0eXBlLiBTZWUgaHR0cDovL3d3dy50ZWxlcmlrLmNvbS9rZW5kby1hbmd1bGFyLXVpL2NvbXBvbmVudHMvZHJvcGRvd25zL2NvbWJvYm94LyN0b2MtdmFsdWUtc2VsZWN0aW9uJyxcbiAgICAndGV4dEFuZFZhbHVlJzogJ0V4cGVjdGVkIHRleHRGaWVsZCBhbmQgdmFsdWVGaWVsZCBvcHRpb25zIHRvIGJlIHNldC4gU2VlIGh0dHA6Ly93d3cudGVsZXJpay5jb20va2VuZG8tYW5ndWxhci11aS9jb21wb25lbnRzL2Ryb3Bkb3ducy9jb21ib2JveC8jdG9jLWJpbmQtdG8tYXJyYXlzLW9mLWNvbXBsZXgtZGF0YScsXG4gICAgJ25vSXRlbUhlaWdodCc6ICdFeHBlY3RlZCB2aXJ0dWFsLml0ZW1IZWlnaHQgb2YgdHlwZSBudW1iZXIuJ1xufTtcbi8qKlxuICogQGhpZGRlblxuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qIHRzbGludDpkaXNhYmxlOnZhcmlhYmxlLW5hbWUgKi9cbmNvbnN0IERyb3BEb3duTGlzdE1lc3NhZ2VzID0ge1xuICAgICdkZWZhdWx0SXRlbSc6ICdkZWZhdWx0SXRlbSBhbmQgZGF0YSBpdGVtcyBtdXN0IGJlIG9mIHNhbWUgdHlwZS4gU2VlIGh0dHA6Ly93d3cudGVsZXJpay5jb20va2VuZG8tYW5ndWxhci11aS9jb21wb25lbnRzL2Ryb3Bkb3ducy9hcGkvRHJvcERvd25MaXN0Q29tcG9uZW50LyN0b2MtZGVmYXVsdGl0ZW0nLFxuICAgICdvYmplY3QnOiAnRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBPYmplY3QuIFNlZSBodHRwOi8vd3d3LnRlbGVyaWsuY29tL2tlbmRvLWFuZ3VsYXItdWkvY29tcG9uZW50cy9kcm9wZG93bnMvZHJvcGRvd25saXN0LyN0b2MtdmFsdWUtc2VsZWN0aW9uJyxcbiAgICAncHJpbWl0aXZlJzogJ0V4cGVjdGVkIHZhbHVlIG9mIHByaW1pdGl2ZSB0eXBlLiBTZWUgaHR0cDovL3d3dy50ZWxlcmlrLmNvbS9rZW5kby1hbmd1bGFyLXVpL2NvbXBvbmVudHMvZHJvcGRvd25zL2Ryb3Bkb3dubGlzdC8jdG9jLXZhbHVlLXNlbGVjdGlvbicsXG4gICAgJ3RleHRBbmRWYWx1ZSc6ICdFeHBlY3RlZCB0ZXh0RmllbGQgYW5kIHZhbHVlRmllbGQgb3B0aW9ucyB0byBiZSBzZXQuIFNlZSBodHRwOi8vd3d3LnRlbGVyaWsuY29tL2tlbmRvLWFuZ3VsYXItdWkvY29tcG9uZW50cy9kcm9wZG93bnMvZHJvcGRvd25saXN0LyN0b2MtYmluZC10by1hcnJheXMtb2YtY29tcGxleC1kYXRhJ1xufTtcblxuLyogdHNsaW50OmRpc2FibGU6bWVtYmVyLW9yZGVyaW5nICovXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY29uc3QgQ09NQk9CT1hfVkFMVUVfQUNDRVNTT1IgPSB7XG4gICAgbXVsdGk6IHRydWUsXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ29tYm9Cb3hDb21wb25lbnQpXG59O1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgQ29tYm9Cb3ggY29tcG9uZW50IGZvciBBbmd1bGFyXSh7JSBzbHVnIG92ZXJ2aWV3X2NvbWJvYm94ICV9KS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIF9AQ29tcG9uZW50KHtcbiAqIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqIHRlbXBsYXRlOiBgXG4gKiAgPGtlbmRvLWNvbWJvYm94IFtkYXRhXT1cImxpc3RJdGVtc1wiPlxuICogIDwva2VuZG8tY29tYm9ib3g+XG4gKiBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGxpc3RJdGVtczogQXJyYXk8c3RyaW5nPiA9IFtcIkl0ZW0gMVwiLCBcIkl0ZW0gMlwiLCBcIkl0ZW0gM1wiLCBcIkl0ZW0gNFwiXTtcbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBDb21ib0JveENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uLCBwb3B1cFNlcnZpY2UsIHNlbGVjdGlvblNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlLCBkaXNhYmxlZEl0ZW1zU2VydmljZSwgZGF0YVNlcnZpY2UsIF96b25lLCBjZHIsIHJlbmRlcmVyLCBob3N0RWxlbWVudCwgdG91Y2hFbmFibGVkJCQxKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uID0gbG9jYWxpemF0aW9uO1xuICAgICAgICB0aGlzLnBvcHVwU2VydmljZSA9IHBvcHVwU2VydmljZTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlID0gc2VsZWN0aW9uU2VydmljZTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZSA9IG5hdmlnYXRpb25TZXJ2aWNlO1xuICAgICAgICB0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlID0gZGlzYWJsZWRJdGVtc1NlcnZpY2U7XG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UgPSBkYXRhU2VydmljZTtcbiAgICAgICAgdGhpcy5fem9uZSA9IF96b25lO1xuICAgICAgICB0aGlzLmNkciA9IGNkcjtcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICB0aGlzLmhvc3RFbGVtZW50ID0gaG9zdEVsZW1lbnQ7XG4gICAgICAgIHRoaXMudG91Y2hFbmFibGVkID0gdG91Y2hFbmFibGVkJCQxO1xuICAgICAgICB0aGlzLnNlbGVjdGVkID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaGlkZGVuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZvY3VzYWJsZUlkID0gYGstJHtndWlkKCl9YDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBDb21ib0JveCBhbGxvd3MgdXNlci1kZWZpbmVkIHZhbHVlcyB0aGF0IGFyZSBub3QgcHJlc2VudCBpbiB0aGUgZGF0YXNldFxuICAgICAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVzXSh7JSBzbHVnIGN1c3RvbV92YWx1ZXNfY29tYm9ib3ggJX0pKS5cbiAgICAgICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYWxsb3dDdXN0b20gPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdXNlci1kZWZpbmVkIGNhbGxiYWNrIHdoaWNoIHJldHVybnMgbm9ybWFsaXplZCBjdXN0b20gdmFsdWVzLlxuICAgICAgICAgKiBUeXBpY2FsbHkgdXNlZCB3aGVuIHRoZSBkYXRhIGl0ZW1zIGFyZSBkaWZmZXJlbnQgZnJvbSB0eXBlIGBzdHJpbmdgLlxuICAgICAgICAgKiBAcGFyYW0geyBBbnkgfSB2YWx1ZSAtIFRoZSBjdXN0b20gdmFsdWUgZGVmaW5lZCBieSB0aGUgdXNlci5cbiAgICAgICAgICogQHJldHVybnMgeyBBbnkgfVxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBgYGB0c1xuICAgICAgICAgKiBpbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG4gICAgICAgICAqXG4gICAgICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgICAgICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAgICAgKiB0ZW1wbGF0ZTogYFxuICAgICAgICAgKiAgIDxrZW5kby1jb21ib2JveFxuICAgICAgICAgKiAgICAgICBbYWxsb3dDdXN0b21dPVwidHJ1ZVwiXG4gICAgICAgICAqICAgICAgIFtkYXRhXT1cImxpc3RJdGVtc1wiXG4gICAgICAgICAqICAgICAgIFt0ZXh0RmllbGRdPVwiJ3RleHQnXCJcbiAgICAgICAgICogICAgICAgW3ZhbHVlRmllbGRdPVwiJ3ZhbHVlJ1wiXG4gICAgICAgICAqICAgICAgIFt2YWx1ZU5vcm1hbGl6ZXJdPVwidmFsdWVOb3JtYWxpemVyXCJcbiAgICAgICAgICogICAgICAgKHZhbHVlQ2hhbmdlKT1cIm9uVmFsdWVDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgICAqICAgPlxuICAgICAgICAgKiAgIDwva2VuZG8tY29tYm9ib3g+XG4gICAgICAgICAqIGBcbiAgICAgICAgICogfSlcbiAgICAgICAgICpcbiAgICAgICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICAgICAgICogICBwdWJsaWMgbGlzdEl0ZW1zOiBBcnJheTx7IHRleHQ6IHN0cmluZywgdmFsdWU6IG51bWJlciB9PiA9IFtcbiAgICAgICAgICogICAgICAgeyB0ZXh0OiBcIlNtYWxsXCIsIHZhbHVlOiAxIH0sXG4gICAgICAgICAqICAgICAgIHsgdGV4dDogXCJNZWRpdW1cIiwgdmFsdWU6IDIgfSxcbiAgICAgICAgICogICAgICAgeyB0ZXh0OiBcIkxhcmdlXCIsIHZhbHVlOiAzIH1cbiAgICAgICAgICogICBdO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgIHB1YmxpYyBvblZhbHVlQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAqICAgICAgIGNvbnNvbGUubG9nKFwidmFsdWVDaGFuZ2UgOiBcIiwgdmFsdWUpO1xuICAgICAgICAgKiAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICBwdWJsaWMgdmFsdWVOb3JtYWxpemVyID0gKHRleHQkOiBPYnNlcnZhYmxlPHN0cmluZz4pID0+IHRleHQkLnBpcGUobWFwKCh0ZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICogICAgICByZXR1cm4geyBQcm9kdWN0SUQ6IG51bGwsIFByb2R1Y3ROYW1lOiB0ZXh0IH07XG4gICAgICAgICAqICAgfSkpO1xuICAgICAgICAgKlxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZU5vcm1hbGl6ZXIgPSAodGV4dCkgPT4gdGV4dC5waXBlKG1hcCgodXNlcklucHV0KSA9PiB1c2VySW5wdXQpKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBoaW50IHRoYXQgaXMgZGlzcGxheWVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBlbXB0eS5cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBcIlwiO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBzdWdnZXN0aW9ucyBsaXN0LiBCeSBkZWZhdWx0LCBgbGlzdEhlaWdodGAgaXMgMjAwcHguXG4gICAgICAgICAqXG4gICAgICAgICAqID4gVGhlIGBsaXN0SGVpZ2h0YCBwcm9wZXJ0eSBhZmZlY3RzIG9ubHkgdGhlIGxpc3Qgb2Ygc3VnZ2VzdGlvbnMgYW5kIG5vdCB0aGUgd2hvbGUgcG9wdXAgY29udGFpbmVyLlxuICAgICAgICAgKiA+IFRvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBwb3B1cCBjb250YWluZXIsIHVzZSBgcG9wdXBTZXR0aW5ncy5oZWlnaHRgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saXN0SGVpZ2h0ID0gMjAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlcyB0aGUgYXV0by1jb21wbGV0aW9uIG9mIHRoZSB0ZXh0IGJhc2VkIG9uIHRoZSBmaXJzdCBkYXRhIGl0ZW0uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnN1Z2dlc3QgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIHJlbmRlcnMgYSBidXR0b24gb24gaG92ZXJpbmcgb3ZlciB0aGUgY29tcG9uZW50LlxuICAgICAgICAgKiBDbGlja2luZyB0aGlzIGJ1dHRvbiByZXNldHMgdGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQgdG8gYHVuZGVmaW5lZGAgYW5kIHRyaWdnZXJzIHRoZSBgY2hhbmdlYCBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xlYXJCdXR0b24gPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHJlYWQtb25seSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWFkb25seSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFiaW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlcyB0aGUgW2ZpbHRlcmluZ10oeyUgc2x1ZyBmaWx0ZXJpbmdfY29tYm9ib3ggJX0pIGZ1bmN0aW9uYWxpdHkuXG4gICAgICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIHRoZSBjb21wb25lbnQgZW1pdHMgdGhlIGBmaWx0ZXJDaGFuZ2VgIGV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJhYmxlID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHZhbHVlIGlzIGNoYW5nZWQmbWRhc2g7XG4gICAgICAgICAqIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBibHVycmVkIG9yIHRoZSB2YWx1ZSBpcyBjbGVhcmVkIHRocm91Z2ggdGhlICoqQ2xlYXIqKiBidXR0b25cbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19jb21ib2JveCAlfSN0b2MtZXZlbnRzKSkuXG4gICAgICAgICAqIFdoZW4gdGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQgaXMgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2VkIHRvIGBuZ01vZGVsYCBvciBgZm9ybUNvbnRyb2xgXG4gICAgICAgICAqIHRocm91Z2ggaXRzIEFQSSBvciBmb3JtIGJpbmRpbmcsIHRoZSBgdmFsdWVDaGFuZ2VgIGV2ZW50IGlzIG5vdCB0cmlnZ2VyZWQgYmVjYXVzZSBpdFxuICAgICAgICAgKiBtaWdodCBjYXVzZSBhIG1peC11cCB3aXRoIHRoZSBidWlsdC1pbiBgdmFsdWVDaGFuZ2VgIG1lY2hhbmlzbXMgb2YgdGhlIGBuZ01vZGVsYCBvciBgZm9ybUNvbnRyb2xgIGJpbmRpbmdzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGVhY2ggdGltZSBhbiBpdGVtIHNlbGVjdGlvbiBpcyBjaGFuZ2VkXG4gICAgICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3ZlcnZpZXdfY29tYm9ib3ggJX0jdG9jLWV2ZW50cykpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgdHlwZXMgaW4gdGhlIGlucHV0IGZpZWxkLlxuICAgICAgICAgKiBZb3UgY2FuIGZpbHRlciB0aGUgc291cmNlIGJhc2VkIG9uIHRoZSBwYXNzZWQgZmlsdHJhdGlvbiB2YWx1ZVxuICAgICAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIG92ZXJ2aWV3X2NvbWJvYm94ICV9I3RvYy1ldmVudHMpKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBwb3B1cCBpcyBhYm91dCB0byBvcGVuLlxuICAgICAgICAgKiBUaGlzIGV2ZW50IGlzIHByZXZlbnRhYmxlLiBJZiB5b3UgY2FuY2VsIGl0LCB0aGUgcG9wdXAgd2lsbCByZW1haW4gY2xvc2VkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcGVuID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBwb3B1cCBpcyBhYm91dCB0byBjbG9zZS5cbiAgICAgICAgICogVGhpcyBldmVudCBpcyBwcmV2ZW50YWJsZS4gSWYgeW91IGNhbmNlbCBpdCwgdGhlIHBvcHVwIHdpbGwgcmVtYWluIG9wZW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIGZvY3VzZXMgdGhlIENvbWJvQm94LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBDb21ib0JveCBnZXRzIGJsdXJyZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy53aWRnZXRDbGFzc2VzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGlzdEJveElkID0gZ3VpZCgpO1xuICAgICAgICB0aGlzLm9wdGlvblByZWZpeCA9IGd1aWQoKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gKF8pID0+IHsgfTtcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IChfKSA9PiB7IH07XG4gICAgICAgIHRoaXMuX2ZpbHRlcmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl90ZXh0ID0gJyc7XG4gICAgICAgIHRoaXMuZmlsdGVyVGV4dCA9ICcnO1xuICAgICAgICB0aGlzLl9vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvcHVwU2V0dGluZ3MgPSB7IGFuaW1hdGU6IHRydWUgfTtcbiAgICAgICAgdGhpcy5wb3B1cE1vdXNlRG93bkhhbmRsZXIgPSAoZXZlbnQpID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuY3VzdG9tVmFsdWVTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy52YWx1ZVN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xuICAgICAgICB0aGlzLmNsZWFyVmFsdWVTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5zdWJzID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGxvY2FsaXphdGlvbi5ydGwgPyAncnRsJyA6ICdsdHInO1xuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB9XG4gICAgZ2V0IHdpZHRoKCkge1xuICAgICAgICBsZXQgd3JhcHBlck9mZnNldFdpZHRoID0gMDtcbiAgICAgICAgaWYgKGlzRG9jdW1lbnRBdmFpbGFibGUoKSkge1xuICAgICAgICAgICAgd3JhcHBlck9mZnNldFdpZHRoID0gdGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLnBvcHVwU2V0dGluZ3Mud2lkdGggfHwgd3JhcHBlck9mZnNldFdpZHRoO1xuICAgICAgICBjb25zdCBtaW5XaWR0aCA9IGlzTmFOKHdyYXBwZXJPZmZzZXRXaWR0aCkgPyB3cmFwcGVyT2Zmc2V0V2lkdGggOiBgJHt3cmFwcGVyT2Zmc2V0V2lkdGh9cHhgO1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IGlzTmFOKHdpZHRoKSA/IHdpZHRoIDogYCR7d2lkdGh9cHhgO1xuICAgICAgICByZXR1cm4geyBtaW46IG1pbldpZHRoLCBtYXg6IG1heFdpZHRoIH07XG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIGNvbnN0IHBvcHVwSGVpZ2h0ID0gdGhpcy5wb3B1cFNldHRpbmdzLmhlaWdodDtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudChwb3B1cEhlaWdodCkgPyBgJHtwb3B1cEhlaWdodH1weGAgOiAnYXV0byc7XG4gICAgfVxuICAgIHNldCB0ZXh0KHRleHQpIHtcbiAgICAgICAgdGhpcy5fdGV4dCA9IGlzUHJlc2VudCh0ZXh0KSA/IHRleHQudG9TdHJpbmcoKSA6IFwiXCI7XG4gICAgfVxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRvZ2dsZVBvcHVwKG9wZW4pIHtcbiAgICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkb25seTtcbiAgICAgICAgY29uc3Qgc2FtZVN0YXRlID0gdGhpcy5pc09wZW4gPT09IG9wZW47XG4gICAgICAgIGlmIChpc0Rpc2FibGVkIHx8IHNhbWVTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlzRGVmYXVsdFByZXZlbnRlZCA9IHRoaXMudHJpZ2dlclBvcHVwRXZlbnRzKG9wZW4pO1xuICAgICAgICBpZiAoIWlzRGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlKG9wZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhY3RpdmVEZXNjZW5kYW50KCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuIHx8ICFpc1ByZXNlbnQodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpIHx8IHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YUl0ZW0gPSB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdCh0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCk7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvblByZWZpeCArIFwiLVwiICsgKGRhdGFJdGVtID8gZ2V0dGVyKGRhdGFJdGVtLCB0aGlzLnZhbHVlRmllbGQpIDogXCJcIik7XG4gICAgfVxuICAgIGdldCBub0RhdGFMYWJlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5vRGF0YVRleHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNsZWFyVGl0bGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsaXphdGlvbi5nZXQoJ2NsZWFyVGl0bGUnKTtcbiAgICB9XG4gICAgZ2V0IGFwcGVuZFRvKCkge1xuICAgICAgICBjb25zdCB7IGFwcGVuZFRvIH0gPSB0aGlzLnBvcHVwU2V0dGluZ3M7XG4gICAgICAgIGlmICghYXBwZW5kVG8gfHwgYXBwZW5kVG8gPT09ICdyb290Jykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwZW5kVG8gPT09ICdjb21wb25lbnQnID8gdGhpcy5jb250YWluZXIgOiBhcHBlbmRUbztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGF0YSBvZiB0aGUgQ29tYm9Cb3guXG4gICAgICpcbiAgICAgKiA+IFRoZSBkYXRhIGhhcyB0byBiZSBwcm92aWRlZCBpbiBhbiBhcnJheS1saWtlIGxpc3QuXG4gICAgICovXG4gICAgc2V0IGRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlLmRhdGEgPSBkYXRhIHx8IFtdO1xuICAgICAgICBpZiAodGhpcy52aXJ0dWFsKSB7XG4gICAgICAgICAgICB0aGlzLnZpcnR1YWwuc2tpcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5fZmlsdGVyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeUFuZERhdGFQcmVzZW50ID0gdGhpcy50ZXh0Lmxlbmd0aCA+IDAgJiYgdGhpcy5kYXRhU2VydmljZS5pdGVtc0NvdW50ID4gMDtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcXVlcnlBbmREYXRhUHJlc2VudCA/IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleCgwKSA6IC0xO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdWdnZXN0ICYmIHRoaXMuZGF0YVNlcnZpY2UuaXRlbXNDb3VudCAmJiB0aGlzLnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGVkVGV4dCA9IGdldHRlcih0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdCgwKSwgdGhpcy50ZXh0RmllbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICBjb25zdCB2aXJ0dWFsID0gdGhpcy52aXJ0dWFsO1xuICAgICAgICBpZiAodmlydHVhbCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB2aXJ0dWFsLnNraXAgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdmlydHVhbC5wYWdlU2l6ZTtcbiAgICAgICAgICAgIC8vIFVzZSBsZW5ndGggaW5zdGVhZCBvZiBpdGVtc0NvdW50IGJlY2F1c2Ugb2YgdGhlIGdyb3VwaW5nLlxuICAgICAgICAgICAgdmlydHVhbC50b3RhbCA9IHRoaXMuZGF0YVNlcnZpY2UuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5kYXRhLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLmRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBDb21ib0JveC5cbiAgICAgKiBJdCBjYW4gZWl0aGVyIGJlIG9mIHRoZSBwcmltaXRpdmUgKHN0cmluZywgbnVtYmVycykgb3Igb2YgdGhlIGNvbXBsZXggKG9iamVjdHMpIHR5cGUuXG4gICAgICogVG8gZGVmaW5lIHRoZSB0eXBlLCB1c2UgdGhlIGB2YWx1ZVByaW1pdGl2ZWAgb3B0aW9uLlxuICAgICAqXG4gICAgICogPiBBbGwgc2VsZWN0ZWQgdmFsdWVzIHdoaWNoIGFyZSBub3QgcHJlc2VudCBpbiB0aGUgZGF0YXNldCBhcmUgY29uc2lkZXJlZCBjdXN0b20gdmFsdWVzLlxuICAgICAqID4gV2hlbiB0aGUgYEVudGVyYCBrZXkgaXMgcHJlc3NlZCBvciB0aGUgY29tcG9uZW50IGxvc2VzIGZvY3VzLCBjdXN0b20gdmFsdWVzIGdldCBkaXNtaXNzZWQgdW5sZXNzIGBhbGxvd0N1c3RvbWAgaXMgc2V0IHRvIGB0cnVlYC5cbiAgICAgKi9cbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgpO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdHlwZSBvZiB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHNlbGVjdGVkIHZhbHVlIGhhcyB0byBiZSBvZiB0aGUgcHJpbWl0aXZlIHR5cGVcbiAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVdKHslIHNsdWcgdmFsdWViaW5kaW5nX2NvbWJvYm94ICV9I3RvYy1wcmltaXRpdmUtdmFsdWVzLWZyb20tb2JqZWN0LWZpZWxkcykpLlxuICAgICAqL1xuICAgIHNldCB2YWx1ZVByaW1pdGl2ZShpc1ByaW1pdGl2ZSkge1xuICAgICAgICB0aGlzLl92YWx1ZVByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVQcmltaXRpdmUoKSB7XG4gICAgICAgIGlmICghaXNQcmVzZW50KHRoaXMuX3ZhbHVlUHJpbWl0aXZlKSkge1xuICAgICAgICAgICAgcmV0dXJuICFpc1ByZXNlbnQodGhpcy52YWx1ZUZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVQcmltaXRpdmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGhlIHBvcHVwIG9mIHRoZSBDb21ib0JveC5cbiAgICAgKlxuICAgICAqIFRoZSBhdmFpbGFibGUgb3B0aW9ucyBhcmU6XG4gICAgICogLSBgYW5pbWF0ZTogQm9vbGVhbmAmbWRhc2g7Q29udHJvbHMgdGhlIHBvcHVwIGFuaW1hdGlvbi4gQnkgZGVmYXVsdCwgdGhlIG9wZW4gYW5kIGNsb3NlIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQuXG4gICAgICogLSBgd2lkdGg6IE51bWJlciB8IFN0cmluZ2AmbWRhc2g7U2V0cyB0aGUgd2lkdGggb2YgdGhlIHBvcHVwIGNvbnRhaW5lci4gQnkgZGVmYXVsdCwgdGhlIHdpZHRoIG9mIHRoZSBob3N0IGVsZW1lbnQgaXMgdXNlZC4gSWYgc2V0IHRvIGBhdXRvYCwgdGhlIGNvbXBvbmVudCBhdXRvbWF0aWNhbGx5IGFkanVzdHMgdGhlIHdpZHRoIG9mIHRoZSBwb3B1cCBhbmQgbm8gaXRlbSBsYWJlbHMgYXJlIHdyYXBwZWQuIFRoZSBgYXV0b2AgbW9kZSBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gdmlydHVhbCBzY3JvbGxpbmcgaXMgZW5hYmxlZC5cbiAgICAgKiAtIGBoZWlnaHQ6IE51bWJlcmAmbWRhc2g7U2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBwb3B1cCBjb250YWluZXIuXG4gICAgICogLSBgcG9wdXBDbGFzczogU3RyaW5nYCZtZGFzaDtTcGVjaWZpZXMgYSBsaXN0IG9mIENTUyBjbGFzc2VzIHRoYXQgYXJlIHVzZWQgdG8gc3R5bGUgdGhlIHBvcHVwLlxuICAgICAqIC0gYGFwcGVuZFRvOiBcInJvb3RcIiB8IFwiY29tcG9uZW50XCIgfCBWaWV3Q29udGFpbmVyUmVmYCZtZGFzaDtTcGVjaWZpZXMgdGhlIGNvbXBvbmVudCB0byB3aGljaCB0aGUgcG9wdXAgd2lsbCBiZSBhcHBlbmRlZC5cbiAgICAgKi9cbiAgICBzZXQgcG9wdXBTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9wb3B1cFNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7IGFuaW1hdGU6IHRydWUgfSwgc2V0dGluZ3MpO1xuICAgIH1cbiAgICBnZXQgcG9wdXBTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwU2V0dGluZ3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBCb29sZWFuIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGVhY2ggZGF0YSBpdGVtIGluIHRoZSBjb21wb25lbnRcbiAgICAgKiAoW3NlZSBleGFtcGxlc10oeyUgc2x1ZyBkaXNhYmxlZGl0ZW1zX2NvbWJvYm94ICV9KSkuIERldGVybWluZXMgd2hldGhlciB0aGUgaXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqL1xuICAgIHNldCBpdGVtRGlzYWJsZWQoZm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpdGVtRGlzYWJsZWQgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgcmVjZWl2ZWQgJHtKU09OLnN0cmluZ2lmeShmbil9LmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZWRJdGVtc1NlcnZpY2UuaXRlbURpc2FibGVkID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXQgdGFiSW5kZXgodGFiSW5kZXgpIHtcbiAgICAgICAgdGhpcy50YWJpbmRleCA9IHRhYkluZGV4O1xuICAgIH1cbiAgICBnZXQgdGFiSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBbdmlydHVhbGl6YXRpb25dKHslIHNsdWcgdmlydHVhbGl6YXRpb25fY29tYm9ib3ggJX0pIGZ1bmN0aW9uYWxpdHkuXG4gICAgICovXG4gICAgc2V0IHZpcnR1YWwoc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fdmlydHVhbFNldHRpbmdzID0gbm9ybWFsaXplVmlydHVhbGl6YXRpb25TZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgfVxuICAgIGdldCB2aXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlydHVhbFNldHRpbmdzO1xuICAgIH1cbiAgICBnZXQgY2xlYXJhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbGVhckJ1dHRvbjtcbiAgICB9XG4gICAgZ2V0IGRpcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uO1xuICAgIH1cbiAgICBnZXQgaXNGb2N1c2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNGb2N1c2VkO1xuICAgIH1cbiAgICBzZXQgaXNGb2N1c2VkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXJbdmFsdWUgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10odGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQsIFwiay1zdGF0ZS1mb2N1c2VkXCIpO1xuICAgICAgICB0aGlzLl9pc0ZvY3VzZWQgPSB2YWx1ZTtcbiAgICB9XG4gICAgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3RhYmluZGV4Jyk7XG4gICAgICAgIHRoaXMuYXR0YWNoU3RyZWFtcygpO1xuICAgICAgICB0aGlzLmNyZWF0ZVZhbHVlU3RyZWFtKCk7XG4gICAgICAgIHRoaXMuc2V0TWVzc2FnZXMoKTtcbiAgICB9XG4gICAgY3JlYXRlVmFsdWVTdHJlYW0oKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RyZWFtID0gdGhpcy52YWx1ZVN1YmplY3QucGlwZShmaWx0ZXIoKGNhbmRpZGF0ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVGcm9tID0gdGhpcy5wcm9wKHRoaXMudmFsdWVGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSk7XG4gICAgICAgICAgICBjb25zdCB0ZXh0RnJvbSA9IHRoaXMucHJvcCh0aGlzLnRleHRGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gdmFsdWVGcm9tKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZUZyb20oY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIGxldCBuZXdUZXh0ID0gdGV4dEZyb20oY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIGlmICghaXNQcmVzZW50KHRoaXMudmFsdWUpICYmICFpc1ByZXNlbnQobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChuZXdUZXh0KSkge1xuICAgICAgICAgICAgICAgIG5ld1RleHQgPSBuZXdUZXh0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudCA9PT0gbmV3VmFsdWUgJiYgdGhpcy50ZXh0ID09PSBuZXdUZXh0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckZpbHRlcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSwgbWFwKChjYW5kaWRhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlRnJvbSA9IHRoaXMucHJvcCh0aGlzLnZhbHVlRmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICAgICAgY29uc3QgdGV4dEZyb20gPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZUZyb20oY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RleHQgPSB0ZXh0RnJvbShjYW5kaWRhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhSXRlbTogY2FuZGlkYXRlLFxuICAgICAgICAgICAgICAgIHRleHQ6IG5ld1RleHQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVQcmltaXRpdmUgPyBuZXdWYWx1ZSA6IGNhbmRpZGF0ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBjdXN0b21WYWx1ZVN0cmVhbXMgPSBwYXJ0aXRpb24oKCkgPT4gdGhpcy5hbGxvd0N1c3RvbSkodGhpcy5jdXN0b21WYWx1ZVN1YmplY3QucGlwZSh0aHJvdHRsZVRpbWUoMzAwKSkpO1xuICAgICAgICBjb25zdCBhbGxvd0N1c3RvbVZhbHVlU3RyZWFtID0gY3VzdG9tVmFsdWVTdHJlYW1zWzBdLnBpcGUodGFwKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSksIGZpbHRlcigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUZyb20gPSB0aGlzLnByb3AodGhpcy52YWx1ZUZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc0NoYW5nZSA9IHRoaXMudGV4dCAhPT0gdmFsdWVGcm9tKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gaGFzQ2hhbmdlO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGhhc0NoYW5nZTtcbiAgICAgICAgICAgIGlmICghaGFzQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckZpbHRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhhc0NoYW5nZTtcbiAgICAgICAgfSksIHRoaXMudmFsdWVOb3JtYWxpemVyLCBtYXAoKG5vcm1hbGl6ZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjdXN0b206IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IG5vcm1hbGl6ZWRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5vcm1hbGl6ZWRWYWx1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBkaXNhYmxlQ3VzdG9tVmFsdWVTdHJlYW0gPSBjdXN0b21WYWx1ZVN0cmVhbXNbMV0ucGlwZShtYXAoKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjdXN0b206IHRydWUsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkpO1xuICAgICAgICBjb25zdCBjbGVhclZhbHVlU3RyZWFtID0gdGhpcy5jbGVhclZhbHVlU3ViamVjdC5waXBlKG1hcCgoKSA9PiAoe1xuICAgICAgICAgICAgZGF0YUl0ZW06IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgfSkpKTtcbiAgICAgICAgaWYgKHRoaXMudmFsdWVTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXJnZWQgPSBtZXJnZSh2YWx1ZVN0cmVhbSwgYWxsb3dDdXN0b21WYWx1ZVN0cmVhbSwgZGlzYWJsZUN1c3RvbVZhbHVlU3RyZWFtLCBjbGVhclZhbHVlU3RyZWFtKTtcbiAgICAgICAgdGhpcy52YWx1ZVN1YnNjcmlwdGlvbiA9IG1lcmdlZC5waXBlKGNhdGNoRXJyb3IoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVGcm9tID0gdGhpcy5wcm9wKHRoaXMudmFsdWVGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSk7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25DaGFuZ2VkID0gdmFsdWVGcm9tKHRoaXMuZGF0YUl0ZW0pICE9PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmRhdGFJdGVtID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZS5lbWl0KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVWYWx1ZVN0cmVhbSgpO1xuICAgICAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xuICAgICAgICB9KSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHN0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUZyb20gPSB0aGlzLnByb3AodGhpcy52YWx1ZUZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbkNoYW5nZWQgPSB2YWx1ZUZyb20odGhpcy5kYXRhSXRlbSkgIT09IHZhbHVlRnJvbShzdGF0ZS5kYXRhSXRlbSk7XG4gICAgICAgICAgICB0aGlzLmRhdGFJdGVtID0gc3RhdGUuZGF0YUl0ZW07XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gc3RhdGUudmFsdWU7XG4gICAgICAgICAgICB0aGlzLnRleHQgPSBzdGF0ZS50ZXh0O1xuICAgICAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVyKCk7XG4gICAgICAgICAgICBpZiAoc3RhdGUuY3VzdG9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25DaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uQXJncyA9IHN0YXRlLmN1c3RvbSA/IHVuZGVmaW5lZCA6IHRoaXMuZGF0YUl0ZW07XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UuZW1pdChzZWxlY3Rpb25BcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhdHRhY2hTdHJlYW1zKCkge1xuICAgICAgICBpZiAoIWlzRG9jdW1lbnRBdmFpbGFibGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vicy5hZGQodGhpcy5sb2NhbGl6YXRpb25cbiAgICAgICAgICAgIC5jaGFuZ2VzLnN1YnNjcmliZSgoeyBydGwgfSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBydGwgPyAncnRsJyA6ICdsdHInO1xuICAgICAgICAgICAgdGhpcy5zZXRNZXNzYWdlcygpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuc3Vicy5hZGQobWVyZ2UodGhpcy5uYXZpZ2F0aW9uU2VydmljZS51cCwgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5kb3duLCB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmhvbWUsIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuZW5kKVxuICAgICAgICAgICAgLnBpcGUoZmlsdGVyKChldmVudCkgPT4gaXNQcmVzZW50KGV2ZW50LmluZGV4KSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4gdGhpcy5uYXZpZ2F0ZShldmVudC5pbmRleCkpKTtcbiAgICAgICAgdGhpcy5zdWJzLmFkZCh0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLm9wZW4uc3Vic2NyaWJlKHRoaXMuaGFuZGxlTmF2aWdhdGlvbk9wZW4uYmluZCh0aGlzKSkpO1xuICAgICAgICB0aGlzLnN1YnMuYWRkKHRoaXMubmF2aWdhdGlvblNlcnZpY2UuY2xvc2Uuc3Vic2NyaWJlKCgpID0+IHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpKSk7XG4gICAgICAgIHRoaXMuc3Vicy5hZGQodGhpcy5uYXZpZ2F0aW9uU2VydmljZS5lc2Muc3Vic2NyaWJlKHRoaXMuaGFuZGxlRXNjYXBlLmJpbmQodGhpcykpKTtcbiAgICAgICAgdGhpcy5zdWJzLmFkZCh0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmVudGVyLnBpcGUodGFwKChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodGhpcy5oYW5kbGVFbnRlci5iaW5kKHRoaXMpKSk7XG4gICAgICAgIHRoaXMuc3Vicy5hZGQobWVyZ2UodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLm9uQ2hhbmdlLCB0aGlzLnNlbGVjdGlvblNlcnZpY2Uub25TZWxlY3QucGlwZShmaWx0ZXIoXyA9PiAhdGhpcy5pc09wZW4pKSlcbiAgICAgICAgICAgIC5waXBlKHRhcChfID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2ZpbHRlcmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgIH0pLCBtYXAoKGV2ZW50KSA9PiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdChldmVudC5pbmRpY2VzWzBdKSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGRhdGFJdGVtID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlKGRhdGFJdGVtKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnN1YnMuYWRkKHRoaXMuc2VsZWN0aW9uU2VydmljZS5vblNlbGVjdC5waXBlKGZpbHRlcihfID0+IHRoaXMuaXNPcGVuKSwgdGFwKF8gPT4gdGhpcy5fZmlsdGVyaW5nID0gZmFsc2UpLCBtYXAoKGV2ZW50KSA9PiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdChldmVudC5pbmRpY2VzWzBdKSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGRhdGFJdGVtID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlRnJvbSA9IHRoaXMucHJvcCh0aGlzLnZhbHVlRmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uQ2hhbmdlZCA9IHZhbHVlRnJvbShkYXRhSXRlbSkgIT09IHZhbHVlRnJvbSh0aGlzLmRhdGFJdGVtKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoeyBkYXRhSXRlbSB9KTtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25DaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UuZW1pdChkYXRhSXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveVBvcHVwKCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1lc3NhZ2VzVGltZW91dCk7XG4gICAgICAgIHRoaXMuc3Vicy51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMudmFsdWVTdWJzY3JpcHRpb24pKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBjb25zdCB2aXJ0dWFsID0gdGhpcy52aXJ0dWFsO1xuICAgICAgICBjb25zdCByZXF1ZXN0SW5pdGlhbERhdGEgPSB2aXJ0dWFsICYmIGNoYW5nZXMuZGF0YSAmJiBjaGFuZ2VzLmRhdGEuaXNGaXJzdENoYW5nZSgpO1xuICAgICAgICBpZiAocmVxdWVzdEluaXRpYWxEYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VDaGFuZ2UoeyBza2lwOiAwLCB0YWtlOiB2aXJ0dWFsLnBhZ2VTaXplIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NoYW5nZWQoJ3ZhbHVlTm9ybWFsaXplcicsIGNoYW5nZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVZhbHVlU3RyZWFtKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFueUNoYW5nZWQoWyd0ZXh0RmllbGQnLCAndmFsdWVGaWVsZCcsICd2YWx1ZVByaW1pdGl2ZSddLCBjaGFuZ2VzLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKSB7XG4gICAgICAgIHRoaXMudmVyaWZ5U2V0dGluZ3MoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgQ29tYm9Cb3guXG4gICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hiYXIuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBCbHVycyB0aGUgQ29tYm9Cb3guXG4gICAgICovXG4gICAgYmx1cigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhci5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgcG9wdXAuIElmIHlvdSB1c2UgdGhlIGB0b2dnbGVgIG1ldGhvZCB0byBvcGVuIG9yIGNsb3NlIHRoZSBwb3B1cCxcbiAgICAgKiB0aGUgYG9wZW5gIGFuZCBgY2xvc2VgIGV2ZW50cyB3aWxsIG5vdCBiZSBmaXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcGVuIC0gVGhlIHN0YXRlIG9mIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICB0b2dnbGUob3Blbikge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUobnVsbCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaG91bGRPcGVuID0gaXNQcmVzZW50KG9wZW4pID8gb3BlbiA6ICF0aGlzLl9vcGVuO1xuICAgICAgICAgICAgdGhpcy5fdG9nZ2xlKHNob3VsZE9wZW4pO1xuICAgICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IG9wZW4gc3RhdGUgb2YgdGhlIHBvcHVwLlxuICAgICAqL1xuICAgIGdldCBpc09wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcGVuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHZhbHVlIG9mIHRoZSBDb21ib0JveC5cbiAgICAgKiBJZiB5b3UgdXNlIHRoZSBgcmVzZXRgIG1ldGhvZCB0byBjbGVhciB0aGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudCxcbiAgICAgKiB0aGUgbW9kZWwgd2lsbCBub3QgdXBkYXRlIGF1dG9tYXRpY2FsbHkgYW5kIHRoZSBgc2VsZWN0aW9uQ2hhbmdlYCBhbmQgYHZhbHVlQ2hhbmdlYCBldmVudHMgd2lsbCBub3QgYmUgZmlyZWQuXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2xlYXJTdGF0ZSgpO1xuICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKlxuICAgICAqIFVzZWQgYnkgdGhlIFRleHRCb3hDb250YWluZXIgdG8gZGV0ZXJtaW5lIGlmIHRoZSBmbG9hdGluZyBsYWJlbFxuICAgICAqIHNob3VsZCBiZSByZW5kZXJlZCBpbiB0aGUgaW5wdXQgd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBmb2N1c2VkLlxuICAgICAqL1xuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIGNvbnN0IHRleHRFbXB0eSA9ICFpc1ByZXNlbnQodGhpcy50ZXh0KSB8fCBpc0VtcHR5U3RyaW5nKHRoaXMudGV4dCk7XG4gICAgICAgIGNvbnN0IHZhbHVlRW1wdHkgPSAhaXNQcmVzZW50KHRoaXMudmFsdWUpIHx8IGlzRW1wdHlTdHJpbmcodGhpcy52YWx1ZSk7XG4gICAgICAgIHJldHVybiB0ZXh0RW1wdHkgJiYgdmFsdWVFbXB0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNsZWFyVmFsdWUoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgdGhpcy5fZmlsdGVyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNEYXRhSXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnJlc2V0U2VsZWN0aW9uKFtdKTtcbiAgICAgICAgdGhpcy5jbGVhclZhbHVlU3ViamVjdC5uZXh0KCk7XG4gICAgICAgIHRoaXMuX2ZpbHRlcmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWUgPT09IG51bGwgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm4pIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbikge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBnZXQgYnV0dG9uQ2xhc3NlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZGluZyA/ICdrLWktbG9hZGluZycgOiB0aGlzLmljb25DbGFzcyB8fCAnay1pLWFycm93LXMnO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgY29uc3QgcG9wdXBXcmFwcGVyID0gdGhpcy5wb3B1cFJlZi5wb3B1cEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSB0aGlzLndpZHRoO1xuICAgICAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLm1pbldpZHRoID0gbWluO1xuICAgICAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLndpZHRoID0gbWF4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHZlcmlmeVNldHRpbmdzKCkge1xuICAgICAgICBpZiAoIWlzRGV2TW9kZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsdWVQcmltaXRpdmUgPT09IHRydWUgJiYgaXNQcmVzZW50KHRoaXMudmFsdWUpICYmIHR5cGVvZiB0aGlzLnZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ29tYm9Cb3hNZXNzYWdlcy5wcmltaXRpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlUHJpbWl0aXZlID09PSBmYWxzZSAmJiBpc1ByZXNlbnQodGhpcy52YWx1ZSkgJiYgdHlwZW9mIHRoaXMudmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihDb21ib0JveE1lc3NhZ2VzLm9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWVPclRleHQgPSAhaXNQcmVzZW50KHRoaXMudmFsdWVGaWVsZCkgIT09ICFpc1ByZXNlbnQodGhpcy50ZXh0RmllbGQpO1xuICAgICAgICBpZiAodmFsdWVPclRleHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihDb21ib0JveE1lc3NhZ2VzLnRleHRBbmRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmlydHVhbCAmJiBpc05hTih0aGlzLnZpcnR1YWwuaXRlbUhlaWdodCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihDb21ib0JveE1lc3NhZ2VzLm5vSXRlbUhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0U3RhdGUoKSB7XG4gICAgICAgIC8vIEZpbHRlcmluZyBpbiBwcm9jZXNzLCBkbyBub3RoaW5nLlxuICAgICAgICBpZiAodGhpcy5fZmlsdGVyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBjb25zdCB2YWx1ZUZpZWxkID0gdGhpcy52YWx1ZUZpZWxkO1xuICAgICAgICBjb25zdCBwcmltaXRpdmUgPSB0aGlzLnZhbHVlUHJpbWl0aXZlO1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IHRoaXMuZmluZERhdGFJdGVtKHsgcHJpbWl0aXZlLCB2YWx1ZUZpZWxkLCB2YWx1ZSB9KTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChyZXNvbHZlZC5pbmRleCkgJiYgcmVzb2x2ZWQuaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgZGF0YUl0ZW06IHJlc29sdmVkLmRhdGFJdGVtLCBjb25maXJtOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvbihyZXNvbHZlZC5pbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNQcmVzZW50KHZhbHVlKSAmJiB0aGlzLmFsbG93Q3VzdG9tKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgZGF0YUl0ZW06IHZhbHVlIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvbigtMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcHJldmlvdXNEYXRhSXRlbSAmJiB0aGlzLnZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgZGF0YUl0ZW06IHRoaXMuX3ByZXZpb3VzRGF0YUl0ZW0gfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyU3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucmVzZXRTZWxlY3Rpb24oLTEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKHsgZGF0YUl0ZW0sIGNvbmZpcm0gPSBmYWxzZSB9KSB7XG4gICAgICAgIHRoaXMuZGF0YUl0ZW0gPSBkYXRhSXRlbTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGhpcy5wcm9wKHRoaXMudGV4dEZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKShkYXRhSXRlbSk7XG4gICAgICAgIGlmIChjb25maXJtKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c0RhdGFJdGVtID0gZGF0YUl0ZW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXJTdGF0ZSgpIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmRhdGFJdGVtID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXNldFNlbGVjdGlvbihpbmRleCkge1xuICAgICAgICBjb25zdCBjbGVhciA9ICFpc1ByZXNlbnQoaW5kZXgpIHx8IGluZGV4IDwgMDtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnJlc2V0U2VsZWN0aW9uKGNsZWFyID8gW10gOiBbaW5kZXhdKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgPSBpbmRleDtcbiAgICB9XG4gICAgZmlyc3RGb2N1c2FibGVJbmRleChpbmRleCkge1xuICAgICAgICBjb25zdCBtYXhJbmRleCA9IHRoaXMuZGF0YS5sZW5ndGggLSAxO1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZS5pc0luZGV4RGlzYWJsZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gKGluZGV4IDwgbWF4SW5kZXgpID8gdGhpcy5maXJzdEZvY3VzYWJsZUluZGV4KGluZGV4ICsgMSkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluZEluZGV4UHJlZGljYXRlKHRleHQpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNlcnZpY2UuZ3JvdXBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW1UZXh0ID0gdGhpcy5wcm9wKHRoaXMudGV4dEZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKShpdGVtLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpdGVtVGV4dCA9ICFpc1ByZXNlbnQoaXRlbVRleHQpID8gXCJcIiA6IGl0ZW1UZXh0LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVRleHQuc3RhcnRzV2l0aCh0ZXh0LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtVGV4dCA9IHRoaXMucHJvcCh0aGlzLnRleHRGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSkoaXRlbSk7XG4gICAgICAgICAgICAgICAgaXRlbVRleHQgPSAhaXNQcmVzZW50KGl0ZW1UZXh0KSA/IFwiXCIgOiBpdGVtVGV4dC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1UZXh0LnN0YXJ0c1dpdGgodGV4dC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvcChmaWVsZCwgdXNlUHJpbWl0aXZlKSB7XG4gICAgICAgIHJldHVybiAoZGF0YUl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoZGF0YUl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZVByaW1pdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGQgJiYgaXNPYmplY3QoZGF0YUl0ZW0pID8gZGF0YUl0ZW1bZmllbGRdIDogZGF0YUl0ZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YUl0ZW1bZmllbGRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmaW5kRGF0YUl0ZW0oeyBwcmltaXRpdmUsIHZhbHVlRmllbGQsIHZhbHVlIH0pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgICAgICAgZGF0YUl0ZW06IG51bGwsXG4gICAgICAgICAgICBpbmRleDogLTFcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcCh2YWx1ZUZpZWxkLCBwcmltaXRpdmUpO1xuICAgICAgICBsZXQgY29tcGFyZXI7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTZXJ2aWNlLmdyb3VwZWQpIHtcbiAgICAgICAgICAgIGNvbXBhcmVyID0gKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcChlbGVtZW50LnZhbHVlKSA9PT0gcHJvcCh2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29tcGFyZXIgPSAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wKGVsZW1lbnQpID09PSBwcm9wKHZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmRhdGFTZXJ2aWNlLmZpbmRJbmRleChjb21wYXJlcik7XG4gICAgICAgIHJlc3VsdC5kYXRhSXRlbSA9IHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGluZGV4KTtcbiAgICAgICAgcmVzdWx0LmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHNlYXJjaCh0ZXh0LCBzdGFydEZyb20gPSAwKSB7XG4gICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgaWYgKHRleHQubGVuZ3RoICYmIHRoaXMuZGF0YVNlcnZpY2UuaXRlbXNDb3VudCkge1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLmRhdGFTZXJ2aWNlLmZpbmRJbmRleCh0aGlzLmZpbmRJbmRleFByZWRpY2F0ZSh0ZXh0KSwgc3RhcnRGcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWRJdGVtc1NlcnZpY2UuaXNJbmRleERpc2FibGVkKGluZGV4KSkge1xuICAgICAgICAgICAgaWYgKGluZGV4ICsgMSA8IHRoaXMuZGF0YVNlcnZpY2UuaXRlbXNDb3VudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoKHRleHQsIGluZGV4ICsgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXMoLTEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzKGluZGV4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN1Z2dlc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1Z2dlc3RlZFRleHQgPSBnZXR0ZXIodGhpcy5kYXRhU2VydmljZS5pdGVtQXQoaW5kZXgpLCB0aGlzLnRleHRGaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldFN1Z2dlc3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGhhc1NlbGVjdGVkID0gISF0aGlzLnNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0ZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBzaG91bGRTdWdnZXN0ID0gdGhpcy5zdWdnZXN0ICYmICF0aGlzLmJhY2tzcGFjZVByZXNzZWQgJiYgdGhpcy5zdWdnZXN0ZWRUZXh0ICYmIHRoaXMudGV4dDtcbiAgICAgICAgaWYgKCFoYXNTZWxlY3RlZCAmJiBzaG91bGRTdWdnZXN0ICYmIHRoaXMuc3VnZ2VzdGVkVGV4dC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodGhpcy50ZXh0LnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWdnZXN0ZWRUZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZWRUZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIG5hdmlnYXRlKGluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGluZGV4KSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5zZWxlY3QoaW5kZXgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlTmF2aWdhdGUoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgaGFzU2VsZWN0ZWQgPSBpc1ByZXNlbnQodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGVkWzBdKTtcbiAgICAgICAgY29uc3QgZm9jdXNlZCA9IGlzTmFOKHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkKSA/IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleCgwKSA6IHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkb25seSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBLZXlzLkhvbWUgfHwgZXZlbnQua2V5Q29kZSA9PT0gS2V5cy5FbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhhc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PT0gS2V5cy5BcnJvd0Rvd24pIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtleXMuQXJyb3dVcCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5wcm9jZXNzKHtcbiAgICAgICAgICAgIGN1cnJlbnQ6IG9mZnNldCArIGZvY3VzZWQsXG4gICAgICAgICAgICBtYXg6IHRoaXMuZGF0YVNlcnZpY2UuaXRlbXNDb3VudCAtIDEsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5VbmRlZmluZWQgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5MZWZ0ICYmXG4gICAgICAgICAgICBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uUmlnaHQgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5CYWNrc3BhY2UgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5EZWxldGUgJiZcbiAgICAgICAgICAgICgoYWN0aW9uID09PSBOYXZpZ2F0aW9uQWN0aW9uLkVudGVyICYmIHRoaXMuaXNPcGVuKSB8fCBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uRW50ZXIpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZUVudGVyKCkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy50ZXh0O1xuICAgICAgICBjb25zdCBmb2N1c2VkID0gdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQ7XG4gICAgICAgIGNvbnN0IGhhc0ZvY3VzZWQgPSBpc1ByZXNlbnQoZm9jdXNlZCkgJiYgZm9jdXNlZCAhPT0gLTE7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVGV4dCA9IGdldHRlcih0aGlzLl9wcmV2aW91c0RhdGFJdGVtLCB0aGlzLnRleHRGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSkgfHwgXCJcIjtcbiAgICAgICAgY29uc3QgZm9jdXNlZEl0ZW1UZXh0ID0gZ2V0dGVyKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGZvY3VzZWQpLCB0aGlzLnRleHRGaWVsZCk7XG4gICAgICAgIGNvbnN0IHRleHRIYXNDaGFuZ2VkID0gdGV4dCAhPT0gcHJldmlvdXNUZXh0O1xuICAgICAgICB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKTtcbiAgICAgICAgdGhpcy5fZmlsdGVyaW5nID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmFsbG93Q3VzdG9tICYmIHRleHRIYXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICBpZiAodGV4dCA9PT0gZm9jdXNlZEl0ZW1UZXh0IHx8IHRoaXMudXNlU3VnZ2VzdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmNoYW5nZShmb2N1c2VkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlKHRleHQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hbGxvd0N1c3RvbSkge1xuICAgICAgICAgICAgaWYgKGhhc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuY2hhbmdlKGZvY3VzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGV4dEhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZSh0ZXh0LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQmx1cigpIHtcbiAgICAgICAgdGhpcy5fZmlsdGVyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2VhcmNoYmFyLmlucHV0Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IDA7IC8vIEZpcmVmb3ggZG9lc24ndCBhdXRvLXNjcm9sbCB0byB0aGUgbGVmdCBvbiBibHVyIGxpa2Ugb3RoZXIgYnJvd3NlcnNcbiAgICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdmFsdWVGcm9tID0gdGhpcy5wcm9wKHRoaXMudmFsdWVGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSk7XG4gICAgICAgIGNvbnN0IHVucmVzb2x2ZWRTZWxlY3Rpb24gPSB2YWx1ZUZyb20odGhpcy5kYXRhSXRlbSkgIT09IHZhbHVlRnJvbSh0aGlzLnZhbHVlKTtcbiAgICAgICAgY29uc3QgY3VycmVudFRleHQgPSB0aGlzLnNlYXJjaGJhci52YWx1ZTtcbiAgICAgICAgY29uc3QgdGV4dEZyb20gPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICBjb25zdCB0ZXh0SGFzQ2hhbmdlZCA9IGN1cnJlbnRUZXh0ICE9PSAodGV4dEZyb20odGhpcy5kYXRhSXRlbSkgfHwgJycpO1xuICAgICAgICBjb25zdCB2YWx1ZUhhc0NoYW5nZWQgPSB1bnJlc29sdmVkU2VsZWN0aW9uIHx8IHRleHRIYXNDaGFuZ2VkO1xuICAgICAgICBjb25zdCBydW5JblpvbmUgPSB2YWx1ZUhhc0NoYW5nZWQgfHwgaGFzT2JzZXJ2ZXJzKHRoaXMub25CbHVyKSB8fCBoYXNPYnNlcnZlcnModGhpcy5jbG9zZSkgfHwgaXNVbnRvdWNoZWQodGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgaWYgKHJ1bkluWm9uZSkge1xuICAgICAgICAgICAgdGhpcy5fem9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUhhc0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG93ZXJDYXNlTWF0Y2ggPSBpc1ByZXNlbnQodGhpcy5mb2N1c2VkSXRlbVRleHQpICYmIHRoaXMuZm9jdXNlZEl0ZW1UZXh0LnRvTG93ZXJDYXNlKCkgPT09IGN1cnJlbnRUZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb3dlckNhc2VNYXRjaCB8fCB1bnJlc29sdmVkU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuY2hhbmdlKHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlKGN1cnJlbnRUZXh0LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uQmx1ci5lbWl0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlRXNjYXBlKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKTtcbiAgICAgICAgLy8gY2xlYXIgdGhlIGZvY3VzIG9ubHkgaWYgdGhlIGZvY3VzZWQgaXRlbSBpcyBub3Qgc2VsZWN0ZWRcbiAgICAgICAgY29uc3QgaGFzU2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0ZWQubGVuZ3RoID4gMDtcbiAgICAgICAgaWYgKCFoYXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZWRUZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID0gLTE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZU5hdmlnYXRpb25PcGVuKCkge1xuICAgICAgICB0aGlzLnJlc3RvcmVJdGVtRm9jdXMoKTtcbiAgICAgICAgdGhpcy50b2dnbGVQb3B1cCh0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNlYXJjaEJhckNoYW5nZSh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUZXh0TGVuZ3RoID0gdGhpcy50ZXh0ID8gdGhpcy50ZXh0Lmxlbmd0aCA6IDA7XG4gICAgICAgIHRoaXMuYmFja3NwYWNlUHJlc3NlZCA9ICh0ZXh0Lmxlbmd0aCA8IGN1cnJlbnRUZXh0TGVuZ3RoKSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgLy8gUmVzZXQgdGhlIHNlbGVjdGlvbiBwcmlvciB0byBmaWx0ZXIuIElmIGEgbWF0Y2ggaXMgcHJlc2VudCwgaXQgd2lsbCBiZSByZXNvbHZlZC4gSWYgYSBtYXRjaCBpcyBub3QgcHJlc2VudCwgaXQgaXMgbm90IG5lZWRlZC5cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnJlc2V0U2VsZWN0aW9uKFtdKTtcbiAgICAgICAgdGhpcy50b2dnbGVQb3B1cCh0cnVlKTtcbiAgICAgICAgdGhpcy5fZmlsdGVyaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyYWJsZSAmJiB0aGlzLmZpbHRlclRleHQgIT09IHRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyVGV4dCA9IHRleHQ7XG4gICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZS5lbWl0KHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2godGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUZvY3VzKCkge1xuICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgICAgIGlmIChoYXNPYnNlcnZlcnModGhpcy5vbkZvY3VzKSkge1xuICAgICAgICAgICAgdGhpcy5fem9uZS5ydW4oKCkgPT4gdGhpcy5vbkZvY3VzLmVtaXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHBhZ2VDaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgdmlydHVhbCA9IHRoaXMudmlydHVhbDtcbiAgICAgICAgdmlydHVhbC5za2lwID0gZXZlbnQuc2tpcDtcbiAgICB9XG4gICAgY2hhbmdlKGNhbmRpZGF0ZSwgaXNDdXN0b20gPSBmYWxzZSkge1xuICAgICAgICBpZiAoaXNDdXN0b20pIHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tVmFsdWVTdWJqZWN0Lm5leHQoY2FuZGlkYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVTdWJqZWN0Lm5leHQoY2FuZGlkYXRlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbWl0VmFsdWVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh0aGlzLnZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICAgICAgICB0aGlzLl9wcmV2aW91c0RhdGFJdGVtID0gdGhpcy5kYXRhSXRlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNlbGVjdENsaWNrKCkge1xuICAgICAgICBpZiAoIXRoaXMudG91Y2hFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc09wZW4pIHtcbiAgICAgICAgICAgIHRoaXMucmVzdG9yZUl0ZW1Gb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoIXRoaXMuaXNPcGVuKTtcbiAgICB9XG4gICAgZ2V0IGxpc3RDb250YWluZXJDbGFzc2VzKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXJDbGFzc2VzID0gWydrLWxpc3QtY29udGFpbmVyJywgJ2stcmVzZXQnXTtcbiAgICAgICAgaWYgKHRoaXMucG9wdXBTZXR0aW5ncy5wb3B1cENsYXNzKSB7XG4gICAgICAgICAgICBjb250YWluZXJDbGFzc2VzLnB1c2godGhpcy5wb3B1cFNldHRpbmdzLnBvcHVwQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250YWluZXJDbGFzc2VzO1xuICAgIH1cbiAgICBnZXQgZm9jdXNlZEl0ZW1UZXh0KCkge1xuICAgICAgICBjb25zdCBmb2N1c2VkID0gdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQ7XG4gICAgICAgIGlmICghaXNQcmVzZW50KGZvY3VzZWQpIHx8IGZvY3VzZWQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtVGV4dCA9IGdldHRlcih0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdChmb2N1c2VkKSwgdGhpcy50ZXh0RmllbGQpO1xuICAgICAgICByZXR1cm4gIWlzUHJlc2VudChpdGVtVGV4dCkgPyBcIlwiIDogaXRlbVRleHQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgZmlyc3QgbWF0Y2ggd2hlbiB0aGVyZSdzIHRleHQgaW4gdGhlIGlucHV0IGZpZWxkLCBidXQgbm8gZm9jdXNlZCBpdGVtLlxuICAgICAqL1xuICAgIHJlc3RvcmVJdGVtRm9jdXMoKSB7XG4gICAgICAgIGNvbnN0IGhhc0ZvY3VzID0gaXNQcmVzZW50KHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkKSAmJiB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA+IC0xO1xuICAgICAgICBpZiAoIWhhc0ZvY3VzICYmIHRoaXMudGV4dCAmJiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcmFibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA9IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoKHRoaXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXNlU3VnZ2VzdGlvbigpIHtcbiAgICAgICAgaWYgKCEodGhpcy5zdWdnZXN0ICYmIGlzUHJlc2VudCh0aGlzLnNlYXJjaGJhci52YWx1ZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZm9jdXNlZERhdGFJdGVtID0gdGhpcy5kYXRhU2VydmljZS5pdGVtQXQodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpO1xuICAgICAgICBjb25zdCBmb2N1c2VkSXRlbVRleHQgPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpKGZvY3VzZWREYXRhSXRlbSk7XG4gICAgICAgIGlmICghaXNQcmVzZW50KGZvY3VzZWRJdGVtVGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hiYXIudmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZm9jdXNlZEl0ZW1UZXh0LnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGRlc3Ryb3lQb3B1cCgpIHtcbiAgICAgICAgaWYgKHRoaXMucG9wdXBSZWYpIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXBSZWYucG9wdXBFbGVtZW50XG4gICAgICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMucG9wdXBNb3VzZURvd25IYW5kbGVyKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXBSZWYuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXBSZWYgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZVBvcHVwKCkge1xuICAgICAgICBpZiAodGhpcy52aXJ0dWFsKSB7XG4gICAgICAgICAgICB0aGlzLnZpcnR1YWwuc2tpcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbEFsaWduID0gdGhpcy5kaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcbiAgICAgICAgY29uc3QgYW5jaG9yUG9zaXRpb24gPSB7IGhvcml6b250YWw6IGhvcml6b250YWxBbGlnbiwgdmVydGljYWw6IFwiYm90dG9tXCIgfTtcbiAgICAgICAgY29uc3QgcG9wdXBQb3NpdGlvbiA9IHsgaG9yaXpvbnRhbDogaG9yaXpvbnRhbEFsaWduLCB2ZXJ0aWNhbDogXCJ0b3BcIiB9O1xuICAgICAgICB0aGlzLnBvcHVwUmVmID0gdGhpcy5wb3B1cFNlcnZpY2Uub3Blbih7XG4gICAgICAgICAgICBhbmNob3I6IHRoaXMud3JhcHBlcixcbiAgICAgICAgICAgIGFuaW1hdGU6IHRoaXMucG9wdXBTZXR0aW5ncy5hbmltYXRlLFxuICAgICAgICAgICAgYXBwZW5kVG86IHRoaXMuYXBwZW5kVG8sXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLnBvcHVwVGVtcGxhdGUsXG4gICAgICAgICAgICBwb3B1cENsYXNzOiB0aGlzLmxpc3RDb250YWluZXJDbGFzc2VzLFxuICAgICAgICAgICAgcG9zaXRpb25Nb2RlOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgYW5jaG9yQWxpZ246IGFuY2hvclBvc2l0aW9uLFxuICAgICAgICAgICAgcG9wdXBBbGlnbjogcG9wdXBQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcG9wdXBXcmFwcGVyID0gdGhpcy5wb3B1cFJlZi5wb3B1cEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMud2lkdGg7XG4gICAgICAgIHBvcHVwV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnBvcHVwTW91c2VEb3duSGFuZGxlcik7XG4gICAgICAgIHBvcHVwV3JhcHBlci5zdHlsZS5taW5XaWR0aCA9IG1pbjtcbiAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLndpZHRoID0gbWF4O1xuICAgICAgICBwb3B1cFdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHBvcHVwV3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJkaXJcIiwgdGhpcy5kaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLnBvcHVwUmVmLnBvcHVwT3Blbi5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zTGlzdC5zY3JvbGxUb0l0ZW0odGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5wb3B1cFJlZi5wb3B1cEFuY2hvclZpZXdwb3J0TGVhdmUuc3Vic2NyaWJlKCgpID0+IHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpKTtcbiAgICB9XG4gICAgX3RvZ2dsZShvcGVuKSB7XG4gICAgICAgIHRoaXMuX29wZW4gPSBvcGVuO1xuICAgICAgICB0aGlzLmRlc3Ryb3lQb3B1cCgpO1xuICAgICAgICBpZiAodGhpcy5fb3Blbikge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVQb3B1cCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyaWdnZXJQb3B1cEV2ZW50cyhvcGVuKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50QXJncyA9IG5ldyBQcmV2ZW50YWJsZUV2ZW50KCk7XG4gICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4uZW1pdChldmVudEFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbG9zZS5lbWl0KGV2ZW50QXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50QXJncy5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcbiAgICB9XG4gICAgY2xlYXJGaWx0ZXIoKSB7XG4gICAgICAgIGlmICghKHRoaXMuZmlsdGVyYWJsZSAmJiB0aGlzLmZpbHRlclRleHQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maWx0ZXJUZXh0ID0gJyc7XG4gICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQodGhpcy5maWx0ZXJUZXh0KTtcbiAgICB9XG4gICAgc2V0TWVzc2FnZXMoKSB7XG4gICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubWVzc2FnZXNUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXNUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ub0RhdGFUZXh0ID0gdGhpcy5sb2NhbGl6YXRpb24uZ2V0KCdub0RhdGFUZXh0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbkNvbWJvQm94Q29tcG9uZW50LmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgZXhwb3J0QXM6ICdrZW5kb0NvbWJvQm94JyxcbiAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAgQ09NQk9CT1hfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgICAgICAgICAgICAgIERhdGFTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBTZWxlY3Rpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgRGlzYWJsZWRJdGVtc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIExvY2FsaXphdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEwxME5fUFJFRklYLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6ICdrZW5kby5jb21ib2JveCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogRmlsdGVyYWJsZURyb3BEb3duQ29tcG9uZW50QmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ29tYm9Cb3hDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IEtlbmRvSW5wdXQsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IENvbWJvQm94Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2tlbmRvLWNvbWJvYm94JyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bmctY29udGFpbmVyIGtlbmRvQ29tYm9Cb3hMb2NhbGl6ZWRNZXNzYWdlc1xuICAgICAgICAgICAgaTE4bi1ub0RhdGFUZXh0PVwia2VuZG8uY29tYm9ib3gubm9EYXRhVGV4dHxUaGUgdGV4dCBkaXNwbGF5ZWQgaW4gdGhlIHBvcHVwIHdoZW4gdGhlcmUgYXJlIG5vIGl0ZW1zXCJcbiAgICAgICAgICAgIG5vRGF0YVRleHQ9XCJOTyBEQVRBIEZPVU5EXCJcblxuICAgICAgICAgICAgaTE4bi1jbGVhclRpdGxlPVwia2VuZG8uY29tYm9ib3guY2xlYXJUaXRsZXxUaGUgdGl0bGUgb2YgdGhlIGNsZWFyIGJ1dHRvblwiXG4gICAgICAgICAgICBjbGVhclRpdGxlPVwiY2xlYXJcIlxuICAgICAgICA+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8c3BhbiAjd3JhcHBlciB1bnNlbGVjdGFibGU9XCJvblwiXG4gICAgICAgICAgICBjbGFzcz1cImstZHJvcGRvd24td3JhcFwiXG4gICAgICAgICAgICBbbmdDbGFzc109XCJ7ICdrLXN0YXRlLWRlZmF1bHQnOiAhZGlzYWJsZWQsICdrLXN0YXRlLWRpc2FibGVkJzogZGlzYWJsZWQgfVwiXG4gICAgICAgID5cbiAgICAgICAgICA8a2VuZG8tc2VhcmNoYmFyICNzZWFyY2hiYXJcbiAgICAgICAgICAgICAgW3JvbGVdPVwiJ2NvbWJvYm94J1wiXG4gICAgICAgICAgICAgIFtpZF09XCJmb2N1c2FibGVJZFwiXG4gICAgICAgICAgICAgIFtsaXN0SWRdPVwibGlzdEJveElkXCJcbiAgICAgICAgICAgICAgW2FjdGl2ZURlc2NlbmRhbnRdPVwiYWN0aXZlRGVzY2VuZGFudFwiXG4gICAgICAgICAgICAgIFtub0RhdGFMYWJlbF09XCJub0RhdGFMYWJlbFwiXG4gICAgICAgICAgICAgIFt1c2VySW5wdXRdPVwidGV4dFwiXG4gICAgICAgICAgICAgIFtzdWdnZXN0ZWRUZXh0XT1cImdldFN1Z2dlc3Rpb24oKVwiXG4gICAgICAgICAgICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gICAgICAgICAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgICAgIFt0YWJJbmRleF09XCJ0YWJJbmRleFwiXG4gICAgICAgICAgICAgIFtwb3B1cE9wZW5dPVwiaXNPcGVuXCJcbiAgICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgICAgKG9uTmF2aWdhdGUpPVwiaGFuZGxlTmF2aWdhdGUoJGV2ZW50KVwiXG4gICAgICAgICAgICAgICh2YWx1ZUNoYW5nZSk9XCJzZWFyY2hCYXJDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgICAgICAgIChvbkJsdXIpPVwiaGFuZGxlQmx1cigpXCJcbiAgICAgICAgICAgICAgKG9uRm9jdXMpPVwiaGFuZGxlRm9jdXMoKVwiXG4gICAgICAgICAgPjwva2VuZG8tc2VhcmNoYmFyPlxuICAgICAgICAgIDxzcGFuICpuZ0lmPVwiIWxvYWRpbmcgJiYgIXJlYWRvbmx5ICYmIChjbGVhckJ1dHRvbiAmJiB0ZXh0Py5sZW5ndGgpXCIgY2xhc3M9XCJrLWljb24gay1jbGVhci12YWx1ZSBrLWktY2xvc2VcIiBbYXR0ci50aXRsZV09XCJjbGVhclRpdGxlXCIgcm9sZT1cImJ1dHRvblwiIHRhYmluZGV4PVwiLTFcIiAoY2xpY2spPVwiY2xlYXJWYWx1ZSgkZXZlbnQpXCIgKG1vdXNlZG93bik9XCIkZXZlbnQucHJldmVudERlZmF1bHQoKVwiPjwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiB1bnNlbGVjdGFibGU9XCJvblwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiay1zZWxlY3RcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwic2VsZWN0Q2xpY2soKVwiXG4gICAgICAgICAgICAgIChtb3VzZWRvd24pPVwiJGV2ZW50LnByZXZlbnREZWZhdWx0KClcIiA+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiay1pY29uXCIgW25nQ2xhc3NdPVwiYnV0dG9uQ2xhc3Nlc1wiPlxuICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8bmctdGVtcGxhdGUgI3BvcHVwVGVtcGxhdGU+XG4gICAgICAgICAgICAgIDwhLS1oZWFkZXIgdGVtcGxhdGUtLT5cbiAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiaGVhZGVyVGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IGhlYWRlclRlbXBsYXRlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgIDwhLS1saXN0LS0+XG4gICAgICAgICAgICAgIDxrZW5kby1saXN0XG4gICAgICAgICAgICAgICAgICAjb3B0aW9uc0xpc3RcbiAgICAgICAgICAgICAgICAgIFtpZF09XCJsaXN0Qm94SWRcIlxuICAgICAgICAgICAgICAgICAgW29wdGlvblByZWZpeF09XCJvcHRpb25QcmVmaXhcIlxuICAgICAgICAgICAgICAgICAgW2RhdGFdPVwiZGF0YVwiXG4gICAgICAgICAgICAgICAgICBbdGV4dEZpZWxkXT1cInRleHRGaWVsZFwiXG4gICAgICAgICAgICAgICAgICBbdmFsdWVGaWVsZF09XCJ2YWx1ZUZpZWxkXCJcbiAgICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJ0ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICBbZ3JvdXBUZW1wbGF0ZV09XCJncm91cFRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgIFtmaXhlZEdyb3VwVGVtcGxhdGVdPVwiZml4ZWRHcm91cFRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgIFtoZWlnaHRdPVwibGlzdEhlaWdodFwiXG4gICAgICAgICAgICAgICAgICBbc2hvd109XCJpc09wZW5cIlxuICAgICAgICAgICAgICAgICAgW3ZpcnR1YWxdPVwidmlydHVhbFwiXG4gICAgICAgICAgICAgICAgICAocGFnZUNoYW5nZSk9XCJwYWdlQ2hhbmdlKCRldmVudClcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDwva2VuZG8tbGlzdD5cbiAgICAgICAgICAgICAgPCEtLW5vLWRhdGEgdGVtcGxhdGUtLT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImstbm9kYXRhXCIgKm5nSWY9XCJkYXRhLmxlbmd0aCA9PT0gMFwiPlxuICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIm5vRGF0YVRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IG5vRGF0YVRlbXBsYXRlID8gbm9EYXRhVGVtcGxhdGUudGVtcGxhdGVSZWYgOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIiFub0RhdGFUZW1wbGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXY+e3sgbm9EYXRhVGV4dCB9fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwhLS1mb290ZXIgdGVtcGxhdGUtLT5cbiAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiZm9vdGVyVGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IGZvb3RlclRlbXBsYXRlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiaXNPcGVuXCI+XG4gICAgICAgICAgICA8a2VuZG8tcmVzaXplLXNlbnNvciAocmVzaXplKT1cIm9uUmVzaXplKClcIj48L2tlbmRvLXJlc2l6ZS1zZW5zb3I+XG4gICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgIDxuZy1jb250YWluZXIgI2NvbnRhaW5lcj48L25nLWNvbnRhaW5lcj5cbiAgYFxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5Db21ib0JveENvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IExvY2FsaXphdGlvblNlcnZpY2UgfSxcbiAgICB7IHR5cGU6IFBvcHVwU2VydmljZSB9LFxuICAgIHsgdHlwZTogU2VsZWN0aW9uU2VydmljZSB9LFxuICAgIHsgdHlwZTogTmF2aWdhdGlvblNlcnZpY2UgfSxcbiAgICB7IHR5cGU6IERpc2FibGVkSXRlbXNTZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBEYXRhU2VydmljZSB9LFxuICAgIHsgdHlwZTogTmdab25lIH0sXG4gICAgeyB0eXBlOiBDaGFuZ2VEZXRlY3RvclJlZiB9LFxuICAgIHsgdHlwZTogUmVuZGVyZXIyIH0sXG4gICAgeyB0eXBlOiBFbGVtZW50UmVmIH0sXG4gICAgeyB0eXBlOiBCb29sZWFuLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LCB7IHR5cGU6IEluamVjdCwgYXJnczogW1RPVUNIX0VOQUJMRUQsXSB9XSB9XG5dO1xuQ29tYm9Cb3hDb21wb25lbnQucHJvcERlY29yYXRvcnMgPSB7XG4gICAgZm9jdXNhYmxlSWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGFsbG93Q3VzdG9tOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBkYXRhOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2YWx1ZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdGV4dEZpZWxkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2YWx1ZUZpZWxkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2YWx1ZVByaW1pdGl2ZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWVOb3JtYWxpemVyOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBwbGFjZWhvbGRlcjogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcG9wdXBTZXR0aW5nczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbGlzdEhlaWdodDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgaWNvbkNsYXNzOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBsb2FkaW5nOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBzdWdnZXN0OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBjbGVhckJ1dHRvbjogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZGlzYWJsZWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGl0ZW1EaXNhYmxlZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcmVhZG9ubHk6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRhYmluZGV4OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0YWJJbmRleDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFtcInRhYkluZGV4XCIsXSB9XSxcbiAgICBmaWx0ZXJhYmxlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2aXJ0dWFsOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2YWx1ZUNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIHNlbGVjdGlvbkNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIGZpbHRlckNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9wZW46IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBjbG9zZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9uRm9jdXM6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydmb2N1cycsXSB9XSxcbiAgICBvbkJsdXI6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydibHVyJyxdIH1dLFxuICAgIHRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtJdGVtVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBoZWFkZXJUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBmb290ZXJUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBub0RhdGFUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbTm9EYXRhVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBncm91cFRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtHcm91cFRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgZml4ZWRHcm91cFRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUsXSB9XSxcbiAgICBjb250YWluZXI6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydjb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSxdIH1dLFxuICAgIHBvcHVwVGVtcGxhdGU6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydwb3B1cFRlbXBsYXRlJyxdIH1dLFxuICAgIHNlYXJjaGJhcjogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbU2VhcmNoQmFyQ29tcG9uZW50LF0gfV0sXG4gICAgb3B0aW9uc0xpc3Q6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydvcHRpb25zTGlzdCcsXSB9XSxcbiAgICB3cmFwcGVyOiBbeyB0eXBlOiBWaWV3Q2hpbGQsIGFyZ3M6IFsnd3JhcHBlcicsIHsgc3RhdGljOiB0cnVlIH0sXSB9XSxcbiAgICB3aWRnZXRDbGFzc2VzOiBbeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLXdpZGdldCcsXSB9LCB7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstY29tYm9ib3gnLF0gfSwgeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLWhlYWRlcicsXSB9XSxcbiAgICBjbGVhcmFibGU6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstY29tYm9ib3gtY2xlYXJhYmxlJyxdIH1dLFxuICAgIGRpcjogW3sgdHlwZTogSG9zdEJpbmRpbmcsIGFyZ3M6IFsnYXR0ci5kaXInLF0gfV1cbn07XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBSZW5kZXJzIHRoZSBzZWxlY3RlZCB2YWx1ZSBvZiB0aGUgRHJvcERvd25MaXN0XG4gKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHRlbXBsYXRlc19kZGwgJX0jdG9jLXZhbHVlLXRlbXBsYXRlKSkuXG4gKiBUaGUgdGVtcGxhdGUgY29udGV4dCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICogVG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGRhdGEgaXRlbSwgdXNlIHRoZSBgbGV0LWRhdGFJdGVtYCBkaXJlY3RpdmUuXG4gKlxuICogPiBUaGUgYFZhbHVlVGVtcGxhdGVgIGRpcmVjdGl2ZSBjYW4gb25seSBiZSB1c2VkIHdpdGggdGhlIERyb3BEb3duTGlzdCBjb21wb25lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1kcm9wZG93bmxpc3QgW2RhdGFdPVwibGlzdEl0ZW1zXCI+XG4gKiAgICA8bmctdGVtcGxhdGUga2VuZG9Ecm9wRG93bkxpc3RWYWx1ZVRlbXBsYXRlIGxldC1kYXRhSXRlbT5cbiAqICAgICAgPHNwYW4+e3tkYXRhSXRlbX19IG9wdGlvbjwvc3Bhbj5cbiAqICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgPC9rZW5kby1kcm9wZG93bmxpc3Q+XG4gKiBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGxpc3RJdGVtczogQXJyYXk8c3RyaW5nPiA9IFtcIkl0ZW0gMVwiLCBcIkl0ZW0gMlwiLCBcIkl0ZW0gM1wiLCBcIkl0ZW0gNFwiXTtcbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBWYWx1ZVRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZikge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWY7XG4gICAgfVxufVxuVmFsdWVUZW1wbGF0ZURpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2tlbmRvRHJvcERvd25MaXN0VmFsdWVUZW1wbGF0ZV0nXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cblZhbHVlVGVtcGxhdGVEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBUZW1wbGF0ZVJlZiB9XG5dO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptZW1iZXItb3JkZXJpbmcgKi9cbi8qKlxuICogQGhpZGRlblxuICovXG5jb25zdCBEUk9QRE9XTkxJU1RfVkFMVUVfQUNDRVNTT1IgPSB7XG4gICAgbXVsdGk6IHRydWUsXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRHJvcERvd25MaXN0Q29tcG9uZW50KVxufTtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIERyb3BEb3duTGlzdCBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfZGRsICV9KS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIF9AQ29tcG9uZW50KHtcbiAqIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqIHRlbXBsYXRlOiBgXG4gKiAgPGtlbmRvLWRyb3Bkb3dubGlzdCBbZGF0YV09XCJsaXN0SXRlbXNcIj5cbiAqICA8L2tlbmRvLWRyb3Bkb3dubGlzdD5cbiAqIGBcbiAqIH0pXG4gKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICBwdWJsaWMgbGlzdEl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW1wiSXRlbSAxXCIsIFwiSXRlbSAyXCIsIFwiSXRlbSAzXCIsIFwiSXRlbSA0XCJdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIERyb3BEb3duTGlzdENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uLCBwb3B1cFNlcnZpY2UsIHNlbGVjdGlvblNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlLCBkaXNhYmxlZEl0ZW1zU2VydmljZSwgZGF0YVNlcnZpY2UsIF96b25lLCByZW5kZXJlciwgaG9zdEVsZW1lbnQsIGNkciwgdG91Y2hFbmFibGVkJCQxKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uID0gbG9jYWxpemF0aW9uO1xuICAgICAgICB0aGlzLnBvcHVwU2VydmljZSA9IHBvcHVwU2VydmljZTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlID0gc2VsZWN0aW9uU2VydmljZTtcbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZSA9IG5hdmlnYXRpb25TZXJ2aWNlO1xuICAgICAgICB0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlID0gZGlzYWJsZWRJdGVtc1NlcnZpY2U7XG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UgPSBkYXRhU2VydmljZTtcbiAgICAgICAgdGhpcy5fem9uZSA9IF96b25lO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuaG9zdEVsZW1lbnQgPSBob3N0RWxlbWVudDtcbiAgICAgICAgdGhpcy5jZHIgPSBjZHI7XG4gICAgICAgIHRoaXMudG91Y2hFbmFibGVkID0gdG91Y2hFbmFibGVkJCQxO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGhpZGRlblxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5mb2N1c2FibGVJZCA9IGBrLSR7Z3VpZCgpfWA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIG9wdGlvbnMgbGlzdC4gQnkgZGVmYXVsdCwgYGxpc3RIZWlnaHRgIGlzIDIwMHB4LlxuICAgICAgICAgKlxuICAgICAgICAgKiA+IFRoZSBgbGlzdEhlaWdodGAgcHJvcGVydHkgYWZmZWN0cyBvbmx5IHRoZSBsaXN0IG9mIG9wdGlvbnMgYW5kIG5vdCB0aGUgd2hvbGUgcG9wdXAgY29udGFpbmVyLlxuICAgICAgICAgKiA+IFRvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBwb3B1cCBjb250YWluZXIsIHVzZSBgcG9wdXBTZXR0aW5ncy5oZWlnaHRgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saXN0SGVpZ2h0ID0gMjAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHJlYWQtb25seSBzdGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWFkb25seSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlcyB0aGUgW2ZpbHRlcmluZ10oeyUgc2x1ZyBmaWx0ZXJpbmdfZGRsICV9KSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBEcm9wRG93bkxpc3QuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpbHRlcmFibGUgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZXMgYSBjYXNlLWluc2Vuc2l0aXZlIHNlYXJjaC4gV2hlbiBmaWx0cmF0aW9uIGlzIGRpc2FibGVkLCB1c2UgdGhpcyBvcHRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlnbm9yZUNhc2UgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgZGVsYXkgYmVmb3JlIGFuIGl0ZW0gc2VhcmNoIGlzIHBlcmZvcm1lZC4gV2hlbiBmaWx0cmF0aW9uIGlzIGRpc2FibGVkLCB1c2UgdGhpcyBvcHRpb24uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlbGF5ID0gNTAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFiaW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3ZlcnZpZXdfZGRsICV9I3RvYy1ldmVudHMpKS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgdHlwZXMgaW4gdGhlIGlucHV0IGZpZWxkXG4gICAgICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3ZlcnZpZXdfZGRsICV9I3RvYy1ldmVudHMpKS5cbiAgICAgICAgICogWW91IGNhbiBmaWx0ZXIgdGhlIHNvdXJjZSBiYXNlZCBvbiB0aGUgcGFzc2VkIGZpbHRyYXRpb24gdmFsdWUuXG4gICAgICAgICAqIFdoZW4gdGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQgaXMgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2VkIHRvIGBuZ01vZGVsYCBvciBgZm9ybUNvbnRyb2xgXG4gICAgICAgICAqIHRocm91Z2ggaXRzIEFQSSBvciBmb3JtIGJpbmRpbmcsIHRoZSBgdmFsdWVDaGFuZ2VgIGV2ZW50IGlzIG5vdCB0cmlnZ2VyZWQgYmVjYXVzZSBpdFxuICAgICAgICAgKiBtaWdodCBjYXVzZSBhIG1peC11cCB3aXRoIHRoZSBidWlsdC1pbiBgdmFsdWVDaGFuZ2VgIG1lY2hhbmlzbXMgb2YgdGhlIGBuZ01vZGVsYCBvciBgZm9ybUNvbnRyb2xgIGJpbmRpbmdzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIGl0ZW0gc2VsZWN0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19kZGwgJX0jdG9jLWV2ZW50cykpLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHBvcHVwIGlzIGFib3V0IHRvIG9wZW5cbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvcGVuc3RhdGVfZGRsICV9I3RvYy1wcmV2ZW50aW5nLW9wZW5pbmctYW5kLWNsb3NpbmcpKS5cbiAgICAgICAgICogVGhpcyBldmVudCBpcyBwcmV2ZW50YWJsZS4gSWYgeW91IGNhbmNlbCBpdCwgdGhlIHBvcHVwIHdpbGwgcmVtYWluIGNsb3NlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3BlbiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgcG9wdXAgaXMgYWJvdXQgdG8gY2xvc2VcbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvcGVuc3RhdGVfZGRsICV9I3RvYy1wcmV2ZW50aW5nLW9wZW5pbmctYW5kLWNsb3NpbmcpKS5cbiAgICAgICAgICogVGhpcyBldmVudCBpcyBwcmV2ZW50YWJsZS4gSWYgeW91IGNhbmNlbCBpdCwgdGhlIHBvcHVwIHdpbGwgcmVtYWluIG9wZW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIGZvY3VzZXMgdGhlIERyb3BEb3duTGlzdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25Gb2N1cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgRHJvcERvd25MaXN0IGdldHMgYmx1cnJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25CbHVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLndpZGdldENsYXNzZXMgPSB0cnVlO1xuICAgICAgICB0aGlzLmdyb3VwSW5kaWNlcyA9IFtdO1xuICAgICAgICB0aGlzLmxpc3RCb3hJZCA9IGd1aWQoKTtcbiAgICAgICAgdGhpcy5vcHRpb25QcmVmaXggPSBndWlkKCk7XG4gICAgICAgIHRoaXMuZmlsdGVyVGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2lzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrID0gKF8pID0+IHsgfTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gKF8pID0+IHsgfTtcbiAgICAgICAgdGhpcy53b3JkID0gXCJcIjtcbiAgICAgICAgdGhpcy5sYXN0ID0gXCJcIjtcbiAgICAgICAgdGhpcy5maWx0ZXJGb2N1c2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLmZpbHRlckJsdXJyZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMud3JhcHBlckZvY3VzZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMud3JhcHBlckJsdXJyZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICB0aGlzLl9vcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvcHVwU2V0dGluZ3MgPSB7IGFuaW1hdGU6IHRydWUgfTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBsb2NhbGl6YXRpb24ucnRsID8gJ3J0bCcgOiAnbHRyJztcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlRXZlbnRzKCk7XG4gICAgICAgIHRoaXMucG9wdXBNb3VzZURvd25IYW5kbGVyID0gdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXJXaWR0aCA9IGlzRG9jdW1lbnRBdmFpbGFibGUoKSA/IHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIDogMDtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLnBvcHVwU2V0dGluZ3Mud2lkdGggfHwgd3JhcHBlcldpZHRoO1xuICAgICAgICBjb25zdCBtaW5XaWR0aCA9IGlzTmFOKHdyYXBwZXJXaWR0aCkgPyB3cmFwcGVyV2lkdGggOiBgJHt3cmFwcGVyV2lkdGh9cHhgO1xuICAgICAgICBjb25zdCBtYXhXaWR0aCA9IGlzTmFOKHdpZHRoKSA/IHdpZHRoIDogYCR7d2lkdGh9cHhgO1xuICAgICAgICByZXR1cm4geyBtaW46IG1pbldpZHRoLCBtYXg6IG1heFdpZHRoIH07XG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIGNvbnN0IHBvcHVwSGVpZ2h0ID0gdGhpcy5wb3B1cFNldHRpbmdzLmhlaWdodDtcbiAgICAgICAgcmV0dXJuIGlzUHJlc2VudChwb3B1cEhlaWdodCkgPyBgJHtwb3B1cEhlaWdodH1weGAgOiAnYXV0byc7XG4gICAgfVxuICAgIGdldCB3aWRnZXRUYWJJbmRleCgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvdmlkZWRUYWJJbmRleCA9IE51bWJlcih0aGlzLnRhYkluZGV4KTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFRhYkluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuICFpc05hTihwcm92aWRlZFRhYkluZGV4KSA/IHByb3ZpZGVkVGFiSW5kZXggOiBkZWZhdWx0VGFiSW5kZXg7XG4gICAgfVxuICAgIGdldCBhcmlhRXhwYW5kZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzT3BlbjtcbiAgICB9XG4gICAgZ2V0IGFyaWFPd25zKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubGlzdEJveElkO1xuICAgIH1cbiAgICBnZXQgYXJpYUFjdGl2ZWRlc2NlbmRhbnQoKSB7XG4gICAgICAgIGlmICghaXNQcmVzZW50KHRoaXMuZGF0YUl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uUHJlZml4ICsgXCItXCIgKyBnZXR0ZXIodGhpcy5kYXRhSXRlbSwgdGhpcy52YWx1ZUZpZWxkKTtcbiAgICB9XG4gICAgZ2V0IG5vRGF0YUxhYmVsKCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5pdGVtc0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub0RhdGFUZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBhcHBlbmRUbygpIHtcbiAgICAgICAgY29uc3QgeyBhcHBlbmRUbyB9ID0gdGhpcy5wb3B1cFNldHRpbmdzO1xuICAgICAgICBpZiAoIWFwcGVuZFRvIHx8IGFwcGVuZFRvID09PSAncm9vdCcpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGVuZFRvID09PSAnY29tcG9uZW50JyA/IHRoaXMuY29udGFpbmVyIDogYXBwZW5kVG87XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGRhdGEgb2YgdGhlIERyb3BEb3duTGlzdC5cbiAgICAgKlxuICAgICAqID4gVGhlIGRhdGEgaGFzIHRvIGJlIHByb3ZpZGVkIGluIGFuIGFycmF5LWxpa2UgbGlzdC5cbiAgICAgKi9cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UuZGF0YSA9IGRhdGEgfHwgW107XG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlydHVhbC5za2lwID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICBjb25zdCB2aXJ0dWFsID0gdGhpcy52aXJ0dWFsO1xuICAgICAgICBpZiAodmlydHVhbCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSB2aXJ0dWFsLnNraXAgfHwgMDtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHN0YXJ0ICsgdmlydHVhbC5wYWdlU2l6ZTtcbiAgICAgICAgICAgIC8vIFVzZSBsZW5ndGggaW5zdGVhZCBvZiBpdGVtc0NvdW50IGJlY2F1c2Ugb2YgdGhlIGdyb3VwaW5nLlxuICAgICAgICAgICAgdmlydHVhbC50b3RhbCA9IHRoaXMuZGF0YVNlcnZpY2UuZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5kYXRhLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFTZXJ2aWNlLmRhdGE7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBEcm9wRG93bkxpc3QuXG4gICAgICogSXQgY2FuIGVpdGhlciBiZSBvZiB0aGUgcHJpbWl0aXZlIChzdHJpbmcsIG51bWJlcnMpIG9yIG9mIHRoZSBjb21wbGV4IChvYmplY3RzKSB0eXBlLlxuICAgICAqIFRvIGRlZmluZSB0aGUgdHlwZSwgdXNlIHRoZSBgdmFsdWVQcmltaXRpdmVgIG9wdGlvbi5cbiAgICAgKlxuICAgICAqID4gQWxsIHNlbGVjdGVkIHZhbHVlcyB3aGljaCBhcmUgbm90IHByZXNlbnQgaW4gdGhlIHNvdXJjZSBhcmUgaWdub3JlZC5cbiAgICAgKi9cbiAgICBzZXQgdmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1ByZXNlbnQobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c0RhdGFJdGVtID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfVxuICAgIGdldCB2YWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmVzIHRoZSBwb3B1cCBvZiB0aGUgRHJvcERvd25MaXN0LlxuICAgICAqXG4gICAgICogVGhlIGF2YWlsYWJsZSBvcHRpb25zIGFyZTpcbiAgICAgKiAtIGBhbmltYXRlOiBCb29sZWFuYCZtZGFzaDtDb250cm9scyB0aGUgcG9wdXAgYW5pbWF0aW9uLiBCeSBkZWZhdWx0LCB0aGUgb3BlbiBhbmQgY2xvc2UgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZC5cbiAgICAgKiAtIGB3aWR0aDogTnVtYmVyIHwgU3RyaW5nYCZtZGFzaDtTZXRzIHRoZSB3aWR0aCBvZiB0aGUgcG9wdXAgY29udGFpbmVyLiBCeSBkZWZhdWx0LCB0aGUgd2lkdGggb2YgdGhlIGhvc3QgZWxlbWVudCBpcyB1c2VkLiBJZiBzZXQgdG8gYGF1dG9gLCB0aGUgY29tcG9uZW50IGF1dG9tYXRpY2FsbHkgYWRqdXN0cyB0aGUgd2lkdGggb2YgdGhlIHBvcHVwIGFuZCBubyBpdGVtIGxhYmVscyBhcmUgd3JhcHBlZC4gVGhlIGBhdXRvYCBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQgd2hlbiB2aXJ0dWFsIHNjcm9sbGluZyBpcyBlbmFibGVkLlxuICAgICAqIC0gYGhlaWdodDogTnVtYmVyYCZtZGFzaDtTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIHBvcHVwIGNvbnRhaW5lci5cbiAgICAgKiAtIGBwb3B1cENsYXNzOiBTdHJpbmdgJm1kYXNoO1NwZWNpZmllcyBhIGxpc3Qgb2YgQ1NTIGNsYXNzZXMgdGhhdCBhcmUgdXNlZCB0byBzdHlsZSB0aGUgcG9wdXAuXG4gICAgICogLSBgYXBwZW5kVG86IFwicm9vdFwiIHwgXCJjb21wb25lbnRcIiB8IFZpZXdDb250YWluZXJSZWZgJm1kYXNoO1NwZWNpZmllcyB0aGUgY29tcG9uZW50IHRvIHdoaWNoIHRoZSBwb3B1cCB3aWxsIGJlIGFwcGVuZGVkLlxuICAgICAqL1xuICAgIHNldCBwb3B1cFNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwU2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHsgYW5pbWF0ZTogdHJ1ZSB9LCBzZXR0aW5ncyk7XG4gICAgfVxuICAgIGdldCBwb3B1cFNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBTZXR0aW5ncztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBhIEJvb2xlYW4gZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBmb3IgZWFjaCBkYXRhIGl0ZW0gaW4gdGhlIGNvbXBvbmVudFxuICAgICAqIChbc2VlIGV4YW1wbGVzXSh7JSBzbHVnIGRpc2FibGVkaXRlbXNfZGRsICV9KSkuIERldGVybWluZXMgd2hldGhlciB0aGUgaXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqL1xuICAgIHNldCBpdGVtRGlzYWJsZWQoZm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpdGVtRGlzYWJsZWQgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgcmVjZWl2ZWQgJHtKU09OLnN0cmluZ2lmeShmbil9LmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZWRJdGVtc1NlcnZpY2UuaXRlbURpc2FibGVkID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFt2aXJ0dWFsaXphdGlvbl0oeyUgc2x1ZyB2aXJ0dWFsaXphdGlvbl9kZGwgJX0pIGZ1bmN0aW9uYWxpdHkuXG4gICAgICovXG4gICAgc2V0IHZpcnR1YWwoc2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fdmlydHVhbFNldHRpbmdzID0gbm9ybWFsaXplVmlydHVhbGl6YXRpb25TZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgfVxuICAgIGdldCB2aXJ0dWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlydHVhbFNldHRpbmdzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHR5cGUgb2YgdGhlIHNlbGVjdGVkIHZhbHVlXG4gICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlXSh7JSBzbHVnIHZhbHVlYmluZGluZ19kZGwgJX0jdG9jLXByaW1pdGl2ZS12YWx1ZXMtZnJvbS1vYmplY3QtZmllbGRzKSkuXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHNlbGVjdGVkIHZhbHVlIGhhcyB0byBiZSBvZiBhIHByaW1pdGl2ZSB2YWx1ZS5cbiAgICAgKi9cbiAgICBzZXQgdmFsdWVQcmltaXRpdmUoaXNQcmltaXRpdmUpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcbiAgICB9XG4gICAgZ2V0IHZhbHVlUHJpbWl0aXZlKCkge1xuICAgICAgICBpZiAoIWlzUHJlc2VudCh0aGlzLl92YWx1ZVByaW1pdGl2ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAhaXNQcmVzZW50KHRoaXMudmFsdWVGaWVsZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlUHJpbWl0aXZlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2V0IHRhYkluZGV4KHRhYkluZGV4KSB7XG4gICAgICAgIHRoaXMudGFiaW5kZXggPSB0YWJJbmRleDtcbiAgICB9XG4gICAgZ2V0IHRhYkluZGV4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy50YWJpbmRleDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGJsdXJDb21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMud3JhcHBlckJsdXJyZWQuZW1pdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYmx1ckZpbHRlcklucHV0KCkge1xuICAgICAgICB0aGlzLmZpbHRlckJsdXJyZWQuZW1pdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZm9jdXNDb21wb25lbnQoKSB7XG4gICAgICAgIHRoaXMud3JhcHBlckZvY3VzZWQuZW1pdCgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaGFzT2JzZXJ2ZXJzKHRoaXMub25Gb2N1cykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Gb2N1cy5lbWl0KCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGtleWRvd24oZXZlbnQpIHtcbiAgICAgICAgY29uc3QgZmlyc3RJbmRleCA9IGlzUHJlc2VudCh0aGlzLmRlZmF1bHRJdGVtKSA/IC0xIDogMDtcbiAgICAgICAgbGV0IGZvY3VzZWQgPSBpc05hTih0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCkgPyB0aGlzLmZpcnN0Rm9jdXNhYmxlSW5kZXgoZmlyc3RJbmRleCkgOiB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZDtcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZG9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0hvbWVFbmQgPSBldmVudC5rZXlDb2RlID09PSBLZXlzLkhvbWUgfHwgZXZlbnQua2V5Q29kZSA9PT0gS2V5cy5FbmQ7XG4gICAgICAgIGNvbnN0IGlzRmlsdGVyRm9jdXNlZCA9IHRoaXMuZmlsdGVyYWJsZSAmJiB0aGlzLmlzRm9jdXNlZCAmJiB0aGlzLmlzT3BlbjtcbiAgICAgICAgaWYgKGlzRmlsdGVyRm9jdXNlZCAmJiBpc0hvbWVFbmQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYXNTZWxlY3RlZCA9IGlzUHJlc2VudCh0aGlzLnNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0ZWRbMF0pO1xuICAgICAgICBjb25zdCBmb2N1c2VkSXRlbU5vdFNlbGVjdGVkID0gaXNQcmVzZW50KHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkKSAmJiAhdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmlzU2VsZWN0ZWQodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpO1xuICAgICAgICBpZiAoIWhhc1NlbGVjdGVkIHx8IGZvY3VzZWRJdGVtTm90U2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSBLZXlzLkFycm93RG93biB8fCBldmVudC5rZXlDb2RlID09PSBLZXlzLkFycm93UmlnaHQpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IEtleXMuQXJyb3dVcCB8fCBldmVudC5rZXlDb2RlID09PSBLZXlzLkFycm93TGVmdCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnREYXRhID0gZXZlbnQ7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMubmF2aWdhdGlvblNlcnZpY2UucHJvY2Vzcyh7XG4gICAgICAgICAgICBjdXJyZW50OiBmb2N1c2VkICsgb2Zmc2V0LFxuICAgICAgICAgICAgbWF4OiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQgLSAxLFxuICAgICAgICAgICAgbWluOiB0aGlzLmRlZmF1bHRJdGVtID8gLTEgOiAwLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnREYXRhXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsZWZ0UmlnaHRLZXlzID0gKGFjdGlvbiA9PT0gTmF2aWdhdGlvbkFjdGlvbi5MZWZ0KSB8fCAoYWN0aW9uID09PSBOYXZpZ2F0aW9uQWN0aW9uLlJpZ2h0KTtcbiAgICAgICAgaWYgKGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5VbmRlZmluZWQgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5UYWIgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5CYWNrc3BhY2UgJiZcbiAgICAgICAgICAgIGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5EZWxldGUgJiZcbiAgICAgICAgICAgICEobGVmdFJpZ2h0S2V5cyAmJiB0aGlzLmZpbHRlcmFibGUpICYmXG4gICAgICAgICAgICBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uRW50ZXIgLy9lbnRlciB3aGVuIHBvcHVwIGlzIG9wZW5lZCBpcyBoYW5kbGVkIGJlZm9yZSBgaGFuZGxlRW50ZXJgXG4gICAgICAgICkge1xuICAgICAgICAgICAgZXZlbnREYXRhLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGtleXByZXNzKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZG9ubHkgfHwgdGhpcy5maWx0ZXJhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbktleVByZXNzKGV2ZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuZm9jdXMoKTtcbiAgICAgICAgdGhpcy50b2dnbGVQb3B1cCghdGhpcy5pc09wZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcGVuKSB7XG4gICAgICAgICAgICBjb25zdCBwb3B1cFdyYXBwZXIgPSB0aGlzLnBvcHVwUmVmLnBvcHVwRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMud2lkdGg7XG4gICAgICAgICAgICBwb3B1cFdyYXBwZXIuc3R5bGUubWluV2lkdGggPSBtaW47XG4gICAgICAgICAgICBwb3B1cFdyYXBwZXIuc3R5bGUud2lkdGggPSBtYXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGRpcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aW9uO1xuICAgIH1cbiAgICBzZXQgaXNGb2N1c2VkKGlzRm9jdXNlZCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyW2lzRm9jdXNlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXSh0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudCwgJ2stc3RhdGUtZm9jdXNlZCcpO1xuICAgICAgICB0aGlzLl9pc0ZvY3VzZWQgPSBpc0ZvY3VzZWQ7XG4gICAgfVxuICAgIGdldCBpc0ZvY3VzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0ZvY3VzZWQ7XG4gICAgfVxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmhvc3RFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIFwidGFiaW5kZXhcIik7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlc1N1YnNjcmlwdGlvbiA9IHRoaXMubG9jYWxpemF0aW9uXG4gICAgICAgICAgICAuY2hhbmdlcy5zdWJzY3JpYmUoKHsgcnRsIH0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gcnRsID8gJ3J0bCcgOiAnbHRyJztcbiAgICAgICAgICAgIHRoaXMuc2V0TWVzc2FnZXMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0TWVzc2FnZXMoKTtcbiAgICAgICAgdGhpcy5hc3NpZ25BcmlhRGVzY3JpYmVkQnkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVzZWQgYnkgdGhlIFRleHRCb3hDb250YWluZXIgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjb21wb25lbnQgaXMgZW1wdHkuXG4gICAgICovXG4gICAgaXNFbXB0eSgpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICByZXR1cm4gISh2YWx1ZSA9PT0gMCB8fCB2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgfHwgdGhpcy5kZWZhdWx0SXRlbSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkZpbHRlckZvY3VzKCkge1xuICAgICAgICB0aGlzLmZpbHRlckZvY3VzZWQuZW1pdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuZGVzdHJveVBvcHVwKCk7XG4gICAgICAgIHRoaXMudW5zdWJzY3JpYmVFdmVudHMoKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMubWVzc2FnZXNUaW1lb3V0KTtcbiAgICAgICAgaWYgKHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlc1N1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5sb2NhbGl6YXRpb25DaGFuZ2VzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICAgICAgY29uc3QgdmlydHVhbCA9IHRoaXMudmlydHVhbDtcbiAgICAgICAgY29uc3QgcmVxdWVzdEluaXRpYWxEYXRhID0gdmlydHVhbCAmJiBjaGFuZ2VzLmRhdGEgJiYgY2hhbmdlcy5kYXRhLmlzRmlyc3RDaGFuZ2UoKTtcbiAgICAgICAgaWYgKHJlcXVlc3RJbml0aWFsRGF0YSkge1xuICAgICAgICAgICAgdGhpcy5wYWdlQ2hhbmdlKHsgc2tpcDogMCwgdGFrZTogdmlydHVhbC5wYWdlU2l6ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDaGFuZ2VkKCdkZWZhdWx0SXRlbScsIGNoYW5nZXMsIGZhbHNlKSkge1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZS5kZWZhdWx0SXRlbSA9IHRoaXMuZGVmYXVsdEl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFueUNoYW5nZWQoWyd0ZXh0RmllbGQnLCAndmFsdWVGaWVsZCcsICd2YWx1ZVByaW1pdGl2ZScsICdkZWZhdWx0SXRlbScsICdpdGVtRGlzYWJsZWQnXSwgY2hhbmdlcywgZmFsc2UpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy52ZXJpZnlTZXR0aW5ncygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBEcm9wRG93bkxpc3QuXG4gICAgICovXG4gICAgZm9jdXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBCbHVycyB0aGUgRHJvcERvd25MaXN0LlxuICAgICAqL1xuICAgIGJsdXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy53cmFwcGVyLm5hdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgdGhlIHZpc2liaWxpdHkgb2YgdGhlIHBvcHVwXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvcGVuc3RhdGVfZGRsICV9I3RvYy1zZXR0aW5nLXRoZS1pbml0aWFsbHktb3BlbmVkLWNvbXBvbmVudCkpLlxuICAgICAqIElmIHlvdSB1c2UgdGhlIGB0b2dnbGVgIG1ldGhvZCB0byBvcGVuIG9yIGNsb3NlIHRoZSBwb3B1cCwgdGhlIGBvcGVuYCBhbmQgYGNsb3NlYCBldmVudHMgd2lsbCBub3QgYmUgZmlyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3BlbiAtIFRoZSBzdGF0ZSBvZiB0aGUgcG9wdXAuXG4gICAgICovXG4gICAgdG9nZ2xlKG9wZW4pIHtcbiAgICAgICAgLy8gVGhlIFByb21pc2UgaXMgcmVxdWlyZWQgdG8gb3BlbiB0aGUgcG9wdXAgb24gbG9hZC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgXCJFeHByZXNzaW9uIGhhcyBjaGFuZ2VkLi4uXCIgdHlwZSBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG51bGwpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkT3BlbiA9IGlzUHJlc2VudChvcGVuKSA/IG9wZW4gOiAhdGhpcy5fb3BlbjtcbiAgICAgICAgICAgIHRoaXMuX3RvZ2dsZShzaG91bGRPcGVuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF90b2dnbGUob3Blbikge1xuICAgICAgICB0aGlzLl9vcGVuID0gb3BlbjtcbiAgICAgICAgdGhpcy5kZXN0cm95UG9wdXAoKTtcbiAgICAgICAgaWYgKHRoaXMuX29wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUG9wdXAoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0cmlnZ2VyUG9wdXBFdmVudHMob3Blbikge1xuICAgICAgICBjb25zdCBldmVudEFyZ3MgPSBuZXcgUHJldmVudGFibGVFdmVudCgpO1xuICAgICAgICBpZiAob3Blbikge1xuICAgICAgICAgICAgdGhpcy5vcGVuLmVtaXQoZXZlbnRBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UuZW1pdChldmVudEFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudEFyZ3MuaXNEZWZhdWx0UHJldmVudGVkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0b2dnbGVQb3B1cChvcGVuKSB7XG4gICAgICAgIGNvbnN0IGlzRGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZG9ubHk7XG4gICAgICAgIGNvbnN0IHNhbWVTdGF0ZSA9IHRoaXMuaXNPcGVuID09PSBvcGVuO1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCB8fCBzYW1lU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0RlZmF1bHRQcmV2ZW50ZWQgPSB0aGlzLnRyaWdnZXJQb3B1cEV2ZW50cyhvcGVuKTtcbiAgICAgICAgaWYgKCFpc0RlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIGlmICghb3BlbiAmJiB0aGlzLmZpbHRlcmFibGUgJiYgdGhpcy5pc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90b2dnbGUob3Blbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBvcGVuIHN0YXRlIG9mIHRoZSBwb3B1cC5cbiAgICAgKi9cbiAgICBnZXQgaXNPcGVuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BlbjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSB2YWx1ZSBvZiB0aGUgRHJvcERvd25MaXN0LlxuICAgICAqIElmIHlvdSB1c2UgdGhlIGByZXNldGAgbWV0aG9kIHRvIGNsZWFyIHRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LFxuICAgICAqIHRoZSBtb2RlbCB3aWxsIG5vdCB1cGRhdGUgYXV0b21hdGljYWxseSBhbmQgdGhlIGBzZWxlY3Rpb25DaGFuZ2VgIGFuZCBgdmFsdWVDaGFuZ2VgIGV2ZW50cyB3aWxsIG5vdCBiZSBmaXJlZC5cbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlID09PSBudWxsID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayA9IGZuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm4pIHtcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayA9IGZuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0IGJ1dHRvbkNsYXNzZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRpbmcgPyAnay1pLWxvYWRpbmcnIDogdGhpcy5pY29uQ2xhc3MgfHwgJ2staS1hcnJvdy1zJztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBsaXN0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyQ2xhc3NlcyA9IFsnay1saXN0LWNvbnRhaW5lcicsICdrLXJlc2V0J107XG4gICAgICAgIGlmICh0aGlzLnBvcHVwU2V0dGluZ3MucG9wdXBDbGFzcykge1xuICAgICAgICAgICAgY29udGFpbmVyQ2xhc3Nlcy5wdXNoKHRoaXMucG9wdXBTZXR0aW5ncy5wb3B1cENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGFpbmVyQ2xhc3NlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldCBpc0Rpc2FibGVkRGVmYXVsdEl0ZW0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlLmlzSXRlbURpc2FibGVkKHRoaXMuZGVmYXVsdEl0ZW0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZ2V0VGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGdldERlZmF1bHRJdGVtVGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLmRlZmF1bHRJdGVtLCB0aGlzLnRleHRGaWVsZCk7XG4gICAgfVxuICAgIGNyZWF0ZVBvcHVwKCkge1xuICAgICAgICBpZiAodGhpcy52aXJ0dWFsKSB7XG4gICAgICAgICAgICB0aGlzLnZpcnR1YWwuc2tpcCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbEFsaWduID0gdGhpcy5kaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcbiAgICAgICAgY29uc3QgYW5jaG9yUG9zaXRpb24gPSB7IGhvcml6b250YWw6IGhvcml6b250YWxBbGlnbiwgdmVydGljYWw6IFwiYm90dG9tXCIgfTtcbiAgICAgICAgY29uc3QgcG9wdXBQb3NpdGlvbiA9IHsgaG9yaXpvbnRhbDogaG9yaXpvbnRhbEFsaWduLCB2ZXJ0aWNhbDogXCJ0b3BcIiB9O1xuICAgICAgICB0aGlzLnBvcHVwUmVmID0gdGhpcy5wb3B1cFNlcnZpY2Uub3Blbih7XG4gICAgICAgICAgICBhbmNob3I6IHRoaXMud3JhcHBlcixcbiAgICAgICAgICAgIGFuY2hvckFsaWduOiBhbmNob3JQb3NpdGlvbixcbiAgICAgICAgICAgIGFuaW1hdGU6IHRoaXMucG9wdXBTZXR0aW5ncy5hbmltYXRlLFxuICAgICAgICAgICAgYXBwZW5kVG86IHRoaXMuYXBwZW5kVG8sXG4gICAgICAgICAgICBjb250ZW50OiB0aGlzLnBvcHVwVGVtcGxhdGUsXG4gICAgICAgICAgICBwb3B1cEFsaWduOiBwb3B1cFBvc2l0aW9uLFxuICAgICAgICAgICAgcG9wdXBDbGFzczogdGhpcy5saXN0Q29udGFpbmVyQ2xhc3NlcyxcbiAgICAgICAgICAgIHBvc2l0aW9uTW9kZTogJ2Fic29sdXRlJ1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcG9wdXBXcmFwcGVyID0gdGhpcy5wb3B1cFJlZi5wb3B1cEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMud2lkdGg7XG4gICAgICAgIHBvcHVwV3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnBvcHVwTW91c2VEb3duSGFuZGxlcik7XG4gICAgICAgIHBvcHVwV3JhcHBlci5zdHlsZS5taW5XaWR0aCA9IG1pbjtcbiAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLndpZHRoID0gbWF4O1xuICAgICAgICBwb3B1cFdyYXBwZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHBvcHVwV3JhcHBlci5zZXRBdHRyaWJ1dGUoXCJkaXJcIiwgdGhpcy5kaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLnBvcHVwUmVmLnBvcHVwT3Blbi5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zTGlzdC5zY3JvbGxUb0l0ZW0odGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlcmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXBSZWYucG9wdXBBbmNob3JWaWV3cG9ydExlYXZlLnN1YnNjcmliZSgoKSA9PiB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveVBvcHVwKCkge1xuICAgICAgICBpZiAodGhpcy5wb3B1cFJlZikge1xuICAgICAgICAgICAgdGhpcy5wb3B1cFJlZi5wb3B1cEVsZW1lbnRcbiAgICAgICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5wb3B1cE1vdXNlRG93bkhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cFJlZi5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cFJlZiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoeyBkYXRhSXRlbSwgY29uZmlybSA9IGZhbHNlIH0pIHtcbiAgICAgICAgdGhpcy5kYXRhSXRlbSA9IGRhdGFJdGVtO1xuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpKGRhdGFJdGVtKTtcbiAgICAgICAgaWYgKGNvbmZpcm0pIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzRGF0YUl0ZW0gPSBkYXRhSXRlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjbGVhclN0YXRlKCkge1xuICAgICAgICB0aGlzLnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZGF0YUl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJlc2V0U2VsZWN0aW9uKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNsZWFyID0gIWlzUHJlc2VudChpbmRleCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5yZXNldFNlbGVjdGlvbihjbGVhciA/IFtdIDogW2luZGV4XSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID0gY2xlYXIgPyB0aGlzLmZpcnN0Rm9jdXNhYmxlSW5kZXgoMCkgOiBpbmRleDtcbiAgICB9XG4gICAgb25TZWxlY3Rpb25DaGFuZ2UoeyBkYXRhSXRlbSB9KSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGUoeyBkYXRhSXRlbSB9KTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UuZW1pdChkYXRhSXRlbSk7XG4gICAgICAgIC8vIHJlYXNzaWduaW5nIHRoZSB2YWx1ZSBsYWJlbCBJRCBhcyBhcmlhLWRlYXNjaWJlZGJ5IGZvcmNlcyBmaXJlZm94L252ZGEsIGZvcmVmb3gvamF3cyB0byByZWFkXG4gICAgICAgIC8vIHRoZSBuZXcgdmFsdWUgd2hlbiB0aGUgcG9wdXAgaXMgY2xvc2VkIGFuZCB0aGUgdmFsdWUgaXMgY2hhbmdlZCB3aXRoIHRoZSBhcnJvdyBrZXlzICh1cC9kb3duKVxuICAgICAgICB0aGlzLmFzc2lnbkFyaWFEZXNjcmliZWRCeSgpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXRlbSBzZWxlY3Rpb24gd2hlbiB0aGUgcG9wdXAgaXMgb3Blbi5cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdWJzY3JpcHRpb24uYWRkKHRoaXMuc2VsZWN0aW9uU2VydmljZS5vblNlbGVjdC5waXBlKGZpbHRlcihfID0+IHRoaXMuaXNPcGVuKSwgbWFwKHRoaXMuaXRlbUZyb21FdmVudC5iaW5kKHRoaXMpKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodGhpcy5vblNlbGVjdGlvbkNoYW5nZS5iaW5kKHRoaXMpKSk7XG4gICAgICAgIC8vIEl0ZW0gc2VsZWN0aW9uIHdoZW4gdGhlIHBvcHVwIGlzIGNsb3NlZCB8IGNsaWNrZWQgfCBlbnRlciwgYW5kIHNvIG9uLlxuICAgICAgICB0aGlzLnNlbGVjdGlvblN1YnNjcmlwdGlvbi5hZGQobWVyZ2UodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLm9uU2VsZWN0LnBpcGUoZmlsdGVyKF8gPT4gIXRoaXMuaXNPcGVuKSksIHRoaXMuc2VsZWN0aW9uU2VydmljZS5vbkNoYW5nZSkucGlwZShtYXAodGhpcy5pdGVtRnJvbUV2ZW50LmJpbmQodGhpcykpLCB0YXAoXyA9PiB0aGlzLnRvZ2dsZVBvcHVwKGZhbHNlKSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCh7IGRhdGFJdGVtLCB2YWx1ZTogbmV3VmFsdWUsIG5ld1NlbGVjdGlvbiB9KSA9PiB7XG4gICAgICAgICAgICBpZiAobmV3U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSh7IGRhdGFJdGVtIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2hvdWxkVXNlUHJldmlvdXMgPSAhaXNQcmVzZW50KGRhdGFJdGVtKSAmJiB0aGlzLl9wcmV2aW91c0RhdGFJdGVtO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkVXNlTmV3VmFsdWUgPSBuZXdWYWx1ZSAhPT0gdGhpcy5wcm9wKHRoaXMudmFsdWVGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSkodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkVXNlUHJldmlvdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKHsgZGF0YUl0ZW06IHRoaXMuX3ByZXZpb3VzRGF0YUl0ZW0gfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2hvdWxkVXNlTmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZVByaW1pdGl2ZSA/IG5ld1ZhbHVlIDogZGF0YUl0ZW07XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNEYXRhSXRlbSA9IGRhdGFJdGVtO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdENoYW5nZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLm5hdmlnYXRpb25TdWJzY3JpcHRpb24gPSBtZXJnZSh0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLnVwLCB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmRvd24sIHRoaXMubmF2aWdhdGlvblNlcnZpY2UubGVmdC5waXBlKHNraXBXaGlsZSgoKSA9PiB0aGlzLmZpbHRlcmFibGUpKSwgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5yaWdodC5waXBlKHNraXBXaGlsZSgoKSA9PiB0aGlzLmZpbHRlcmFibGUpKSwgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5ob21lLCB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmVuZClcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcigoZXZlbnQpID0+ICFpc05hTihldmVudC5pbmRleCkpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoZXZlbnQpID0+IHRoaXMuc2VsZWN0aW9uU2VydmljZS5zZWxlY3QoZXZlbnQuaW5kZXgpKTtcbiAgICAgICAgdGhpcy5vcGVuU3Vic2NyaXB0aW9uID0gdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5vcGVuLnN1YnNjcmliZSgoKSA9PiB0aGlzLnRvZ2dsZVBvcHVwKHRydWUpKTtcbiAgICAgICAgdGhpcy5jbG9zZVN1YnNjcmlwdGlvbiA9IHRoaXMubmF2aWdhdGlvblNlcnZpY2UuY2xvc2Uuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5lbnRlclN1YnNjcmlwdGlvbiA9IHRoaXMubmF2aWdhdGlvblNlcnZpY2UuZW50ZXJcbiAgICAgICAgICAgIC5waXBlKHRhcCgoZXZlbnQpID0+IGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHRoaXMuaGFuZGxlRW50ZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZXNjU3Vic2NyaXB0aW9uID0gdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5lc2NcbiAgICAgICAgICAgIC5zdWJzY3JpYmUodGhpcy5oYW5kbGVFc2NhcGUuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZmlsdGVyQmx1cnJlZFN1YnNjcmlwdGlvbiA9IHRoaXMuZmlsdGVyQmx1cnJlZC5waXBlKGNvbmNhdE1hcCgoKSA9PiBpbnRlcnZhbCgxMCkucGlwZSh0YWtlKDEpLCB0YWtlVW50aWwodGhpcy53cmFwcGVyRm9jdXNlZCkpKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53cmFwcGVyQmx1cnJlZC5lbWl0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50Qmx1cnJlZFN1YnNjcmlwdGlvbiA9XG4gICAgICAgICAgICAgICAgbWVyZ2UodGhpcy53cmFwcGVyQmx1cnJlZC5waXBlKGNvbmNhdE1hcCgoKSA9PiBpbnRlcnZhbCgxMCkucGlwZSh0YWtlKDEpLCB0YWtlVW50aWwodGhpcy5maWx0ZXJGb2N1c2VkKSkpKSwgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS50YWIpLnBpcGUodGFwKGV2ZW50ID0+IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkV2ZW50ICYmIHRoaXMuZm9jdXMoKSksIGZpbHRlcigoKSA9PiB0aGlzLmlzRm9jdXNlZCkpXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5jb21wb25lbnRCbHVyKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMub3BlblN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLmNsb3NlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuZW50ZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5lc2NTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRCbHVycmVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMuZmlsdGVyQmx1cnJlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaXRlbUZyb21FdmVudChldmVudCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGV2ZW50LmluZGljZXNbMF07XG4gICAgICAgIGxldCBkYXRhSXRlbSA9IHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGluZGV4KTtcbiAgICAgICAgZGF0YUl0ZW0gPSBpc1ByZXNlbnQoZGF0YUl0ZW0pID8gZGF0YUl0ZW0gOiB0aGlzLmN1cnJlbnRPckRlZmF1bHQoaW5kZXgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMucHJvcCh0aGlzLnZhbHVlRmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpKGRhdGFJdGVtKTtcbiAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uID0gZXZlbnQubmV3U2VsZWN0aW9uO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUl0ZW0sXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIG5ld1NlbGVjdGlvbixcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgIH07XG4gICAgfVxuICAgIGN1cnJlbnRPckRlZmF1bHQoc2VsZWN0ZWRJbmRleCkge1xuICAgICAgICBjb25zdCBkZWZhdWx0SXRlbUluZGV4ID0gLTE7XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5kYXRhSXRlbSkgJiYgc2VsZWN0ZWRJbmRleCAhPT0gZGVmYXVsdEl0ZW1JbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0SXRlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaXJzdEZvY3VzYWJsZUluZGV4KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1heEluZGV4ID0gdGhpcy5kYXRhU2VydmljZS5pdGVtc0NvdW50IC0gMTtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWRJdGVtc1NlcnZpY2UuaXNJbmRleERpc2FibGVkKGluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIChpbmRleCA8IG1heEluZGV4KSA/IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleChpbmRleCArIDEpIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZUVudGVyKCkge1xuICAgICAgICBpZiAodGhpcy5pc09wZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5jaGFuZ2UodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQpO1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVFc2NhcGUoKSB7XG4gICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGVkWzBdKSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmNoYW5nZSh0aGlzLnNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0ZWRbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgICBjbGVhckZpbHRlcigpIHtcbiAgICAgICAgaWYgKCEodGhpcy5maWx0ZXJhYmxlICYmIHRoaXMuZmlsdGVyVGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpbHRlclRleHQgPSBcIlwiO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2UuZW1pdCh0aGlzLmZpbHRlclRleHQpO1xuICAgIH1cbiAgICB2ZXJpZnlTZXR0aW5ncygpIHtcbiAgICAgICAgaWYgKCFpc0Rldk1vZGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRJdGVtICYmIHRoaXMudmFsdWVGaWVsZCAmJiB0eXBlb2YgdGhpcy5kZWZhdWx0SXRlbSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKERyb3BEb3duTGlzdE1lc3NhZ2VzLmRlZmF1bHRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZVByaW1pdGl2ZSA9PT0gdHJ1ZSAmJiBpc1ByZXNlbnQodGhpcy52YWx1ZSkgJiYgdHlwZW9mIHRoaXMudmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihEcm9wRG93bkxpc3RNZXNzYWdlcy5wcmltaXRpdmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlUHJpbWl0aXZlID09PSBmYWxzZSAmJiBpc1ByZXNlbnQodGhpcy52YWx1ZSkgJiYgdHlwZW9mIHRoaXMudmFsdWUgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihEcm9wRG93bkxpc3RNZXNzYWdlcy5vYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlT3JUZXh0ID0gIWlzUHJlc2VudCh0aGlzLnZhbHVlRmllbGQpICE9PSAhaXNQcmVzZW50KHRoaXMudGV4dEZpZWxkKTtcbiAgICAgICAgaWYgKHZhbHVlT3JUZXh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRHJvcERvd25MaXN0TWVzc2FnZXMudGV4dEFuZFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb21wb25lbnRCbHVyKCkge1xuICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWx1ZUZyb20gPSB0aGlzLnByb3AodGhpcy52YWx1ZUZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uUHJlc2VudCA9IGlzUHJlc2VudCh0aGlzLnNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0ZWRbMF0pO1xuICAgICAgICBjb25zdCB2YWx1ZUhhc0NoYW5nZWQgPSBzZWxlY3Rpb25QcmVzZW50ICYmIHZhbHVlRnJvbSh0aGlzLnZhbHVlKSAhPT0gdmFsdWVGcm9tKHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KHRoaXMuc2VsZWN0aW9uU2VydmljZS5zZWxlY3RlZFswXSkpO1xuICAgICAgICBpZiAodmFsdWVIYXNDaGFuZ2VkIHx8XG4gICAgICAgICAgICBoYXNPYnNlcnZlcnModGhpcy5jbG9zZSkgfHxcbiAgICAgICAgICAgIGhhc09ic2VydmVycyh0aGlzLm9uQmx1cikgfHxcbiAgICAgICAgICAgIGhhc09ic2VydmVycyh0aGlzLmZpbHRlckNoYW5nZSkgfHxcbiAgICAgICAgICAgIGlzVW50b3VjaGVkKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVIYXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5jaGFuZ2UodGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGVkWzBdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhckZpbHRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMub25CbHVyLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbk1vdXNlRG93bihldmVudCkge1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gZXZlbnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKHRhZ05hbWUgIT09IFwiaW5wdXRcIikge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbktleVByZXNzKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gMCB8fCBldmVudC5rZXlDb2RlID09PSBLZXlzLkVudGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZSk7XG4gICAgICAgIGlmICh0aGlzLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgIGNoYXJhY3RlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IFwiIFwiKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud29yZCArPSBjaGFyYWN0ZXI7XG4gICAgICAgIHRoaXMubGFzdCA9IGNoYXJhY3RlcjtcbiAgICAgICAgdGhpcy5zZWFyY2goKTtcbiAgICB9XG4gICAgc2VhcmNoKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50eXBpbmdUaW1lb3V0KTtcbiAgICAgICAgaWYgKCF0aGlzLmZpbHRlcmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMudHlwaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLndvcmQgPSBcIlwiOyB9LCB0aGlzLmRlbGF5KTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdE5leHQoKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5kYXRhU2VydmljZVxuICAgICAgICAgICAgLmZpbHRlcigoaXRlbSkgPT4gaXNQcmVzZW50KGl0ZW0pICYmICFpdGVtLmhlYWRlciAmJiAhdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZS5pc0l0ZW1EaXNhYmxlZChpdGVtKSlcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFTZXJ2aWNlLmdyb3VwZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBpdGVtOiBpdGVtLnZhbHVlLCBpdGVtSW5kZXg6IGl0ZW0ub2Zmc2V0SW5kZXggfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGl0ZW06IGl0ZW0sIGl0ZW1JbmRleDogdGhpcy5kYXRhU2VydmljZS5pbmRleE9mKGl0ZW0pIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpc0luTG9vcCA9IHNhbWVDaGFyc09ubHkodGhpcy53b3JkLCB0aGlzLmxhc3QpO1xuICAgICAgICBsZXQgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBsZXQgaGFzU2VsZWN0ZWQgPSAhaXNOYU4odGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGVkWzBdKTtcbiAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSAhaGFzU2VsZWN0ZWQgPyAwIDogdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGVkWzBdO1xuICAgICAgICBsZXQgdGV4dCwgaW5kZXgsIGRlZmF1bHRJdGVtO1xuICAgICAgICBpZiAodGhpcy5kZWZhdWx0SXRlbSAmJiAhdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZS5pc0l0ZW1EaXNhYmxlZCh0aGlzLmRlZmF1bHRJdGVtKSkge1xuICAgICAgICAgICAgZGVmYXVsdEl0ZW0gPSB7IGl0ZW06IHRoaXMuZGVmYXVsdEl0ZW0sIGl0ZW1JbmRleDogLTEgfTtcbiAgICAgICAgICAgIGRhdGFMZW5ndGggKz0gMTtcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydEluZGV4ICs9IGlzSW5Mb29wICYmIGhhc1NlbGVjdGVkID8gMSA6IDA7XG4gICAgICAgIGRhdGEgPSBzaHVmZmxlRGF0YShkYXRhLCBzdGFydEluZGV4LCBkZWZhdWx0SXRlbSk7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgZm9yICg7IGluZGV4IDwgZGF0YUxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGV4dCA9IGdldHRlcihkYXRhW2luZGV4XS5pdGVtLCB0aGlzLnRleHRGaWVsZCk7XG4gICAgICAgICAgICBjb25zdCBsb29wTWF0Y2ggPSBCb29sZWFuKGlzSW5Mb29wICYmIG1hdGNoVGV4dCh0ZXh0LCB0aGlzLmxhc3QsIHRoaXMuaWdub3JlQ2FzZSkpO1xuICAgICAgICAgICAgY29uc3QgbmV4dE1hdGNoID0gQm9vbGVhbihtYXRjaFRleHQodGV4dCwgdGhpcy53b3JkLCB0aGlzLmlnbm9yZUNhc2UpKTtcbiAgICAgICAgICAgIGlmIChsb29wTWF0Y2ggfHwgbmV4dE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBkYXRhW2luZGV4XS5pdGVtSW5kZXg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ICE9PSBkYXRhTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRlKGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbWl0Q2hhbmdlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh2YWx1ZSk7XG4gICAgfVxuICAgIG5hdmlnYXRlKGluZGV4KSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5zZWxlY3QoaW5kZXgpO1xuICAgIH1cbiAgICBwcm9wKGZpZWxkLCB1c2VQcmltaXRpdmUpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhSXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChkYXRhSXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlUHJpbWl0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZCAmJiBpc09iamVjdChkYXRhSXRlbSkgPyBkYXRhSXRlbVtmaWVsZF0gOiBkYXRhSXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhSXRlbVtmaWVsZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpbmREYXRhSXRlbSh7IHByaW1pdGl2ZSwgdmFsdWVGaWVsZCwgdmFsdWUgfSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICBkYXRhSXRlbTogbnVsbCxcbiAgICAgICAgICAgIGluZGV4OiAtMVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5wcm9wKHZhbHVlRmllbGQsIHByaW1pdGl2ZSk7XG4gICAgICAgIGxldCBjb21wYXJlcjtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNlcnZpY2UuZ3JvdXBlZCkge1xuICAgICAgICAgICAgY29tcGFyZXIgPSAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wKGVsZW1lbnQudmFsdWUpID09PSBwcm9wKHZhbHVlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21wYXJlciA9IChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3AoZWxlbWVudCkgPT09IHByb3AodmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuZGF0YVNlcnZpY2UuZmluZEluZGV4KGNvbXBhcmVyKTtcbiAgICAgICAgcmVzdWx0LmRhdGFJdGVtID0gdGhpcy5kYXRhU2VydmljZS5pdGVtQXQoaW5kZXgpO1xuICAgICAgICByZXN1bHQuaW5kZXggPSBpbmRleDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc2V0U3RhdGUoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVGaWVsZCA9IHRoaXMudmFsdWVGaWVsZDtcbiAgICAgICAgY29uc3QgdGV4dEZpZWxkID0gdGhpcy50ZXh0RmllbGQ7XG4gICAgICAgIGNvbnN0IHByaW1pdGl2ZSA9IHRoaXMudmFsdWVQcmltaXRpdmU7XG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRJdGVtKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0aGlzLnByb3AodmFsdWVGaWVsZCwgcHJpbWl0aXZlKSh0aGlzLmRlZmF1bHRJdGVtKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMucHJvcCh2YWx1ZUZpZWxkLCBwcmltaXRpdmUpKHZhbHVlKTtcbiAgICAgICAgICAgIGlmICghaXNQcmVzZW50KHZhbHVlKSB8fCAoY3VycmVudFZhbHVlID09PSBkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSh7IGRhdGFJdGVtOiB0aGlzLmRlZmF1bHRJdGVtLCBjb25maXJtOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzZXRTZWxlY3Rpb24oLTEpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcmFibGUgJiYgdGhpcy5maWx0ZXJUZXh0ICYmIHRoaXMuZGF0YVNlcnZpY2UuaXRlbXNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA9IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gdGhpcy5maW5kRGF0YUl0ZW0oeyBwcmltaXRpdmUsIHZhbHVlRmllbGQsIHZhbHVlIH0pO1xuICAgICAgICAvLyBUaGUgZGF0YSBhbmQgdmFsdWUgYXJlIG9mIHNhbWUgc2hhcGUsXG4gICAgICAgIC8vIGZvciBleGFtcGxlLCB2YWx1ZTogJ2ZvbycsIGRhdGE6IFsnZm9vJywgJ2JhciddXG4gICAgICAgIC8vIG9yIHZhbHVlOiB7IHZhbHVlOiAxLCB0ZXh0OiAnZm9vJyB9LCBkYXRhOiBbeyB2YWx1ZTogMSwgdGV4dDogJ2ZvbycgfV0uXG4gICAgICAgIGNvbnN0IG9mU2FtZVR5cGUgPSAhKHByaW1pdGl2ZSAmJiB0ZXh0RmllbGQpO1xuICAgICAgICBpZiAocmVzb2x2ZWQuZGF0YUl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoeyBkYXRhSXRlbTogcmVzb2x2ZWQuZGF0YUl0ZW0sIGNvbmZpcm06IHRydWUgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uKHJlc29sdmVkLmluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1ByZXNlbnQodmFsdWUpICYmIG9mU2FtZVR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdGUoeyBkYXRhSXRlbTogdmFsdWUgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fcHJldmlvdXNEYXRhSXRlbSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTdGF0ZSh7IGRhdGFJdGVtOiB0aGlzLl9wcmV2aW91c0RhdGFJdGVtIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXNldFNlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbGVhclN0YXRlKCk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0U2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUZpbHRlcihldmVudCkge1xuICAgICAgICB0aGlzLmZpbHRlckNoYW5nZS5lbWl0KGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYWdlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWwgPSB0aGlzLnZpcnR1YWw7XG4gICAgICAgIHZpcnR1YWwuc2tpcCA9IGV2ZW50LnNraXA7XG4gICAgfVxuICAgIHNldE1lc3NhZ2VzKCkge1xuICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm1lc3NhZ2VzVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubm9EYXRhVGV4dCA9IHRoaXMubG9jYWxpemF0aW9uLmdldCgnbm9EYXRhVGV4dCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXNzaWduQXJpYURlc2NyaWJlZEJ5KCkge1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKSB8fCAnJztcbiAgICAgICAgY29uc3QgdHJpbW1lZCA9IGN1cnJlbnRWYWx1ZS5yZXBsYWNlKHRoaXMudmFsdWVMYWJlbElkLCAnJykudHJpbSgpO1xuICAgICAgICAvLyByZXNldCB0aGUgdmFsdWUgbGFiZWwgSUQgdG8gZm9yY2UgcmVhZGVycyB0byByZWFkIHRoZSBuZXcgdmFsdWVcbiAgICAgICAgdGhpcy52YWx1ZUxhYmVsSWQgPSBndWlkKCk7XG4gICAgICAgIC8vIGFkZCB0byB0aGUgY3VycmVudCB2YWx1ZSAtIGRvbid0IHJlcGxhY2UgaXRcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBgJHt0aGlzLnZhbHVlTGFiZWxJZH0gJHt0cmltbWVkfWAudHJpbSgpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldEF0dHJpYnV0ZSh0aGlzLndyYXBwZXIubmF0aXZlRWxlbWVudCwgJ2FyaWEtZGVzY3JpYmVkYnknLCBuZXdWYWx1ZSk7XG4gICAgfVxufVxuRHJvcERvd25MaXN0Q29tcG9uZW50LmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgZXhwb3J0QXM6ICdrZW5kb0Ryb3BEb3duTGlzdCcsXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIERST1BET1dOTElTVF9WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgICAgICAgICAgICAgRGF0YVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIFNlbGVjdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIE5hdmlnYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBEaXNhYmxlZEl0ZW1zU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgTG9jYWxpemF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTDEwTl9QUkVGSVgsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogJ2tlbmRvLmRyb3Bkb3dubGlzdCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogRmlsdGVyYWJsZURyb3BEb3duQ29tcG9uZW50QmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRHJvcERvd25MaXN0Q29tcG9uZW50KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBLZW5kb0lucHV0LCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBEcm9wRG93bkxpc3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAna2VuZG8tZHJvcGRvd25saXN0JyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bmctY29udGFpbmVyIGtlbmRvRHJvcERvd25MaXN0TG9jYWxpemVkTWVzc2FnZXNcbiAgICAgICAgICAgIGkxOG4tbm9EYXRhVGV4dD1cImtlbmRvLmRyb3Bkb3dubGlzdC5ub0RhdGFUZXh0fFRoZSB0ZXh0IGRpc3BsYXllZCBpbiB0aGUgcG9wdXAgd2hlbiB0aGVyZSBhcmUgbm8gaXRlbXNcIlxuICAgICAgICAgICAgbm9EYXRhVGV4dD1cIk5PIERBVEEgRk9VTkRcIlxuICAgICAgICA+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8c3BhbiAjd3JhcHBlciB1bnNlbGVjdGFibGU9XCJvblwiXG4gICAgICAgICAgcm9sZT1cImxpc3Rib3hcIlxuICAgICAgICAgIFtpZF09XCJmb2N1c2FibGVJZFwiXG4gICAgICAgICAgW25nQ2xhc3NdPVwie1xuICAgICAgICAgICAgJ2stZHJvcGRvd24td3JhcCc6IHRydWUsXG4gICAgICAgICAgICAnay1zdGF0ZS1kZWZhdWx0JzogIXRoaXMuZGlzYWJsZWQsXG4gICAgICAgICAgICAnay1zdGF0ZS1kaXNhYmxlZCc6IHRoaXMuZGlzYWJsZWRcbiAgICAgICAgICB9XCJcbiAgICAgICAgICBbYXR0ci5kaXJdPVwiZGlyZWN0aW9uXCJcbiAgICAgICAgICBbYXR0ci5yZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgW2F0dHIudGFiaW5kZXhdPVwid2lkZ2V0VGFiSW5kZXhcIlxuICAgICAgICAgIFthdHRyLmFyaWEtZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgIFthdHRyLmFyaWEtcmVhZG9ubHldPVwicmVhZG9ubHlcIlxuICAgICAgICAgIGFyaWEtaGFzcG9wdXA9XCJsaXN0Ym94XCJcbiAgICAgICAgICBbYXR0ci5hcmlhLWV4cGFuZGVkXT1cImFyaWFFeHBhbmRlZFwiXG4gICAgICAgICAgW2F0dHIuYXJpYS1vd25zXT1cImFyaWFPd25zXCJcbiAgICAgICAgICBbYXR0ci5hcmlhLWFjdGl2ZWRlc2NlbmRhbnRdPVwiYXJpYUFjdGl2ZWRlc2NlbmRhbnRcIlxuICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwibm9EYXRhTGFiZWxcIlxuICAgICAgICAgIChrZXlkb3duKT1cImtleWRvd24oJGV2ZW50KVwiXG4gICAgICAgICAgKGtleXByZXNzKT1cImtleXByZXNzKCRldmVudClcIlxuICAgICAgICAgIChjbGljayk9XCJjbGljaygkZXZlbnQpXCJcbiAgICAgICAgICBba2VuZG9FdmVudHNPdXRzaWRlQW5ndWxhcl09XCJ7XG4gICAgICAgICAgICBmb2N1czogZm9jdXNDb21wb25lbnQsXG4gICAgICAgICAgICBibHVyOiBibHVyQ29tcG9uZW50XG4gICAgICAgICAgICB9XCJcbiAgICAgICAgICBbc2NvcGVdPVwidGhpc1wiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiay1pbnB1dFwiIHVuc2VsZWN0YWJsZT1cIm9uXCIgW2lkXT1cInZhbHVlTGFiZWxJZFwiPlxuICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwidmFsdWVUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiB2YWx1ZVRlbXBsYXRlLnRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAkaW1wbGljaXQ6IGRhdGFJdGVtXG4gICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCIhdmFsdWVUZW1wbGF0ZVwiPnt7IGdldFRleHQoKSB9fTwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJrLXNlbGVjdFwiIHVuc2VsZWN0YWJsZT1cIm9uXCI+XG4gICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImstaWNvblwiXG4gICAgICAgICAgICAgICAgICAgIHVuc2VsZWN0YWJsZT1cIm9uXCJcbiAgICAgICAgICAgICAgICAgICAgW25nQ2xhc3NdPVwiYnV0dG9uQ2xhc3Nlc1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICA8bmctdGVtcGxhdGUgI3BvcHVwVGVtcGxhdGU+XG4gICAgICAgICAgICAgICA8IS0tZmlsdGVyYWJsZS0tPlxuXG4gICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiZmlsdGVyYWJsZVwiPlxuICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiay1saXN0LWZpbHRlclwiIChjbGljayk9XCIkZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbYXR0ci5hcmlhLW93bnNdPVwiYXJpYU93bnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2F0dHIuYXJpYS1hY3RpdmVkZXNjZW5kYW50XT1cImFyaWFBY3RpdmVkZXNjZW5kYW50XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwibm9EYXRhTGFiZWxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBbZmlsdGVySW5wdXRdPVwiaXNGb2N1c2VkICYmICF0b3VjaEVuYWJsZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2Rpcl09XCJkaXJlY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XCJmaWx0ZXJUZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiay10ZXh0Ym94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChrZXlkb3duKT1cImtleWRvd24oJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoaW5wdXQpPVwiaGFuZGxlRmlsdGVyKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvY3VzKT1cIm9uRmlsdGVyRm9jdXMoKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoYmx1cik9XCJibHVyRmlsdGVySW5wdXQoKVwiIC8+XG4gICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1zZWFyY2hcIiB1bnNlbGVjdGFibGU9XCJvblwiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgPCEtLWRlZmF1bHQgaXRlbS0tPlxuICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cImRlZmF1bHRJdGVtICYmICFpdGVtVGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiay1saXN0LW9wdGlvbmxhYmVsXCIgW25nQ2xhc3NdPVwieyAnay1zdGF0ZS1kaXNhYmxlZCc6IGlzRGlzYWJsZWREZWZhdWx0SXRlbSB9XCIga2VuZG9Ecm9wRG93bnNTZWxlY3RhYmxlIFtpbmRleF09XCItMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICB7eyBnZXREZWZhdWx0SXRlbVRleHQoKSB9fVxuICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdJZl09XCJkZWZhdWx0SXRlbSAmJiBpdGVtVGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiay1saXN0LW9wdGlvbmxhYmVsXCIgW25nQ2xhc3NdPVwieyAnay1zdGF0ZS1kaXNhYmxlZCc6IGlzRGlzYWJsZWREZWZhdWx0SXRlbSB9XCIga2VuZG9Ecm9wRG93bnNTZWxlY3RhYmxlIFtpbmRleF09XCItMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiBpdGVtVGVtcGxhdGUudGVtcGxhdGVSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltcGxpY2l0OiBkZWZhdWx0SXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgIDwhLS1oZWFkZXIgdGVtcGxhdGUtLT5cbiAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdJZj1cImhlYWRlclRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IGhlYWRlclRlbXBsYXRlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgIDwhLS1saXN0LS0+XG4gICAgICAgICAgICAgICA8a2VuZG8tbGlzdFxuICAgICAgICAgICAgICAgICAgICNvcHRpb25zTGlzdFxuICAgICAgICAgICAgICAgICAgIFtpZF09XCJsaXN0Qm94SWRcIlxuICAgICAgICAgICAgICAgICAgIFtvcHRpb25QcmVmaXhdPVwib3B0aW9uUHJlZml4XCJcbiAgICAgICAgICAgICAgICAgICBbZGF0YV09XCJkYXRhXCJcbiAgICAgICAgICAgICAgICAgICBbdGV4dEZpZWxkXT1cInRleHRGaWVsZFwiXG4gICAgICAgICAgICAgICAgICAgW3ZhbHVlRmllbGRdPVwidmFsdWVGaWVsZFwiXG4gICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW1UZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgW2dyb3VwVGVtcGxhdGVdPVwiZ3JvdXBUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgW2ZpeGVkR3JvdXBUZW1wbGF0ZV09XCJmaXhlZEdyb3VwVGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgICAgIFtoZWlnaHRdPVwibGlzdEhlaWdodFwiXG4gICAgICAgICAgICAgICAgICAgW3Nob3ddPVwiaXNPcGVuXCJcbiAgICAgICAgICAgICAgICAgICBbdmlydHVhbF09XCJ2aXJ0dWFsXCJcbiAgICAgICAgICAgICAgICAgICAocGFnZUNoYW5nZSk9XCJwYWdlQ2hhbmdlKCRldmVudClcIlxuICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgIDwva2VuZG8tbGlzdD5cbiAgICAgICAgICAgICAgIDwhLS1uby1kYXRhIHRlbXBsYXRlLS0+XG4gICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiay1ub2RhdGFcIiAqbmdJZj1cImRhdGEubGVuZ3RoID09PSAwXCI+XG4gICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIm5vRGF0YVRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlZjogbm9EYXRhVGVtcGxhdGUgPyBub0RhdGFUZW1wbGF0ZS50ZW1wbGF0ZVJlZiA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIW5vRGF0YVRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgIDxkaXY+e3sgbm9EYXRhVGV4dCB9fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgIDwhLS1mb290ZXIgdGVtcGxhdGUtLT5cbiAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdJZj1cImZvb3RlclRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IGZvb3RlclRlbXBsYXRlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cImlzT3BlblwiPlxuICAgICAgICAgICAgPGtlbmRvLXJlc2l6ZS1zZW5zb3IgKHJlc2l6ZSk9XCJvblJlc2l6ZSgpXCI+PC9rZW5kby1yZXNpemUtc2Vuc29yPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8bmctY29udGFpbmVyICNjb250YWluZXI+PC9uZy1jb250YWluZXI+XG4gIGBcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuRHJvcERvd25MaXN0Q29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogTG9jYWxpemF0aW9uU2VydmljZSB9LFxuICAgIHsgdHlwZTogUG9wdXBTZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBTZWxlY3Rpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBOYXZpZ2F0aW9uU2VydmljZSB9LFxuICAgIHsgdHlwZTogRGlzYWJsZWRJdGVtc1NlcnZpY2UgfSxcbiAgICB7IHR5cGU6IERhdGFTZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBOZ1pvbmUgfSxcbiAgICB7IHR5cGU6IFJlbmRlcmVyMiB9LFxuICAgIHsgdHlwZTogRWxlbWVudFJlZiB9LFxuICAgIHsgdHlwZTogQ2hhbmdlRGV0ZWN0b3JSZWYgfSxcbiAgICB7IHR5cGU6IEJvb2xlYW4sIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sIHsgdHlwZTogSW5qZWN0LCBhcmdzOiBbVE9VQ0hfRU5BQkxFRCxdIH1dIH1cbl07XG5Ecm9wRG93bkxpc3RDb21wb25lbnQucHJvcERlY29yYXRvcnMgPSB7XG4gICAgZm9jdXNhYmxlSWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGljb25DbGFzczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbG9hZGluZzogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZGF0YTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRleHRGaWVsZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWVGaWVsZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcG9wdXBTZXR0aW5nczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbGlzdEhlaWdodDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZGVmYXVsdEl0ZW06IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGRpc2FibGVkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBpdGVtRGlzYWJsZWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHJlYWRvbmx5OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBmaWx0ZXJhYmxlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2aXJ0dWFsOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBpZ25vcmVDYXNlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBkZWxheTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWVQcmltaXRpdmU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRhYmluZGV4OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0YWJJbmRleDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFtcInRhYkluZGV4XCIsXSB9XSxcbiAgICB2YWx1ZUNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIGZpbHRlckNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIHNlbGVjdGlvbkNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9wZW46IFt7IHR5cGU6IE91dHB1dCB9XSxcbiAgICBjbG9zZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIG9uRm9jdXM6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydmb2N1cycsXSB9XSxcbiAgICBvbkJsdXI6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWydibHVyJyxdIH1dLFxuICAgIGl0ZW1UZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbSXRlbVRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgZ3JvdXBUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIGZpeGVkR3JvdXBUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbRml4ZWRHcm91cFRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgdmFsdWVUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbVmFsdWVUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIGhlYWRlclRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIGZvb3RlclRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtGb290ZXJUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIG5vRGF0YVRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtOb0RhdGFUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIGNvbnRhaW5lcjogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ2NvbnRhaW5lcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9LF0gfV0sXG4gICAgcG9wdXBUZW1wbGF0ZTogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ3BvcHVwVGVtcGxhdGUnLF0gfV0sXG4gICAgd3JhcHBlcjogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ3dyYXBwZXInLCB7IHN0YXRpYzogdHJ1ZSB9LF0gfV0sXG4gICAgb3B0aW9uc0xpc3Q6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydvcHRpb25zTGlzdCcsXSB9XSxcbiAgICB3aWRnZXRDbGFzc2VzOiBbeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLXdpZGdldCcsXSB9LCB7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstZHJvcGRvd24nLF0gfSwgeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLWhlYWRlcicsXSB9XSxcbiAgICBkaXI6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2F0dHIuZGlyJyxdIH1dXG59O1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cbi8qKlxuICogUmVuZGVycyB0aGUgY29udGVudCBvZiB0aGUgY3VzdG9tIGxpc3QgaXRlbSBpbiB0aGUgTXVsdGlTZWxlY3RcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgdGVtcGxhdGVzX211bHRpc2VsZWN0ICV9I3RvYy1jdXN0b21pemluZy10aGUtaXRlbS1jb250ZW50KSkuXG4gKiBUaGUgdGVtcGxhdGUgY29udGV4dCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICogVG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHRleHQgdGhhdCBpcyB0eXBlZCBieSB0aGVcbiAqIHVzZXIsIHVzZSB0aGUgYGxldC1jdXN0b21JdGVtYCBkaXJlY3RpdmUuXG4gKlxuICogPiBUaGUgYEN1c3RvbUl0ZW1UZW1wbGF0ZWAgZGlyZWN0aXZlIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCB0aGUgTXVsdGlTZWxlY3QgY29tcG9uZW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogX0BDb21wb25lbnQoe1xuICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICogdGVtcGxhdGU6IGBcbiAqICA8a2VuZG8tbXVsdGlzZWxlY3QgW2RhdGFdPVwibGlzdEl0ZW1zXCIgW2FsbG93Q3VzdG9tXT1cInRydWVcIj5cbiAqICAgIDxuZy10ZW1wbGF0ZSBrZW5kb011bHRpU2VsZWN0Q3VzdG9tSXRlbVRlbXBsYXRlIGxldC1jdXN0b21JdGVtPlxuICogICAgICA8c3Bhbj5OZXcgSXRlbToge3tjdXN0b21JdGVtfX08L3NwYW4+XG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogIDwva2VuZG8tbXVsdGlzZWxlY3Q+XG4gKiBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGxpc3RJdGVtczogQXJyYXk8c3RyaW5nPiA9IFtcIkl0ZW0gMVwiLCBcIkl0ZW0gMlwiLCBcIkl0ZW0gM1wiLCBcIkl0ZW0gNFwiXTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqL1xuY2xhc3MgQ3VzdG9tSXRlbVRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZikge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWY7XG4gICAgfVxufVxuQ3VzdG9tSXRlbVRlbXBsYXRlRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9NdWx0aVNlbGVjdEN1c3RvbUl0ZW1UZW1wbGF0ZV0nXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkN1c3RvbUl0ZW1UZW1wbGF0ZURpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IFRlbXBsYXRlUmVmIH1cbl07XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBSZW5kZXJzIHRoZSBzZWxlY3RlZCB0YWcgdmFsdWUgb2YgdGhlIE11bHRpU2VsZWN0XG4gKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHRlbXBsYXRlc19tdWx0aXNlbGVjdCAlfSN0b2MtdGFnLXRlbXBsYXRlKSkuXG4gKiBUaGUgdGVtcGxhdGUgY29udGV4dCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICogVG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGRhdGEgaXRlbSwgdXNlIHRoZSBgbGV0LWRhdGFJdGVtYCBkaXJlY3RpdmUuXG4gKlxuICogPiBUaGUgYFRhZ1RlbXBsYXRlYCBkaXJlY3RpdmUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIHRoZSBNdWx0aVNlbGVjdCBjb21wb25lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1tdWx0aXNlbGVjdCBbZGF0YV09XCJpdGVtc1wiPlxuICogICAgPG5nLXRlbXBsYXRlIGtlbmRvTXVsdGlTZWxlY3RUYWdUZW1wbGF0ZSBsZXQtZGF0YUl0ZW0+XG4gKiAgICAgIDxzcGFuPnt7ZGF0YUl0ZW19fSBvcHRpb248L3NwYW4+XG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogIDwva2VuZG8tbXVsdGlzZWxlY3Q+XG4gKiBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW1wiSXRlbSAxXCIsIFwiSXRlbSAyXCIsIFwiSXRlbSAzXCIsIFwiSXRlbSA0XCJdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIFRhZ1RlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZikge1xuICAgICAgICB0aGlzLnRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWY7XG4gICAgfVxufVxuVGFnVGVtcGxhdGVEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1trZW5kb011bHRpU2VsZWN0VGFnVGVtcGxhdGVdJ1xuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5UYWdUZW1wbGF0ZURpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IFRlbXBsYXRlUmVmIH1cbl07XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuLyoqXG4gKiBSZW5kZXJzIHRoZSBncm91cGVkIHRhZyB2YWx1ZXMgaW4gdGhlIE11bHRpU2VsZWN0XG4gKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHN1bW1hcnl0YWdtb2RlX211bHRpc2VsZWN0ICV9KSkuXG4gKiBUaGUgdGVtcGxhdGUgY29udGV4dCBpcyBzZXQgdG8gdGhlIGN1cnJlbnQgY29tcG9uZW50LlxuICogVG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGdyb3VwZWRcbiAqIGRhdGEgaXRlbXMgY29sbGVjdGlvbiwgdXNlIHRoZSBgbGV0LWRhdGFJdGVtc2AgZGlyZWN0aXZlLlxuICpcbiAqID4gVGhlIGBHcm91cFRhZ1RlbXBsYXRlYCBkaXJlY3RpdmUgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIHRoZSBNdWx0aVNlbGVjdCBjb21wb25lbnQuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1tdWx0aXNlbGVjdCBrZW5kb011bHRpU2VsZWN0U3VtbWFyeVRhZyBbZGF0YV09XCJpdGVtc1wiPlxuICogICAgPG5nLXRlbXBsYXRlIGtlbmRvTXVsdGlTZWxlY3RHcm91cFRhZ1RlbXBsYXRlIGxldC1kYXRhSXRlbXM+XG4gKiAgICAgIDxzcGFuPnt7ZGF0YUl0ZW1zLmxlbmd0aH19IGl0ZW0ocykgc2VsZWN0ZWQ8L3NwYW4+XG4gKiAgICA8L25nLXRlbXBsYXRlPlxuICogIDwva2VuZG8tbXVsdGlzZWxlY3Q+XG4gKiBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW1wiSXRlbSAxXCIsIFwiSXRlbSAyXCIsIFwiSXRlbSAzXCIsIFwiSXRlbSA0XCJdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIEdyb3VwVGFnVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZjtcbiAgICB9XG59XG5Hcm91cFRhZ1RlbXBsYXRlRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9NdWx0aVNlbGVjdEdyb3VwVGFnVGVtcGxhdGVdJ1xuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5Hcm91cFRhZ1RlbXBsYXRlRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogVGVtcGxhdGVSZWYgfVxuXTtcblxuLyoqXG4gKiBBcmd1bWVudHMgZm9yIHRoZSBgcmVtb3ZlVGFnYCBldmVudC4gVGhlIGByZW1vdmVUYWdgIGV2ZW50IGZpcmVzIHdoZW4gYSB0YWcgaXMgYWJvdXRcbiAqIHRvIHRoZSByZW1vdmVkLiBJZiB5b3UgY2FuY2VsIHRoZSBldmVudCwgdGhlIHJlbW92YWwgaXMgcHJldmVudGVkLlxuICovXG5jbGFzcyBSZW1vdmVUYWdFdmVudCBleHRlbmRzIFByZXZlbnRhYmxlRXZlbnQge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgdGhlIGV2ZW50IGFyZ3VtZW50cyBmb3IgdGhlIGByZW1vdmVgIGV2ZW50LlxuICAgICAqIEBwYXJhbSBkYXRhSXRlbSAtIFRoZSBkYXRhIGl0ZW0gb3IgYW4gYXJyYXkgb2YgZGF0YSBpdGVtcyB0aGF0IHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhSXRlbSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmRhdGFJdGVtID0gZGF0YUl0ZW07XG4gICAgfVxufVxuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptZW1iZXItb3JkZXJpbmcgKi9cbmNvbnN0IE1VTFRJU0VMRUNUX1ZBTFVFX0FDQ0VTU09SID0ge1xuICAgIG11bHRpOiB0cnVlLFxuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11c2UtYmVmb3JlLWRlY2xhcmVcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNdWx0aVNlbGVjdENvbXBvbmVudClcbn07XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIFtLZW5kbyBVSSBNdWx0aVNlbGVjdCBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfbXVsdGlzZWxlY3QgJX0pLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogX0BDb21wb25lbnQoe1xuICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICogdGVtcGxhdGU6IGBcbiAqICA8a2VuZG8tbXVsdGlzZWxlY3QgW2RhdGFdPVwibGlzdEl0ZW1zXCI+XG4gKiAgPC9rZW5kby1tdWx0aXNlbGVjdD5cbiAqIGBcbiAqIH0pXG4gKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICBwdWJsaWMgbGlzdEl0ZW1zOiBBcnJheTxzdHJpbmc+ID0gW1wiSXRlbSAxXCIsIFwiSXRlbSAyXCIsIFwiSXRlbSAzXCIsIFwiSXRlbSA0XCJdO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIE11bHRpU2VsZWN0Q29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGl6YXRpb24sIHBvcHVwU2VydmljZSwgZGF0YVNlcnZpY2UsIHNlbGVjdGlvblNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlLCBkaXNhYmxlZEl0ZW1zU2VydmljZSwgY2RyLCBkaWZmZXJzLCByZW5kZXJlciwgaG9zdEVsZW1lbnQsIF96b25lLCB0b3VjaEVuYWJsZWQkJDEpIHtcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb24gPSBsb2NhbGl6YXRpb247XG4gICAgICAgIHRoaXMucG9wdXBTZXJ2aWNlID0gcG9wdXBTZXJ2aWNlO1xuICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlID0gZGF0YVNlcnZpY2U7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZSA9IHNlbGVjdGlvblNlcnZpY2U7XG4gICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UgPSBuYXZpZ2F0aW9uU2VydmljZTtcbiAgICAgICAgdGhpcy5kaXNhYmxlZEl0ZW1zU2VydmljZSA9IGRpc2FibGVkSXRlbXNTZXJ2aWNlO1xuICAgICAgICB0aGlzLmNkciA9IGNkcjtcbiAgICAgICAgdGhpcy5kaWZmZXJzID0gZGlmZmVycztcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICB0aGlzLmhvc3RFbGVtZW50ID0gaG9zdEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3pvbmUgPSBfem9uZTtcbiAgICAgICAgdGhpcy50b3VjaEVuYWJsZWQgPSB0b3VjaEVuYWJsZWQkJDE7XG4gICAgICAgIHRoaXMubGlzdEJveElkID0gZ3VpZCgpO1xuICAgICAgICB0aGlzLnRhZ0xpc3RJZCA9IGd1aWQoKTtcbiAgICAgICAgdGhpcy50YWdQcmVmaXggPSBcInRhZy1cIiArIGd1aWQoKTtcbiAgICAgICAgdGhpcy5vcHRpb25QcmVmaXggPSBcIm9wdGlvbi1cIiArIGd1aWQoKTtcbiAgICAgICAgdGhpcy5mb2N1c2VkVGFnSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaGlkZGVuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZvY3VzYWJsZUlkID0gYGstJHtndWlkKCl9YDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIERldGVybWluZXMgd2hldGhlciB0byBjbG9zZSB0aGUgb3B0aW9ucyBsaXN0IG9mIHRoZSBNdWx0aVNlbGVjdCBhZnRlciB0aGUgaXRlbSBzZWxlY3Rpb24gaXMgZmluaXNoZWRcbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvcGVuc3RhdGVfbXVsdGlzZWxlY3QgJX0jdG9jLWtlZXBpbmctdGhlLW9wdGlvbnMtbGlzdC1vcGVuLXdoaWxlLW9uLWZvY3VzKSkuXG4gICAgICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXV0b0Nsb3NlID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGUgW2B0YWJpbmRleGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXgpIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRhYmluZGV4ID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGRpc2FibGVkIHN0YXRlIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSByZWFkLW9ubHkgc3RhdGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhZG9ubHkgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZXMgdGhlIFtmaWx0ZXJpbmddKHslIHNsdWcgZmlsdGVyaW5nX211bHRpc2VsZWN0ICV9KSBmdW5jdGlvbmFsaXR5IG9mIHRoZSBNdWx0aVNlbGVjdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyYWJsZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBzdWdnZXN0aW9ucyBsaXN0LiBCeSBkZWZhdWx0LCBgbGlzdEhlaWdodGAgaXMgMjAwcHguXG4gICAgICAgICAqXG4gICAgICAgICAqID4gVGhlIGBsaXN0SGVpZ2h0YCBwcm9wZXJ0eSBhZmZlY3RzIG9ubHkgdGhlIGxpc3Qgb2Ygc3VnZ2VzdGlvbnMgYW5kIG5vdCB0aGUgd2hvbGUgcG9wdXAgY29udGFpbmVyLlxuICAgICAgICAgKiA+IFRvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBwb3B1cCBjb250YWluZXIsIHVzZSBgcG9wdXBTZXR0aW5ncy5oZWlnaHRgLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5saXN0SGVpZ2h0ID0gMjAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgc2V0IHRvIGB0cnVlYCwgcmVuZGVycyBhIGJ1dHRvbiBvbiBob3ZlcmluZyBvdmVyIHRoZSBjb21wb25lbnQuXG4gICAgICAgICAqIENsaWNraW5nIHRoaXMgYnV0dG9uIHJlc2V0cyB0aGUgdmFsdWUgb2YgdGhlIGNvbXBvbmVudCB0byBhbiBlbXB0eSBhcnJheSBhbmQgdHJpZ2dlcnMgdGhlIGBjaGFuZ2VgIGV2ZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jbGVhckJ1dHRvbiA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHVzZXItZGVmaW5lZCBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCByZWNlaXZlcyBhbiBhcnJheSBvZiBzZWxlY3RlZCBkYXRhIGl0ZW1zIGFuZCBtYXBzIHRoZW0gdG8gYW4gYXJyYXkgb2YgdGFncy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsgQW55W10gfSBkYXRhSXRlbXMgLSBUaGUgc2VsZWN0ZWQgZGF0YSBpdGVtcyBmcm9tIHRoZSBsaXN0LlxuICAgICAgICAgKiBAcmV0dXJucyB7IEFueVtdIH0gLSBUaGUgdGFncyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgYnkgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudGFnTWFwcGVyID0gKHRhZ3MpID0+IHRhZ3MgfHwgW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgTXVsdGlTZWxlY3QgYWxsb3dzIHVzZXItZGVmaW5lZCB2YWx1ZXMgdGhhdCBhcmUgbm90IHByZXNlbnQgaW4gdGhlIGRhdGFzZXRcbiAgICAgICAgICogKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlc10oeyUgc2x1ZyBjdXN0b21fdmFsdWVzX211bHRpc2VsZWN0ICV9KSkuXG4gICAgICAgICAqIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFsbG93Q3VzdG9tID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHVzZXItZGVmaW5lZCBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCByZXR1cm5zIG5vcm1hbGl6ZWQgY3VzdG9tIHZhbHVlcy5cbiAgICAgICAgICogVHlwaWNhbGx5IHVzZWQgd2hlbiB0aGUgZGF0YSBpdGVtcyBhcmUgZGlmZmVyZW50IGZyb20gdHlwZSBgc3RyaW5nYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHsgQW55IH0gdmFsdWUgLSBUaGUgY3VzdG9tIHZhbHVlIHRoYXQgaXMgZGVmaW5lZCBieSB0aGUgdXNlci5cbiAgICAgICAgICogQHJldHVybnMgeyBBbnkgfVxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKiBgYGB0c1xuICAgICAgICAgKiBpbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG4gICAgICAgICAqXG4gICAgICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgICAgICogc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAgICAgKiB0ZW1wbGF0ZTogYFxuICAgICAgICAgKiAgIDxrZW5kby1tdWx0aXNlbGVjdFxuICAgICAgICAgKiAgICAgICBbYWxsb3dDdXN0b21dPVwidHJ1ZVwiXG4gICAgICAgICAqICAgICAgIFtkYXRhXT1cImxpc3RJdGVtc1wiXG4gICAgICAgICAqICAgICAgIFt0ZXh0RmllbGRdPVwiJ3RleHQnXCJcbiAgICAgICAgICogICAgICAgW3ZhbHVlRmllbGRdPVwiJ3ZhbHVlJ1wiXG4gICAgICAgICAqICAgICAgIFt2YWx1ZU5vcm1hbGl6ZXJdPVwidmFsdWVOb3JtYWxpemVyXCJcbiAgICAgICAgICogICAgICAgKHZhbHVlQ2hhbmdlKT1cIm9uVmFsdWVDaGFuZ2UoJGV2ZW50KVwiXG4gICAgICAgICAqICAgPlxuICAgICAgICAgKiAgIDwva2VuZG8tbXVsdGlzZWxlY3Q+XG4gICAgICAgICAqIGBcbiAgICAgICAgICogfSlcbiAgICAgICAgICpcbiAgICAgICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAgICAgICAgICogICBwdWJsaWMgbGlzdEl0ZW1zOiBBcnJheTx7IHRleHQ6IHN0cmluZywgdmFsdWU6IG51bWJlciB9PiA9IFtcbiAgICAgICAgICogICAgICAgeyB0ZXh0OiBcIlNtYWxsXCIsIHZhbHVlOiAxIH0sXG4gICAgICAgICAqICAgICAgIHsgdGV4dDogXCJNZWRpdW1cIiwgdmFsdWU6IDIgfSxcbiAgICAgICAgICogICAgICAgeyB0ZXh0OiBcIkxhcmdlXCIsIHZhbHVlOiAzIH1cbiAgICAgICAgICogICBdO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgIHB1YmxpYyBvblZhbHVlQ2hhbmdlKHZhbHVlKSB7XG4gICAgICAgICAqICAgICAgIGNvbnNvbGUubG9nKFwidmFsdWVDaGFuZ2UgOiBcIiwgdmFsdWUpO1xuICAgICAgICAgKiAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICBwdWJsaWMgdmFsdWVOb3JtYWxpemVyID0gKHRleHQkOiBPYnNlcnZhYmxlPHN0cmluZz4pID0+IHRleHQkLnBpcGUobWFwKCh0ZXh0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICogICAgICByZXR1cm4ge1xuICAgICAgICAgKiAgICAgICAgIHZhbHVlOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMTAwMCAtIDEwMCkgKyAxMDAwKSwgLy9nZW5lcmF0ZSB1bmlxdWUgdmFsdWVGaWVsZFxuICAgICAgICAgKiAgICAgICAgIHRleHQ6IHRleHQgfTtcbiAgICAgICAgICogICB9KSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIH1cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbHVlTm9ybWFsaXplciA9ICh0ZXh0KSA9PiB0ZXh0LnBpcGUobWFwKCh1c2VySW5wdXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBhcmVyID0gKGl0ZW0pID0+IHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJyAmJiB1c2VySW5wdXQudG9Mb3dlckNhc2UoKSA9PT0gaXRlbS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdWYWx1ZSA9IHRoaXMudmFsdWUuZmluZChjb21wYXJlcik7XG4gICAgICAgICAgICBpZiAobWF0Y2hpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGluZ1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbWF0Y2hpbmdJdGVtID0gdGhpcy5kYXRhU2VydmljZS5maW5kKGNvbXBhcmVyKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGluZ0l0ZW0gPyBtYXRjaGluZ0l0ZW0gOiB1c2VySW5wdXQ7XG4gICAgICAgIH0pKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciB0eXBlcyBpbiB0aGUgaW5wdXQgZmllbGQuXG4gICAgICAgICAqIFlvdSBjYW4gZmlsdGVyIHRoZSBzb3VyY2UgYmFzZWQgb24gdGhlIHBhc3NlZCBmaWx0cmF0aW9uIHZhbHVlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHZhbHVlIGlzIGNoYW5nZWQmbWRhc2g7XG4gICAgICAgICAqIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBibHVycmVkIG9yIHRoZSB2YWx1ZSBpcyBjbGVhcmVkIHRocm91Z2ggdGhlICoqQ2xlYXIqKiBidXR0b25cbiAgICAgICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld19tdWx0aXNlbGVjdCAlfSN0b2MtZXZlbnRzKSkuXG4gICAgICAgICAqIFdoZW4gdGhlIHZhbHVlIG9mIHRoZSBjb21wb25lbnQgaXMgcHJvZ3JhbW1hdGljYWxseSBjaGFuZ2VkIHRvIGBuZ01vZGVsYCBvciBgZm9ybUNvbnRyb2xgXG4gICAgICAgICAqIHRocm91Z2ggaXRzIEFQSSBvciBmb3JtIGJpbmRpbmcsIHRoZSBgdmFsdWVDaGFuZ2VgIGV2ZW50IGlzIG5vdCB0cmlnZ2VyZWQgYmVjYXVzZSBpdFxuICAgICAgICAgKiBtaWdodCBjYXVzZSBhIG1peC11cCB3aXRoIHRoZSBidWlsdC1pbiBgdmFsdWVDaGFuZ2VgIG1lY2hhbmlzbXMgb2YgdGhlIGBuZ01vZGVsYCBvciBgZm9ybUNvbnRyb2xgIGJpbmRpbmdzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgcG9wdXAgaXMgYWJvdXQgdG8gb3BlblxuICAgICAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIG9wZW5zdGF0ZV9tdWx0aXNlbGVjdCAlfSN0b2MtcHJldmVudGluZy1vcGVuaW5nLWFuZC1jbG9zaW5nKSkuXG4gICAgICAgICAqIFRoaXMgZXZlbnQgaXMgcHJldmVudGFibGUuIElmIHlvdSBjYW5jZWwgaXQsIHRoZSBwb3B1cCB3aWxsIHJlbWFpbiBjbG9zZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9wZW4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHBvcHVwIGlzIGFib3V0IHRvIGNsb3NlXG4gICAgICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3BlbnN0YXRlX211bHRpc2VsZWN0ICV9I3RvYy1wcmV2ZW50aW5nLW9wZW5pbmctYW5kLWNsb3NpbmcpKS5cbiAgICAgICAgICogVGhpcyBldmVudCBpcyBwcmV2ZW50YWJsZS4gSWYgeW91IGNhbmNlbCBpdCwgdGhlIHBvcHVwIHdpbGwgcmVtYWluIG9wZW4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIGZvY3VzZXMgdGhlIE11bHRpU2VsZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbkZvY3VzID0gbmV3IEV2ZW50RW1pdHRlcigpOyAvL3RzbGludDpkaXNhYmxlLWxpbmU6bm8tb3V0cHV0LXJlbmFtZVxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSBNdWx0aVNlbGVjdCBnZXRzIGJsdXJyZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXIoKTsgLy90c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLW91dHB1dC1yZW5hbWVcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVzIGVhY2ggdGltZSBhIHRhZyBpcyBhYm91dCB0byBiZSByZW1vdmVkLlxuICAgICAgICAgKiBUaGlzIGV2ZW50IGlzIHByZXZlbnRhYmxlLiBJZiB5b3UgY2FuY2VsIGl0LCB0aGUgdGFnIHdpbGwgbm90IGJlIHJlbW92ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlbW92ZVRhZyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy53aWRnZXRDbGFzc2VzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2sgPSAoXykgPT4geyB9O1xuICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrID0gKF8pID0+IHsgfTtcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIgPSAnJztcbiAgICAgICAgdGhpcy5fb3BlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl92YWx1ZSA9IFtdO1xuICAgICAgICB0aGlzLl9wb3B1cFNldHRpbmdzID0geyBhbmltYXRlOiB0cnVlIH07XG4gICAgICAgIHRoaXMuX2lzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YUl0ZW1zID0gW107XG4gICAgICAgIHRoaXMuY3VzdG9tVmFsdWVTdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlU3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgdGhpcy5wb3B1cE1vdXNlRG93bkhhbmRsZXIgPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMubG9jYWxpemF0aW9uLnJ0bCA/ICdydGwnIDogJ2x0cic7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlRXZlbnRzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIE11bHRpU2VsZWN0LlxuICAgICAqL1xuICAgIGZvY3VzKCkge1xuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoYmFyLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uU2VhcmNoQmFyRm9jdXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChoYXNPYnNlcnZlcnModGhpcy5vbkZvY3VzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkZvY3VzLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBCbHVycyB0aGUgTXVsdGlTZWxlY3QuXG4gICAgICovXG4gICAgYmx1cigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhci5ibHVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uU2VhcmNoQmFyQmx1cigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIGlmIChoYXNPYnNlcnZlcnModGhpcy5vbkJsdXIpIHx8XG4gICAgICAgICAgICBoYXNPYnNlcnZlcnModGhpcy5maWx0ZXJDaGFuZ2UpIHx8XG4gICAgICAgICAgICBoYXNPYnNlcnZlcnModGhpcy5jbG9zZSkgfHxcbiAgICAgICAgICAgIGlzVW50b3VjaGVkKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUG9wdXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmlzT3BlbiAmJiB0aGlzLmFsbG93Q3VzdG9tKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMub25CbHVyLmVtaXQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxvd0N1c3RvbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3cmFwcGVyTW91c2Vkb3duKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHRoaXMuc2VhcmNoYmFyLmlucHV0Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRm9jdXNlZCAmJiB0aGlzLmlzT3BlbiAmJiBldmVudC50YXJnZXQgPT09IGlucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy50b3VjaEVuYWJsZWQgfHwgKHRoaXMudG91Y2hFbmFibGVkICYmIGV2ZW50LnRhcmdldC50YWdOYW1lICE9PSAnU1BBTicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hiYXIuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoIXRoaXMuaXNPcGVuKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uTW91c2VEb3duKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvblJlc2l6ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX29wZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvcHVwV3JhcHBlciA9IHRoaXMucG9wdXBSZWYucG9wdXBFbGVtZW50O1xuICAgICAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy53aWR0aDtcbiAgICAgICAgICAgIHBvcHVwV3JhcHBlci5zdHlsZS5taW5XaWR0aCA9IG1pbjtcbiAgICAgICAgICAgIHBvcHVwV3JhcHBlci5zdHlsZS53aWR0aCA9IG1heDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgYXBwZW5kVG8oKSB7XG4gICAgICAgIGNvbnN0IHsgYXBwZW5kVG8gfSA9IHRoaXMucG9wdXBTZXR0aW5ncztcbiAgICAgICAgaWYgKCFhcHBlbmRUbyB8fCBhcHBlbmRUbyA9PT0gJ3Jvb3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBlbmRUbyA9PT0gJ2NvbXBvbmVudCcgPyB0aGlzLmNvbnRhaW5lciA6IGFwcGVuZFRvO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkYXRhIG9mIHRoZSBNdWx0aVNlbGVjdC5cbiAgICAgKlxuICAgICAqID4gVGhlIGRhdGEgaGFzIHRvIGJlIHByb3ZpZGVkIGluIGFuIGFycmF5LWxpa2UgbGlzdCBvZiBpdGVtcy5cbiAgICAgKi9cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuZGF0YVNlcnZpY2UuZGF0YSA9IGRhdGEgfHwgW107XG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlydHVhbC5za2lwID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgY29uc3QgdmlydHVhbCA9IHRoaXMudmlydHVhbDtcbiAgICAgICAgaWYgKHZpcnR1YWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdmlydHVhbC5za2lwIHx8IDA7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBzdGFydCArIHZpcnR1YWwucGFnZVNpemU7XG4gICAgICAgICAgICAvL1VzZSBsZW5ndGggaW5zdGVhZCBvZiBpdGVtc0NvdW50IGJlY2F1c2Ugb2YgZ3JvdXBpbmdcbiAgICAgICAgICAgIHZpcnR1YWwudG90YWwgPSB0aGlzLmRhdGFTZXJ2aWNlLmRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVNlcnZpY2UuZGF0YS5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZS5kYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgTXVsdGlTZWxlY3QuIEl0IGNhbiBiZSBlaXRoZXIgb2YgdGhlIHByaW1pdGl2ZSAoc3RyaW5nLCBudW1iZXJzKSBvciBvZiB0aGUgY29tcGxleCAob2JqZWN0cykgdHlwZS5cbiAgICAgKiBUbyBkZWZpbmUgdGhlIHR5cGUsIHVzZSB0aGUgYHZhbHVlUHJpbWl0aXZlYCBvcHRpb24uXG4gICAgICpcbiAgICAgKiA+IEFsbCBzZWxlY3RlZCB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBwcmVzZW50IGluIHRoZSBzb3VyY2UgYXJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgc2V0IHZhbHVlKHZhbHVlcykge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlcyA/IHZhbHVlcyA6IFtdO1xuICAgICAgICBpZiAoIXRoaXMuZGlmZmVyICYmIHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZGlmZmVyID0gdGhpcy5kaWZmZXJzLmZpbmQodGhpcy52YWx1ZSkuY3JlYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZURldGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUodGhpcy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXQgdGFiSW5kZXgodGFiSW5kZXgpIHtcbiAgICAgICAgdGhpcy50YWJpbmRleCA9IHRhYkluZGV4O1xuICAgIH1cbiAgICBnZXQgdGFiSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRhYmluZGV4O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaGludCB3aGljaCBpcyBkaXNwbGF5ZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGVtcHR5LlxuICAgICAqIFdoZW4gdGhlIHZhbHVlcyBhcmUgc2VsZWN0ZWQsIGl0IGRpc2FwcGVhcnMuXG4gICAgICovXG4gICAgc2V0IHBsYWNlaG9sZGVyKHRleHQpIHtcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIgPSB0ZXh0IHx8ICcnO1xuICAgIH1cbiAgICBnZXQgcGxhY2Vob2xkZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkRGF0YUl0ZW1zLmxlbmd0aCA/ICcnIDogdGhpcy5fcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBCb29sZWFuIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgZm9yIGVhY2ggZGF0YSBpdGVtIGluIHRoZSBjb21wb25lbnRcbiAgICAgKiAoW3NlZSBleGFtcGxlc10oeyUgc2x1ZyBkaXNhYmxlZGl0ZW1zX211bHRpc2VsZWN0ICV9KSkuIERldGVybWluZXMgd2hldGhlciB0aGUgaXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqL1xuICAgIHNldCBpdGVtRGlzYWJsZWQoZm4pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpdGVtRGlzYWJsZWQgbXVzdCBiZSBhIGZ1bmN0aW9uLCBidXQgcmVjZWl2ZWQgJHtKU09OLnN0cmluZ2lmeShmbil9LmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzYWJsZWRJdGVtc1NlcnZpY2UuaXRlbURpc2FibGVkID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFt2aXJ0dWFsaXphdGlvbl0oeyUgc2x1ZyB2aXJ0dWFsaXphdGlvbl9tdWx0aXNlbGVjdCAlfSkgZnVuY3Rpb25hbGl0eS5cbiAgICAgKi9cbiAgICBzZXQgdmlydHVhbChzZXR0aW5ncykge1xuICAgICAgICB0aGlzLl92aXJ0dWFsU2V0dGluZ3MgPSBub3JtYWxpemVWaXJ0dWFsaXphdGlvblNldHRpbmdzKHNldHRpbmdzKTtcbiAgICB9XG4gICAgZ2V0IHZpcnR1YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXJ0dWFsU2V0dGluZ3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGhlIHBvcHVwIG9mIHRoZSBNdWx0aVNlbGVjdC5cbiAgICAgKlxuICAgICAqIFRoZSBhdmFpbGFibGUgb3B0aW9ucyBhcmU6XG4gICAgICogLSBgYW5pbWF0ZTogQm9vbGVhbmAmbWRhc2g7Q29udHJvbHMgdGhlIHBvcHVwIGFuaW1hdGlvbi4gQnkgZGVmYXVsdCwgdGhlIG9wZW4gYW5kIGNsb3NlIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQuXG4gICAgICogLSBgd2lkdGg6IE51bWJlciB8IFN0cmluZ2AmbWRhc2g7U2V0cyB0aGUgd2lkdGggb2YgdGhlIHBvcHVwIGNvbnRhaW5lci4gQnkgZGVmYXVsdCwgdGhlIHdpZHRoIG9mIHRoZSBob3N0IGVsZW1lbnQgaXMgdXNlZC4gSWYgc2V0IHRvIGBhdXRvYCwgdGhlIGNvbXBvbmVudCBhdXRvbWF0aWNhbGx5IGFkanVzdHMgdGhlIHdpZHRoIG9mIHRoZSBwb3B1cCBhbmQgbm8gaXRlbSBsYWJlbHMgYXJlIHdyYXBwZWQuIFRoZSBgYXV0b2AgbW9kZSBpcyBub3Qgc3VwcG9ydGVkIHdoZW4gdmlydHVhbCBzY3JvbGxpbmcgaXMgZW5hYmxlZC5cbiAgICAgKiAtIGBoZWlnaHQ6IE51bWJlcmAmbWRhc2g7U2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBwb3B1cCBjb250YWluZXIuXG4gICAgICogLSBgcG9wdXBDbGFzczogU3RyaW5nYCZtZGFzaDtTcGVjaWZpZXMgYSBsaXN0IG9mIENTUyBjbGFzc2VzIHRoYXQgYXJlIHVzZWQgdG8gc3R5bGUgdGhlIHBvcHVwLlxuICAgICAqIC0gYGFwcGVuZFRvOiBcInJvb3RcIiB8IFwiY29tcG9uZW50XCIgfCBWaWV3Q29udGFpbmVyUmVmYCZtZGFzaDtTcGVjaWZpZXMgdGhlIGNvbXBvbmVudCB0byB3aGljaCB0aGUgcG9wdXAgd2lsbCBiZSBhcHBlbmRlZC5cbiAgICAgKi9cbiAgICBzZXQgcG9wdXBTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9wb3B1cFNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7IGFuaW1hdGU6IHRydWUgfSwgc2V0dGluZ3MpO1xuICAgIH1cbiAgICBnZXQgcG9wdXBTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwU2V0dGluZ3M7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdHlwZSBvZiB0aGUgc2VsZWN0ZWQgdmFsdWUuXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIHNlbGVjdGVkIHZhbHVlIGhhcyB0byBiZSBvZiB0aGUgcHJpbWl0aXZlIHR5cGVcbiAgICAgKiAoW21vcmUgaW5mb3JtYXRpb24gYW5kIGV4YW1wbGVdKHslIHNsdWcgdmFsdWViaW5kaW5nX211bHRpc2VsZWN0ICV9I3RvYy1wcmltaXRpdmUtdmFsdWVzLWZyb20tb2JqZWN0LWZpZWxkcykpLlxuICAgICAqL1xuICAgIHNldCB2YWx1ZVByaW1pdGl2ZShpc1ByaW1pdGl2ZSkge1xuICAgICAgICB0aGlzLl92YWx1ZVByaW1pdGl2ZSA9IGlzUHJpbWl0aXZlO1xuICAgIH1cbiAgICBnZXQgdmFsdWVQcmltaXRpdmUoKSB7XG4gICAgICAgIGlmICghaXNQcmVzZW50KHRoaXMuX3ZhbHVlUHJpbWl0aXZlKSkge1xuICAgICAgICAgICAgcmV0dXJuICFpc1ByZXNlbnQodGhpcy52YWx1ZUZpZWxkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVQcmltaXRpdmU7XG4gICAgfVxuICAgIGdldCBkaXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbjtcbiAgICB9XG4gICAgZ2V0IGRpc2FibGVkQ2xhc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVkO1xuICAgIH1cbiAgICBnZXQgbGlzdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lckNsYXNzZXMgPSBbJ2stbGlzdC1jb250YWluZXInLCAnay1yZXNldCddO1xuICAgICAgICBpZiAodGhpcy5wb3B1cFNldHRpbmdzLnBvcHVwQ2xhc3MpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckNsYXNzZXMucHVzaCh0aGlzLnBvcHVwU2V0dGluZ3MucG9wdXBDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lckNsYXNzZXM7XG4gICAgfVxuICAgIGdldCB3aWR0aCgpIHtcbiAgICAgICAgbGV0IHdyYXBwZXJPZmZzZXRXaWR0aCA9IDA7XG4gICAgICAgIGlmIChpc0RvY3VtZW50QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgIHdyYXBwZXJPZmZzZXRXaWR0aCA9IHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5wb3B1cFNldHRpbmdzLndpZHRoIHx8IHdyYXBwZXJPZmZzZXRXaWR0aDtcbiAgICAgICAgY29uc3QgbWluV2lkdGggPSBpc05hTih3cmFwcGVyT2Zmc2V0V2lkdGgpID8gd3JhcHBlck9mZnNldFdpZHRoIDogYCR7d3JhcHBlck9mZnNldFdpZHRofXB4YDtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSBpc05hTih3aWR0aCkgPyB3aWR0aCA6IGAke3dpZHRofXB4YDtcbiAgICAgICAgcmV0dXJuIHsgbWluOiBtaW5XaWR0aCwgbWF4OiBtYXhXaWR0aCB9O1xuICAgIH1cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICBjb25zdCBwb3B1cEhlaWdodCA9IHRoaXMucG9wdXBTZXR0aW5ncy5oZWlnaHQ7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQocG9wdXBIZWlnaHQpID8gYCR7cG9wdXBIZWlnaHR9cHhgIDogJ2F1dG8nO1xuICAgIH1cbiAgICBnZXQgYWN0aXZlRGVzY2VuZGFudCgpIHtcbiAgICAgICAgY29uc3QgZm9jdXNlZFRhZ0luZGV4ID0gdGhpcy5mb2N1c2VkVGFnSW5kZXg7XG4gICAgICAgIGNvbnN0IGZvY3VzZWRMaXN0SW5kZXggPSB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZDtcbiAgICAgICAgbGV0IHByZWZpeDtcbiAgICAgICAgbGV0IGl0ZW07XG4gICAgICAgIGlmIChpc1ByZXNlbnQoZm9jdXNlZFRhZ0luZGV4KSAmJiAhdGhpcy5pc09wZW4pIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0aGlzLnRhZ3NbZm9jdXNlZFRhZ0luZGV4XTtcbiAgICAgICAgICAgIHByZWZpeCA9IHRoaXMudGFnUHJlZml4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUHJlc2VudChmb2N1c2VkTGlzdEluZGV4KSAmJiBmb2N1c2VkTGlzdEluZGV4ICE9PSAtMSAmJiB0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgaXRlbSA9IHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGZvY3VzZWRMaXN0SW5kZXgpO1xuICAgICAgICAgICAgcHJlZml4ID0gdGhpcy5vcHRpb25QcmVmaXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJlZml4ICsgXCItXCIgKyB0aGlzLnByb3AodGhpcy52YWx1ZUZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKShpdGVtKTtcbiAgICB9XG4gICAgZ2V0IG5vRGF0YUxhYmVsKCkge1xuICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5pdGVtc0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ub0RhdGFUZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjbGVhclRpdGxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGl6YXRpb24uZ2V0KCdjbGVhclRpdGxlJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB2ZXJpZnlTZXR0aW5ncygpIHtcbiAgICAgICAgaWYgKCFpc0Rldk1vZGUoKSB8fCB0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKE11bHRpc2VsZWN0TWVzc2FnZXMuYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnZhbHVlUHJpbWl0aXZlID09PSB0cnVlICYmIGlzT2JqZWN0QXJyYXkodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihNdWx0aXNlbGVjdE1lc3NhZ2VzLnByaW1pdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudmFsdWVQcmltaXRpdmUgPT09IGZhbHNlICYmICFpc09iamVjdEFycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTXVsdGlzZWxlY3RNZXNzYWdlcy5vYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlT3JUZXh0ID0gIWlzUHJlc2VudCh0aGlzLnZhbHVlRmllbGQpICE9PSAhaXNQcmVzZW50KHRoaXMudGV4dEZpZWxkKTtcbiAgICAgICAgaWYgKHZhbHVlT3JUZXh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTXVsdGlzZWxlY3RNZXNzYWdlcy50ZXh0QW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgaXNDdXN0b21JdGVtID0gKGlzUHJlc2VudChldmVudC5hZGRlZCkgfHwgaXNQcmVzZW50KGV2ZW50LnJlbW92ZWQpKSAmJiAoZXZlbnQuYWRkZWQgPT09IC0xIHx8IGV2ZW50LnJlbW92ZWQgPT09IC0xKTtcbiAgICAgICAgaWYgKGlzQ3VzdG9tSXRlbSkge1xuICAgICAgICAgICAgdGhpcy5hZGRDdXN0b21WYWx1ZSh0aGlzLnRleHQpO1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBUaGUgY2hhbmdlIGlzIGVtaXRlZCBhc3luY2hyb25vc2x5LlxuICAgICAgICB9XG4gICAgICAgIC8vIEV4aXN0aW5nIGl0ZW1zLlxuICAgICAgICBpZiAoaXNQcmVzZW50KGV2ZW50LmFkZGVkKSkge1xuICAgICAgICAgICAgY29uc3QgZGF0YUl0ZW0gPSB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1BdChldmVudC5hZGRlZCk7XG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtID0gKHRoaXMudmFsdWVQcmltaXRpdmUgJiYgaXNQcmVzZW50KGRhdGFJdGVtKSAmJiBpc1ByZXNlbnQoZGF0YUl0ZW1bdGhpcy52YWx1ZUZpZWxkXSkpID8gZGF0YUl0ZW1bdGhpcy52YWx1ZUZpZWxkXSA6IGRhdGFJdGVtO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFsuLi50aGlzLnZhbHVlLCBuZXdJdGVtXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcmVzZW50KGV2ZW50LnJlbW92ZWQpKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhSXRlbSA9IHRoaXMuZGF0YVNlcnZpY2UuaXRlbUF0KGV2ZW50LnJlbW92ZWQpO1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcCh0aGlzLnZhbHVlRmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICAgICAgY29uc3QgZmlsdGVyJCQxID0gKGl0ZW0pID0+IHByb3AoaXRlbSkgIT09IHByb3AoZGF0YUl0ZW0pO1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuZmlsdGVyKGZpbHRlciQkMSk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA9IGV2ZW50LnJlbW92ZWQ7XG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldFN0YXRlKHZhbHVlKSB7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5kYXRhU2VydmljZS5kYXRhO1xuICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5ncm91cGVkKSB7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5maWx0ZXIoaXRlbSA9PiAhaXRlbS5oZWFkZXIpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHNlbGVjdGVkSW5kaWNlcyh0aGlzLnZhbHVlLCBkYXRhLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UucmVzZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuICYmIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgPSB0aGlzLmZpcnN0Rm9jdXNhYmxlSW5kZXgoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFsbG93Q3VzdG9tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy52YWx1ZVByaW1pdGl2ZSAmJiAhdGhpcy52YWx1ZUZpZWxkKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YUl0ZW1zID0gdmFsdWUuc2xpY2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYmplY3RBcnJheSh2YWx1ZSkgfHwgdGhpcy52YWx1ZVByaW1pdGl2ZSAmJiB0aGlzLnZhbHVlRmllbGQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWREYXRhSXRlbXMgPSByZXNvbHZlQWxsVmFsdWVzKHZhbHVlLCBkYXRhLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkRGF0YUl0ZW1zLmxlbmd0aCA8IHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcCh0aGlzLnZhbHVlRmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERhdGFJdGVtcyA9IHZhbHVlXG4gICAgICAgICAgICAgICAgLm1hcChjdXJyZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhSXRlbSA9IHRoaXMuc2VsZWN0ZWREYXRhSXRlbXMuZmluZChpdGVtID0+IHByb3AoaXRlbSkgPT09IHByb3AoY3VycmVudCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQoZGF0YUl0ZW0pID8gZGF0YUl0ZW0gOiB0aGlzLnJlc29sdmVEYXRhSXRlbUZyb21UYWdzKGN1cnJlbnQpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGRhdGFJdGVtID0+IGlzUHJlc2VudChkYXRhSXRlbSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFncyA9IHRoaXMudGFnTWFwcGVyKHRoaXMuc2VsZWN0ZWREYXRhSXRlbXMuc2xpY2UoMCkpO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUZpbHRlcih0ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIGlmICh0ZXh0ICYmICF0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgdGhpcy5vcGVuUG9wdXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5maWx0ZXJhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZS5lbWl0KHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hUZXh0QW5kRm9jdXModGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWFyY2hiYXIuc2V0SW5wdXRTaXplKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYWdlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHZpcnR1YWwgPSB0aGlzLnZpcnR1YWw7XG4gICAgICAgIHZpcnR1YWwuc2tpcCA9IGV2ZW50LnNraXA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjbGVhckZpbHRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyYWJsZSAmJiB0aGlzLnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgLyogQ2xlYXJpbmcgdGhlIHZhbHVlIGZyb20gdGhlIGlucHV0IGFzIHRoZSBzZXRJbnB1dFNpemUgY2FsY3VsYXRpb24gd2lsbCBiZSBpbmNvcnJlY3Qgb3RoZXJ3aXNlLlxuICAgICAgICAgQ2FsbGluZyBjZHIuZGV0ZWN0Q2hhbmdlcyB0byBjbGVhciB0aGUgaW5wdXQgdmFsdWUgYXMgYSByZXN1bHQgb2YgcHJvcGVydHkgYmluZGluZ1xuICAgICAgICAgY2F1c2VzIEpBV1MgdG8gcmVhZCBvdXRkYXRlZCB0YWcgdmFsdWVzIGluIElFIHVwb24gdGFnIHNlbGVjdGlvbiBmb3Igc29tZSByZWFzb24uICovXG4gICAgICAgIHRoaXMuc2VhcmNoYmFyLmlucHV0Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSBcIlwiO1xuICAgICAgICB0aGlzLnNlYXJjaGJhci5zZXRJbnB1dFNpemUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZU5hdmlnYXRlKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IG5hdmlnYXRlSW5wdXQgPSB0aGlzLnRleHQgJiYgZXZlbnQua2V5Q29kZSAhPT0gS2V5cy5BcnJvd0Rvd24gJiYgZXZlbnQua2V5Q29kZSAhPT0gS2V5cy5BcnJvd1VwO1xuICAgICAgICBjb25zdCBzZWxlY3RWYWx1ZSA9IHRoaXMudGV4dCAmJiBldmVudC5rZXlDb2RlID09PSBLZXlzLkVudGVyIHx8IGV2ZW50LmtleUNvZGUgPT09IEtleXMuRXNjYXBlO1xuICAgICAgICBjb25zdCBkZWxldGVUYWcgPSAhdGhpcy50ZXh0ICYmIGV2ZW50LmtleUNvZGUgPT09IEtleXMuQmFja3NwYWNlICYmIHRoaXMudGFncy5sZW5ndGggPiAwO1xuICAgICAgICBpZiAoZGVsZXRlVGFnKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUJhY2tzcGFjZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IG5hdmlnYXRlSW5wdXQgJiYgIXNlbGVjdFZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnREYXRhID0gZXZlbnQ7XG4gICAgICAgIGNvbnN0IGZvY3VzZWQgPSBpc05hTih0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCkgPyAtMSA6IHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkO1xuICAgICAgICBjb25zdCBhY3Rpb24gPSB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLnByb2Nlc3Moe1xuICAgICAgICAgICAgY3VycmVudDogZm9jdXNlZCxcbiAgICAgICAgICAgIG1heDogdGhpcy5kYXRhU2VydmljZS5pdGVtc0NvdW50IC0gMSxcbiAgICAgICAgICAgIG1pbjogdGhpcy5hbGxvd0N1c3RvbSAmJiB0aGlzLnRleHQgPyAtMSA6IDAsXG4gICAgICAgICAgICBvcGVuOiB0aGlzLmlzT3BlbixcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50RGF0YVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFjdGlvbiAhPT0gTmF2aWdhdGlvbkFjdGlvbi5VbmRlZmluZWQgJiZcbiAgICAgICAgICAgICgoYWN0aW9uID09PSBOYXZpZ2F0aW9uQWN0aW9uLkVudGVyICYmIHRoaXMuaXNPcGVuKSB8fCBhY3Rpb24gIT09IE5hdmlnYXRpb25BY3Rpb24uRW50ZXIpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVSZW1vdmVUYWcodGFnRGF0YSkge1xuICAgICAgICBjb25zdCBldmVudEFyZ3MgPSBuZXcgUmVtb3ZlVGFnRXZlbnQodGFnRGF0YSk7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8IHRoaXMucmVhZG9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgIHRoaXMucmVtb3ZlVGFnLmVtaXQoZXZlbnRBcmdzKTtcbiAgICAgICAgaWYgKGV2ZW50QXJncy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWdEYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlR3JvdXBUYWcodGFnRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZVNpbmdsZVRhZyh0YWdEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjbGVhckFsbChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB0aGlzLmNsZWFyRmlsdGVyKCk7XG4gICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgdGhpcy5lbWl0VmFsdWVDaGFuZ2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGFkZEN1c3RvbVZhbHVlKHRleHQpIHtcbiAgICAgICAgdGhpcy5jdXN0b21WYWx1ZVN1YmplY3QubmV4dCh0ZXh0KTtcbiAgICB9XG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICAgICAgICB0aGlzLnZlcmlmeVNldHRpbmdzKCk7XG4gICAgfVxuICAgIG5nRG9DaGVjaygpIHtcbiAgICAgICAgY29uc3QgdmFsdWVDaGFuZ2VzID0gdGhpcy5kaWZmZXIgJiYgdGhpcy5kaWZmZXIuZGlmZih0aGlzLnZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlQ2hhbmdlcyAmJiAhdGhpcy52YWx1ZUNoYW5nZURldGVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHRoaXMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VEZXRlY3RlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBcInRhYmluZGV4XCIpO1xuICAgICAgICB0aGlzLmNyZWF0ZUN1c3RvbVZhbHVlU3RyZWFtKCk7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uID0gdGhpcy5sb2NhbGl6YXRpb25cbiAgICAgICAgICAgIC5jaGFuZ2VzLnN1YnNjcmliZSgoeyBydGwgfSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBydGwgPyAncnRsJyA6ICdsdHInO1xuICAgICAgICAgICAgdGhpcy5zZXRNZXNzYWdlcygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZXRNZXNzYWdlcygpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHRoaXMudmFsdWUpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBjb25zdCB2aXJ0dWFsID0gdGhpcy52aXJ0dWFsO1xuICAgICAgICBjb25zdCByZXF1ZXN0SW5pdGlhbERhdGEgPSB2aXJ0dWFsICYmIGNoYW5nZXMuZGF0YSAmJiBjaGFuZ2VzLmRhdGEuaXNGaXJzdENoYW5nZSgpO1xuICAgICAgICBpZiAocmVxdWVzdEluaXRpYWxEYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2VDaGFuZ2UoeyBza2lwOiAwLCB0YWtlOiB2aXJ0dWFsLnBhZ2VTaXplIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NoYW5nZWQoJ3ZhbHVlTm9ybWFsaXplcicsIGNoYW5nZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUN1c3RvbVZhbHVlU3RyZWFtKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFueUNoYW5nZWQoWyd0ZXh0RmllbGQnLCAndmFsdWVGaWVsZCcsICd2YWx1ZVByaW1pdGl2ZSddLCBjaGFuZ2VzKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuc2VhcmNoYmFyLnNldElucHV0U2l6ZSgpO1xuICAgIH1cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlKGZhbHNlKTtcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZUV2ZW50cygpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tZXNzYWdlc1RpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5sb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgcG9wdXBcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIG9wZW5zdGF0ZV9tdWx0aXNlbGVjdCAlfSN0b2Mtc2V0dGluZy10aGUtaW5pdGlhbGx5LW9wZW5lZC1jb21wb25lbnQpKS5cbiAgICAgKiBJZiB5b3UgdXNlIHRoZSBgdG9nZ2xlYCBtZXRob2QgdG8gb3BlbiBvciBjbG9zZSB0aGUgcG9wdXAsIHRoZSByZXNwZWN0aXZlIGBvcGVuYCBhbmQgYGNsb3NlYCBldmVudHMgd2lsbCBub3QgYmUgZmlyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3BlbiAtIFRoZSBzdGF0ZSBvZiB0aGUgcG9wdXAuXG4gICAgICovXG4gICAgdG9nZ2xlKG9wZW4pIHtcbiAgICAgICAgLy8gVGhlIFByb21pc2UgaXMgcmVxdWlyZWQgZm9yIG9wZW5pbmcgdGhlIHBvcHVwIG9uIGxvYWQuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIFwiRXhwcmVzc2lvbiBoYXMgY2hhbmdlZC4uLlwiIHR5cGUgZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICAgIFByb21pc2UucmVzb2x2ZShudWxsKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZE9wZW4gPSBpc1ByZXNlbnQob3BlbikgPyBvcGVuIDogIXRoaXMuX29wZW47XG4gICAgICAgICAgICB0aGlzLl90b2dnbGUoc2hvdWxkT3Blbik7XG4gICAgICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgb3BlbiBzdGF0ZSBvZiB0aGUgcG9wdXAuXG4gICAgICovXG4gICAgZ2V0IGlzT3BlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wZW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgdmFsdWUgb2YgdGhlIE11bHRpU2VsZWN0LlxuICAgICAqIElmIHlvdSB1c2UgdGhlIGByZXNldGAgbWV0aG9kIHRvIGNsZWFyIHRoZSB2YWx1ZSBvZiB0aGUgY29tcG9uZW50LFxuICAgICAqIHRoZSBtb2RlbCB3aWxsIG5vdCB1cGRhdGUgYXV0b21hdGljYWxseSBhbmQgdGhlIGBzZWxlY3Rpb25DaGFuZ2VgIGFuZCBgdmFsdWVDaGFuZ2VgIGV2ZW50cyB3aWxsIG5vdCBiZSBmaXJlZC5cbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gXCJcIjtcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgIH1cbiAgICAvLyBORyBNT0RFTCBCSU5ESU5HU1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB3cml0ZVZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZSB8fCBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm4pIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbikge1xuICAgICAgICB0aGlzLm9uVG91Y2hlZENhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvblRhZ01hcHBlckNoYW5nZSgpIHtcbiAgICAgICAgdGhpcy50YWdzID0gdGhpcy50YWdNYXBwZXIodGhpcy5zZWxlY3RlZERhdGFJdGVtcy5zbGljZSgwKSk7XG4gICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgICBwcm9wKGZpZWxkLCB1c2VQcmltaXRpdmUpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhSXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChkYXRhSXRlbSkpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlUHJpbWl0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZCAmJiBpc09iamVjdChkYXRhSXRlbSkgPyBkYXRhSXRlbVtmaWVsZF0gOiBkYXRhSXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhSXRlbVtmaWVsZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHNldCBpc0ZvY3VzZWQoaXNGb2N1c2VkKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXJbaXNGb2N1c2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgJ2stc3RhdGUtZm9jdXNlZCcpO1xuICAgICAgICB0aGlzLl9pc0ZvY3VzZWQgPSBpc0ZvY3VzZWQ7XG4gICAgfVxuICAgIGdldCBpc0ZvY3VzZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0ZvY3VzZWQ7XG4gICAgfVxuICAgIHN1YnNjcmliZUV2ZW50cygpIHtcbiAgICAgICAgaWYgKCFpc0RvY3VtZW50QXZhaWxhYmxlKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc09wZW4gPSAoKSA9PiB0aGlzLmlzT3BlbjtcbiAgICAgICAgY29uc3QgaXNDbG9zZWQgPSAoKSA9PiAhdGhpcy5pc09wZW47XG4gICAgICAgIGNvbnN0IGlzVGFnRm9jdXNlZCA9ICgpID0+ICF0aGlzLmlzT3BlbiAmJiB0aGlzLmZvY3VzZWRUYWdJbmRleCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICBbXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2Uub25DaGFuZ2Uuc3Vic2NyaWJlKHRoaXMuaGFuZGxlSXRlbUNoYW5nZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuZXNjLnN1YnNjcmliZSh0aGlzLmNsb3NlUG9wdXAuYmluZCh0aGlzKSksXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmVudGVyLnBpcGUoZmlsdGVyKGlzT3BlbikpLnN1YnNjcmliZSh0aGlzLmhhbmRsZUVudGVyLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5vcGVuLnN1YnNjcmliZSh0aGlzLm9wZW5Qb3B1cC5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuY2xvc2Uuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLnVwLnBpcGUoZmlsdGVyKGlzT3BlbikpLnN1YnNjcmliZSgoZXZlbnQpID0+IHRoaXMuaGFuZGxlVXAoZXZlbnQuaW5kZXgpKSxcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuaG9tZS5waXBlKGZpbHRlcigoKSA9PiBpc0Nsb3NlZCkpLnN1YnNjcmliZSh0aGlzLmhhbmRsZUhvbWUuYmluZCh0aGlzKSksXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmVuZC5waXBlKGZpbHRlcigoKSA9PiBpc0Nsb3NlZCkpLnN1YnNjcmliZSh0aGlzLmhhbmRsZUVuZC5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuYmFja3NwYWNlLnBpcGUoZmlsdGVyKGlzVGFnRm9jdXNlZCkpLnN1YnNjcmliZSh0aGlzLmhhbmRsZUJhY2tzcGFjZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UuZGVsZXRlLnBpcGUoZmlsdGVyKGlzVGFnRm9jdXNlZCkpLnN1YnNjcmliZSh0aGlzLmhhbmRsZURlbGV0ZS5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UubGVmdC5zdWJzY3JpYmUodGhpcy5kaXJlY3Rpb24gPT09ICdydGwnID8gdGhpcy5oYW5kbGVSaWdodEtleS5iaW5kKHRoaXMpIDogdGhpcy5oYW5kbGVMZWZ0S2V5LmJpbmQodGhpcykpLFxuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5yaWdodC5zdWJzY3JpYmUodGhpcy5kaXJlY3Rpb24gPT09ICdydGwnID8gdGhpcy5oYW5kbGVMZWZ0S2V5LmJpbmQodGhpcykgOiB0aGlzLmhhbmRsZVJpZ2h0S2V5LmJpbmQodGhpcykpLFxuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5kb3duLnN1YnNjcmliZSgoZXZlbnQpID0+IHRoaXMuaGFuZGxlRG93bktleShldmVudC5pbmRleCkpXG4gICAgICAgIF0uZm9yRWFjaChzID0+IHRoaXMub2JzZXJ2YWJsZVN1YnNjcmlwdGlvbnMuYWRkKHMpKTtcbiAgICB9XG4gICAgdW5zdWJzY3JpYmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudEF2YWlsYWJsZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vYnNlcnZhYmxlU3Vic2NyaXB0aW9ucy51bnN1YnNjcmliZSgpO1xuICAgICAgICBpZiAodGhpcy5jdXN0b21WYWx1ZVN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5jdXN0b21WYWx1ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlbW92ZUdyb3VwVGFnKGRhdGFJdGVtcykge1xuICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5wcm9wKHRoaXMudmFsdWVGaWVsZCwgdGhpcy52YWx1ZVByaW1pdGl2ZSk7XG4gICAgICAgIGxldCBkYXRhID0gdGhpcy5kYXRhU2VydmljZS5kYXRhO1xuICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5ncm91cGVkKSB7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5maWx0ZXIoaXRlbSA9PiAhaXRlbS5oZWFkZXIpLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGFJdGVtVmFsdWVzID0gbmV3IFNldChkYXRhSXRlbXMubWFwKGl0ZW0gPT4gcHJvcChpdGVtKSkpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5maWx0ZXIodmFsdWUgPT4gIWRhdGFJdGVtVmFsdWVzLmhhcyhwcm9wKHZhbHVlKSkpO1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZSgpO1xuICAgIH1cbiAgICByZW1vdmVTaW5nbGVUYWcoZGF0YUl0ZW0pIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcCh0aGlzLnZhbHVlRmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpO1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YVNlcnZpY2UuZGF0YTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVNlcnZpY2UuZ3JvdXBlZCkge1xuICAgICAgICAgICAgZGF0YSA9IGRhdGEuZmlsdGVyKGl0ZW0gPT4gIWl0ZW0uaGVhZGVyKS5tYXAoaXRlbSA9PiBpdGVtLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHNlbGVjdGVkSW5kaWNlcyhbZGF0YUl0ZW1dLCBkYXRhLCB0aGlzLnZhbHVlRmllbGQpWzBdO1xuICAgICAgICBpZiAoaXNOdW1iZXIoaW5kZXgpKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UudW5zZWxlY3QoaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQgPSBpbmRleDtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyB0aGUgZGVsZXRlZCBpdGVtIGlzIG5vdCBwcmVzZW50IGluIHRoZSBzb3VyY2VcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlciQkMSA9IGl0ZW0gPT4gcHJvcChpdGVtKSAhPT0gcHJvcChkYXRhSXRlbSk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy52YWx1ZS5maWx0ZXIoZmlsdGVyJCQxKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlQ2hhbmdlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlQ3VzdG9tVmFsdWVTdHJlYW0oKSB7XG4gICAgICAgIGlmICh0aGlzLmN1c3RvbVZhbHVlU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmN1c3RvbVZhbHVlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXN0b21WYWx1ZVN1YnNjcmlwdGlvbiA9IHRoaXMuY3VzdG9tVmFsdWVTdWJqZWN0LnBpcGUodGFwKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSksIHRoaXMudmFsdWVOb3JtYWxpemVyLCBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvQ2xvc2UgfHwgIXRoaXMuZmlsdGVyYWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoYmFyLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ3VzdG9tVmFsdWVTdHJlYW0oKTtcbiAgICAgICAgICAgIHJldHVybiBvZihudWxsKTtcbiAgICAgICAgfSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKChub3JtYWxpemVkVmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChub3JtYWxpemVkVmFsdWUpKSB7IC8vIGlmIHZhbHVlTm9ybWFsaXplciByZXR1cm5zIGBudWxsYCBvciBgdW5kZWZpbmVkYCBjdXN0b20gdmFsdWUgaXMgZGlzY2FyZGVkXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLnZhbHVlUHJpbWl0aXZlID8gZ2V0dGVyKG5vcm1hbGl6ZWRWYWx1ZSwgdGhpcy52YWx1ZUZpZWxkKSA6IG5vcm1hbGl6ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLmRhdGFTZXJ2aWNlLmluZGV4T2YobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1c3RvbUl0ZW0gPSBpdGVtSW5kZXggPT09IC0xO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlLmluZGV4T2YobmV3VmFsdWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhZ3MgPSB0aGlzLnRhZ01hcHBlcihbLi4udGhpcy5zZWxlY3RlZERhdGFJdGVtcywgbm9ybWFsaXplZFZhbHVlXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VzdG9tSXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmFkZChpdGVtSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFsuLi50aGlzLnZhbHVlLCBuZXdWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VzdG9tSXRlbSAmJiB0aGlzLnNlbGVjdGlvblNlcnZpY2UuaXNTZWxlY3RlZChpdGVtSW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UudW5zZWxlY3QoaXRlbUluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID0gaXRlbUluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMudmFsdWUuZmlsdGVyKGl0ZW0gPT4gZ2V0dGVyKGl0ZW0sIHRoaXMudmFsdWVGaWVsZCkgIT09IG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRWYWx1ZUNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5hdXRvQ2xvc2UgfHwgIXRoaXMuZmlsdGVyYWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoYmFyLmZvY3VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZUl0ZW1DaGFuZ2UoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UoZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy5hdXRvQ2xvc2UpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSB8fCAhdGhpcy5maWx0ZXJhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlRW50ZXIoZXZlbnQpIHtcbiAgICAgICAgY29uc3Qgc2VydmljZSA9IHRoaXMuc2VsZWN0aW9uU2VydmljZTtcbiAgICAgICAgY29uc3QgZm9jdXNlZEluZGV4ID0gdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmZvY3VzZWQ7XG4gICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb2N1c2VkSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd0N1c3RvbSAmJiB0aGlzLnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEN1c3RvbVZhbHVlKHRoaXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47IC8vIENsZWFyIGZpbHRlciAmIGNsb3NlIGFyZSBkb25lIGF0IGN1c3RvbVZhbHVlU3Vic2NyaXB0aW9uIGR1ZSB0byByYWNlIGNvbmRpdGlvbnMuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcnZpY2UuaXNTZWxlY3RlZChmb2N1c2VkSW5kZXgpKSB7XG4gICAgICAgICAgICBzZXJ2aWNlLnVuc2VsZWN0KGZvY3VzZWRJbmRleCk7XG4gICAgICAgICAgICBzZXJ2aWNlLmZvY3VzZWQgPSBmb2N1c2VkSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZXJ2aWNlLmFkZChmb2N1c2VkSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYXV0b0Nsb3NlIHx8ICF0aGlzLmZpbHRlcmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJGaWx0ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVDbG9zZSgpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcHVwKCk7XG4gICAgICAgIHRoaXMuc2VhcmNoYmFyLmZvY3VzKCk7XG4gICAgfVxuICAgIGhhbmRsZUVuZCgpIHtcbiAgICAgICAgdGhpcy5mb2N1c2VkVGFnSW5kZXggPSB0aGlzLnRhZ3MubGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgaGFuZGxlSG9tZSgpIHtcbiAgICAgICAgdGhpcy5mb2N1c2VkVGFnSW5kZXggPSAwO1xuICAgIH1cbiAgICBoYW5kbGVVcChpbmRleCkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA9IGluZGV4O1xuICAgIH1cbiAgICBoYW5kbGVCYWNrc3BhY2UoKSB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWRUYWdJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURlbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdmVUYWcodGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXSk7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaGJhci5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZURlbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVSZW1vdmVUYWcodGhpcy50YWdzW3RoaXMuZm9jdXNlZFRhZ0luZGV4XSk7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWRUYWdJbmRleCA9PT0gdGhpcy50YWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5mb2N1c2VkVGFnSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlTGVmdEtleSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZFRhZ0luZGV4ID09PSB1bmRlZmluZWQgfHwgdGhpcy5mb2N1c2VkVGFnSW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRUYWdJbmRleCA9IHRoaXMudGFncy5sZW5ndGggLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZm9jdXNlZFRhZ0luZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRUYWdJbmRleC0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhhbmRsZURvd25LZXkoaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCA9IGluZGV4IHx8IHRoaXMuZmlyc3RGb2N1c2FibGVJbmRleCgwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3BlblBvcHVwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlUmlnaHRLZXkoKSB7XG4gICAgICAgIGNvbnN0IGxhc3QgPSB0aGlzLnRhZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZFRhZ0luZGV4ID09PSBsYXN0KSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzZWRUYWdJbmRleCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmZvY3VzZWRUYWdJbmRleCA8IGxhc3QpIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZFRhZ0luZGV4Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluZEluZGV4KHRleHQsIHN0YXJ0c0Zyb20gPSAwKSB7XG4gICAgICAgIGxldCBpdGVtVGV4dDtcbiAgICAgICAgdGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5kYXRhU2VydmljZS5maW5kSW5kZXgoaXRlbSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhU2VydmljZS5ncm91cGVkKSB7XG4gICAgICAgICAgICAgICAgaXRlbVRleHQgPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpKGl0ZW0udmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbVRleHQgPSB0aGlzLnByb3AodGhpcy50ZXh0RmllbGQsIHRoaXMudmFsdWVQcmltaXRpdmUpKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbVRleHQgPSAhaXNQcmVzZW50KGl0ZW1UZXh0KSA/IFwiXCIgOiBpdGVtVGV4dC50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICByZXR1cm4gdGV4dCAmJiBpdGVtVGV4dC5zdGFydHNXaXRoKHRleHQpO1xuICAgICAgICB9LCBzdGFydHNGcm9tKTtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWRJdGVtc1NlcnZpY2UuaXNJbmRleERpc2FibGVkKGluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuIChpbmRleCArIDEgPiB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQpID8gLTEgOiB0aGlzLmZpbmRJbmRleCh0ZXh0LCBpbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlYXJjaFRleHRBbmRGb2N1cyh0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5maW5kSW5kZXgodGV4dCk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5mb2N1c2VkID0gaW5kZXg7XG4gICAgfVxuICAgIGNsb3NlUG9wdXAoKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoZmFsc2UpO1xuICAgICAgICB0aGlzLmZvY3VzZWRUYWdJbmRleCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgb3BlblBvcHVwKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZVBvcHVwKHRydWUpO1xuICAgICAgICB0aGlzLmZvY3VzZWRUYWdJbmRleCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdG9nZ2xlUG9wdXAob3Blbikge1xuICAgICAgICBjb25zdCBpc0Rpc2FibGVkID0gdGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRvbmx5O1xuICAgICAgICBjb25zdCBzYW1lU3RhdGUgPSB0aGlzLmlzT3BlbiA9PT0gb3BlbjtcbiAgICAgICAgaWYgKGlzRGlzYWJsZWQgfHwgc2FtZVN0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNEZWZhdWx0UHJldmVudGVkID0gdGhpcy50cmlnZ2VyUG9wdXBFdmVudHMob3Blbik7XG4gICAgICAgIGlmICghaXNEZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICB0aGlzLl90b2dnbGUob3Blbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJpZ2dlclBvcHVwRXZlbnRzKG9wZW4pIHtcbiAgICAgICAgY29uc3QgZXZlbnRBcmdzID0gbmV3IFByZXZlbnRhYmxlRXZlbnQoKTtcbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIHRoaXMub3Blbi5lbWl0KGV2ZW50QXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlLmVtaXQoZXZlbnRBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRBcmdzLmlzRGVmYXVsdFByZXZlbnRlZCgpO1xuICAgIH1cbiAgICBfdG9nZ2xlKG9wZW4pIHtcbiAgICAgICAgdGhpcy5fb3BlbiA9IG9wZW47XG4gICAgICAgIHRoaXMuZGVzdHJveVBvcHVwKCk7XG4gICAgICAgIGlmICh0aGlzLl9vcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVBvcHVwKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVzdHJveVBvcHVwKCkge1xuICAgICAgICBpZiAodGhpcy5wb3B1cFJlZikge1xuICAgICAgICAgICAgdGhpcy5wb3B1cFJlZi5wb3B1cEVsZW1lbnRcbiAgICAgICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5wb3B1cE1vdXNlRG93bkhhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cFJlZi5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cFJlZiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlUG9wdXAoKSB7XG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlydHVhbC5za2lwID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBob3Jpem9udGFsQWxpZ24gPSB0aGlzLmRpcmVjdGlvbiA9PT0gXCJydGxcIiA/IFwicmlnaHRcIiA6IFwibGVmdFwiO1xuICAgICAgICBjb25zdCBhbmNob3JQb3NpdGlvbiA9IHsgaG9yaXpvbnRhbDogaG9yaXpvbnRhbEFsaWduLCB2ZXJ0aWNhbDogXCJib3R0b21cIiB9O1xuICAgICAgICBjb25zdCBwb3B1cFBvc2l0aW9uID0geyBob3Jpem9udGFsOiBob3Jpem9udGFsQWxpZ24sIHZlcnRpY2FsOiBcInRvcFwiIH07XG4gICAgICAgIHRoaXMucG9wdXBSZWYgPSB0aGlzLnBvcHVwU2VydmljZS5vcGVuKHtcbiAgICAgICAgICAgIGFuY2hvcjogdGhpcy53cmFwcGVyLFxuICAgICAgICAgICAgYW5jaG9yQWxpZ246IGFuY2hvclBvc2l0aW9uLFxuICAgICAgICAgICAgYW5pbWF0ZTogdGhpcy5wb3B1cFNldHRpbmdzLmFuaW1hdGUsXG4gICAgICAgICAgICBhcHBlbmRUbzogdGhpcy5hcHBlbmRUbyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRoaXMucG9wdXBUZW1wbGF0ZSxcbiAgICAgICAgICAgIHBvcHVwQWxpZ246IHBvcHVwUG9zaXRpb24sXG4gICAgICAgICAgICBwb3B1cENsYXNzOiB0aGlzLmxpc3RDb250YWluZXJDbGFzc2VzLFxuICAgICAgICAgICAgcG9zaXRpb25Nb2RlOiAnYWJzb2x1dGUnXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwb3B1cFdyYXBwZXIgPSB0aGlzLnBvcHVwUmVmLnBvcHVwRWxlbWVudDtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy53aWR0aDtcbiAgICAgICAgcG9wdXBXcmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMucG9wdXBNb3VzZURvd25IYW5kbGVyKTtcbiAgICAgICAgcG9wdXBXcmFwcGVyLnN0eWxlLm1pbldpZHRoID0gbWluO1xuICAgICAgICBwb3B1cFdyYXBwZXIuc3R5bGUud2lkdGggPSBtYXg7XG4gICAgICAgIHBvcHVwV3JhcHBlci5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgcG9wdXBXcmFwcGVyLnNldEF0dHJpYnV0ZShcImRpclwiLCB0aGlzLmRpcmVjdGlvbik7XG4gICAgICAgIHRoaXMucG9wdXBSZWYucG9wdXBPcGVuLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNMaXN0LnNjcm9sbFRvSXRlbSh0aGlzLnNlbGVjdGlvblNlcnZpY2UuZm9jdXNlZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnBvcHVwUmVmLnBvcHVwQW5jaG9yVmlld3BvcnRMZWF2ZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb3B1cChmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbWl0VmFsdWVDaGFuZ2UoKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2VDYWxsYmFjayh0aGlzLnZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZS5lbWl0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICByZXNvbHZlRGF0YUl0ZW1Gcm9tVGFncyh2YWx1ZSkge1xuICAgICAgICBpZiAoISh0aGlzLnRhZ3MgJiYgdGhpcy50YWdzLmxlbmd0aCAmJiBpc1ByZXNlbnQodmFsdWUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBGbGF0dGVuaW5nIHRoZSB0YWdzIGFycmF5IGluIGNhc2Ugb2YgYSBzdW1tYXJ5IHRhZyBvY2N1cnJlbmNlLlxuICAgICAgICBjb25zdCB0YWdzID0gdGhpcy50YWdzLnJlZHVjZSgoYWNjLCB0YWcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gaXNBcnJheSh0YWcpID8gdGFnIDogW3RhZ107XG4gICAgICAgICAgICBhY2MucHVzaCguLi5pdGVtcyk7XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLnByb3AodGhpcy52YWx1ZUZpZWxkLCB0aGlzLnZhbHVlUHJpbWl0aXZlKTtcbiAgICAgICAgcmV0dXJuIHRhZ3MuZmluZCh0YWcgPT4gcHJvcCh0YWcpID09PSBwcm9wKHZhbHVlKSk7XG4gICAgfVxuICAgIGZpcnN0Rm9jdXNhYmxlSW5kZXgoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSB0aGlzLmRhdGFTZXJ2aWNlLml0ZW1zQ291bnQ7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkSXRlbXNTZXJ2aWNlLmlzSW5kZXhEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIHJldHVybiAobmV4dEluZGV4IDwgbWF4SW5kZXgpID8gdGhpcy5maXJzdEZvY3VzYWJsZUluZGV4KG5leHRJbmRleCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV4dFRpY2soZikge1xuICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgIC8vIFVzZSBgc2V0VGltZW91dGAgaW5zdGVhZCBvZiBhIHJlc29sdmVkIHByb21pc2VcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIGxhdHRlciBkb2VzIG5vdCB3YWl0IGxvbmcgZW5vdWdoLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl96b25lLnJ1bihmKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzZXRNZXNzYWdlcygpIHtcbiAgICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5tZXNzYWdlc1RpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vRGF0YVRleHQgPSB0aGlzLmxvY2FsaXphdGlvbi5nZXQoJ25vRGF0YVRleHQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuTXVsdGlTZWxlY3RDb21wb25lbnQuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBleHBvcnRBczogJ2tlbmRvTXVsdGlTZWxlY3QnLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgICAgICBNVUxUSVNFTEVDVF9WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgICAgICAgICAgICAgRGF0YVNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIFNlbGVjdGlvblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgIE5hdmlnYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBEaXNhYmxlZEl0ZW1zU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgTG9jYWxpemF0aW9uU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTDEwTl9QUkVGSVgsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VWYWx1ZTogJ2tlbmRvLm11bHRpc2VsZWN0J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBGaWx0ZXJhYmxlRHJvcERvd25Db21wb25lbnRCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBNdWx0aVNlbGVjdENvbXBvbmVudClcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogS2VuZG9JbnB1dCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTXVsdGlTZWxlY3RDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAna2VuZG8tbXVsdGlzZWxlY3QnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxuZy1jb250YWluZXIga2VuZG9NdWx0aVNlbGVjdExvY2FsaXplZE1lc3NhZ2VzXG4gICAgICAgICAgICBpMThuLW5vRGF0YVRleHQ9XCJrZW5kby5tdWx0aXNlbGVjdC5ub0RhdGFUZXh0fFRoZSB0ZXh0IGRpc3BsYXllZCBpbiB0aGUgcG9wdXAgd2hlbiB0aGVyZSBhcmUgbm8gaXRlbXNcIlxuICAgICAgICAgICAgbm9EYXRhVGV4dD1cIk5PIERBVEEgRk9VTkRcIlxuXG4gICAgICAgICAgICBpMThuLWNsZWFyVGl0bGU9XCJrZW5kby5jb21ib2JveC5jbGVhclRpdGxlfFRoZSB0aXRsZSBvZiB0aGUgY2xlYXIgYnV0dG9uXCJcbiAgICAgICAgICAgIGNsZWFyVGl0bGU9XCJjbGVhclwiXG4gICAgICAgID5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJrLW11bHRpc2VsZWN0LXdyYXAgay1mbG9hdHdyYXBcIlxuICAgICAgICAgICAgI3dyYXBwZXJcbiAgICAgICAgICAgIChtb3VzZWRvd24pPVwid3JhcHBlck1vdXNlZG93bigkZXZlbnQpXCJcbiAgICAgICAgPlxuICAgICAgICAgICAgPGtlbmRvLXRhZ2xpc3RcbiAgICAgICAgICAgICAgICBbaWRdPVwidGFnTGlzdElkXCJcbiAgICAgICAgICAgICAgICBbdGFnc109XCJ0YWdzXCJcbiAgICAgICAgICAgICAgICBbdGV4dEZpZWxkXT1cInRleHRGaWVsZFwiXG4gICAgICAgICAgICAgICAgW3ZhbHVlRmllbGRdPVwidmFsdWVGaWVsZFwiXG4gICAgICAgICAgICAgICAgW2ZvY3VzZWRdPVwiZm9jdXNlZFRhZ0luZGV4XCJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJ0YWdUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgW2dyb3VwVGVtcGxhdGVdPVwiZ3JvdXBUYWdUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgW3RhZ1ByZWZpeF09XCJ0YWdQcmVmaXhcIlxuICAgICAgICAgICAgICAgIChyZW1vdmVUYWcpPVwiaGFuZGxlUmVtb3ZlVGFnKCRldmVudClcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9rZW5kby10YWdsaXN0PlxuICAgICAgICAgICAgPGtlbmRvLXNlYXJjaGJhclxuICAgICAgICAgICAgICAgICNzZWFyY2hiYXJcbiAgICAgICAgICAgICAgICBbaWRdPVwiZm9jdXNhYmxlSWRcIlxuICAgICAgICAgICAgICAgIFtyb2xlXT1cIidsaXN0Ym94J1wiXG4gICAgICAgICAgICAgICAgW3RhZ0xpc3RJZF09XCJ0YWdMaXN0SWRcIlxuICAgICAgICAgICAgICAgIFthY3RpdmVEZXNjZW5kYW50XT1cImFjdGl2ZURlc2NlbmRhbnRcIlxuICAgICAgICAgICAgICAgIFtub0RhdGFMYWJlbF09XCJub0RhdGFMYWJlbFwiXG4gICAgICAgICAgICAgICAgW3VzZXJJbnB1dF09XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgICAgICAgW3RhYkluZGV4XT1cInRhYkluZGV4XCJcbiAgICAgICAgICAgICAgICBbcG9wdXBPcGVuXT1cImlzT3BlblwiXG4gICAgICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgICAgICAob25OYXZpZ2F0ZSk9XCJoYW5kbGVOYXZpZ2F0ZSgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAodmFsdWVDaGFuZ2UpPVwiaGFuZGxlRmlsdGVyKCRldmVudClcIlxuICAgICAgICAgICAgICAgIChvbkJsdXIpPVwib25TZWFyY2hCYXJCbHVyKClcIlxuICAgICAgICAgICAgICAgIChvbkZvY3VzKT1cIm9uU2VhcmNoQmFyRm9jdXMoKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2tlbmRvLXNlYXJjaGJhcj5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgKm5nSWY9XCIhbG9hZGluZyAmJiAhcmVhZG9ubHkgJiYgY2xlYXJCdXR0b24gJiYgKHRhZ3M/Lmxlbmd0aCB8fCB0ZXh0Py5sZW5ndGgpXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImstaWNvbiBrLWNsZWFyLXZhbHVlIGstaS1jbG9zZVwiXG4gICAgICAgICAgICAgICAgW2F0dHIudGl0bGVdPVwiY2xlYXJUaXRsZVwiXG4gICAgICAgICAgICAgICAgcm9sZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCItMVwiXG4gICAgICAgICAgICAgICAgKG1vdXNlZG93bik9XCJjbGVhckFsbCgkZXZlbnQpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJsb2FkaW5nXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImstaWNvbiBrLWktbG9hZGluZ1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8bmctdGVtcGxhdGUgI3BvcHVwVGVtcGxhdGU+XG4gICAgICAgICAgICA8IS0taGVhZGVyIHRlbXBsYXRlLS0+XG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCJoZWFkZXJUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiBoZWFkZXJUZW1wbGF0ZS50ZW1wbGF0ZVJlZlxuICAgICAgICAgICAgICAgIH1cIj5cbiAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8IS0tY3VzdG9tIGl0ZW0gdGVtcGxhdGUtLT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJrLWxpc3RcIiAqbmdJZj1cImFsbG93Q3VzdG9tICYmIHRleHRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiay1pdGVtIGstY3VzdG9tLWl0ZW1cIiBrZW5kb0Ryb3BEb3duc1NlbGVjdGFibGUgW211bHRpcGxlU2VsZWN0aW9uXT1cInRydWVcIiBbaW5kZXhdPVwiLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiY3VzdG9tSXRlbVRlbXBsYXRlO2Vsc2UgZGVmYXVsdF9jdXN0b21faXRlbV90ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlZjogY3VzdG9tSXRlbVRlbXBsYXRlLnRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpbXBsaWNpdDogdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRfY3VzdG9tX2l0ZW1fdGVtcGxhdGU+e3sgdGV4dCB9fTwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1wbHVzXCIgc3R5bGU9XCJmbG9hdDogcmlnaHRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwhLS1saXN0LS0+XG4gICAgICAgICAgICA8a2VuZG8tbGlzdFxuICAgICAgICAgICAgICAgICNvcHRpb25zTGlzdFxuICAgICAgICAgICAgICAgIFtpZF09XCJsaXN0Qm94SWRcIlxuICAgICAgICAgICAgICAgIFtvcHRpb25QcmVmaXhdPVwib3B0aW9uUHJlZml4XCJcbiAgICAgICAgICAgICAgICBbZGF0YV09XCJkYXRhXCJcbiAgICAgICAgICAgICAgICBbdGV4dEZpZWxkXT1cInRleHRGaWVsZFwiXG4gICAgICAgICAgICAgICAgW3ZhbHVlRmllbGRdPVwidmFsdWVGaWVsZFwiXG4gICAgICAgICAgICAgICAgW2hlaWdodF09XCJsaXN0SGVpZ2h0XCJcbiAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwidGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgIFtncm91cFRlbXBsYXRlXT1cImdyb3VwVGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgIFtmaXhlZEdyb3VwVGVtcGxhdGVdPVwiZml4ZWRHcm91cFRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICBbc2hvd109XCJpc09wZW5cIlxuICAgICAgICAgICAgICAgIFttdWx0aXBsZVNlbGVjdGlvbl09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICBbdmlydHVhbF09XCJ2aXJ0dWFsXCJcbiAgICAgICAgICAgICAgICAocGFnZUNoYW5nZSk9XCJwYWdlQ2hhbmdlKCRldmVudClcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwva2VuZG8tbGlzdD5cbiAgICAgICAgICAgIDwhLS1ubyBkYXRhIHRlbXBsYXRlLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiay1ub2RhdGFcIiAqbmdJZj1cImRhdGEubGVuZ3RoID09PSAwXCI+XG4gICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cIm5vRGF0YVRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlZjogbm9EYXRhVGVtcGxhdGUgPyBub0RhdGFUZW1wbGF0ZS50ZW1wbGF0ZVJlZiA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIW5vRGF0YVRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+e3sgbm9EYXRhVGV4dCB9fTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvbmctdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwhLS1mb290ZXIgdGVtcGxhdGUtLT5cbiAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdJZj1cImZvb3RlclRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICBbdGVtcGxhdGVDb250ZXh0XT1cIntcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVSZWY6IGZvb3RlclRlbXBsYXRlLnRlbXBsYXRlUmVmXG4gICAgICAgICAgICAgICAgfVwiPlxuICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgPG5nLXRlbXBsYXRlIFtuZ0lmXT1cImlzT3BlblwiPlxuICAgICAgICAgICAgPGtlbmRvLXJlc2l6ZS1zZW5zb3IgKHJlc2l6ZSk9XCJvblJlc2l6ZSgpXCI+PC9rZW5kby1yZXNpemUtc2Vuc29yPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICA8bmctY29udGFpbmVyICNjb250YWluZXI+PC9uZy1jb250YWluZXI+XG4gIGBcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuTXVsdGlTZWxlY3RDb21wb25lbnQuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBMb2NhbGl6YXRpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBQb3B1cFNlcnZpY2UgfSxcbiAgICB7IHR5cGU6IERhdGFTZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBTZWxlY3Rpb25TZXJ2aWNlIH0sXG4gICAgeyB0eXBlOiBOYXZpZ2F0aW9uU2VydmljZSB9LFxuICAgIHsgdHlwZTogRGlzYWJsZWRJdGVtc1NlcnZpY2UgfSxcbiAgICB7IHR5cGU6IENoYW5nZURldGVjdG9yUmVmIH0sXG4gICAgeyB0eXBlOiBLZXlWYWx1ZURpZmZlcnMgfSxcbiAgICB7IHR5cGU6IFJlbmRlcmVyMiB9LFxuICAgIHsgdHlwZTogRWxlbWVudFJlZiB9LFxuICAgIHsgdHlwZTogTmdab25lIH0sXG4gICAgeyB0eXBlOiBCb29sZWFuLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LCB7IHR5cGU6IEluamVjdCwgYXJnczogW1RPVUNIX0VOQUJMRUQsXSB9XSB9XG5dO1xuTXVsdGlTZWxlY3RDb21wb25lbnQucHJvcERlY29yYXRvcnMgPSB7XG4gICAgZm9jdXNhYmxlSWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGF1dG9DbG9zZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbG9hZGluZzogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZGF0YTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHZhbHVlRmllbGQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRleHRGaWVsZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdGFiaW5kZXg6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRhYkluZGV4OiBbeyB0eXBlOiBJbnB1dCwgYXJnczogW1widGFiSW5kZXhcIixdIH1dLFxuICAgIHBsYWNlaG9sZGVyOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBkaXNhYmxlZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgaXRlbURpc2FibGVkOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICByZWFkb25seTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZmlsdGVyYWJsZTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmlydHVhbDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcG9wdXBTZXR0aW5nczogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgbGlzdEhlaWdodDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdmFsdWVQcmltaXRpdmU6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGNsZWFyQnV0dG9uOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0YWdNYXBwZXI6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGFsbG93Q3VzdG9tOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB2YWx1ZU5vcm1hbGl6ZXI6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGZpbHRlckNoYW5nZTogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIHZhbHVlQ2hhbmdlOiBbeyB0eXBlOiBPdXRwdXQgfV0sXG4gICAgb3BlbjogW3sgdHlwZTogT3V0cHV0IH1dLFxuICAgIGNsb3NlOiBbeyB0eXBlOiBPdXRwdXQgfV0sXG4gICAgb25Gb2N1czogW3sgdHlwZTogT3V0cHV0LCBhcmdzOiBbJ2ZvY3VzJyxdIH1dLFxuICAgIG9uQmx1cjogW3sgdHlwZTogT3V0cHV0LCBhcmdzOiBbJ2JsdXInLF0gfV0sXG4gICAgcmVtb3ZlVGFnOiBbeyB0eXBlOiBPdXRwdXQgfV0sXG4gICAgY29udGFpbmVyOiBbeyB0eXBlOiBWaWV3Q2hpbGQsIGFyZ3M6IFsnY29udGFpbmVyJywgeyByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0sXSB9XSxcbiAgICBzZWFyY2hiYXI6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogW1NlYXJjaEJhckNvbXBvbmVudCxdIH1dLFxuICAgIHBvcHVwVGVtcGxhdGU6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydwb3B1cFRlbXBsYXRlJyxdIH1dLFxuICAgIHdyYXBwZXI6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWyd3cmFwcGVyJyxdIH1dLFxuICAgIG9wdGlvbnNMaXN0OiBbeyB0eXBlOiBWaWV3Q2hpbGQsIGFyZ3M6IFsnb3B0aW9uc0xpc3QnLF0gfV0sXG4gICAgdGVtcGxhdGU6IFt7IHR5cGU6IENvbnRlbnRDaGlsZCwgYXJnczogW0l0ZW1UZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIGN1c3RvbUl0ZW1UZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbQ3VzdG9tSXRlbVRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgZ3JvdXBUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIGZpeGVkR3JvdXBUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbRml4ZWRHcm91cFRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgaGVhZGVyVGVtcGxhdGU6IFt7IHR5cGU6IENvbnRlbnRDaGlsZCwgYXJnczogW0hlYWRlclRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgZm9vdGVyVGVtcGxhdGU6IFt7IHR5cGU6IENvbnRlbnRDaGlsZCwgYXJnczogW0Zvb3RlclRlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgdGFnVGVtcGxhdGU6IFt7IHR5cGU6IENvbnRlbnRDaGlsZCwgYXJnczogW1RhZ1RlbXBsYXRlRGlyZWN0aXZlLF0gfV0sXG4gICAgZ3JvdXBUYWdUZW1wbGF0ZTogW3sgdHlwZTogQ29udGVudENoaWxkLCBhcmdzOiBbR3JvdXBUYWdUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIG5vRGF0YVRlbXBsYXRlOiBbeyB0eXBlOiBDb250ZW50Q2hpbGQsIGFyZ3M6IFtOb0RhdGFUZW1wbGF0ZURpcmVjdGl2ZSxdIH1dLFxuICAgIHdpZGdldENsYXNzZXM6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstd2lkZ2V0JyxdIH0sIHsgdHlwZTogSG9zdEJpbmRpbmcsIGFyZ3M6IFsnY2xhc3Muay1tdWx0aXNlbGVjdCcsXSB9LCB7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstaGVhZGVyJyxdIH1dLFxuICAgIGRpcjogW3sgdHlwZTogSG9zdEJpbmRpbmcsIGFyZ3M6IFsnYXR0ci5kaXInLF0gfV0sXG4gICAgZGlzYWJsZWRDbGFzczogW3sgdHlwZTogSG9zdEJpbmRpbmcsIGFyZ3M6IFsnY2xhc3Muay1zdGF0ZS1kaXNhYmxlZCcsXSB9XVxufTtcblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIFRhZ0xpc3RDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnJlbW92ZVRhZyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgdGFnUHJvcCh0YWcsIHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHByb3AgJiYgaXNPYmplY3QodGFnKSA/IHRhZ1twcm9wXSA6IHRhZztcbiAgICB9XG4gICAgZGVsZXRlVGFnKGV2ZW50LCB0YWcpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiBldmVudC53aGljaCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVUYWcuZW1pdCh0YWcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGl0ZW1JZCh0YWcpIHtcbiAgICAgICAgaWYgKHRhZykgeyAvL2JlY2F1c2Ugb2YgY3VzdG9tIHZhbHVlc1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFnUHJlZml4ICsgXCItXCIgKyB0aGlzLnRhZ1Byb3AodGFnLCB0aGlzLnZhbHVlRmllbGQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlzR3JvdXBUYWcodGFnKSB7XG4gICAgICAgIHJldHVybiB0YWcgaW5zdGFuY2VvZiBBcnJheTtcbiAgICB9XG59XG5UYWdMaXN0Q29tcG9uZW50LmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdrZW5kby10YWdsaXN0JyxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8dWwgW2F0dHIuaWRdPVwiaWRcIiBjbGFzcz1cImstcmVzZXRcIj5cbiAgICAgICAgICAgIDxsaSByb2xlPVwib3B0aW9uXCIgKm5nRm9yPVwibGV0IHRhZyBvZiB0YWdzOyBsZXQgaSA9IGluZGV4O1wiIGFyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCIgW2F0dHIuYXJpYS1zZXRzaXplXT1cInRhZ3M/Lmxlbmd0aFwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvblwiIFtuZ0NsYXNzXT1cInsgJ2stc3RhdGUtZm9jdXNlZCc6IGkgPT09IGZvY3VzZWQgfVwiIFthdHRyLmlkXT1cIml0ZW1JZCh0YWcpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgKm5nSWY9XCJpc0dyb3VwVGFnKHRhZyk7IHRoZW4gZ3JvdXBUYWcgZWxzZSBzaW5nbGVUYWdcIj48L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2dyb3VwVGFnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICpuZ0lmPVwiZ3JvdXBUZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZUNvbnRleHRdPVwie1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVJlZjogZ3JvdXBUZW1wbGF0ZS50ZW1wbGF0ZVJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltcGxpY2l0OiB0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIWdyb3VwVGVtcGxhdGVcIj57eyB0YWcubGVuZ3RoIH19IHt7IHRhZy5sZW5ndGggPT09IDEgPyAnaXRlbScgOiAnaXRlbXMnIH19IHNlbGVjdGVkPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPG5nLXRlbXBsYXRlICNzaW5nbGVUYWc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxuZy10ZW1wbGF0ZSAqbmdJZj1cInRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlQ29udGV4dF09XCJ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlUmVmOiB0ZW1wbGF0ZS50ZW1wbGF0ZVJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGltcGxpY2l0OiB0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgW25nSWZdPVwiIXRlbXBsYXRlXCI+e3sgdGFnUHJvcCh0YWcsIHRleHRGaWVsZCkgfX08L25nLXRlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuXG4gICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1sYWJlbD1cImRlbGV0ZVwiIFthdHRyLmFyaWEtaGlkZGVuXT1cImkgIT09IGZvY3VzZWRcIiBjbGFzcz1cImstc2VsZWN0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiay1pY29uIGstaS1jbG9zZVwiIChtb3VzZWRvd24pPVwiZGVsZXRlVGFnKCRldmVudCwgdGFnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgPC91bD5cbiAgYFxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuVGFnTGlzdENvbXBvbmVudC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICB0YWdzOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICB0ZXh0RmllbGQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHZhbHVlRmllbGQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGZvY3VzZWQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIHRlbXBsYXRlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBncm91cFRlbXBsYXRlOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBkaXNhYmxlZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgdGFnUHJlZml4OiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBpZDogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgcmVtb3ZlVGFnOiBbeyB0eXBlOiBPdXRwdXQgfV1cbn07XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBUZW1wbGF0ZUNvbnRleHREaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKHZpZXdDb250YWluZXJSZWYpIHtcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmID0gdmlld0NvbnRhaW5lclJlZjtcbiAgICB9XG4gICAgc2V0IHRlbXBsYXRlQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLmluc2VydGVkVmlld1JlZikge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmLnJlbW92ZSh0aGlzLnZpZXdDb250YWluZXJSZWYuaW5kZXhPZih0aGlzLmluc2VydGVkVmlld1JlZikpO1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRlZFZpZXdSZWYgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQudGVtcGxhdGVSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0ZWRWaWV3UmVmID0gdGhpcy52aWV3Q29udGFpbmVyUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhjb250ZXh0LnRlbXBsYXRlUmVmLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblRlbXBsYXRlQ29udGV4dERpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW3RlbXBsYXRlQ29udGV4dF0nIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuVGVtcGxhdGVDb250ZXh0RGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogVmlld0NvbnRhaW5lclJlZiB9XG5dO1xuVGVtcGxhdGVDb250ZXh0RGlyZWN0aXZlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgIHRlbXBsYXRlQ29udGV4dDogW3sgdHlwZTogSW5wdXQgfV1cbn07XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBTZWxlY3RhYmxlRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihzZWxlY3Rpb25TZXJ2aWNlKSB7XG4gICAgICAgIC8vIEBIb3N0QmluZGluZygnYXR0ci5vZmZzZXQtaW5kZXgnKVxuICAgICAgICAvLyBASW5wdXQoKSBwdWJsaWMgb2Zmc2V0SW5kZXg6IG51bWJlcjtcbiAgICAgICAgdGhpcy5tdWx0aXBsZVNlbGVjdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblNlcnZpY2UgPSBzZWxlY3Rpb25TZXJ2aWNlO1xuICAgIH1cbiAgICBnZXQgZm9jdXNlZENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2VydmljZS5pc0ZvY3VzZWQodGhpcy5pbmRleCk7XG4gICAgfVxuICAgIGdldCBzZWxlY3RlZENsYXNzTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uU2VydmljZS5pc1NlbGVjdGVkKHRoaXMuaW5kZXgpO1xuICAgIH1cbiAgICBvbkNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBpZiAodGhpcy5tdWx0aXBsZVNlbGVjdGlvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU2VydmljZS5pc1NlbGVjdGVkKHRoaXMuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLnVuc2VsZWN0KHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TZXJ2aWNlLmFkZCh0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU2VydmljZS5jaGFuZ2UodGhpcy5pbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5TZWxlY3RhYmxlRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9Ecm9wRG93bnNTZWxlY3RhYmxlXSdcbiAgICAgICAgICAgIH0sXSB9LFxuXTtcbi8qKiBAbm9jb2xsYXBzZSAqL1xuU2VsZWN0YWJsZURpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IFNlbGVjdGlvblNlcnZpY2UgfVxuXTtcblNlbGVjdGFibGVEaXJlY3RpdmUucHJvcERlY29yYXRvcnMgPSB7XG4gICAgaW5kZXg6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2F0dHIuaW5kZXgnLF0gfSwgeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBoZWlnaHQ6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ3N0eWxlLmhlaWdodC5weCcsXSB9LCB7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ3N0eWxlLm1pbkhlaWdodC5weCcsXSB9LCB7IHR5cGU6IElucHV0IH1dLFxuICAgIG11bHRpcGxlU2VsZWN0aW9uOiBbeyB0eXBlOiBJbnB1dCB9XSxcbiAgICBmb2N1c2VkQ2xhc3NOYW1lOiBbeyB0eXBlOiBIb3N0QmluZGluZywgYXJnczogWydjbGFzcy5rLXN0YXRlLWZvY3VzZWQnLF0gfV0sXG4gICAgc2VsZWN0ZWRDbGFzc05hbWU6IFt7IHR5cGU6IEhvc3RCaW5kaW5nLCBhcmdzOiBbJ2NsYXNzLmstc3RhdGUtc2VsZWN0ZWQnLF0gfV0sXG4gICAgb25DbGljazogW3sgdHlwZTogSG9zdExpc3RlbmVyLCBhcmdzOiBbJ2NsaWNrJywgWyckZXZlbnQnXSxdIH1dXG59O1xuXG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIGNvbmZpZ3VyZXMgdGhlIE11bHRpU2VsZWN0IHRvIHNob3cgb25lIHNpbmdsZSBzdW1tYXJ5IHRhZyBmb3IgYWxsIHNlbGVjdGVkIGRhdGEgaXRlbXMuXG4gKiBXaGVuIGEgbnVtYmVyIGlzIHByb3ZpZGVkLCB0aGUgc3VtbWFyeSB0YWcgaXMgZGlzcGxheWVkIGFmdGVyIHRoZSBnaXZlbiBhbW91bnQgb2YgZGF0YSBpdGVtcyBhcmUgc2VsZWN0ZWRcbiAqIChbbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXNdKHslIHNsdWcgc3VtbWFyeXRhZ21vZGVfbXVsdGlzZWxlY3QgJX0pKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMtbm8tcnVuXG4gKiA8a2VuZG8tbXVsdGlzZWxlY3Qga2VuZG9NdWx0aVNlbGVjdFN1bW1hcnlUYWcgW2RhdGFdPVwiZGF0YVwiPjwva2VuZG8tbXVsdGlzZWxlY3Q+XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMtbm8tcnVuXG4gKiA8a2VuZG8tbXVsdGlzZWxlY3QgW2tlbmRvTXVsdGlTZWxlY3RTdW1tYXJ5VGFnXT1cIjJcIiBbZGF0YV09XCJkYXRhXCI+PC9rZW5kby1tdWx0aXNlbGVjdD5cbiAqIGBgYFxuICovXG5jbGFzcyBTdW1tYXJ5VGFnRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihtdWx0aVNlbGVjdENvbXBvbmVudCkge1xuICAgICAgICB0aGlzLm11bHRpU2VsZWN0Q29tcG9uZW50ID0gbXVsdGlTZWxlY3RDb21wb25lbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIG51bWVyaWMgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBzZWxlY3RlZCBkYXRhIGl0ZW1zIGFmdGVyIHdoaWNoIHRoZSBzdW1tYXJ5IHRhZyB3aWxsIGFwcGVhci5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2hvd0FmdGVyID0gMDsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1pbnB1dC1yZW5hbWVcbiAgICAgICAgdGhpcy5jcmVhdGVUYWdNYXBwZXIoKTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgICAgICBpZiAoaXNQcmVzZW50KGNoYW5nZXMuc2hvd0FmdGVyKSkge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVUYWdNYXBwZXIoKTtcbiAgICAgICAgICAgIHRoaXMubXVsdGlTZWxlY3RDb21wb25lbnQub25UYWdNYXBwZXJDaGFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjcmVhdGVUYWdNYXBwZXIoKSB7XG4gICAgICAgIHRoaXMubXVsdGlTZWxlY3RDb21wb25lbnQudGFnTWFwcGVyID0gKHRhZ3MpID0+IHtcbiAgICAgICAgICAgIGlmICh0YWdzLmxlbmd0aCA+IHRoaXMuc2hvd0FmdGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0YWdzLnNsaWNlKDAsIHRoaXMuc2hvd0FmdGVyKTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0YWdzLnNsaWNlKHRoaXMuc2hvd0FmdGVyLCB0YWdzLmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFncztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5TdW1tYXJ5VGFnRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9NdWx0aVNlbGVjdFN1bW1hcnlUYWddJ1xuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5TdW1tYXJ5VGFnRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogTXVsdGlTZWxlY3RDb21wb25lbnQgfVxuXTtcblN1bW1hcnlUYWdEaXJlY3RpdmUucHJvcERlY29yYXRvcnMgPSB7XG4gICAgc2hvd0FmdGVyOiBbeyB0eXBlOiBJbnB1dCwgYXJnczogWydrZW5kb011bHRpU2VsZWN0U3VtbWFyeVRhZycsXSB9XVxufTtcblxuY29uc3QgREVGQVVMVF9GSUxURVJfU0VUVElOR1MgPSB7XG4gICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgb3BlcmF0b3I6ICdzdGFydHNXaXRoJ1xufTtcbi8qKlxuICogSW1wbGVtZW50cyBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgYGZpbHRlckNoYW5nZWAgZXZlbnQgb2YgYSBEcm9wRG93bnMgY29tcG9uZW50XG4gKiB3aGljaCBwZXJmb3JtcyBzaW1wbGUgZGF0YSBmaWx0ZXJpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBfQENvbXBvbmVudCh7XG4gKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiB0ZW1wbGF0ZTogYFxuICogIDxrZW5kby1hdXRvY29tcGxldGVcbiAqICAgICAgW2RhdGFdPVwiZGF0YVwiXG4gKiAgICAgIGtlbmRvRHJvcERvd25GaWx0ZXJcbiAqICAgICAgcGxhY2Vob2xkZXI9XCJlLmcuIEFuZG9ycmFcIj5cbiAqICA8L2tlbmRvLWF1dG9jb21wbGV0ZT5cbiAqIGBcbiAqIH0pXG4gKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICogICAgIHB1YmxpYyBkYXRhOiBBcnJheTxzdHJpbmc+ID0gW1wiQWxiYW5pYVwiLCBcIkFuZG9ycmFcIiwgXCJBcm1lbmlhXCIsIFwiQXVzdHJpYVwiLCBcIkF6ZXJiYWlqYW5cIl07XG4gKiB9XG4gKiBgYGBcbiAqL1xuY2xhc3MgRmlsdGVyRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaGlkZGVuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNldHMgd2hldGhlciB0aGUgZmlsdGVyaW5nIGZ1bmN0aW9uYWxpdHkgaXMgZW5hYmxlZCBvbiBjb21wb25lbnQgaW5pdC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsdGVyYWJsZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBbXTtcbiAgICAgICAgdGhpcy5fZmlsdGVyU2V0dGluZ3MgPSBERUZBVUxUX0ZJTFRFUl9TRVRUSU5HUztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgZGF0YSB0aGF0IHdpbGwgYmUgdXNlZCBhcyBhIHNvdXJjZSBhcnJheSBmb3IgdGhlIGZpbHRlcmluZyBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIHNldCBkYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGEgfHwgW107XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdoaWNoIHNldHMgdGhlIGJlaGF2aW9yIG9mIHRoZSBga2VuZG9Ecm9wRG93bkZpbHRlcmAgZGlyZWN0aXZlLlxuICAgICAqL1xuICAgIHNldCBmaWx0ZXJTZXR0aW5ncyhzZXR0aW5ncykge1xuICAgICAgICB0aGlzLl9maWx0ZXJTZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfRklMVEVSX1NFVFRJTkdTLCBzZXR0aW5ncyk7XG4gICAgfVxuICAgIGdldCBmaWx0ZXJTZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlclNldHRpbmdzO1xuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuZmlsdGVyYWJsZSA9IHRoaXMuZmlsdGVyYWJsZTtcbiAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VTdWJzY3JpcHRpb24gPSB0aGlzLmNvbXBvbmVudC5maWx0ZXJDaGFuZ2VcbiAgICAgICAgICAgIC5zdWJzY3JpYmUocXVlcnkgPT4gdGhpcy5jb21wb25lbnQuZGF0YSA9IHRoaXMuZ2V0RmlsdGVyZWREYXRhKHF1ZXJ5KSk7XG4gICAgfVxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmZpbHRlckNoYW5nZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgICBnZXRGaWx0ZXJlZERhdGEocXVlcnkpIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSB0aGlzLmNvbXBvbmVudC50ZXh0RmllbGQgfHwgdGhpcy5jb21wb25lbnQudmFsdWVGaWVsZDtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5maWx0ZXIoaXRlbSA9PiB0aGlzLmNoZWNrSXRlbShnZXR0ZXIoaXRlbSwgZmllbGQpLCBxdWVyeSkpO1xuICAgIH1cbiAgICBjaGVja0l0ZW0odGFyZ2V0LCBxdWVyeSkge1xuICAgICAgICB0YXJnZXQgPSB0aGlzLm5vcm1hbGl6ZVZhbHVlKHRhcmdldCk7XG4gICAgICAgIHF1ZXJ5ID0gdGhpcy5ub3JtYWxpemVWYWx1ZShxdWVyeSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlclNldHRpbmdzLm9wZXJhdG9yID09PSAnY29udGFpbnMnID8gdGFyZ2V0LmluZGV4T2YocXVlcnkpICE9PSAtMSA6IHRhcmdldC5pbmRleE9mKHF1ZXJ5KSA9PT0gMDtcbiAgICB9XG4gICAgbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gaXNQcmVzZW50KHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKCkgOiAnJztcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyU2V0dGluZ3MuY2FzZVNlbnNpdGl2ZSA/IG5vcm1hbGl6ZWRWYWx1ZSA6IG5vcm1hbGl6ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbn1cbkZpbHRlckRpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2tlbmRvRHJvcERvd25GaWx0ZXJdJ1xuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5GaWx0ZXJEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSAoKSA9PiBbXG4gICAgeyB0eXBlOiBGaWx0ZXJhYmxlRHJvcERvd25Db21wb25lbnRCYXNlIH1cbl07XG5GaWx0ZXJEaXJlY3RpdmUucHJvcERlY29yYXRvcnMgPSB7XG4gICAgZGF0YTogW3sgdHlwZTogSW5wdXQgfV0sXG4gICAgZmlsdGVyU2V0dGluZ3M6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2tlbmRvRHJvcERvd25GaWx0ZXInLF0gfV0sXG4gICAgZmlsdGVyYWJsZTogW3sgdHlwZTogSW5wdXQgfV1cbn07XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5jbGFzcyBNZXNzYWdlcyBleHRlbmRzIENvbXBvbmVudE1lc3NhZ2VzIHtcbn1cbk1lc3NhZ2VzLnByb3BEZWNvcmF0b3JzID0ge1xuICAgIG5vRGF0YVRleHQ6IFt7IHR5cGU6IElucHV0IH1dLFxuICAgIGNsZWFyVGl0bGU6IFt7IHR5cGU6IElucHV0IH1dXG59O1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY2xhc3MgTG9jYWxpemVkTWVzc2FnZXNEaXJlY3RpdmUgZXh0ZW5kcyBNZXNzYWdlcyB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIH1cbn1cbkxvY2FsaXplZE1lc3NhZ2VzRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IE1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTG9jYWxpemVkTWVzc2FnZXNEaXJlY3RpdmUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBgXG4gICAgW2tlbmRvRHJvcERvd25MaXN0TG9jYWxpemVkTWVzc2FnZXNdLFxuICAgIFtrZW5kb0NvbWJvQm94TG9jYWxpemVkTWVzc2FnZXNdLFxuICAgIFtrZW5kb0F1dG9Db21wbGV0ZUxvY2FsaXplZE1lc3NhZ2VzXSxcbiAgICBba2VuZG9NdWx0aVNlbGVjdExvY2FsaXplZE1lc3NhZ2VzXVxuICBgXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkxvY2FsaXplZE1lc3NhZ2VzRGlyZWN0aXZlLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogTG9jYWxpemF0aW9uU2VydmljZSB9XG5dO1xuXG4vKipcbiAqIEN1c3RvbSBjb21wb25lbnQgbWVzc2FnZXMgb3ZlcnJpZGUgZGVmYXVsdCBjb21wb25lbnQgbWVzc2FnZXNcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcnRsX2Ryb3Bkb3ducyAlfSN0b2MtbWVzc2FnZXMpKS5cbiAqL1xuY2xhc3MgQ3VzdG9tTWVzc2FnZXNDb21wb25lbnQgZXh0ZW5kcyBNZXNzYWdlcyB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNlcnZpY2UgPSBzZXJ2aWNlO1xuICAgIH1cbiAgICBnZXQgb3ZlcnJpZGUoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbkN1c3RvbU1lc3NhZ2VzQ29tcG9uZW50LmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGU6IE1lc3NhZ2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ3VzdG9tTWVzc2FnZXNDb21wb25lbnQpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAna2VuZG8tZHJvcGRvd25saXN0LW1lc3NhZ2VzLCBrZW5kby1jb21ib2JveC1tZXNzYWdlcywga2VuZG8tYXV0b2NvbXBsZXRlLW1lc3NhZ2VzLCBrZW5kby1tdWx0aXNlbGVjdC1tZXNzYWdlcycsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IGBgXG4gICAgICAgICAgICB9LF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbkN1c3RvbU1lc3NhZ2VzQ29tcG9uZW50LmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xuICAgIHsgdHlwZTogTG9jYWxpemF0aW9uU2VydmljZSB9XG5dO1xuXG5jb25zdCBTSEFSRURfRElSRUNUSVZFUyA9IFtcbiAgICBIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBGb290ZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJdGVtVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBGaXhlZEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgTm9EYXRhVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgTG9jYWxpemVkTWVzc2FnZXNEaXJlY3RpdmUsXG4gICAgQ3VzdG9tTWVzc2FnZXNDb21wb25lbnQsXG4gICAgRmlsdGVyRGlyZWN0aXZlXG5dO1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogVGhlIGV4cG9ydGVkIHBhY2thZ2UgbW9kdWxlLlxuICpcbiAqIFRoZSBwYWNrYWdlIGV4cG9ydHM6XG4gKiAtIGBJdGVtVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBpdGVtIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYEhlYWRlclRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgaGVhZGVyIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYEZvb3RlclRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgZm9vdGVyIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYE5vRGF0YVRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgbm9EYXRhIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqL1xuY2xhc3MgU2hhcmVkRGlyZWN0aXZlc01vZHVsZSB7XG59XG5TaGFyZWREaXJlY3RpdmVzTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtTSEFSRURfRElSRUNUSVZFU10sXG4gICAgICAgICAgICAgICAgZXhwb3J0czogW1NIQVJFRF9ESVJFQ1RJVkVTXVxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuXG5jb25zdCBJTlRFUk5BTF9ESVJFQ1RJVkVTID0gW1xuICAgIExpc3RDb21wb25lbnQsXG4gICAgTGlzdEl0ZW1EaXJlY3RpdmUsXG4gICAgU2VsZWN0YWJsZURpcmVjdGl2ZSxcbiAgICBTZWFyY2hCYXJDb21wb25lbnQsXG4gICAgVGVtcGxhdGVDb250ZXh0RGlyZWN0aXZlXG5dO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIFNoYXJlZE1vZHVsZSB7XG59XG5TaGFyZWRNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICB7IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW0lOVEVSTkFMX0RJUkVDVElWRVNdLFxuICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtJTlRFUk5BTF9ESVJFQ1RJVkVTLCBDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBQb3B1cE1vZHVsZSwgUmVzaXplU2Vuc29yTW9kdWxlLCBTaGFyZWREaXJlY3RpdmVzTW9kdWxlLCBFdmVudHNNb2R1bGVdLFxuICAgICAgICAgICAgICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIEZvcm1zTW9kdWxlLCBQb3B1cE1vZHVsZSwgUmVzaXplU2Vuc29yTW9kdWxlLCBTaGFyZWREaXJlY3RpdmVzTW9kdWxlLCBFdmVudHNNb2R1bGVdXG4gICAgICAgICAgICB9LF0gfSxcbl07XG5cbmNvbnN0IEFVVE9DT01QTEVURV9ESVJFQ1RJVkVTID0gW1xuICAgIEF1dG9Db21wbGV0ZUNvbXBvbmVudFxuXTtcbi8qKlxuICogQGhpZGRlblxuICpcbiAqIFRoZSBleHBvcnRlZCBwYWNrYWdlIG1vZHVsZS5cbiAqXG4gKiBUaGUgcGFja2FnZSBleHBvcnRzOlxuICogLSBgQXV0b0NvbXBsZXRlQ29tcG9uZW50YCZtZGFzaDtUaGUgQXV0b0NvbXBsZXRlIGNvbXBvbmVudCBjbGFzcy5cbiAqIC0gYEl0ZW1UZW1wbGF0ZURpcmVjdGl2ZWAmbWRhc2g7VGhlIGl0ZW0gdGVtcGxhdGUgZGlyZWN0aXZlLlxuICogLSBgSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBoZWFkZXIgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICogLSBgRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBmb290ZXIgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICovXG5jbGFzcyBBdXRvQ29tcGxldGVNb2R1bGUge1xufVxuQXV0b0NvbXBsZXRlTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtBVVRPQ09NUExFVEVfRElSRUNUSVZFU10sXG4gICAgICAgICAgICAgICAgZXhwb3J0czogW0FVVE9DT01QTEVURV9ESVJFQ1RJVkVTLCBTaGFyZWREaXJlY3RpdmVzTW9kdWxlXSxcbiAgICAgICAgICAgICAgICBpbXBvcnRzOiBbU2hhcmVkTW9kdWxlXVxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuXG5jb25zdCBDT01CT0JPWF9ESVJFQ1RJVkVTID0gW1xuICAgIENvbWJvQm94Q29tcG9uZW50XG5dO1xuY29uc3QgybUwID0gdG91Y2hFbmFibGVkO1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogVGhlIGV4cG9ydGVkIHBhY2thZ2UgbW9kdWxlLlxuICpcbiAqIFRoZSBwYWNrYWdlIGV4cG9ydHM6XG4gKiAtIGBDb21ib0JveENvbXBvbmVudGAmbWRhc2g7VGhlIENvbWJvQm94IGNvbXBvbmVudCBjbGFzcy5cbiAqIC0gYEl0ZW1UZW1wbGF0ZURpcmVjdGl2ZWAmbWRhc2g7VGhlIGl0ZW0gdGVtcGxhdGUgZGlyZWN0aXZlLlxuICogLSBgSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBoZWFkZXIgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICogLSBgRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBmb290ZXIgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICovXG5jbGFzcyBDb21ib0JveE1vZHVsZSB7XG59XG5Db21ib0JveE1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbQ09NQk9CT1hfRElSRUNUSVZFU10sXG4gICAgICAgICAgICAgICAgZXhwb3J0czogW0NPTUJPQk9YX0RJUkVDVElWRVMsIFNoYXJlZERpcmVjdGl2ZXNNb2R1bGVdLFxuICAgICAgICAgICAgICAgIGltcG9ydHM6IFtTaGFyZWRNb2R1bGVdLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogVE9VQ0hfRU5BQkxFRCwgdXNlVmFsdWU6IMm1MCB9XVxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuY2xhc3MgRmlsdGVySW5wdXREaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHpvbmUpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy56b25lID0gem9uZTtcbiAgICB9XG4gICAgbmdPbkNoYW5nZXMoKSB7XG4gICAgICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dFRpY2soKCkgPT4gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuZm9jdXMoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV4dFRpY2soZm4pIHtcbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHNldFRpbWVvdXQoZm4pKTtcbiAgICB9XG59XG5GaWx0ZXJJbnB1dERpcmVjdGl2ZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2ZpbHRlcklucHV0XScgLy8gdHNsaW50OmRpc2FibGUtbGluZVxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuLyoqIEBub2NvbGxhcHNlICovXG5GaWx0ZXJJbnB1dERpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9ICgpID0+IFtcbiAgICB7IHR5cGU6IEVsZW1lbnRSZWYgfSxcbiAgICB7IHR5cGU6IE5nWm9uZSB9XG5dO1xuRmlsdGVySW5wdXREaXJlY3RpdmUucHJvcERlY29yYXRvcnMgPSB7XG4gICAgZm9jdXNlZDogW3sgdHlwZTogSW5wdXQsIGFyZ3M6IFsnZmlsdGVySW5wdXQnLF0gfV1cbn07XG5cbmNvbnN0IERST1BET1dOTElTVF9ESVJFQ1RJVkVTID0gW1xuICAgIERyb3BEb3duTGlzdENvbXBvbmVudCxcbiAgICBWYWx1ZVRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIEZpbHRlcklucHV0RGlyZWN0aXZlXG5dO1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogVGhlIGV4cG9ydGVkIHBhY2thZ2UgbW9kdWxlLlxuICpcbiAqIFRoZSBwYWNrYWdlIGV4cG9ydHM6XG4gKiAtIGBEcm9wRG93bkxpc3RDb21wb25lbnRgJm1kYXNoO1RoZSBEcm9wRG93bkxpc3QgY29tcG9uZW50IGNsYXNzLlxuICogLSBgSXRlbVRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgaXRlbSB0ZW1wbGF0ZSBkaXJlY3RpdmUuXG4gKiAtIGBWYWx1ZVRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgdmFsdWUgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICogLSBgSGVhZGVyVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBoZWFkZXIgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICogLSBgRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBmb290ZXIgdGVtcGxhdGUgZGlyZWN0aXZlLlxuICovXG5jbGFzcyBEcm9wRG93bkxpc3RNb2R1bGUge1xufVxuRHJvcERvd25MaXN0TW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtEUk9QRE9XTkxJU1RfRElSRUNUSVZFU10sXG4gICAgICAgICAgICAgICAgZXhwb3J0czogW0RST1BET1dOTElTVF9ESVJFQ1RJVkVTLCBTaGFyZWREaXJlY3RpdmVzTW9kdWxlXSxcbiAgICAgICAgICAgICAgICBpbXBvcnRzOiBbU2hhcmVkTW9kdWxlXVxuICAgICAgICAgICAgfSxdIH0sXG5dO1xuXG5jb25zdCBNVUxUSVNFTEVDVF9ESVJFQ1RJVkVTID0gW1xuICAgIE11bHRpU2VsZWN0Q29tcG9uZW50LFxuICAgIFRhZ0xpc3RDb21wb25lbnQsXG4gICAgVGFnVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgR3JvdXBUYWdUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBTdW1tYXJ5VGFnRGlyZWN0aXZlLFxuICAgIEN1c3RvbUl0ZW1UZW1wbGF0ZURpcmVjdGl2ZVxuXTtcbmNvbnN0IMm1MCQxID0gdG91Y2hFbmFibGVkO1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogVGhlIGV4cG9ydGVkIHBhY2thZ2UgbW9kdWxlLlxuICpcbiAqIFRoZSBwYWNrYWdlIGV4cG9ydHM6XG4gKiAtIGBNdWx0aVNlbGVjdENvbXBvbmVudGAmbWRhc2g7VGhlIE11bHRpU2VsZWN0IGNvbXBvbmVudCBjbGFzcy5cbiAqIC0gYFN1bW1hcnlUYWdEaXJlY3RpdmVgJm1kYXNoO1RoZSBNdWx0aVNlbGVjdCBzdW1tYXJ5IHRhZyBkaXJlY3RpdmUuXG4gKiAtIGBJdGVtVGVtcGxhdGVEaXJlY3RpdmVgJm1kYXNoO1RoZSBpdGVtIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYEN1c3RvbUl0ZW1UZW1wbGF0ZURpcmVjdGl2ZWAmbWRhc2g7VGhlIGN1c3RvbSBpdGVtIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYFRhZ1RlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgdGFnIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYFN1bW1hcnlUYWdUZW1wbGF0ZURpcmVjdGl2ZWAmbWRhc2g7VGhlIHN1bW1hcnkgdGFnIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYEhlYWRlclRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgaGVhZGVyIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYEZvb3RlclRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgZm9vdGVyIHRlbXBsYXRlIGRpcmVjdGl2ZS5cbiAqIC0gYE5vRGF0YVRlbXBsYXRlRGlyZWN0aXZlYCZtZGFzaDtUaGUgbm8tZGF0YSB0ZW1wbGF0ZSBkaXJlY3RpdmUuXG4gKi9cbmNsYXNzIE11bHRpU2VsZWN0TW9kdWxlIHtcbn1cbk11bHRpU2VsZWN0TW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgeyB0eXBlOiBOZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtNVUxUSVNFTEVDVF9ESVJFQ1RJVkVTXSxcbiAgICAgICAgICAgICAgICBleHBvcnRzOiBbTVVMVElTRUxFQ1RfRElSRUNUSVZFUywgU2hhcmVkRGlyZWN0aXZlc01vZHVsZV0sXG4gICAgICAgICAgICAgICAgaW1wb3J0czogW1NoYXJlZE1vZHVsZV0sXG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUT1VDSF9FTkFCTEVELCB1c2VWYWx1ZTogybUwJDEgfV1cbiAgICAgICAgICAgIH0sXSB9LFxuXTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbTmdNb2R1bGVdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nbW9kdWxlYXBpJ10gfX0pXG4gKiBkZWZpbml0aW9uIGZvciB0aGUgRHJvcGRvd25zIGNvbXBvbmVudHMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0cy1uby1ydW5cbiAqIC8vIEltcG9ydCB0aGUgRHJvcGRvd25zIG1vZHVsZVxuICogaW1wb3J0IHsgRHJvcERvd25zTW9kdWxlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZHJvcGRvd25zJztcbiAqXG4gKiAvLyBUaGUgYnJvd3NlciBwbGF0Zm9ybSB3aXRoIGEgY29tcGlsZXJcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICpcbiAqIGltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogLy8gSW1wb3J0IHRoZSBhcHAgY29tcG9uZW50XG4gKiBpbXBvcnQgeyBBcHBDb21wb25lbnQgfSBmcm9tICcuL2FwcC5jb21wb25lbnQnO1xuICpcbiAqIC8vIERlZmluZSB0aGUgYXBwIG1vZHVsZVxuICogX0BOZ01vZHVsZSh7XG4gKiAgICAgZGVjbGFyYXRpb25zOiBbQXBwQ29tcG9uZW50XSwgLy8gZGVjbGFyZSB0aGUgYXBwIGNvbXBvbmVudFxuICogICAgIGltcG9ydHM6ICAgICAgW0Jyb3dzZXJNb2R1bGUsIERyb3BEb3duc01vZHVsZV0sIC8vIGltcG9ydCB0aGUgRHJvcGRvd25zIG1vZHVsZVxuICogICAgIGJvb3RzdHJhcDogICAgW0FwcENvbXBvbmVudF1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gKlxuICogLy8gQ29tcGlsZSBhbmQgbGF1bmNoIHRoZSBtb2R1bGVcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKTtcbiAqXG4gKiBgYGBcbiAqL1xuY2xhc3MgRHJvcERvd25zTW9kdWxlIHtcbn1cbkRyb3BEb3duc01vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgZXhwb3J0czogW0F1dG9Db21wbGV0ZU1vZHVsZSwgQ29tYm9Cb3hNb2R1bGUsIERyb3BEb3duTGlzdE1vZHVsZSwgTXVsdGlTZWxlY3RNb2R1bGVdXG4gICAgICAgICAgICB9LF0gfSxcbl07XG5cbi8qKlxuICogR2VuZXJhdGVkIGJ1bmRsZSBpbmRleC4gRG8gbm90IGVkaXQuXG4gKi9cblxuZXhwb3J0IHsgQVVUT0NPTVBMRVRFX1ZBTFVFX0FDQ0VTU09SLCBDT01CT0JPWF9WQUxVRV9BQ0NFU1NPUiwgVE9VQ0hfRU5BQkxFRCwgRGF0YVNlcnZpY2UsIERpc2FibGVkSXRlbXNTZXJ2aWNlLCBGaWx0ZXJhYmxlRHJvcERvd25Db21wb25lbnRCYXNlLCBMaXN0SXRlbURpcmVjdGl2ZSwgQ3VzdG9tTWVzc2FnZXNDb21wb25lbnQsIExvY2FsaXplZE1lc3NhZ2VzRGlyZWN0aXZlLCBNZXNzYWdlcywgTmF2aWdhdGlvblNlcnZpY2UsIFNlYXJjaEJhckNvbXBvbmVudCwgU2VsZWN0aW9uU2VydmljZSwgTm9EYXRhVGVtcGxhdGVEaXJlY3RpdmUsIFRhZ1RlbXBsYXRlRGlyZWN0aXZlLCBEUk9QRE9XTkxJU1RfVkFMVUVfQUNDRVNTT1IsIEZpbHRlcklucHV0RGlyZWN0aXZlLCBBdXRvQ29tcGxldGVDb21wb25lbnQsIENvbWJvQm94Q29tcG9uZW50LCBEcm9wRG93bkxpc3RDb21wb25lbnQsIE11bHRpU2VsZWN0Q29tcG9uZW50LCBUYWdMaXN0Q29tcG9uZW50LCBJdGVtVGVtcGxhdGVEaXJlY3RpdmUsIEdyb3VwVGVtcGxhdGVEaXJlY3RpdmUsIEZpeGVkR3JvdXBUZW1wbGF0ZURpcmVjdGl2ZSwgQ3VzdG9tSXRlbVRlbXBsYXRlRGlyZWN0aXZlLCBIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSwgRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmUsIFZhbHVlVGVtcGxhdGVEaXJlY3RpdmUsIFRlbXBsYXRlQ29udGV4dERpcmVjdGl2ZSwgR3JvdXBUYWdUZW1wbGF0ZURpcmVjdGl2ZSwgU2VsZWN0YWJsZURpcmVjdGl2ZSwgU3VtbWFyeVRhZ0RpcmVjdGl2ZSwgRmlsdGVyRGlyZWN0aXZlLCBEcm9wRG93bnNNb2R1bGUsIE11bHRpU2VsZWN0TW9kdWxlLCBTaGFyZWRNb2R1bGUsIEF1dG9Db21wbGV0ZU1vZHVsZSwgQ29tYm9Cb3hNb2R1bGUsIERyb3BEb3duTGlzdE1vZHVsZSwgU2hhcmVkRGlyZWN0aXZlc01vZHVsZSwgTGlzdENvbXBvbmVudCwgUHJldmVudGFibGVFdmVudCB9O1xuIl19