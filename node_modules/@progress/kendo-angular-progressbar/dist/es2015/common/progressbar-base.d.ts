/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { OnChanges, SimpleChanges } from '@angular/core';
import { ProgressBarOrientation } from '../types/progressbar-orientation';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class ProgressBarBase implements OnChanges {
    protected localization: LocalizationService;
    widgetClasses: boolean;
    readonly isHorizontal: boolean;
    readonly isVertical: boolean;
    readonly disabledClass: boolean;
    readonly reverseClass: boolean;
    readonly indeterminateClass: boolean;
    readonly dirAttribute: string;
    roleAttribute: string;
    readonly ariaMinAttribute: string;
    readonly ariaMaxAttribute: string;
    readonly ariaValueAttribute: string;
    /**
     * The maximum value of the ProgressBar.
     * Defaults to `100`.
     */
    max: number;
    /**
     * The minimum value of the ProgressBar.
     * Defaults to `0`.
     */
    min: number;
    /**
     * The value of the ProgressBar.
     * Has to be between `min` and `max`.
     * By default, the value is equal to the `min` value.
     */
    /**
     * The value of the ProgressBar.
     * Has to be between `min` and `max`.
     * Defaults to `0`.
     */
    value: number;
    /**
     * @hidden
     */
    readonly isCompleted: boolean;
    /**
     * @hidden
     */
    readonly statusWidth: number;
    /**
     * @hidden
     */
    readonly statusHeight: number;
    /**
     * @hidden
     */
    readonly statusWrapperWidth: number;
    /**
     * @hidden
     */
    readonly statusWrapperHeight: number;
    protected readonly _progressRatio: number;
    /**
     * Defines the orientation of the ProgressBar
     * ([see example]({% slug progressbar_orientation %})).
     * Defaults to `horizontal`.
     */
    orientation: ProgressBarOrientation;
    /**
     * If set to `true`, the ProgressBar will be disabled
     * ([see example]({% slug progressbar_disabled %})).
     * It will still allow you to change its value.
     * Defaults to `false`.
     */
    disabled: boolean;
    /**
     * If set to `true`, the ProgressBar will be reversed
     * ([see example]({% slug progressbar_direction %})).
     * Defaults to `false`.
     */
    reverse: boolean;
    /**
     * Sets the `indeterminate` state of the ProgressBar.
     * Defaults to `false`.
     */
    indeterminate: boolean;
    protected direction: string;
    protected localizationChangeSubscription: any;
    protected displayValue: number;
    protected previousValue: number;
    /**
     * @hidden
     */
    constructor(localization: LocalizationService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProgressBarBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ProgressBarBase, never, never, { "max": "max"; "min": "min"; "value": "value"; "orientation": "orientation"; "disabled": "disabled"; "reverse": "reverse"; "indeterminate": "indeterminate"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXItYmFzZS5kLnRzIiwic291cmNlcyI6WyJwcm9ncmVzc2Jhci1iYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2dyZXNzQmFyT3JpZW50YXRpb24gfSBmcm9tICcuLi90eXBlcy9wcm9ncmVzc2Jhci1vcmllbnRhdGlvbic7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUHJvZ3Jlc3NCYXJCYXNlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcm90ZWN0ZWQgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIHdpZGdldENsYXNzZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXNIb3Jpem9udGFsOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGlzVmVydGljYWw6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlzYWJsZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSByZXZlcnNlQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaW5kZXRlcm1pbmF0ZUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRpckF0dHJpYnV0ZTogc3RyaW5nO1xuICAgIHJvbGVBdHRyaWJ1dGU6IHN0cmluZztcbiAgICByZWFkb25seSBhcmlhTWluQXR0cmlidXRlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYXJpYU1heEF0dHJpYnV0ZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGFyaWFWYWx1ZUF0dHJpYnV0ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHZhbHVlIG9mIHRoZSBQcm9ncmVzc0Jhci5cbiAgICAgKiBEZWZhdWx0cyB0byBgMTAwYC5cbiAgICAgKi9cbiAgICBtYXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbWluaW11bSB2YWx1ZSBvZiB0aGUgUHJvZ3Jlc3NCYXIuXG4gICAgICogRGVmYXVsdHMgdG8gYDBgLlxuICAgICAqL1xuICAgIG1pbjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSB2YWx1ZSBvZiB0aGUgUHJvZ3Jlc3NCYXIuXG4gICAgICogSGFzIHRvIGJlIGJldHdlZW4gYG1pbmAgYW5kIGBtYXhgLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB2YWx1ZSBpcyBlcXVhbCB0byB0aGUgYG1pbmAgdmFsdWUuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIG9mIHRoZSBQcm9ncmVzc0Jhci5cbiAgICAgKiBIYXMgdG8gYmUgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAuXG4gICAgICogRGVmYXVsdHMgdG8gYDBgLlxuICAgICAqL1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzQ29tcGxldGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdGF0dXNXaWR0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBzdGF0dXNIZWlnaHQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgc3RhdHVzV3JhcHBlcldpZHRoOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXR1c1dyYXBwZXJIZWlnaHQ6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX3Byb2dyZXNzUmF0aW86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgUHJvZ3Jlc3NCYXJcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHByb2dyZXNzYmFyX29yaWVudGF0aW9uICV9KSkuXG4gICAgICogRGVmYXVsdHMgdG8gYGhvcml6b250YWxgLlxuICAgICAqL1xuICAgIG9yaWVudGF0aW9uOiBQcm9ncmVzc0Jhck9yaWVudGF0aW9uO1xuICAgIC8qKlxuICAgICAqIElmIHNldCB0byBgdHJ1ZWAsIHRoZSBQcm9ncmVzc0JhciB3aWxsIGJlIGRpc2FibGVkXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwcm9ncmVzc2Jhcl9kaXNhYmxlZCAlfSkpLlxuICAgICAqIEl0IHdpbGwgc3RpbGwgYWxsb3cgeW91IHRvIGNoYW5nZSBpdHMgdmFsdWUuXG4gICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgUHJvZ3Jlc3NCYXIgd2lsbCBiZSByZXZlcnNlZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcHJvZ3Jlc3NiYXJfZGlyZWN0aW9uICV9KSkuXG4gICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICByZXZlcnNlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGBpbmRldGVybWluYXRlYCBzdGF0ZSBvZiB0aGUgUHJvZ3Jlc3NCYXIuXG4gICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBpbmRldGVybWluYXRlOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBkaXJlY3Rpb246IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgbG9jYWxpemF0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uOiBhbnk7XG4gICAgcHJvdGVjdGVkIGRpc3BsYXlWYWx1ZTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBwcmV2aW91c1ZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==