/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ProgressBarBase } from '../common/progressbar-base';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents the [Kendo UI ChunkProgressBar component for Angular]({% slug overview_chunkprogressbar %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-chunkprogressbar [value]="value">
 *        </kendo-chunkprogressbar>
 *    `
 * })
 * class AppComponent {
 *     public value = 40;
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ChunkProgressBarComponent extends ProgressBarBase {
    localization: LocalizationService;
    /**
     * Sets the number of chunks into which the ChunkProgressBar will be split.
     * Defaults to `5`.
     */
    chunkCount: number;
    /**
     * @hidden
     */
    readonly chunks: boolean[];
    /**
     * The CSS styles that will be rendered on the full chunk elements ([see example]({% slug chunkprogressbar_appearance %})).
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    progressCssStyle: {
        [key: string]: string;
    };
    /**
     * The CSS classes that will be rendered on the full chunk elements ([see example]({% slug chunkprogressbar_appearance %})).
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    progressCssClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /**
     * The CSS styles that will be rendered on the empty chunk elements ([see example]({% slug chunkprogressbar_appearance %})).
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    emptyCssStyle: {
        [key: string]: string;
    };
    /**
     * The CSS classes that will be rendered on the empty chunk elements ([see example]({% slug chunkprogressbar_appearance %})).
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    emptyCssClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /**
     * @hidden
     */
    readonly chunkSizePercentage: number;
    /**
     * @hidden
     */
    readonly orientationStyles: any;
    private _orientationStyles;
    /**
     * @hidden
     */
    constructor(localization: LocalizationService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChunkProgressBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChunkProgressBarComponent, "kendo-chunkprogressbar", ["kendoChunkProgressBar"], { "chunkCount": "chunkCount"; "progressCssStyle": "progressCssStyle"; "progressCssClass": "progressCssClass"; "emptyCssStyle": "emptyCssStyle"; "emptyCssClass": "emptyCssClass"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmstcHJvZ3Jlc3NiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNodW5rLXByb2dyZXNzYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgUHJvZ3Jlc3NCYXJCYXNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb2dyZXNzYmFyLWJhc2UnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgQ2h1bmtQcm9ncmVzc0JhciBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfY2h1bmtwcm9ncmVzc2JhciAlfSkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzLXByZXZpZXdcbiAqIF9AQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgICAgPGtlbmRvLWNodW5rcHJvZ3Jlc3NiYXIgW3ZhbHVlXT1cInZhbHVlXCI+XG4gKiAgICAgICAgPC9rZW5kby1jaHVua3Byb2dyZXNzYmFyPlxuICogICAgYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICAgcHVibGljIHZhbHVlID0gNDA7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2h1bmtQcm9ncmVzc0JhckNvbXBvbmVudCBleHRlbmRzIFByb2dyZXNzQmFyQmFzZSB7XG4gICAgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG51bWJlciBvZiBjaHVua3MgaW50byB3aGljaCB0aGUgQ2h1bmtQcm9ncmVzc0JhciB3aWxsIGJlIHNwbGl0LlxuICAgICAqIERlZmF1bHRzIHRvIGA1YC5cbiAgICAgKi9cbiAgICBjaHVua0NvdW50OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNodW5rczogYm9vbGVhbltdO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBvbiB0aGUgZnVsbCBjaHVuayBlbGVtZW50cyAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGNodW5rcHJvZ3Jlc3NiYXJfYXBwZWFyYW5jZSAlfSkpLlxuICAgICAqIFN1cHBvcnRzIHRoZSB0eXBlIG9mIHZhbHVlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgW2BuZ1N0eWxlYF0oe3sgc2l0ZS5kYXRhLnVybHMuYW5ndWxhclsnbmdzdHlsZWFwaSddIH19KS5cbiAgICAgKi9cbiAgICBwcm9ncmVzc0Nzc1N0eWxlOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgb24gdGhlIGZ1bGwgY2h1bmsgZWxlbWVudHMgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjaHVua3Byb2dyZXNzYmFyX2FwcGVhcmFuY2UgJX0pKS5cbiAgICAgKiBTdXBwb3J0cyB0aGUgdHlwZSBvZiB2YWx1ZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IFtgbmdDbGFzc2BdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nY2xhc3NhcGknXSB9fSkuXG4gICAgICovXG4gICAgcHJvZ3Jlc3NDc3NDbGFzczogc3RyaW5nIHwgc3RyaW5nW10gfCBTZXQ8c3RyaW5nPiB8IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIG9uIHRoZSBlbXB0eSBjaHVuayBlbGVtZW50cyAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGNodW5rcHJvZ3Jlc3NiYXJfYXBwZWFyYW5jZSAlfSkpLlxuICAgICAqIFN1cHBvcnRzIHRoZSB0eXBlIG9mIHZhbHVlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgW2BuZ1N0eWxlYF0oe3sgc2l0ZS5kYXRhLnVybHMuYW5ndWxhclsnbmdzdHlsZWFwaSddIH19KS5cbiAgICAgKi9cbiAgICBlbXB0eUNzc1N0eWxlOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgb24gdGhlIGVtcHR5IGNodW5rIGVsZW1lbnRzIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgY2h1bmtwcm9ncmVzc2Jhcl9hcHBlYXJhbmNlICV9KSkuXG4gICAgICogU3VwcG9ydHMgdGhlIHR5cGUgb2YgdmFsdWVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBbYG5nQ2xhc3NgXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWyduZ2NsYXNzYXBpJ10gfX0pLlxuICAgICAqL1xuICAgIGVtcHR5Q3NzQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdIHwgU2V0PHN0cmluZz4gfCB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBjaHVua1NpemVQZXJjZW50YWdlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IG9yaWVudGF0aW9uU3R5bGVzOiBhbnk7XG4gICAgcHJpdmF0ZSBfb3JpZW50YXRpb25TdHlsZXM7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSk7XG59XG4iXX0=