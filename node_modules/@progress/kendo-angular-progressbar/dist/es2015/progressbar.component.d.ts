/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AnimationEndEvent } from './types/animation-end-event';
import { ProgressBarBase } from './common/progressbar-base';
import { NgZone, Renderer2, EventEmitter, SimpleChanges } from '@angular/core';
import { LabelSettings } from './types/label-settings.interface';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ProgressBarAnimation } from './types/progressbar-animation.interface';
/**
 * Represents the [Kendo UI ProgressBar component for Angular]({% slug overview_progressbar %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-progressbar [value]="value">
 *        </kendo-progressbar>
 *    `
 * })
 * class AppComponent {
 *     public value = 50;
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ProgressBarComponent extends ProgressBarBase {
    localization: LocalizationService;
    private zone;
    private renderer;
    /**
     * Determines whether the status label will be visible.
     * Defaults to `true`&mdash;the label will be visible and displayed with the default
     * `LabelSettings` having its position set to `end` and its format set to `value`.
     */
    label: boolean | LabelSettings;
    /**
     * The CSS styles that will be rendered on the inner element which represents the full portion of the progress bar
     * ([see example]({% slug progressbar_appearance %})).
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    progressCssStyle: {
        [key: string]: string;
    };
    /**
     * The CSS classes that will be rendered on the inner element which represents the full portion of the progress bar
     * ([see example]({% slug progressbar_appearance %})).
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    progressCssClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /**
     * The CSS styles that will be rendered on the inner element which represents the empty portion of the progress bar
     * ([see example]({% slug progressbar_appearance %})).
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    emptyCssStyle: {
        [key: string]: string;
    };
    /**
     * The CSS classes that will be rendered on the inner element which represents the empty portion of the progress bar
     * ([see example]({% slug progressbar_appearance %})).
     * Supports the type of values that are supported by [`ngClass`]({{ site.data.urls.angular['ngclassapi'] }}).
     */
    emptyCssClass: string | string[] | Set<string> | {
        [key: string]: any;
    };
    /**
     * The animation configuration of the ProgressBar.
     * Defaults to `false`.
     */
    animation: boolean | ProgressBarAnimation;
    /**
     * Fires when the animation which indicates the latest value change is completed.
     */
    animationEnd: EventEmitter<AnimationEndEvent>;
    /**
     * @hidden
     */
    readonly showLabel: boolean;
    /**
     * @hidden
     */
    readonly labelPosition: string;
    /**
     * @hidden
     */
    readonly isPositionStart: boolean;
    /**
     * @hidden
     */
    readonly isPositionCenter: boolean;
    /**
     * @hidden
     */
    readonly isPositionEnd: boolean;
    /**
     * @hidden
     */
    readonly formattedLabelValue: string;
    private progressStatusElement;
    private progressStatusWrapperElement;
    private animationFrame;
    private cancelCurrentAnimation;
    private isAnimationInProgress;
    /**
     * @hidden
     */
    constructor(localization: LocalizationService, zone: NgZone, renderer: Renderer2);
    /**
     * @hidden
     */
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    protected startAnimation(previousValue: number): void;
    /**
     * @hidden
     */
    protected readonly animationDuration: number;
    private stopAnimation;
    private getAnimationOptions;
    private renderValueChange;
    private resetProgress;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ProgressBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ProgressBarComponent, "kendo-progressbar", ["kendoProgressBar"], { "label": "label"; "animation": "animation"; "progressCssStyle": "progressCssStyle"; "progressCssClass": "progressCssClass"; "emptyCssStyle": "emptyCssStyle"; "emptyCssClass": "emptyCssClass"; }, { "animationEnd": "animationEnd"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3NiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEFuaW1hdGlvbkVuZEV2ZW50IH0gZnJvbSAnLi90eXBlcy9hbmltYXRpb24tZW5kLWV2ZW50JztcbmltcG9ydCB7IFByb2dyZXNzQmFyQmFzZSB9IGZyb20gJy4vY29tbW9uL3Byb2dyZXNzYmFyLWJhc2UnO1xuaW1wb3J0IHsgTmdab25lLCBSZW5kZXJlcjIsIEV2ZW50RW1pdHRlciwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGFiZWxTZXR0aW5ncyB9IGZyb20gJy4vdHlwZXMvbGFiZWwtc2V0dGluZ3MuaW50ZXJmYWNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFByb2dyZXNzQmFyQW5pbWF0aW9uIH0gZnJvbSAnLi90eXBlcy9wcm9ncmVzc2Jhci1hbmltYXRpb24uaW50ZXJmYWNlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIFByb2dyZXNzQmFyIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19wcm9ncmVzc2JhciAlfSkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzLXByZXZpZXdcbiAqIF9AQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgICAgPGtlbmRvLXByb2dyZXNzYmFyIFt2YWx1ZV09XCJ2YWx1ZVwiPlxuICogICAgICAgIDwva2VuZG8tcHJvZ3Jlc3NiYXI+XG4gKiAgICBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgICBwdWJsaWMgdmFsdWUgPSA1MDtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQcm9ncmVzc0JhckNvbXBvbmVudCBleHRlbmRzIFByb2dyZXNzQmFyQmFzZSB7XG4gICAgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3RhdHVzIGxhYmVsIHdpbGwgYmUgdmlzaWJsZS5cbiAgICAgKiBEZWZhdWx0cyB0byBgdHJ1ZWAmbWRhc2g7dGhlIGxhYmVsIHdpbGwgYmUgdmlzaWJsZSBhbmQgZGlzcGxheWVkIHdpdGggdGhlIGRlZmF1bHRcbiAgICAgKiBgTGFiZWxTZXR0aW5nc2AgaGF2aW5nIGl0cyBwb3NpdGlvbiBzZXQgdG8gYGVuZGAgYW5kIGl0cyBmb3JtYXQgc2V0IHRvIGB2YWx1ZWAuXG4gICAgICovXG4gICAgbGFiZWw6IGJvb2xlYW4gfCBMYWJlbFNldHRpbmdzO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBvbiB0aGUgaW5uZXIgZWxlbWVudCB3aGljaCByZXByZXNlbnRzIHRoZSBmdWxsIHBvcnRpb24gb2YgdGhlIHByb2dyZXNzIGJhclxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcHJvZ3Jlc3NiYXJfYXBwZWFyYW5jZSAlfSkpLlxuICAgICAqIFN1cHBvcnRzIHRoZSB0eXBlIG9mIHZhbHVlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgW2BuZ1N0eWxlYF0oe3sgc2l0ZS5kYXRhLnVybHMuYW5ndWxhclsnbmdzdHlsZWFwaSddIH19KS5cbiAgICAgKi9cbiAgICBwcm9ncmVzc0Nzc1N0eWxlOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgb24gdGhlIGlubmVyIGVsZW1lbnQgd2hpY2ggcmVwcmVzZW50cyB0aGUgZnVsbCBwb3J0aW9uIG9mIHRoZSBwcm9ncmVzcyBiYXJcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHByb2dyZXNzYmFyX2FwcGVhcmFuY2UgJX0pKS5cbiAgICAgKiBTdXBwb3J0cyB0aGUgdHlwZSBvZiB2YWx1ZXMgdGhhdCBhcmUgc3VwcG9ydGVkIGJ5IFtgbmdDbGFzc2BdKHt7IHNpdGUuZGF0YS51cmxzLmFuZ3VsYXJbJ25nY2xhc3NhcGknXSB9fSkuXG4gICAgICovXG4gICAgcHJvZ3Jlc3NDc3NDbGFzczogc3RyaW5nIHwgc3RyaW5nW10gfCBTZXQ8c3RyaW5nPiB8IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIENTUyBzdHlsZXMgdGhhdCB3aWxsIGJlIHJlbmRlcmVkIG9uIHRoZSBpbm5lciBlbGVtZW50IHdoaWNoIHJlcHJlc2VudHMgdGhlIGVtcHR5IHBvcnRpb24gb2YgdGhlIHByb2dyZXNzIGJhclxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgcHJvZ3Jlc3NiYXJfYXBwZWFyYW5jZSAlfSkpLlxuICAgICAqIFN1cHBvcnRzIHRoZSB0eXBlIG9mIHZhbHVlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgYnkgW2BuZ1N0eWxlYF0oe3sgc2l0ZS5kYXRhLnVybHMuYW5ndWxhclsnbmdzdHlsZWFwaSddIH19KS5cbiAgICAgKi9cbiAgICBlbXB0eUNzc1N0eWxlOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgb24gdGhlIGlubmVyIGVsZW1lbnQgd2hpY2ggcmVwcmVzZW50cyB0aGUgZW1wdHkgcG9ydGlvbiBvZiB0aGUgcHJvZ3Jlc3MgYmFyXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwcm9ncmVzc2Jhcl9hcHBlYXJhbmNlICV9KSkuXG4gICAgICogU3VwcG9ydHMgdGhlIHR5cGUgb2YgdmFsdWVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBbYG5nQ2xhc3NgXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWyduZ2NsYXNzYXBpJ10gfX0pLlxuICAgICAqL1xuICAgIGVtcHR5Q3NzQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdIHwgU2V0PHN0cmluZz4gfCB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBhbmltYXRpb24gY29uZmlndXJhdGlvbiBvZiB0aGUgUHJvZ3Jlc3NCYXIuXG4gICAgICogRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICAgKi9cbiAgICBhbmltYXRpb246IGJvb2xlYW4gfCBQcm9ncmVzc0JhckFuaW1hdGlvbjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBhbmltYXRpb24gd2hpY2ggaW5kaWNhdGVzIHRoZSBsYXRlc3QgdmFsdWUgY2hhbmdlIGlzIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBhbmltYXRpb25FbmQ6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25FbmRFdmVudD47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNob3dMYWJlbDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgbGFiZWxQb3NpdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc1Bvc2l0aW9uU3RhcnQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzUG9zaXRpb25DZW50ZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlzUG9zaXRpb25FbmQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGZvcm1hdHRlZExhYmVsVmFsdWU6IHN0cmluZztcbiAgICBwcml2YXRlIHByb2dyZXNzU3RhdHVzRWxlbWVudDtcbiAgICBwcml2YXRlIHByb2dyZXNzU3RhdHVzV3JhcHBlckVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBhbmltYXRpb25GcmFtZTtcbiAgICBwcml2YXRlIGNhbmNlbEN1cnJlbnRBbmltYXRpb247XG4gICAgcHJpdmF0ZSBpc0FuaW1hdGlvbkluUHJvZ3Jlc3M7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgem9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByb3RlY3RlZCBzdGFydEFuaW1hdGlvbihwcmV2aW91c1ZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgYW5pbWF0aW9uRHVyYXRpb246IG51bWJlcjtcbiAgICBwcml2YXRlIHN0b3BBbmltYXRpb247XG4gICAgcHJpdmF0ZSBnZXRBbmltYXRpb25PcHRpb25zO1xuICAgIHByaXZhdGUgcmVuZGVyVmFsdWVDaGFuZ2U7XG4gICAgcHJpdmF0ZSByZXNldFByb2dyZXNzO1xufVxuIl19