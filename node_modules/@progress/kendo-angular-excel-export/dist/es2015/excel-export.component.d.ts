/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { QueryList, NgZone } from '@angular/core';
import { WorkbookOptions } from '@progress/kendo-ooxml';
import { CellOptions } from './ooxml/cell-options.interface';
import { ExcelExportData } from './excel-export-data';
import { ColumnBase } from './columns/column-base';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).
 * Configures the settings for the Excel export of the Kendo UI Grid.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExcelExportComponent {
    private localization;
    private zone;
    /**
     * Specifies the name of the file that is exported to Excel.
     * @default "Export.xlsx"
     */
    fileName: string;
    /**
     * Enables or disables the column filtering in the Excel file
     * ([see example]({% slug filtering_excelexport %})).
     */
    filterable: boolean;
    /**
     * Specifies if groups are collapsible in the excel file.
     */
    collapsible: boolean;
    /**
     * The author of the workbook.
     */
    creator?: string;
    /**
     * The date on which the workbook is created.
     * The default value is `new Date()`.
     */
    date?: Date;
    /**
     * If `forceProxy` is set to `true`, the content is forwarded to `proxyURL`
     * even if the browser supports the local saving of files.
     */
    forceProxy: boolean;
    /**
     * The URL of the server-side proxy which will stream the file to the end user. When the browser is not
     * capable of saving files locally&mdash;for example, Internet Explorer 9 and earlier, and Safari&mdash;a
     * proxy is used. The implementation of the server-side proxy has to be done by you.
     *
     * The proxy receives a POST request with the following parameters in the request body:
     * - `contentType`&mdash;The MIME type of the file.
     * - `base64`&mdash;The base-64 encoded file content.
     * - `fileName`&mdash;The file name, as requested by the caller.
     * The proxy is expected to return the decoded file with the **Content-Disposition** header set to `attachment; filename="<fileName.xslx>"`.
     */
    proxyURL: string;
    /**
     * The exported data. If grouped, the data must be structured as described by the
     * [`GroupResult`]({% slug api_kendo-data-query_groupresult %}) option of the Kendo UI Data Query component.
     */
    data: any[];
    /**
     * The exported data groups. The groups must be compatible with the
     * [`GroupDescriptor`]({% slug api_kendo-data-query_groupdescriptor %}) option of the Kendo UI Data Query component.
     */
    group: any[];
    /**
     * The options of the cells that are inserted before the data, group, and footer cells
     * to indicate the group hierarchy when the data is grouped
     * ([see example]({% slug cells_excelexport %}#toc-padding-cells)).
     */
    paddingCellOptions: CellOptions;
    /**
     * The options of the cells that are inserted before the header cells
     * to align the headers and the column values when the data is grouped
     * ([see example]({% slug cells_excelexport %}#toc-header-padding-cells)).
     */
    headerPaddingCellOptions: CellOptions;
    /**
     * @hidden
     */
    columns: QueryList<ColumnBase>;
    constructor(localization: LocalizationService, zone: NgZone);
    /**
     * Saves the data to Excel.
     *
     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).
     */
    save(exportData?: any[] | ExcelExportData | WorkbookOptions): void;
    /**
     * Based on the specified columns and data, returns
     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})
     * ([see example]({% slug customrowsandcells_excelexport %})).
     *
     * @param exportData - The optional data to be exported.
     * @returns {WorkbookOptions} - The workbook options.
     */
    workbookOptions(exportData?: any[] | ExcelExportData): WorkbookOptions;
    /**
     * Returns a promise which will be resolved with the file data URI
     * ([see example]({% slug filesaving_excelexport %})).
     *
     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.
     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.
     */
    toDataURL(exportData?: any[] | ExcelExportData | WorkbookOptions): Promise<string>;
    protected getExportData(exportData?: ExcelExportData | any[]): ExcelExportData;
    protected saveFile(dataURL: string): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelExportComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ExcelExportComponent, "kendo-excelexport", ["kendoExcelExport"], { "fileName": "fileName"; "filterable": "filterable"; "collapsible": "collapsible"; "creator": "creator"; "date": "date"; "forceProxy": "forceProxy"; "proxyURL": "proxyURL"; "data": "data"; "group": "group"; "paddingCellOptions": "paddingCellOptions"; "headerPaddingCellOptions": "headerPaddingCellOptions"; }, {}, ["columns"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtZXhwb3J0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJleGNlbC1leHBvcnQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFF1ZXJ5TGlzdCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXb3JrYm9va09wdGlvbnMgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tb294bWwnO1xuaW1wb3J0IHsgQ2VsbE9wdGlvbnMgfSBmcm9tICcuL29veG1sL2NlbGwtb3B0aW9ucy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRXhjZWxFeHBvcnREYXRhIH0gZnJvbSAnLi9leGNlbC1leHBvcnQtZGF0YSc7XG5pbXBvcnQgeyBDb2x1bW5CYXNlIH0gZnJvbSAnLi9jb2x1bW5zL2NvbHVtbi1iYXNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIEV4Y2VsIEV4cG9ydCBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfZXhjZWxleHBvcnQgJX0pLlxuICogQ29uZmlndXJlcyB0aGUgc2V0dGluZ3MgZm9yIHRoZSBFeGNlbCBleHBvcnQgb2YgdGhlIEtlbmRvIFVJIEdyaWQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEV4Y2VsRXhwb3J0Q29tcG9uZW50IHtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbjtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBmaWxlIHRoYXQgaXMgZXhwb3J0ZWQgdG8gRXhjZWwuXG4gICAgICogQGRlZmF1bHQgXCJFeHBvcnQueGxzeFwiXG4gICAgICovXG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBjb2x1bW4gZmlsdGVyaW5nIGluIHRoZSBFeGNlbCBmaWxlXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBmaWx0ZXJpbmdfZXhjZWxleHBvcnQgJX0pKS5cbiAgICAgKi9cbiAgICBmaWx0ZXJhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiBncm91cHMgYXJlIGNvbGxhcHNpYmxlIGluIHRoZSBleGNlbCBmaWxlLlxuICAgICAqL1xuICAgIGNvbGxhcHNpYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBhdXRob3Igb2YgdGhlIHdvcmtib29rLlxuICAgICAqL1xuICAgIGNyZWF0b3I/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgb24gd2hpY2ggdGhlIHdvcmtib29rIGlzIGNyZWF0ZWQuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgYG5ldyBEYXRlKClgLlxuICAgICAqL1xuICAgIGRhdGU/OiBEYXRlO1xuICAgIC8qKlxuICAgICAqIElmIGBmb3JjZVByb3h5YCBpcyBzZXQgdG8gYHRydWVgLCB0aGUgY29udGVudCBpcyBmb3J3YXJkZWQgdG8gYHByb3h5VVJMYFxuICAgICAqIGV2ZW4gaWYgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIGxvY2FsIHNhdmluZyBvZiBmaWxlcy5cbiAgICAgKi9cbiAgICBmb3JjZVByb3h5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgb2YgdGhlIHNlcnZlci1zaWRlIHByb3h5IHdoaWNoIHdpbGwgc3RyZWFtIHRoZSBmaWxlIHRvIHRoZSBlbmQgdXNlci4gV2hlbiB0aGUgYnJvd3NlciBpcyBub3RcbiAgICAgKiBjYXBhYmxlIG9mIHNhdmluZyBmaWxlcyBsb2NhbGx5Jm1kYXNoO2ZvciBleGFtcGxlLCBJbnRlcm5ldCBFeHBsb3JlciA5IGFuZCBlYXJsaWVyLCBhbmQgU2FmYXJpJm1kYXNoO2FcbiAgICAgKiBwcm94eSBpcyB1c2VkLiBUaGUgaW1wbGVtZW50YXRpb24gb2YgdGhlIHNlcnZlci1zaWRlIHByb3h5IGhhcyB0byBiZSBkb25lIGJ5IHlvdS5cbiAgICAgKlxuICAgICAqIFRoZSBwcm94eSByZWNlaXZlcyBhIFBPU1QgcmVxdWVzdCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVycyBpbiB0aGUgcmVxdWVzdCBib2R5OlxuICAgICAqIC0gYGNvbnRlbnRUeXBlYCZtZGFzaDtUaGUgTUlNRSB0eXBlIG9mIHRoZSBmaWxlLlxuICAgICAqIC0gYGJhc2U2NGAmbWRhc2g7VGhlIGJhc2UtNjQgZW5jb2RlZCBmaWxlIGNvbnRlbnQuXG4gICAgICogLSBgZmlsZU5hbWVgJm1kYXNoO1RoZSBmaWxlIG5hbWUsIGFzIHJlcXVlc3RlZCBieSB0aGUgY2FsbGVyLlxuICAgICAqIFRoZSBwcm94eSBpcyBleHBlY3RlZCB0byByZXR1cm4gdGhlIGRlY29kZWQgZmlsZSB3aXRoIHRoZSAqKkNvbnRlbnQtRGlzcG9zaXRpb24qKiBoZWFkZXIgc2V0IHRvIGBhdHRhY2htZW50OyBmaWxlbmFtZT1cIjxmaWxlTmFtZS54c2x4PlwiYC5cbiAgICAgKi9cbiAgICBwcm94eVVSTDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBleHBvcnRlZCBkYXRhLiBJZiBncm91cGVkLCB0aGUgZGF0YSBtdXN0IGJlIHN0cnVjdHVyZWQgYXMgZGVzY3JpYmVkIGJ5IHRoZVxuICAgICAqIFtgR3JvdXBSZXN1bHRgXSh7JSBzbHVnIGFwaV9rZW5kby1kYXRhLXF1ZXJ5X2dyb3VwcmVzdWx0ICV9KSBvcHRpb24gb2YgdGhlIEtlbmRvIFVJIERhdGEgUXVlcnkgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGRhdGE6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIFRoZSBleHBvcnRlZCBkYXRhIGdyb3Vwcy4gVGhlIGdyb3VwcyBtdXN0IGJlIGNvbXBhdGlibGUgd2l0aCB0aGVcbiAgICAgKiBbYEdyb3VwRGVzY3JpcHRvcmBdKHslIHNsdWcgYXBpX2tlbmRvLWRhdGEtcXVlcnlfZ3JvdXBkZXNjcmlwdG9yICV9KSBvcHRpb24gb2YgdGhlIEtlbmRvIFVJIERhdGEgUXVlcnkgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGdyb3VwOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9ucyBvZiB0aGUgY2VsbHMgdGhhdCBhcmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBkYXRhLCBncm91cCwgYW5kIGZvb3RlciBjZWxsc1xuICAgICAqIHRvIGluZGljYXRlIHRoZSBncm91cCBoaWVyYXJjaHkgd2hlbiB0aGUgZGF0YSBpcyBncm91cGVkXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjZWxsc19leGNlbGV4cG9ydCAlfSN0b2MtcGFkZGluZy1jZWxscykpLlxuICAgICAqL1xuICAgIHBhZGRpbmdDZWxsT3B0aW9uczogQ2VsbE9wdGlvbnM7XG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbnMgb2YgdGhlIGNlbGxzIHRoYXQgYXJlIGluc2VydGVkIGJlZm9yZSB0aGUgaGVhZGVyIGNlbGxzXG4gICAgICogdG8gYWxpZ24gdGhlIGhlYWRlcnMgYW5kIHRoZSBjb2x1bW4gdmFsdWVzIHdoZW4gdGhlIGRhdGEgaXMgZ3JvdXBlZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgY2VsbHNfZXhjZWxleHBvcnQgJX0jdG9jLWhlYWRlci1wYWRkaW5nLWNlbGxzKSkuXG4gICAgICovXG4gICAgaGVhZGVyUGFkZGluZ0NlbGxPcHRpb25zOiBDZWxsT3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29sdW1uczogUXVlcnlMaXN0PENvbHVtbkJhc2U+O1xuICAgIGNvbnN0cnVjdG9yKGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgem9uZTogTmdab25lKTtcbiAgICAvKipcbiAgICAgKiBTYXZlcyB0aGUgZGF0YSB0byBFeGNlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBleHBvcnREYXRhIC0gQW4gb3B0aW9uYWwgcGFyYW1ldGVyLiBDYW4gYmUgdGhlIGRhdGEgdGhhdCB3aWxsIGJlIGV4cG9ydGVkIG9yIFtgV29ya2Jvb2tPcHRpb25zYF0oeyUgc2x1ZyBhcGlfZXhjZWwtZXhwb3J0X3dvcmtib29rb3B0aW9ucyAlfSkuXG4gICAgICovXG4gICAgc2F2ZShleHBvcnREYXRhPzogYW55W10gfCBFeGNlbEV4cG9ydERhdGEgfCBXb3JrYm9va09wdGlvbnMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJhc2VkIG9uIHRoZSBzcGVjaWZpZWQgY29sdW1ucyBhbmQgZGF0YSwgcmV0dXJuc1xuICAgICAqIFtgV29ya2Jvb2tPcHRpb25zYF0oeyUgc2x1ZyBhcGlfZXhjZWwtZXhwb3J0X3dvcmtib29rb3B0aW9ucyAlfSlcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGN1c3RvbXJvd3NhbmRjZWxsc19leGNlbGV4cG9ydCAlfSkpLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV4cG9ydERhdGEgLSBUaGUgb3B0aW9uYWwgZGF0YSB0byBiZSBleHBvcnRlZC5cbiAgICAgKiBAcmV0dXJucyB7V29ya2Jvb2tPcHRpb25zfSAtIFRoZSB3b3JrYm9vayBvcHRpb25zLlxuICAgICAqL1xuICAgIHdvcmtib29rT3B0aW9ucyhleHBvcnREYXRhPzogYW55W10gfCBFeGNlbEV4cG9ydERhdGEpOiBXb3JrYm9va09wdGlvbnM7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2Ugd2hpY2ggd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSBmaWxlIGRhdGEgVVJJXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBmaWxlc2F2aW5nX2V4Y2VsZXhwb3J0ICV9KSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXhwb3J0RGF0YSAtIFRoZSBvcHRpb25hbCBkYXRhIG9yIFtgV29ya2Jvb2tPcHRpb25zYF0oeyUgc2x1ZyBhcGlfZXhjZWwtZXhwb3J0X3dvcmtib29rb3B0aW9ucyAlfSkgdGhhdCB3aWxsIGJlIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGRhdGEgVVJJLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IC0gVGhlIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGJ5IHRoZSBmaWxlIGRhdGEgVVJJLlxuICAgICAqL1xuICAgIHRvRGF0YVVSTChleHBvcnREYXRhPzogYW55W10gfCBFeGNlbEV4cG9ydERhdGEgfCBXb3JrYm9va09wdGlvbnMpOiBQcm9taXNlPHN0cmluZz47XG4gICAgcHJvdGVjdGVkIGdldEV4cG9ydERhdGEoZXhwb3J0RGF0YT86IEV4Y2VsRXhwb3J0RGF0YSB8IGFueVtdKTogRXhjZWxFeHBvcnREYXRhO1xuICAgIHByb3RlY3RlZCBzYXZlRmlsZShkYXRhVVJMOiBzdHJpbmcpOiB2b2lkO1xufVxuIl19