/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef } from '@angular/core';
import { pdf, DrawOptions, Group } from '@progress/kendo-drawing';
import { SaveOptions } from '@progress/kendo-file-saver';
import { PDFTemplateDirective } from './pdf-template.directive';
import { PDFMarginComponent } from './pdf-margin.component';
/**
 * @hidden
 *
 * Re-export PaperSize to work around a bug in the the API reference generator.
 *
 * The type will be linked to the kendo-drawing documentation
 * by using the slug provided in api-type-links.json
 */
import * as ɵngcc0 from '@angular/core';
export declare type PaperSize = pdf.PaperSize;
/**
 * Represents the [Kendo UI PDF Export component for Angular]({% slug overview_pdfexport %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <div class="example-config">
 *       <button class="k-button" (click)="pdf.saveAs('document.pdf')">
 *         Save As PDF...
 *       </button>
 *     </div>
 *
 *     <kendo-pdf-export #pdf paperSize="A4" margin="2cm">
 *       Content goes here
 *     </kendo-pdf-export>
 *   `
 * })
 * export class AppComponent {
 * }
 * ```
 */
export declare class PDFExportComponent implements pdf.PDFOptions {
    protected element: ElementRef;
    /**
     * Specifies if the Print dialog should be opened immediately after loading the document.
     *
     * The default value is `false`.
     *
     * > Requires `@progress/kendo-drawing` v1.9.0 or later.
     */
    autoPrint?: boolean;
    /**
     * The author (metadata) of the PDF document.
     */
    author: string;
    /**
     * A flag that indicates whether to produce actual hyperlinks in the exported PDF file.
     * It is also possible to set a CSS selector. All matching links will be ignored.
     */
    avoidLinks: boolean | string;
    /**
     * An optional CSS selector that specifies the elements which cause the page breaks
     * ([see example]({% slug multipagecontent_pdfexport %}#toc-manual-page-breaking)).
     */
    forcePageBreak: string;
    /**
     * An optional CSS selector that specifies the elements which should not be split across the pages
     * ([see example]({% slug multipagecontent_pdfexport %}#toc-preventing-page-breaking-in-elements)).
     */
    keepTogether: string;
    /**
     * The creator of the PDF document.
     * @default "Kendo UI PDF Generator"
     */
    creator: string;
    /**
     * The date when the PDF document is created. Defaults to `new Date()`.
     */
    date: Date;
    /**
     * The forced resolution of the images in the exported PDF document
     * ([see example]({% slug embeddedimages_pdfexport %})).
     * By default, the images are exported at their full resolution.
     */
    imageResolution: number;
    /**
     * Specifies the name of the exported PDF file.
     * @default "Export.pdf"
     */
    fileName: string;
    /**
     * If set to `true`, the content is forwarded to `proxyURL` even if the
     * browser supports local saving of files.
     */
    forceProxy: boolean;
    /**
     * The keywords (metadata) of the PDF document.
     */
    keywords: string;
    /**
     * A flag that indicates if the page will be in a landscape orientation
     * ([see example]({% slug hyperlinks_pdfexport %})).
     * By default, the page is in a portrait orientation.
     *
     * @default false
     */
    landscape: boolean;
    /**
     * Specifies the margins of the page.
     *
     * > Numbers are treated as points (`"pt"`).
     *
     * The supported units are:
     * * `"mm"`
     * * `"cm"`
     * * `"in"`
     * * `"pt"` (default).
     *
     */
    margin: string | number | pdf.PageMargin;
    /**
     * Specifies the paper size of the PDF document ([see example]({% slug multipagecontent_pdfexport %}#toc-automatic-page-breaking)).
     * Defaults to `"auto"` which means that the paper size is determined by the content.
     * The size of the content in pixels matches the size of the output in points (1 pixel = 1/72 inch).
     * If `paperSize` is set, the content is split across multiple pages. This enables the `repeatHeaders` and
     * `scale` options, and allows you to specify a template.
     *
     * The supported values are:
     * * A predefined size. The supported paper sizes are: `A0-A10`, `B0-B10`, `C0-C10`, `Executive`, `Folio`, `Legal`, `Letter`, `Tabloid`.
     * * An array of two numbers which specify the width and height in points (1pt = 1/72in).
     * * An array of two strings which specify the width and height in units. The supported units are `"mm"`, `"cm"`, `"in"`, and `"pt"`.
     */
    paperSize: PaperSize;
    /**
     * Specifies if the `<thead>` elements of the tables will be repeated on each page
     * ([see example]({% slug recurrenttableheaders_pdfexport %})).
     */
    repeatHeaders: boolean;
    /**
     * A scale factor ([see example]({% slug scalingofcontent_pdfexport %})).
     * The text size on the screen might be too big for printing.
     * To scale down the output in PDF, use this option.
     *
     * @default 1
     */
    scale: number;
    /**
     * A key/value dictionary of form values which will be sent to the proxy.
     * Can be used to submit Anti-Forgery tokens and other metadata.
     */
    proxyData?: {
        [key: string]: string;
    };
    /**
     * The URL of the server-side proxy which streams the file to the end user. You need to use a proxy if
     * the browser is not capable of saving files locally&mdash;for example, Internet Explorer 9 and Safari.
     * It is your responsibility to implement the server-side proxy. The proxy returns the decoded file with
     * the `"Content-Disposition"` header set to `attachment; filename="<fileName.pdf>"`.
     *
     * In the request body, the proxy receives a POST request with the following parameters:
     * - `"contentType"`&mdash;The MIME type of the file.
     * - `"base64"`&mdash;The base-64 encoded file content.
     * - `"fileName"`&mdash;The file name, as requested by the caller.
     *
     */
    proxyURL: string;
    /**
     * A name or keyword which indicates where to display the document that is returned from the proxy.
     * To display the document in a new window or iframe,
     * the proxy has to have the `"Content-Disposition"` header set to `inline; filename="<fileName.pdf>"`.
     * @default "_self"
     */
    proxyTarget: string;
    /**
     * The producer (metadata) of the PDF document.
     */
    producer: string;
    /**
     * The subject (metadata) of the PDF document.
     */
    subject: string;
    /**
     * The title (metadata) of the PDF document.
     */
    title: string;
    /**
     * @hidden
     */
    pageTemplateDirective: PDFTemplateDirective;
    /**
     * @hidden
     */
    marginComponent: PDFMarginComponent;
    protected readonly drawMargin: any;
    protected pageTemplate: any;
    constructor(element: ElementRef);
    /**
     * Saves the content as a PDF file with the specified name.
     * @param fileName - The name of the exported file.
     */
    saveAs(fileName?: string): void;
    /**
     * Exports the content as a `Group` for further processing.
     *
     * @return - The root group of the exported scene.
     */
    export(): Promise<Group>;
    protected save(element: HTMLElement, fileName: string): void;
    protected exportElement(element: HTMLElement): Promise<Group>;
    protected cleanup(): void;
    protected drawOptions(): DrawOptions;
    protected pdfOptions(): any;
    protected saveOptions(): SaveOptions;
    protected drawElement(element: HTMLElement, options: DrawOptions): Promise<Group>;
    protected exportGroup(group: Group, options: pdf.PDFOptions): Promise<string>;
    private saveDataUri;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PDFExportComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PDFExportComponent, "kendo-pdf-export", never, { "creator": "creator"; "fileName": "fileName"; "autoPrint": "autoPrint"; "author": "author"; "avoidLinks": "avoidLinks"; "forcePageBreak": "forcePageBreak"; "keepTogether": "keepTogether"; "date": "date"; "imageResolution": "imageResolution"; "forceProxy": "forceProxy"; "keywords": "keywords"; "landscape": "landscape"; "margin": "margin"; "paperSize": "paperSize"; "repeatHeaders": "repeatHeaders"; "scale": "scale"; "proxyData": "proxyData"; "proxyURL": "proxyURL"; "proxyTarget": "proxyTarget"; "producer": "producer"; "subject": "subject"; "title": "title"; }, {}, ["pageTemplateDirective", "marginComponent"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLWV4cG9ydC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGRmLWV4cG9ydC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHBkZiwgRHJhd09wdGlvbnMsIEdyb3VwIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgU2F2ZU9wdGlvbnMgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZmlsZS1zYXZlcic7XG5pbXBvcnQgeyBQREZUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vcGRmLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQREZNYXJnaW5Db21wb25lbnQgfSBmcm9tICcuL3BkZi1tYXJnaW4uY29tcG9uZW50Jztcbi8qKlxuICogQGhpZGRlblxuICpcbiAqIFJlLWV4cG9ydCBQYXBlclNpemUgdG8gd29yayBhcm91bmQgYSBidWcgaW4gdGhlIHRoZSBBUEkgcmVmZXJlbmNlIGdlbmVyYXRvci5cbiAqXG4gKiBUaGUgdHlwZSB3aWxsIGJlIGxpbmtlZCB0byB0aGUga2VuZG8tZHJhd2luZyBkb2N1bWVudGF0aW9uXG4gKiBieSB1c2luZyB0aGUgc2x1ZyBwcm92aWRlZCBpbiBhcGktdHlwZS1saW5rcy5qc29uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIHR5cGUgUGFwZXJTaXplID0gcGRmLlBhcGVyU2l6ZTtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIFBERiBFeHBvcnQgY29tcG9uZW50IGZvciBBbmd1bGFyXSh7JSBzbHVnIG92ZXJ2aWV3X3BkZmV4cG9ydCAlfSkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzLXByZXZpZXdcbiAqIF9AQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICogICB0ZW1wbGF0ZTogYFxuICogICAgIDxkaXYgY2xhc3M9XCJleGFtcGxlLWNvbmZpZ1wiPlxuICogICAgICAgPGJ1dHRvbiBjbGFzcz1cImstYnV0dG9uXCIgKGNsaWNrKT1cInBkZi5zYXZlQXMoJ2RvY3VtZW50LnBkZicpXCI+XG4gKiAgICAgICAgIFNhdmUgQXMgUERGLi4uXG4gKiAgICAgICA8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqXG4gKiAgICAgPGtlbmRvLXBkZi1leHBvcnQgI3BkZiBwYXBlclNpemU9XCJBNFwiIG1hcmdpbj1cIjJjbVwiPlxuICogICAgICAgQ29udGVudCBnb2VzIGhlcmVcbiAqICAgICA8L2tlbmRvLXBkZi1leHBvcnQ+XG4gKiAgIGBcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQREZFeHBvcnRDb21wb25lbnQgaW1wbGVtZW50cyBwZGYuUERGT3B0aW9ucyB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBQcmludCBkaWFsb2cgc2hvdWxkIGJlIG9wZW5lZCBpbW1lZGlhdGVseSBhZnRlciBsb2FkaW5nIHRoZSBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiA+IFJlcXVpcmVzIGBAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZ2AgdjEuOS4wIG9yIGxhdGVyLlxuICAgICAqL1xuICAgIGF1dG9QcmludD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIGF1dGhvciAobWV0YWRhdGEpIG9mIHRoZSBQREYgZG9jdW1lbnQuXG4gICAgICovXG4gICAgYXV0aG9yOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdG8gcHJvZHVjZSBhY3R1YWwgaHlwZXJsaW5rcyBpbiB0aGUgZXhwb3J0ZWQgUERGIGZpbGUuXG4gICAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzZXQgYSBDU1Mgc2VsZWN0b3IuIEFsbCBtYXRjaGluZyBsaW5rcyB3aWxsIGJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgYXZvaWRMaW5rczogYm9vbGVhbiB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBDU1Mgc2VsZWN0b3IgdGhhdCBzcGVjaWZpZXMgdGhlIGVsZW1lbnRzIHdoaWNoIGNhdXNlIHRoZSBwYWdlIGJyZWFrc1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgbXVsdGlwYWdlY29udGVudF9wZGZleHBvcnQgJX0jdG9jLW1hbnVhbC1wYWdlLWJyZWFraW5nKSkuXG4gICAgICovXG4gICAgZm9yY2VQYWdlQnJlYWs6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBDU1Mgc2VsZWN0b3IgdGhhdCBzcGVjaWZpZXMgdGhlIGVsZW1lbnRzIHdoaWNoIHNob3VsZCBub3QgYmUgc3BsaXQgYWNyb3NzIHRoZSBwYWdlc1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgbXVsdGlwYWdlY29udGVudF9wZGZleHBvcnQgJX0jdG9jLXByZXZlbnRpbmctcGFnZS1icmVha2luZy1pbi1lbGVtZW50cykpLlxuICAgICAqL1xuICAgIGtlZXBUb2dldGhlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBjcmVhdG9yIG9mIHRoZSBQREYgZG9jdW1lbnQuXG4gICAgICogQGRlZmF1bHQgXCJLZW5kbyBVSSBQREYgR2VuZXJhdG9yXCJcbiAgICAgKi9cbiAgICBjcmVhdG9yOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgd2hlbiB0aGUgUERGIGRvY3VtZW50IGlzIGNyZWF0ZWQuIERlZmF1bHRzIHRvIGBuZXcgRGF0ZSgpYC5cbiAgICAgKi9cbiAgICBkYXRlOiBEYXRlO1xuICAgIC8qKlxuICAgICAqIFRoZSBmb3JjZWQgcmVzb2x1dGlvbiBvZiB0aGUgaW1hZ2VzIGluIHRoZSBleHBvcnRlZCBQREYgZG9jdW1lbnRcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGVtYmVkZGVkaW1hZ2VzX3BkZmV4cG9ydCAlfSkpLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBpbWFnZXMgYXJlIGV4cG9ydGVkIGF0IHRoZWlyIGZ1bGwgcmVzb2x1dGlvbi5cbiAgICAgKi9cbiAgICBpbWFnZVJlc29sdXRpb246IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGV4cG9ydGVkIFBERiBmaWxlLlxuICAgICAqIEBkZWZhdWx0IFwiRXhwb3J0LnBkZlwiXG4gICAgICovXG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gYHRydWVgLCB0aGUgY29udGVudCBpcyBmb3J3YXJkZWQgdG8gYHByb3h5VVJMYCBldmVuIGlmIHRoZVxuICAgICAqIGJyb3dzZXIgc3VwcG9ydHMgbG9jYWwgc2F2aW5nIG9mIGZpbGVzLlxuICAgICAqL1xuICAgIGZvcmNlUHJveHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIGtleXdvcmRzIChtZXRhZGF0YSkgb2YgdGhlIFBERiBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBrZXl3b3Jkczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgcGFnZSB3aWxsIGJlIGluIGEgbGFuZHNjYXBlIG9yaWVudGF0aW9uXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBoeXBlcmxpbmtzX3BkZmV4cG9ydCAlfSkpLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBwYWdlIGlzIGluIGEgcG9ydHJhaXQgb3JpZW50YXRpb24uXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGxhbmRzY2FwZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG1hcmdpbnMgb2YgdGhlIHBhZ2UuXG4gICAgICpcbiAgICAgKiA+IE51bWJlcnMgYXJlIHRyZWF0ZWQgYXMgcG9pbnRzIChgXCJwdFwiYCkuXG4gICAgICpcbiAgICAgKiBUaGUgc3VwcG9ydGVkIHVuaXRzIGFyZTpcbiAgICAgKiAqIGBcIm1tXCJgXG4gICAgICogKiBgXCJjbVwiYFxuICAgICAqICogYFwiaW5cImBcbiAgICAgKiAqIGBcInB0XCJgIChkZWZhdWx0KS5cbiAgICAgKlxuICAgICAqL1xuICAgIG1hcmdpbjogc3RyaW5nIHwgbnVtYmVyIHwgcGRmLlBhZ2VNYXJnaW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBwYXBlciBzaXplIG9mIHRoZSBQREYgZG9jdW1lbnQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBtdWx0aXBhZ2Vjb250ZW50X3BkZmV4cG9ydCAlfSN0b2MtYXV0b21hdGljLXBhZ2UtYnJlYWtpbmcpKS5cbiAgICAgKiBEZWZhdWx0cyB0byBgXCJhdXRvXCJgIHdoaWNoIG1lYW5zIHRoYXQgdGhlIHBhcGVyIHNpemUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgY29udGVudC5cbiAgICAgKiBUaGUgc2l6ZSBvZiB0aGUgY29udGVudCBpbiBwaXhlbHMgbWF0Y2hlcyB0aGUgc2l6ZSBvZiB0aGUgb3V0cHV0IGluIHBvaW50cyAoMSBwaXhlbCA9IDEvNzIgaW5jaCkuXG4gICAgICogSWYgYHBhcGVyU2l6ZWAgaXMgc2V0LCB0aGUgY29udGVudCBpcyBzcGxpdCBhY3Jvc3MgbXVsdGlwbGUgcGFnZXMuIFRoaXMgZW5hYmxlcyB0aGUgYHJlcGVhdEhlYWRlcnNgIGFuZFxuICAgICAqIGBzY2FsZWAgb3B0aW9ucywgYW5kIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBhIHRlbXBsYXRlLlxuICAgICAqXG4gICAgICogVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOlxuICAgICAqICogQSBwcmVkZWZpbmVkIHNpemUuIFRoZSBzdXBwb3J0ZWQgcGFwZXIgc2l6ZXMgYXJlOiBgQTAtQTEwYCwgYEIwLUIxMGAsIGBDMC1DMTBgLCBgRXhlY3V0aXZlYCwgYEZvbGlvYCwgYExlZ2FsYCwgYExldHRlcmAsIGBUYWJsb2lkYC5cbiAgICAgKiAqIEFuIGFycmF5IG9mIHR3byBudW1iZXJzIHdoaWNoIHNwZWNpZnkgdGhlIHdpZHRoIGFuZCBoZWlnaHQgaW4gcG9pbnRzICgxcHQgPSAxLzcyaW4pLlxuICAgICAqICogQW4gYXJyYXkgb2YgdHdvIHN0cmluZ3Mgd2hpY2ggc3BlY2lmeSB0aGUgd2lkdGggYW5kIGhlaWdodCBpbiB1bml0cy4gVGhlIHN1cHBvcnRlZCB1bml0cyBhcmUgYFwibW1cImAsIGBcImNtXCJgLCBgXCJpblwiYCwgYW5kIGBcInB0XCJgLlxuICAgICAqL1xuICAgIHBhcGVyU2l6ZTogUGFwZXJTaXplO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgYDx0aGVhZD5gIGVsZW1lbnRzIG9mIHRoZSB0YWJsZXMgd2lsbCBiZSByZXBlYXRlZCBvbiBlYWNoIHBhZ2VcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHJlY3VycmVudHRhYmxlaGVhZGVyc19wZGZleHBvcnQgJX0pKS5cbiAgICAgKi9cbiAgICByZXBlYXRIZWFkZXJzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEEgc2NhbGUgZmFjdG9yIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2NhbGluZ29mY29udGVudF9wZGZleHBvcnQgJX0pKS5cbiAgICAgKiBUaGUgdGV4dCBzaXplIG9uIHRoZSBzY3JlZW4gbWlnaHQgYmUgdG9vIGJpZyBmb3IgcHJpbnRpbmcuXG4gICAgICogVG8gc2NhbGUgZG93biB0aGUgb3V0cHV0IGluIFBERiwgdXNlIHRoaXMgb3B0aW9uLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIHNjYWxlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQSBrZXkvdmFsdWUgZGljdGlvbmFyeSBvZiBmb3JtIHZhbHVlcyB3aGljaCB3aWxsIGJlIHNlbnQgdG8gdGhlIHByb3h5LlxuICAgICAqIENhbiBiZSB1c2VkIHRvIHN1Ym1pdCBBbnRpLUZvcmdlcnkgdG9rZW5zIGFuZCBvdGhlciBtZXRhZGF0YS5cbiAgICAgKi9cbiAgICBwcm94eURhdGE/OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgb2YgdGhlIHNlcnZlci1zaWRlIHByb3h5IHdoaWNoIHN0cmVhbXMgdGhlIGZpbGUgdG8gdGhlIGVuZCB1c2VyLiBZb3UgbmVlZCB0byB1c2UgYSBwcm94eSBpZlxuICAgICAqIHRoZSBicm93c2VyIGlzIG5vdCBjYXBhYmxlIG9mIHNhdmluZyBmaWxlcyBsb2NhbGx5Jm1kYXNoO2ZvciBleGFtcGxlLCBJbnRlcm5ldCBFeHBsb3JlciA5IGFuZCBTYWZhcmkuXG4gICAgICogSXQgaXMgeW91ciByZXNwb25zaWJpbGl0eSB0byBpbXBsZW1lbnQgdGhlIHNlcnZlci1zaWRlIHByb3h5LiBUaGUgcHJveHkgcmV0dXJucyB0aGUgZGVjb2RlZCBmaWxlIHdpdGhcbiAgICAgKiB0aGUgYFwiQ29udGVudC1EaXNwb3NpdGlvblwiYCBoZWFkZXIgc2V0IHRvIGBhdHRhY2htZW50OyBmaWxlbmFtZT1cIjxmaWxlTmFtZS5wZGY+XCJgLlxuICAgICAqXG4gICAgICogSW4gdGhlIHJlcXVlc3QgYm9keSwgdGhlIHByb3h5IHJlY2VpdmVzIGEgUE9TVCByZXF1ZXN0IHdpdGggdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICAgICAqIC0gYFwiY29udGVudFR5cGVcImAmbWRhc2g7VGhlIE1JTUUgdHlwZSBvZiB0aGUgZmlsZS5cbiAgICAgKiAtIGBcImJhc2U2NFwiYCZtZGFzaDtUaGUgYmFzZS02NCBlbmNvZGVkIGZpbGUgY29udGVudC5cbiAgICAgKiAtIGBcImZpbGVOYW1lXCJgJm1kYXNoO1RoZSBmaWxlIG5hbWUsIGFzIHJlcXVlc3RlZCBieSB0aGUgY2FsbGVyLlxuICAgICAqXG4gICAgICovXG4gICAgcHJveHlVUkw6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIG5hbWUgb3Iga2V5d29yZCB3aGljaCBpbmRpY2F0ZXMgd2hlcmUgdG8gZGlzcGxheSB0aGUgZG9jdW1lbnQgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBwcm94eS5cbiAgICAgKiBUbyBkaXNwbGF5IHRoZSBkb2N1bWVudCBpbiBhIG5ldyB3aW5kb3cgb3IgaWZyYW1lLFxuICAgICAqIHRoZSBwcm94eSBoYXMgdG8gaGF2ZSB0aGUgYFwiQ29udGVudC1EaXNwb3NpdGlvblwiYCBoZWFkZXIgc2V0IHRvIGBpbmxpbmU7IGZpbGVuYW1lPVwiPGZpbGVOYW1lLnBkZj5cImAuXG4gICAgICogQGRlZmF1bHQgXCJfc2VsZlwiXG4gICAgICovXG4gICAgcHJveHlUYXJnZXQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgcHJvZHVjZXIgKG1ldGFkYXRhKSBvZiB0aGUgUERGIGRvY3VtZW50LlxuICAgICAqL1xuICAgIHByb2R1Y2VyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHN1YmplY3QgKG1ldGFkYXRhKSBvZiB0aGUgUERGIGRvY3VtZW50LlxuICAgICAqL1xuICAgIHN1YmplY3Q6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdGl0bGUgKG1ldGFkYXRhKSBvZiB0aGUgUERGIGRvY3VtZW50LlxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHBhZ2VUZW1wbGF0ZURpcmVjdGl2ZTogUERGVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG1hcmdpbkNvbXBvbmVudDogUERGTWFyZ2luQ29tcG9uZW50O1xuICAgIHByb3RlY3RlZCByZWFkb25seSBkcmF3TWFyZ2luOiBhbnk7XG4gICAgcHJvdGVjdGVkIHBhZ2VUZW1wbGF0ZTogYW55O1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIC8qKlxuICAgICAqIFNhdmVzIHRoZSBjb250ZW50IGFzIGEgUERGIGZpbGUgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gICAgICogQHBhcmFtIGZpbGVOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGV4cG9ydGVkIGZpbGUuXG4gICAgICovXG4gICAgc2F2ZUFzKGZpbGVOYW1lPzogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBFeHBvcnRzIHRoZSBjb250ZW50IGFzIGEgYEdyb3VwYCBmb3IgZnVydGhlciBwcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogQHJldHVybiAtIFRoZSByb290IGdyb3VwIG9mIHRoZSBleHBvcnRlZCBzY2VuZS5cbiAgICAgKi9cbiAgICBleHBvcnQoKTogUHJvbWlzZTxHcm91cD47XG4gICAgcHJvdGVjdGVkIHNhdmUoZWxlbWVudDogSFRNTEVsZW1lbnQsIGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBleHBvcnRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogUHJvbWlzZTxHcm91cD47XG4gICAgcHJvdGVjdGVkIGNsZWFudXAoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZHJhd09wdGlvbnMoKTogRHJhd09wdGlvbnM7XG4gICAgcHJvdGVjdGVkIHBkZk9wdGlvbnMoKTogYW55O1xuICAgIHByb3RlY3RlZCBzYXZlT3B0aW9ucygpOiBTYXZlT3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgZHJhd0VsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IERyYXdPcHRpb25zKTogUHJvbWlzZTxHcm91cD47XG4gICAgcHJvdGVjdGVkIGV4cG9ydEdyb3VwKGdyb3VwOiBHcm91cCwgb3B0aW9uczogcGRmLlBERk9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz47XG4gICAgcHJpdmF0ZSBzYXZlRGF0YVVyaTtcbn1cbiJdfQ==