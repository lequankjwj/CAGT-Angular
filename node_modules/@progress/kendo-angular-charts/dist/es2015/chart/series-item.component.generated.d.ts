/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { drawing } from '@progress/kendo-drawing';
import { CollectionItemComponent } from '../common/collection-item.component';
import { CollectionService } from '../common/collection.service';
import { ConfigurationService } from '../common/configuration.service';
import { Border, BulletTarget, DashType, LabelConnectors, LineStyle, Margin, NegativeBubbleValues, Overlay, Series, SeriesErrorBars, SeriesExtremes, SeriesHighlight, SeriesLabels, SeriesLine, SeriesMarkers, SeriesMean, SeriesMedian, SeriesNotes, SeriesOutliers, SeriesStack, SeriesTooltip, SeriesType, SeriesVisualArgs, SeriesWhiskers } from '../common/property-types';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class SeriesItemComponentGenerated extends CollectionItemComponent implements Series {
    protected configurationService: ConfigurationService;
    protected collectionService: CollectionService;
    aggregate: any;
    autoFit: boolean;
    axis: string;
    border: Border;
    categoryAxis: string;
    categoryField: string;
    closeField: string;
    color: any;
    colorField: string;
    connectors: LabelConnectors;
    currentField: string;
    dashType: DashType;
    data: any[];
    downColor: string;
    downColorField: string;
    dynamicHeight: boolean;
    dynamicSlope: boolean;
    errorHighField: string;
    errorLowField: string;
    explodeField: string;
    field: string;
    fromField: string;
    gap: number;
    highField: string;
    holeSize: number;
    line: SeriesLine;
    lowField: string;
    lowerField: string;
    margin: Margin | number;
    maxSize: number;
    mean: SeriesMean;
    meanField: string;
    median: SeriesMedian;
    medianField: string;
    minSize: number;
    missingValues: 'gap' | 'interpolate' | 'zero';
    name: string;
    neckRatio: number;
    negativeColor: string;
    negativeValues: NegativeBubbleValues;
    noteTextField: string;
    opacity: number;
    openField: string;
    outliersField: string;
    overlay: Overlay;
    padding: number;
    q1Field: string;
    q3Field: string;
    segmentSpacing: number;
    size: number;
    sizeField: string;
    spacing: number;
    stack: boolean | string | SeriesStack;
    startAngle: number;
    style: LineStyle;
    summaryField: string;
    target: BulletTarget;
    toField: string;
    type: SeriesType;
    upperField: string;
    visible: boolean;
    visibleInLegend: boolean;
    visibleInLegendField: string;
    visual: (e: SeriesVisualArgs) => drawing.Element;
    width: number;
    whiskers: SeriesWhiskers;
    xAxis: string;
    xErrorHighField: string;
    xErrorLowField: string;
    xField: string;
    yAxis: string;
    yErrorHighField: string;
    yErrorLowField: string;
    yField: string;
    zIndex: number;
    errorBars: SeriesErrorBars;
    extremes: SeriesExtremes;
    highlight: SeriesHighlight;
    labels: SeriesLabels;
    markers: SeriesMarkers;
    notes: SeriesNotes;
    outliers: SeriesOutliers;
    tooltip: SeriesTooltip;
    constructor(configurationService: ConfigurationService, collectionService: CollectionService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SeriesItemComponentGenerated, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SeriesItemComponentGenerated, never, never, { "aggregate": "aggregate"; "autoFit": "autoFit"; "axis": "axis"; "border": "border"; "categoryAxis": "categoryAxis"; "categoryField": "categoryField"; "closeField": "closeField"; "color": "color"; "colorField": "colorField"; "connectors": "connectors"; "currentField": "currentField"; "dashType": "dashType"; "data": "data"; "downColor": "downColor"; "downColorField": "downColorField"; "dynamicHeight": "dynamicHeight"; "dynamicSlope": "dynamicSlope"; "errorHighField": "errorHighField"; "errorLowField": "errorLowField"; "explodeField": "explodeField"; "field": "field"; "fromField": "fromField"; "gap": "gap"; "highField": "highField"; "holeSize": "holeSize"; "line": "line"; "lowField": "lowField"; "lowerField": "lowerField"; "margin": "margin"; "maxSize": "maxSize"; "mean": "mean"; "meanField": "meanField"; "median": "median"; "medianField": "medianField"; "minSize": "minSize"; "missingValues": "missingValues"; "name": "name"; "neckRatio": "neckRatio"; "negativeColor": "negativeColor"; "negativeValues": "negativeValues"; "noteTextField": "noteTextField"; "opacity": "opacity"; "openField": "openField"; "outliersField": "outliersField"; "overlay": "overlay"; "padding": "padding"; "q1Field": "q1Field"; "q3Field": "q3Field"; "segmentSpacing": "segmentSpacing"; "size": "size"; "sizeField": "sizeField"; "spacing": "spacing"; "stack": "stack"; "startAngle": "startAngle"; "style": "style"; "summaryField": "summaryField"; "target": "target"; "toField": "toField"; "type": "type"; "upperField": "upperField"; "visible": "visible"; "visibleInLegend": "visibleInLegend"; "visibleInLegendField": "visibleInLegendField"; "visual": "visual"; "width": "width"; "whiskers": "whiskers"; "xAxis": "xAxis"; "xErrorHighField": "xErrorHighField"; "xErrorLowField": "xErrorLowField"; "xField": "xField"; "yAxis": "yAxis"; "yErrorHighField": "yErrorHighField"; "yErrorLowField": "yErrorLowField"; "yField": "yField"; "zIndex": "zIndex"; "errorBars": "errorBars"; "extremes": "extremes"; "highlight": "highlight"; "labels": "labels"; "markers": "markers"; "notes": "notes"; "outliers": "outliers"; "tooltip": "tooltip"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWVzLWl0ZW0uY29tcG9uZW50LmdlbmVyYXRlZC5kLnRzIiwic291cmNlcyI6WyJzZXJpZXMtaXRlbS5jb21wb25lbnQuZ2VuZXJhdGVkLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBkcmF3aW5nIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkl0ZW1Db21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vY29sbGVjdGlvbi1pdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9jb2xsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vY29uZmlndXJhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEJvcmRlciwgQnVsbGV0VGFyZ2V0LCBEYXNoVHlwZSwgTGFiZWxDb25uZWN0b3JzLCBMaW5lU3R5bGUsIE1hcmdpbiwgTmVnYXRpdmVCdWJibGVWYWx1ZXMsIE92ZXJsYXksIFNlcmllcywgU2VyaWVzRXJyb3JCYXJzLCBTZXJpZXNFeHRyZW1lcywgU2VyaWVzSGlnaGxpZ2h0LCBTZXJpZXNMYWJlbHMsIFNlcmllc0xpbmUsIFNlcmllc01hcmtlcnMsIFNlcmllc01lYW4sIFNlcmllc01lZGlhbiwgU2VyaWVzTm90ZXMsIFNlcmllc091dGxpZXJzLCBTZXJpZXNTdGFjaywgU2VyaWVzVG9vbHRpcCwgU2VyaWVzVHlwZSwgU2VyaWVzVmlzdWFsQXJncywgU2VyaWVzV2hpc2tlcnMgfSBmcm9tICcuLi9jb21tb24vcHJvcGVydHktdHlwZXMnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIFNlcmllc0l0ZW1Db21wb25lbnRHZW5lcmF0ZWQgZXh0ZW5kcyBDb2xsZWN0aW9uSXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIFNlcmllcyB7XG4gICAgcHJvdGVjdGVkIGNvbmZpZ3VyYXRpb25TZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgY29sbGVjdGlvblNlcnZpY2U6IENvbGxlY3Rpb25TZXJ2aWNlO1xuICAgIGFnZ3JlZ2F0ZTogYW55O1xuICAgIGF1dG9GaXQ6IGJvb2xlYW47XG4gICAgYXhpczogc3RyaW5nO1xuICAgIGJvcmRlcjogQm9yZGVyO1xuICAgIGNhdGVnb3J5QXhpczogc3RyaW5nO1xuICAgIGNhdGVnb3J5RmllbGQ6IHN0cmluZztcbiAgICBjbG9zZUZpZWxkOiBzdHJpbmc7XG4gICAgY29sb3I6IGFueTtcbiAgICBjb2xvckZpZWxkOiBzdHJpbmc7XG4gICAgY29ubmVjdG9yczogTGFiZWxDb25uZWN0b3JzO1xuICAgIGN1cnJlbnRGaWVsZDogc3RyaW5nO1xuICAgIGRhc2hUeXBlOiBEYXNoVHlwZTtcbiAgICBkYXRhOiBhbnlbXTtcbiAgICBkb3duQ29sb3I6IHN0cmluZztcbiAgICBkb3duQ29sb3JGaWVsZDogc3RyaW5nO1xuICAgIGR5bmFtaWNIZWlnaHQ6IGJvb2xlYW47XG4gICAgZHluYW1pY1Nsb3BlOiBib29sZWFuO1xuICAgIGVycm9ySGlnaEZpZWxkOiBzdHJpbmc7XG4gICAgZXJyb3JMb3dGaWVsZDogc3RyaW5nO1xuICAgIGV4cGxvZGVGaWVsZDogc3RyaW5nO1xuICAgIGZpZWxkOiBzdHJpbmc7XG4gICAgZnJvbUZpZWxkOiBzdHJpbmc7XG4gICAgZ2FwOiBudW1iZXI7XG4gICAgaGlnaEZpZWxkOiBzdHJpbmc7XG4gICAgaG9sZVNpemU6IG51bWJlcjtcbiAgICBsaW5lOiBTZXJpZXNMaW5lO1xuICAgIGxvd0ZpZWxkOiBzdHJpbmc7XG4gICAgbG93ZXJGaWVsZDogc3RyaW5nO1xuICAgIG1hcmdpbjogTWFyZ2luIHwgbnVtYmVyO1xuICAgIG1heFNpemU6IG51bWJlcjtcbiAgICBtZWFuOiBTZXJpZXNNZWFuO1xuICAgIG1lYW5GaWVsZDogc3RyaW5nO1xuICAgIG1lZGlhbjogU2VyaWVzTWVkaWFuO1xuICAgIG1lZGlhbkZpZWxkOiBzdHJpbmc7XG4gICAgbWluU2l6ZTogbnVtYmVyO1xuICAgIG1pc3NpbmdWYWx1ZXM6ICdnYXAnIHwgJ2ludGVycG9sYXRlJyB8ICd6ZXJvJztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbmVja1JhdGlvOiBudW1iZXI7XG4gICAgbmVnYXRpdmVDb2xvcjogc3RyaW5nO1xuICAgIG5lZ2F0aXZlVmFsdWVzOiBOZWdhdGl2ZUJ1YmJsZVZhbHVlcztcbiAgICBub3RlVGV4dEZpZWxkOiBzdHJpbmc7XG4gICAgb3BhY2l0eTogbnVtYmVyO1xuICAgIG9wZW5GaWVsZDogc3RyaW5nO1xuICAgIG91dGxpZXJzRmllbGQ6IHN0cmluZztcbiAgICBvdmVybGF5OiBPdmVybGF5O1xuICAgIHBhZGRpbmc6IG51bWJlcjtcbiAgICBxMUZpZWxkOiBzdHJpbmc7XG4gICAgcTNGaWVsZDogc3RyaW5nO1xuICAgIHNlZ21lbnRTcGFjaW5nOiBudW1iZXI7XG4gICAgc2l6ZTogbnVtYmVyO1xuICAgIHNpemVGaWVsZDogc3RyaW5nO1xuICAgIHNwYWNpbmc6IG51bWJlcjtcbiAgICBzdGFjazogYm9vbGVhbiB8IHN0cmluZyB8IFNlcmllc1N0YWNrO1xuICAgIHN0YXJ0QW5nbGU6IG51bWJlcjtcbiAgICBzdHlsZTogTGluZVN0eWxlO1xuICAgIHN1bW1hcnlGaWVsZDogc3RyaW5nO1xuICAgIHRhcmdldDogQnVsbGV0VGFyZ2V0O1xuICAgIHRvRmllbGQ6IHN0cmluZztcbiAgICB0eXBlOiBTZXJpZXNUeXBlO1xuICAgIHVwcGVyRmllbGQ6IHN0cmluZztcbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIHZpc2libGVJbkxlZ2VuZDogYm9vbGVhbjtcbiAgICB2aXNpYmxlSW5MZWdlbmRGaWVsZDogc3RyaW5nO1xuICAgIHZpc3VhbDogKGU6IFNlcmllc1Zpc3VhbEFyZ3MpID0+IGRyYXdpbmcuRWxlbWVudDtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIHdoaXNrZXJzOiBTZXJpZXNXaGlza2VycztcbiAgICB4QXhpczogc3RyaW5nO1xuICAgIHhFcnJvckhpZ2hGaWVsZDogc3RyaW5nO1xuICAgIHhFcnJvckxvd0ZpZWxkOiBzdHJpbmc7XG4gICAgeEZpZWxkOiBzdHJpbmc7XG4gICAgeUF4aXM6IHN0cmluZztcbiAgICB5RXJyb3JIaWdoRmllbGQ6IHN0cmluZztcbiAgICB5RXJyb3JMb3dGaWVsZDogc3RyaW5nO1xuICAgIHlGaWVsZDogc3RyaW5nO1xuICAgIHpJbmRleDogbnVtYmVyO1xuICAgIGVycm9yQmFyczogU2VyaWVzRXJyb3JCYXJzO1xuICAgIGV4dHJlbWVzOiBTZXJpZXNFeHRyZW1lcztcbiAgICBoaWdobGlnaHQ6IFNlcmllc0hpZ2hsaWdodDtcbiAgICBsYWJlbHM6IFNlcmllc0xhYmVscztcbiAgICBtYXJrZXJzOiBTZXJpZXNNYXJrZXJzO1xuICAgIG5vdGVzOiBTZXJpZXNOb3RlcztcbiAgICBvdXRsaWVyczogU2VyaWVzT3V0bGllcnM7XG4gICAgdG9vbHRpcDogU2VyaWVzVG9vbHRpcDtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uU2VydmljZTogQ29uZmlndXJhdGlvblNlcnZpY2UsIGNvbGxlY3Rpb25TZXJ2aWNlOiBDb2xsZWN0aW9uU2VydmljZSk7XG59XG4iXX0=