/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ConfigurationService } from '../../common/configuration.service';
import { SeriesMarkersComponentGenerated } from '../series-item/markers.component.generated';
/**
 * The configuration of the Chart series marker.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * _@Component({
 *       selector: 'my-app',
 *   template: `
 *       <kendo-chart [categoryAxis]="{ categories: categories }">
 *           <kendo-chart-title text="Gross domestic product growth /GDP annual %/"></kendo-chart-title>
 *           <kendo-chart-legend position="bottom" orientation="horizontal"></kendo-chart-legend>
 *           <kendo-chart-tooltip format="{0}%"></kendo-chart-tooltip>
 *           <kendo-chart-series>
 *               <kendo-chart-series-item *ngFor="let item of series"
 *                   type="line"
 *                   style="smooth"
 *                   [data]="item.data"
 *                   [name]="item.name"
 *                   [markers]="item.markers">
 *               </kendo-chart-series-item>
 *           </kendo-chart-series>
 *       </kendo-chart>
 *   `
 * })
 * export class AppComponent {
 * public series: any[] = [{
 *   name: "India",
 *   data: [3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855],
 *   markers: {
 *     background: 'red',
 *     size: 20,
 *     type: 'circle'
 *   }
 * }, {
 *   name: "Russian Federation",
 *   data: [4.743, 7.295, 7.175, 6.376, 8.153, 8.535, 5.247, -7.832, 4.3, 4.3],
 *   markers: {
 *     background: 'yellow',
 *     size: 10,
 *     type: 'square',
 *     rotation: 45
 *   }
 * }, {
 *   name: "Germany",
 *   data: [0.010, -0.375, 1.161, 0.684, 3.7, 3.269, 1.083, -5.127, 3.690, 2.995],
 *   markers: {
 *     background: 'green',
 *     size: 20,
 *     type: 'triangle'
 *   }
 * },{
 *   name: "World",
 *   data: [1.988, 2.733, 3.994, 3.464, 4.001, 3.939, 1.333, -2.245, 4.339, 2.727],
 *   markers: {
 *     background: 'blue',
 *     size: 10,
 *     type: 'cross'
 *   }
 * }];
 * public categories: number[] = [2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011];
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class SeriesMarkersComponent extends SeriesMarkersComponentGenerated {
    configurationService: ConfigurationService;
    constructor(configurationService: ConfigurationService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SeriesMarkersComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SeriesMarkersComponent, "kendo-chart-series-item-markers", never, {}, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibWFya2Vycy5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDb25maWd1cmF0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VyaWVzTWFya2Vyc0NvbXBvbmVudEdlbmVyYXRlZCB9IGZyb20gJy4uL3Nlcmllcy1pdGVtL21hcmtlcnMuY29tcG9uZW50LmdlbmVyYXRlZCc7XG4vKipcbiAqIFRoZSBjb25maWd1cmF0aW9uIG9mIHRoZSBDaGFydCBzZXJpZXMgbWFya2VyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogX0BDb21wb25lbnQoe1xuICogICAgICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICogICB0ZW1wbGF0ZTogYFxuICogICAgICAgPGtlbmRvLWNoYXJ0IFtjYXRlZ29yeUF4aXNdPVwieyBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzIH1cIj5cbiAqICAgICAgICAgICA8a2VuZG8tY2hhcnQtdGl0bGUgdGV4dD1cIkdyb3NzIGRvbWVzdGljIHByb2R1Y3QgZ3Jvd3RoIC9HRFAgYW5udWFsICUvXCI+PC9rZW5kby1jaGFydC10aXRsZT5cbiAqICAgICAgICAgICA8a2VuZG8tY2hhcnQtbGVnZW5kIHBvc2l0aW9uPVwiYm90dG9tXCIgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCI+PC9rZW5kby1jaGFydC1sZWdlbmQ+XG4gKiAgICAgICAgICAgPGtlbmRvLWNoYXJ0LXRvb2x0aXAgZm9ybWF0PVwiezB9JVwiPjwva2VuZG8tY2hhcnQtdG9vbHRpcD5cbiAqICAgICAgICAgICA8a2VuZG8tY2hhcnQtc2VyaWVzPlxuICogICAgICAgICAgICAgICA8a2VuZG8tY2hhcnQtc2VyaWVzLWl0ZW0gKm5nRm9yPVwibGV0IGl0ZW0gb2Ygc2VyaWVzXCJcbiAqICAgICAgICAgICAgICAgICAgIHR5cGU9XCJsaW5lXCJcbiAqICAgICAgICAgICAgICAgICAgIHN0eWxlPVwic21vb3RoXCJcbiAqICAgICAgICAgICAgICAgICAgIFtkYXRhXT1cIml0ZW0uZGF0YVwiXG4gKiAgICAgICAgICAgICAgICAgICBbbmFtZV09XCJpdGVtLm5hbWVcIlxuICogICAgICAgICAgICAgICAgICAgW21hcmtlcnNdPVwiaXRlbS5tYXJrZXJzXCI+XG4gKiAgICAgICAgICAgICAgIDwva2VuZG8tY2hhcnQtc2VyaWVzLWl0ZW0+XG4gKiAgICAgICAgICAgPC9rZW5kby1jaGFydC1zZXJpZXM+XG4gKiAgICAgICA8L2tlbmRvLWNoYXJ0PlxuICogICBgXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiBwdWJsaWMgc2VyaWVzOiBhbnlbXSA9IFt7XG4gKiAgIG5hbWU6IFwiSW5kaWFcIixcbiAqICAgZGF0YTogWzMuOTA3LCA3Ljk0MywgNy44NDgsIDkuMjg0LCA5LjI2MywgOS44MDEsIDMuODkwLCA4LjIzOCwgOS41NTIsIDYuODU1XSxcbiAqICAgbWFya2Vyczoge1xuICogICAgIGJhY2tncm91bmQ6ICdyZWQnLFxuICogICAgIHNpemU6IDIwLFxuICogICAgIHR5cGU6ICdjaXJjbGUnXG4gKiAgIH1cbiAqIH0sIHtcbiAqICAgbmFtZTogXCJSdXNzaWFuIEZlZGVyYXRpb25cIixcbiAqICAgZGF0YTogWzQuNzQzLCA3LjI5NSwgNy4xNzUsIDYuMzc2LCA4LjE1MywgOC41MzUsIDUuMjQ3LCAtNy44MzIsIDQuMywgNC4zXSxcbiAqICAgbWFya2Vyczoge1xuICogICAgIGJhY2tncm91bmQ6ICd5ZWxsb3cnLFxuICogICAgIHNpemU6IDEwLFxuICogICAgIHR5cGU6ICdzcXVhcmUnLFxuICogICAgIHJvdGF0aW9uOiA0NVxuICogICB9XG4gKiB9LCB7XG4gKiAgIG5hbWU6IFwiR2VybWFueVwiLFxuICogICBkYXRhOiBbMC4wMTAsIC0wLjM3NSwgMS4xNjEsIDAuNjg0LCAzLjcsIDMuMjY5LCAxLjA4MywgLTUuMTI3LCAzLjY5MCwgMi45OTVdLFxuICogICBtYXJrZXJzOiB7XG4gKiAgICAgYmFja2dyb3VuZDogJ2dyZWVuJyxcbiAqICAgICBzaXplOiAyMCxcbiAqICAgICB0eXBlOiAndHJpYW5nbGUnXG4gKiAgIH1cbiAqIH0se1xuICogICBuYW1lOiBcIldvcmxkXCIsXG4gKiAgIGRhdGE6IFsxLjk4OCwgMi43MzMsIDMuOTk0LCAzLjQ2NCwgNC4wMDEsIDMuOTM5LCAxLjMzMywgLTIuMjQ1LCA0LjMzOSwgMi43MjddLFxuICogICBtYXJrZXJzOiB7XG4gKiAgICAgYmFja2dyb3VuZDogJ2JsdWUnLFxuICogICAgIHNpemU6IDEwLFxuICogICAgIHR5cGU6ICdjcm9zcydcbiAqICAgfVxuICogfV07XG4gKiBwdWJsaWMgY2F0ZWdvcmllczogbnVtYmVyW10gPSBbMjAwMiwgMjAwMywgMjAwNCwgMjAwNSwgMjAwNiwgMjAwNywgMjAwOCwgMjAwOSwgMjAxMCwgMjAxMV07XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU2VyaWVzTWFya2Vyc0NvbXBvbmVudCBleHRlbmRzIFNlcmllc01hcmtlcnNDb21wb25lbnRHZW5lcmF0ZWQge1xuICAgIGNvbmZpZ3VyYXRpb25TZXJ2aWNlOiBDb25maWd1cmF0aW9uU2VydmljZTtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uU2VydmljZTogQ29uZmlndXJhdGlvblNlcnZpY2UpO1xufVxuIl19