/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { NgZone, ElementRef, EventEmitter, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { ConfigurationService } from './common/configuration.service';
import { ChartComponent } from './chart.component';
import { ChartInstanceObserver } from './common/chart-instance-observer';
import { ThemeService } from './common/theme.service';
import { IntlService } from '@progress/kendo-angular-intl';
import { DragAction, Zoomable } from './common/property-types';
import { NavigatorFilterEvent } from './stock-chart/events/navigator-filter-event';
import { StockInstanceEventService } from './stock-chart/events/instance-event.service';
import { Navigator as StockNavigator } from './stock-chart/option-types';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * The root StockChart component.
 *
 * @example
 * ```ts
 * import { Component } from '@angular/core';
 *
 * _@Component({
 *   selector: 'my-app',
 *   template: `
 *     <kendo-stockchart>
 *         <kendo-chart-series>
 *             <kendo-chart-series-item type="line" [data]="data" field="value" categoryField="date">
 *             </kendo-chart-series-item>
 *         </kendo-chart-series>
 *         <kendo-chart-navigator>
 *             <kendo-chart-navigator-select to="2017/02/01">
 *             </kendo-chart-navigator-select>
 *             <kendo-chart-navigator-series>
 *                 <kendo-chart-navigator-series-item type="area" [data]="data" field="value" categoryField="date">
 *                 </kendo-chart-navigator-series-item>
 *             </kendo-chart-navigator-series>
 *         </kendo-chart-navigator>
 *     </kendo-stockchart>
 *   `
 * })
 * class AppComponent {
 *   public data: any[] = [];
 *
 *   constructor() {
 *      for (let idx = 0; idx < 100; idx++) {
 *          this.data.push({
 *              date: new Date(2017, 0, idx),
 *              value: Math.random() * 100
 *          });
 *      }
 *   }
 * }
 *
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StockChartComponent extends ChartComponent {
    configurationService: ConfigurationService;
    themeService: ThemeService;
    protected element: ElementRef;
    protected intl: IntlService;
    protected localizationService: LocalizationService;
    protected ngZone: NgZone;
    protected instanceEventService: StockInstanceEventService;
    protected changeDetector: ChangeDetectorRef;
    protected renderer: Renderer2;
    /**
     * The configuration options for the data navigator.
     */
    navigator: StockNavigator;
    /**
     * @hidden
     */
    pannable: boolean | DragAction;
    /**
     * @hidden
     */
    zoomable: boolean | Zoomable;
    /**
     * Fires when the navigator range is changed.
     */
    navigatorFilter: EventEmitter<NavigatorFilterEvent>;
    protected redrawSlaves: boolean;
    protected hostClasses: string[];
    constructor(configurationService: ConfigurationService, themeService: ThemeService, element: ElementRef, intl: IntlService, localizationService: LocalizationService, ngZone: NgZone, instanceEventService: StockInstanceEventService, changeDetector: ChangeDetectorRef, renderer: Renderer2);
    /**
     * If called, the navigator pane is not redrawn the next time the StockChart options are updated.
     * The method is useful if you need to update only the main series data for the selected period.
     */
    skipNavigatorRedraw(): void;
    protected createInstance(element: any, observer: ChartInstanceObserver): void;
    protected updateOptions(): void;
    private applyNavigatorDefaults;
    private isDevMode;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StockChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StockChartComponent, "kendo-stockchart", ["kendoStockChart"], { "navigator": "navigator"; "pannable": "pannable"; "zoomable": "zoomable"; }, { "navigatorFilter": "navigatorFilter"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvY2stY2hhcnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInN0b2NrLWNoYXJ0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBOZ1pvbmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICcuL2NvbW1vbi9jb25maWd1cmF0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2NoYXJ0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDaGFydEluc3RhbmNlT2JzZXJ2ZXIgfSBmcm9tICcuL2NvbW1vbi9jaGFydC1pbnN0YW5jZS1vYnNlcnZlcic7XG5pbXBvcnQgeyBUaGVtZVNlcnZpY2UgfSBmcm9tICcuL2NvbW1vbi90aGVtZS5zZXJ2aWNlJztcbmltcG9ydCB7IEludGxTZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItaW50bCc7XG5pbXBvcnQgeyBEcmFnQWN0aW9uLCBab29tYWJsZSB9IGZyb20gJy4vY29tbW9uL3Byb3BlcnR5LXR5cGVzJztcbmltcG9ydCB7IE5hdmlnYXRvckZpbHRlckV2ZW50IH0gZnJvbSAnLi9zdG9jay1jaGFydC9ldmVudHMvbmF2aWdhdG9yLWZpbHRlci1ldmVudCc7XG5pbXBvcnQgeyBTdG9ja0luc3RhbmNlRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi9zdG9jay1jaGFydC9ldmVudHMvaW5zdGFuY2UtZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBOYXZpZ2F0b3IgYXMgU3RvY2tOYXZpZ2F0b3IgfSBmcm9tICcuL3N0b2NrLWNoYXJ0L29wdGlvbi10eXBlcyc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIFRoZSByb290IFN0b2NrQ2hhcnQgY29tcG9uZW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogX0BDb21wb25lbnQoe1xuICogICBzZWxlY3RvcjogJ215LWFwcCcsXG4gKiAgIHRlbXBsYXRlOiBgXG4gKiAgICAgPGtlbmRvLXN0b2NrY2hhcnQ+XG4gKiAgICAgICAgIDxrZW5kby1jaGFydC1zZXJpZXM+XG4gKiAgICAgICAgICAgICA8a2VuZG8tY2hhcnQtc2VyaWVzLWl0ZW0gdHlwZT1cImxpbmVcIiBbZGF0YV09XCJkYXRhXCIgZmllbGQ9XCJ2YWx1ZVwiIGNhdGVnb3J5RmllbGQ9XCJkYXRlXCI+XG4gKiAgICAgICAgICAgICA8L2tlbmRvLWNoYXJ0LXNlcmllcy1pdGVtPlxuICogICAgICAgICA8L2tlbmRvLWNoYXJ0LXNlcmllcz5cbiAqICAgICAgICAgPGtlbmRvLWNoYXJ0LW5hdmlnYXRvcj5cbiAqICAgICAgICAgICAgIDxrZW5kby1jaGFydC1uYXZpZ2F0b3Itc2VsZWN0IHRvPVwiMjAxNy8wMi8wMVwiPlxuICogICAgICAgICAgICAgPC9rZW5kby1jaGFydC1uYXZpZ2F0b3Itc2VsZWN0PlxuICogICAgICAgICAgICAgPGtlbmRvLWNoYXJ0LW5hdmlnYXRvci1zZXJpZXM+XG4gKiAgICAgICAgICAgICAgICAgPGtlbmRvLWNoYXJ0LW5hdmlnYXRvci1zZXJpZXMtaXRlbSB0eXBlPVwiYXJlYVwiIFtkYXRhXT1cImRhdGFcIiBmaWVsZD1cInZhbHVlXCIgY2F0ZWdvcnlGaWVsZD1cImRhdGVcIj5cbiAqICAgICAgICAgICAgICAgICA8L2tlbmRvLWNoYXJ0LW5hdmlnYXRvci1zZXJpZXMtaXRlbT5cbiAqICAgICAgICAgICAgIDwva2VuZG8tY2hhcnQtbmF2aWdhdG9yLXNlcmllcz5cbiAqICAgICAgICAgPC9rZW5kby1jaGFydC1uYXZpZ2F0b3I+XG4gKiAgICAgPC9rZW5kby1zdG9ja2NoYXJ0PlxuICogICBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgcHVibGljIGRhdGE6IGFueVtdID0gW107XG4gKlxuICogICBjb25zdHJ1Y3RvcigpIHtcbiAqICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgMTAwOyBpZHgrKykge1xuICogICAgICAgICAgdGhpcy5kYXRhLnB1c2goe1xuICogICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKDIwMTcsIDAsIGlkeCksXG4gKiAgICAgICAgICAgICAgdmFsdWU6IE1hdGgucmFuZG9tKCkgKiAxMDBcbiAqICAgICAgICAgIH0pO1xuICogICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RvY2tDaGFydENvbXBvbmVudCBleHRlbmRzIENoYXJ0Q29tcG9uZW50IHtcbiAgICBjb25maWd1cmF0aW9uU2VydmljZTogQ29uZmlndXJhdGlvblNlcnZpY2U7XG4gICAgdGhlbWVTZXJ2aWNlOiBUaGVtZVNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGludGw6IEludGxTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBsb2NhbGl6YXRpb25TZXJ2aWNlOiBMb2NhbGl6YXRpb25TZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgaW5zdGFuY2VFdmVudFNlcnZpY2U6IFN0b2NrSW5zdGFuY2VFdmVudFNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgZGF0YSBuYXZpZ2F0b3IuXG4gICAgICovXG4gICAgbmF2aWdhdG9yOiBTdG9ja05hdmlnYXRvcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcGFubmFibGU6IGJvb2xlYW4gfCBEcmFnQWN0aW9uO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB6b29tYWJsZTogYm9vbGVhbiB8IFpvb21hYmxlO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG5hdmlnYXRvciByYW5nZSBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIG5hdmlnYXRvckZpbHRlcjogRXZlbnRFbWl0dGVyPE5hdmlnYXRvckZpbHRlckV2ZW50PjtcbiAgICBwcm90ZWN0ZWQgcmVkcmF3U2xhdmVzOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBob3N0Q2xhc3Nlczogc3RyaW5nW107XG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvblNlcnZpY2U6IENvbmZpZ3VyYXRpb25TZXJ2aWNlLCB0aGVtZVNlcnZpY2U6IFRoZW1lU2VydmljZSwgZWxlbWVudDogRWxlbWVudFJlZiwgaW50bDogSW50bFNlcnZpY2UsIGxvY2FsaXphdGlvblNlcnZpY2U6IExvY2FsaXphdGlvblNlcnZpY2UsIG5nWm9uZTogTmdab25lLCBpbnN0YW5jZUV2ZW50U2VydmljZTogU3RvY2tJbnN0YW5jZUV2ZW50U2VydmljZSwgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCByZW5kZXJlcjogUmVuZGVyZXIyKTtcbiAgICAvKipcbiAgICAgKiBJZiBjYWxsZWQsIHRoZSBuYXZpZ2F0b3IgcGFuZSBpcyBub3QgcmVkcmF3biB0aGUgbmV4dCB0aW1lIHRoZSBTdG9ja0NoYXJ0IG9wdGlvbnMgYXJlIHVwZGF0ZWQuXG4gICAgICogVGhlIG1ldGhvZCBpcyB1c2VmdWwgaWYgeW91IG5lZWQgdG8gdXBkYXRlIG9ubHkgdGhlIG1haW4gc2VyaWVzIGRhdGEgZm9yIHRoZSBzZWxlY3RlZCBwZXJpb2QuXG4gICAgICovXG4gICAgc2tpcE5hdmlnYXRvclJlZHJhdygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjcmVhdGVJbnN0YW5jZShlbGVtZW50OiBhbnksIG9ic2VydmVyOiBDaGFydEluc3RhbmNlT2JzZXJ2ZXIpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVPcHRpb25zKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhcHBseU5hdmlnYXRvckRlZmF1bHRzO1xuICAgIHByaXZhdGUgaXNEZXZNb2RlO1xufVxuIl19