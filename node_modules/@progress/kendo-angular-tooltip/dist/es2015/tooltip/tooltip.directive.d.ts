/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, OnDestroy, ElementRef, NgZone, OnChanges, Renderer2, AfterViewChecked } from '@angular/core';
import { PopupService, PopupRef, Collision } from '@progress/kendo-angular-popup';
import { TooltipSettings } from './tooltip.settings';
import { Position } from '../models/position.type';
import { ShowOption } from '../models/show.option.type';
/**
 * Represents the [Kendo UI Tooltip directive for Angular]({% slug overview_tooltip %}).
 * Used to display additional information that is related to an element.
 *
 * @example
 * ```ts-no-run
 * <div kendoTooltip>
 *    <a title="Tooltip title" href="foo">foo</a>
 * </div>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class TooltipDirective implements OnDestroy, OnChanges, AfterViewChecked {
    tooltipWrapper: ElementRef;
    ngZone: NgZone;
    private renderer;
    private popupService;
    /**
     * Specifies a selector for elements within a container which will display a tooltip
     * ([see example]({% slug anchorelements_tooltip %})). The possible values include any
     * DOM `selector`. The default value is `[title]`.
     */
    filter: string;
    /**
     * Specifies the position of the Tooltip that is relative to the
     * anchor element ([see example]({% slug positioning_tooltip %})).
     *
     * The possible values are:
     * * `top` (default)
     * * `bottom`
     * * `left`
     * * `right`
     */
    position: Position;
    /**
     * Renders the passed template as a header title of the Tooltip
     * ([see example]({% slug anchorelements_tooltip %})).
     */
    titleTemplate?: TemplateRef<any>;
    /**
     * Specifies when the Тooltip will be rendered
     * ([see example]({% slug programmaticopening_tooltip %})).
     *
     * The possible values are:
     * * `hover` (default)
     * * `click`
     * * `none`
     */
    showOn: ShowOption;
    /**
     * Specifies the delay in milliseconds before the Tooltip is shown.
     * * `100` (default) milliseconds.
     */
    showAfter: number;
    /**
     * Specifies if the Тooltip will display a callout arrow.
     *
     * The possible values are:
     * * `true` (default)
     * * `false`
     */
    callout: boolean;
    /**
     * Specifies if the Тooltip will display a **Close** button
     * ([see example]({% slug closable_tooltip %})).
     *
     * The possible values are:
     * * `true`
     * * `false`
     */
    closable: boolean;
    /**
     * Specifies the offset in pixels between the Tooltip and the anchor. Defaults to `6` pixels.
     * If the `callout` property is set to `true`, the offset is rendered from the callout arrow.
     * If the `callout` property is set to `false`, the offset is rendered from the content of the Tooltip.
     */
    offset: number;
    /**
     * Specifies the width of the Тooltip ([see example]({% slug anchorelements_tooltip %})).
     */
    tooltipWidth: number;
    /**
     * Specifies the height of the Тooltip.
     */
    tooltipHeight: number;
    /**
     * Specifies a CSS class that will be added to the Tooltip.
     */
    tooltipClass: string;
    /**
     * Provides screen boundary detection when the Тooltip is shown.
     */
    collision: Collision;
    /**
     * Specifies the title of the close button.
     */
    closeTitle: string;
    /**
     * Sets the content of the Tooltip as a template reference
     * ([see example]({% slug templates_tooltip %})).
     */
    tooltipTemplate: TemplateRef<any>;
    popupRef: PopupRef;
    template: TemplateRef<any>;
    private showTimeout;
    private anchor;
    private mouseOverSubscription;
    private mouseOutSubscription;
    private mouseClickSubscription;
    private anchorTitleSubscription;
    private popupPositionChangeSubscription;
    private popupMouseOutSubscription;
    private closeClickSubscription;
    private validPositions;
    private validShowOptions;
    constructor(tooltipWrapper: ElementRef, ngZone: NgZone, renderer: Renderer2, popupService: PopupService, settings: TooltipSettings, legacySettings: TooltipSettings);
    /**
     * Shows the Tooltip.
     * @param anchor&mdash; ElementRef|Element.
     * Specifies the element that will be used as an anchor. The Tooltip opens relative to that element.
     */
    show(anchor: ElementRef | Element): void;
    /**
     * Hides the Tooltip.
     */
    hide(): void;
    /**
     * Toggle visibility of the Tooltip.
     *
     * @param anchor&mdash; ElementRef|Element. Specifies the element that will be used as an anchor.
     * @param show&mdash; Optional. Boolean. Specifies if the Tooltip will be rendered.
     */
    toggle(anchor: ElementRef | Element, show?: boolean): void;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private showContent;
    private bindContent;
    private hideElementTitle;
    private openPopup;
    private closePopup;
    private subscribeClick;
    private onMouseClick;
    private onMouseOver;
    private onMouseOut;
    private verifyProperties;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TooltipDirective, [null, null, null, null, { optional: true; }, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TooltipDirective, "[kendoTooltip]", ["kendoTooltip"], { "filter": "filter"; "position": "position"; "showAfter": "showAfter"; "callout": "callout"; "closable": "closable"; "offset": "offset"; "tooltipTemplate": "tooltipTemplate"; "showOn": "showOn"; "titleTemplate": "titleTemplate"; "tooltipWidth": "tooltipWidth"; "tooltipHeight": "tooltipHeight"; "tooltipClass": "tooltipClass"; "collision": "collision"; "closeTitle": "closeTitle"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uQ2hhbmdlcywgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb3B1cFNlcnZpY2UsIFBvcHVwUmVmLCBDb2xsaXNpb24gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1wb3B1cCc7XG5pbXBvcnQgeyBUb29sdGlwU2V0dGluZ3MgfSBmcm9tICcuL3Rvb2x0aXAuc2V0dGluZ3MnO1xuaW1wb3J0IHsgUG9zaXRpb24gfSBmcm9tICcuLi9tb2RlbHMvcG9zaXRpb24udHlwZSc7XG5pbXBvcnQgeyBTaG93T3B0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL3Nob3cub3B0aW9uLnR5cGUnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgVG9vbHRpcCBkaXJlY3RpdmUgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfdG9vbHRpcCAlfSkuXG4gKiBVc2VkIHRvIGRpc3BsYXkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0aGF0IGlzIHJlbGF0ZWQgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMtbm8tcnVuXG4gKiA8ZGl2IGtlbmRvVG9vbHRpcD5cbiAqICAgIDxhIHRpdGxlPVwiVG9vbHRpcCB0aXRsZVwiIGhyZWY9XCJmb29cIj5mb288L2E+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb29sdGlwRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0NoZWNrZWQge1xuICAgIHRvb2x0aXBXcmFwcGVyOiBFbGVtZW50UmVmO1xuICAgIG5nWm9uZTogTmdab25lO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBwb3B1cFNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgc2VsZWN0b3IgZm9yIGVsZW1lbnRzIHdpdGhpbiBhIGNvbnRhaW5lciB3aGljaCB3aWxsIGRpc3BsYXkgYSB0b29sdGlwXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBhbmNob3JlbGVtZW50c190b29sdGlwICV9KSkuIFRoZSBwb3NzaWJsZSB2YWx1ZXMgaW5jbHVkZSBhbnlcbiAgICAgKiBET00gYHNlbGVjdG9yYC4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYFt0aXRsZV1gLlxuICAgICAqL1xuICAgIGZpbHRlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgcG9zaXRpb24gb2YgdGhlIFRvb2x0aXAgdGhhdCBpcyByZWxhdGl2ZSB0byB0aGVcbiAgICAgKiBhbmNob3IgZWxlbWVudCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHBvc2l0aW9uaW5nX3Rvb2x0aXAgJX0pKS5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogYHRvcGAgKGRlZmF1bHQpXG4gICAgICogKiBgYm90dG9tYFxuICAgICAqICogYGxlZnRgXG4gICAgICogKiBgcmlnaHRgXG4gICAgICovXG4gICAgcG9zaXRpb246IFBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIFJlbmRlcnMgdGhlIHBhc3NlZCB0ZW1wbGF0ZSBhcyBhIGhlYWRlciB0aXRsZSBvZiB0aGUgVG9vbHRpcFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgYW5jaG9yZWxlbWVudHNfdG9vbHRpcCAlfSkpLlxuICAgICAqL1xuICAgIHRpdGxlVGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGVuIHRoZSDQom9vbHRpcCB3aWxsIGJlIHJlbmRlcmVkXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBwcm9ncmFtbWF0aWNvcGVuaW5nX3Rvb2x0aXAgJX0pKS5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogYGhvdmVyYCAoZGVmYXVsdClcbiAgICAgKiAqIGBjbGlja2BcbiAgICAgKiAqIGBub25lYFxuICAgICAqL1xuICAgIHNob3dPbjogU2hvd09wdGlvbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhlIFRvb2x0aXAgaXMgc2hvd24uXG4gICAgICogKiBgMTAwYCAoZGVmYXVsdCkgbWlsbGlzZWNvbmRzLlxuICAgICAqL1xuICAgIHNob3dBZnRlcjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUg0KJvb2x0aXAgd2lsbCBkaXNwbGF5IGEgY2FsbG91dCBhcnJvdy5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogYHRydWVgIChkZWZhdWx0KVxuICAgICAqICogYGZhbHNlYFxuICAgICAqL1xuICAgIGNhbGxvdXQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSDQom9vbHRpcCB3aWxsIGRpc3BsYXkgYSAqKkNsb3NlKiogYnV0dG9uXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjbG9zYWJsZV90b29sdGlwICV9KSkuXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAqIGB0cnVlYFxuICAgICAqICogYGZhbHNlYFxuICAgICAqL1xuICAgIGNsb3NhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgb2Zmc2V0IGluIHBpeGVscyBiZXR3ZWVuIHRoZSBUb29sdGlwIGFuZCB0aGUgYW5jaG9yLiBEZWZhdWx0cyB0byBgNmAgcGl4ZWxzLlxuICAgICAqIElmIHRoZSBgY2FsbG91dGAgcHJvcGVydHkgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIG9mZnNldCBpcyByZW5kZXJlZCBmcm9tIHRoZSBjYWxsb3V0IGFycm93LlxuICAgICAqIElmIHRoZSBgY2FsbG91dGAgcHJvcGVydHkgaXMgc2V0IHRvIGBmYWxzZWAsIHRoZSBvZmZzZXQgaXMgcmVuZGVyZWQgZnJvbSB0aGUgY29udGVudCBvZiB0aGUgVG9vbHRpcC5cbiAgICAgKi9cbiAgICBvZmZzZXQ6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHdpZHRoIG9mIHRoZSDQom9vbHRpcCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGFuY2hvcmVsZW1lbnRzX3Rvb2x0aXAgJX0pKS5cbiAgICAgKi9cbiAgICB0b29sdGlwV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGhlaWdodCBvZiB0aGUg0KJvb2x0aXAuXG4gICAgICovXG4gICAgdG9vbHRpcEhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhIENTUyBjbGFzcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIFRvb2x0aXAuXG4gICAgICovXG4gICAgdG9vbHRpcENsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUHJvdmlkZXMgc2NyZWVuIGJvdW5kYXJ5IGRldGVjdGlvbiB3aGVuIHRoZSDQom9vbHRpcCBpcyBzaG93bi5cbiAgICAgKi9cbiAgICBjb2xsaXNpb246IENvbGxpc2lvbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRpdGxlIG9mIHRoZSBjbG9zZSBidXR0b24uXG4gICAgICovXG4gICAgY2xvc2VUaXRsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbnRlbnQgb2YgdGhlIFRvb2x0aXAgYXMgYSB0ZW1wbGF0ZSByZWZlcmVuY2VcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHRlbXBsYXRlc190b29sdGlwICV9KSkuXG4gICAgICovXG4gICAgdG9vbHRpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHBvcHVwUmVmOiBQb3B1cFJlZjtcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBwcml2YXRlIHNob3dUaW1lb3V0O1xuICAgIHByaXZhdGUgYW5jaG9yO1xuICAgIHByaXZhdGUgbW91c2VPdmVyU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgbW91c2VPdXRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBtb3VzZUNsaWNrU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgYW5jaG9yVGl0bGVTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBwb3B1cFBvc2l0aW9uQ2hhbmdlU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgcG9wdXBNb3VzZU91dFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNsb3NlQ2xpY2tTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSB2YWxpZFBvc2l0aW9ucztcbiAgICBwcml2YXRlIHZhbGlkU2hvd09wdGlvbnM7XG4gICAgY29uc3RydWN0b3IodG9vbHRpcFdyYXBwZXI6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyLCBwb3B1cFNlcnZpY2U6IFBvcHVwU2VydmljZSwgc2V0dGluZ3M6IFRvb2x0aXBTZXR0aW5ncywgbGVnYWN5U2V0dGluZ3M6IFRvb2x0aXBTZXR0aW5ncyk7XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIFRvb2x0aXAuXG4gICAgICogQHBhcmFtIGFuY2hvciZtZGFzaDsgRWxlbWVudFJlZnxFbGVtZW50LlxuICAgICAqIFNwZWNpZmllcyB0aGUgZWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcyBhbiBhbmNob3IuIFRoZSBUb29sdGlwIG9wZW5zIHJlbGF0aXZlIHRvIHRoYXQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBzaG93KGFuY2hvcjogRWxlbWVudFJlZiB8IEVsZW1lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBUb29sdGlwLlxuICAgICAqL1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUb2dnbGUgdmlzaWJpbGl0eSBvZiB0aGUgVG9vbHRpcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbmNob3ImbWRhc2g7IEVsZW1lbnRSZWZ8RWxlbWVudC4gU3BlY2lmaWVzIHRoZSBlbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzIGFuIGFuY2hvci5cbiAgICAgKiBAcGFyYW0gc2hvdyZtZGFzaDsgT3B0aW9uYWwuIEJvb2xlYW4uIFNwZWNpZmllcyBpZiB0aGUgVG9vbHRpcCB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqL1xuICAgIHRvZ2dsZShhbmNob3I6IEVsZW1lbnRSZWYgfCBFbGVtZW50LCBzaG93PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzaG93Q29udGVudDtcbiAgICBwcml2YXRlIGJpbmRDb250ZW50O1xuICAgIHByaXZhdGUgaGlkZUVsZW1lbnRUaXRsZTtcbiAgICBwcml2YXRlIG9wZW5Qb3B1cDtcbiAgICBwcml2YXRlIGNsb3NlUG9wdXA7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVDbGljaztcbiAgICBwcml2YXRlIG9uTW91c2VDbGljaztcbiAgICBwcml2YXRlIG9uTW91c2VPdmVyO1xuICAgIHByaXZhdGUgb25Nb3VzZU91dDtcbiAgICBwcml2YXRlIHZlcmlmeVByb3BlcnRpZXM7XG59XG4iXX0=