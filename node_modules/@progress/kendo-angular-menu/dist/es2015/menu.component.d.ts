/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnChanges, AfterViewChecked, NgZone, Renderer2, TemplateRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ItemsService } from './services/items.service';
import { ActionsService } from './services/actions.service';
import { NavigationService } from './services/navigation.service';
import { HoverService } from './services/hover.service';
import { MenuEvent } from './menu-event';
import { MenuSelectEvent } from './menu-select-event';
import { ContextMenuService } from './context-menu/context-menu.service';
import { MenuBase } from './menu-base';
/**
 * Represents the [Kendo UI Menu component for Angular]({% slug overview_menu %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-menu [items]="items">
 *        </kendo-menu>
 *    `
 * })
 * class AppComponent {
 *    public items: any[] = [{ text: 'item1', items: [{ text: 'item1.1' }] }, { text: 'item2', disabled: true }];
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class MenuComponent extends MenuBase implements OnChanges, AfterViewChecked {
    private itemsService;
    private hover;
    private actions;
    private navigation;
    private localization;
    private ngZone;
    private renderer;
    private contextService?;
    /**
     * @hidden
     */
    menuItemTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    menuItemLinkTemplate: TemplateRef<any>;
    /**
     * Fires when a Menu item is selected ([see example]({% slug routing_menu %})).
     */
    select: EventEmitter<MenuSelectEvent>;
    /**
     * Fires when a Menu item is opened.
     */
    open: EventEmitter<MenuEvent>;
    /**
     * Fires when a Menu item is closed.
     */
    close: EventEmitter<MenuEvent>;
    /**
     * @hidden
     */
    readonly ariaOrientation: string;
    /**
     * @hidden
     */
    readonly contextMenuClass: boolean;
    readonly direction: boolean;
    readonly rtl: boolean;
    private closeClickSubscription;
    private contextKeyDownSubscription;
    constructor(itemsService: ItemsService, hover: HoverService, actions: ActionsService, navigation: NavigationService, localization: LocalizationService, ngZone: NgZone, renderer: Renderer2, contextService?: ContextMenuService);
    /**
     * Opens or closes the specified Menu items.
     *
     * @param open - A Boolean value which indicates if the items will be opened or closed.
     * @param indices - One or more values which represent the hierarchical indices of the items that will be opened or closed.
     */
    toggle(open: boolean, ...indices: string[]): void;
    /**
     * @hidden
     */
    focus(index?: string): void;
    ngOnChanges(changes: any): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private attachCloseClick;
    private unsubscribeClick;
    private contextKeyDown;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MenuComponent, [null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MenuComponent, "kendo-menu", ["kendoMenu"], { "menuItemTemplate": "menuItemTemplate"; "menuItemLinkTemplate": "menuItemLinkTemplate"; }, { "select": "select"; "open": "open"; "close": "close"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibWVudS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBBZnRlclZpZXdDaGVja2VkLCBOZ1pvbmUsIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEl0ZW1zU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvaXRlbXMuc2VydmljZSc7XG5pbXBvcnQgeyBBY3Rpb25zU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYWN0aW9ucy5zZXJ2aWNlJztcbmltcG9ydCB7IE5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgSG92ZXJTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9ob3Zlci5zZXJ2aWNlJztcbmltcG9ydCB7IE1lbnVFdmVudCB9IGZyb20gJy4vbWVudS1ldmVudCc7XG5pbXBvcnQgeyBNZW51U2VsZWN0RXZlbnQgfSBmcm9tICcuL21lbnUtc2VsZWN0LWV2ZW50JztcbmltcG9ydCB7IENvbnRleHRNZW51U2VydmljZSB9IGZyb20gJy4vY29udGV4dC1tZW51L2NvbnRleHQtbWVudS5zZXJ2aWNlJztcbmltcG9ydCB7IE1lbnVCYXNlIH0gZnJvbSAnLi9tZW51LWJhc2UnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgTWVudSBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfbWVudSAlfSkuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzLXByZXZpZXdcbiAqIF9AQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgICAgPGtlbmRvLW1lbnUgW2l0ZW1zXT1cIml0ZW1zXCI+XG4gKiAgICAgICAgPC9rZW5kby1tZW51PlxuICogICAgYFxuICogfSlcbiAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gKiAgICBwdWJsaWMgaXRlbXM6IGFueVtdID0gW3sgdGV4dDogJ2l0ZW0xJywgaXRlbXM6IFt7IHRleHQ6ICdpdGVtMS4xJyB9XSB9LCB7IHRleHQ6ICdpdGVtMicsIGRpc2FibGVkOiB0cnVlIH1dO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1lbnVDb21wb25lbnQgZXh0ZW5kcyBNZW51QmFzZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgcHJpdmF0ZSBpdGVtc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBob3ZlcjtcbiAgICBwcml2YXRlIGFjdGlvbnM7XG4gICAgcHJpdmF0ZSBuYXZpZ2F0aW9uO1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBjb250ZXh0U2VydmljZT87XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG1lbnVJdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG1lbnVJdGVtTGlua1RlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gYSBNZW51IGl0ZW0gaXMgc2VsZWN0ZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyByb3V0aW5nX21lbnUgJX0pKS5cbiAgICAgKi9cbiAgICBzZWxlY3Q6IEV2ZW50RW1pdHRlcjxNZW51U2VsZWN0RXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gYSBNZW51IGl0ZW0gaXMgb3BlbmVkLlxuICAgICAqL1xuICAgIG9wZW46IEV2ZW50RW1pdHRlcjxNZW51RXZlbnQ+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gYSBNZW51IGl0ZW0gaXMgY2xvc2VkLlxuICAgICAqL1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8TWVudUV2ZW50PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgYXJpYU9yaWVudGF0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbnRleHRNZW51Q2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlyZWN0aW9uOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHJ0bDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGNsb3NlQ2xpY2tTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBjb250ZXh0S2V5RG93blN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihpdGVtc1NlcnZpY2U6IEl0ZW1zU2VydmljZSwgaG92ZXI6IEhvdmVyU2VydmljZSwgYWN0aW9uczogQWN0aW9uc1NlcnZpY2UsIG5hdmlnYXRpb246IE5hdmlnYXRpb25TZXJ2aWNlLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIG5nWm9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjb250ZXh0U2VydmljZT86IENvbnRleHRNZW51U2VydmljZSk7XG4gICAgLyoqXG4gICAgICogT3BlbnMgb3IgY2xvc2VzIHRoZSBzcGVjaWZpZWQgTWVudSBpdGVtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcGVuIC0gQSBCb29sZWFuIHZhbHVlIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgaXRlbXMgd2lsbCBiZSBvcGVuZWQgb3IgY2xvc2VkLlxuICAgICAqIEBwYXJhbSBpbmRpY2VzIC0gT25lIG9yIG1vcmUgdmFsdWVzIHdoaWNoIHJlcHJlc2VudCB0aGUgaGllcmFyY2hpY2FsIGluZGljZXMgb2YgdGhlIGl0ZW1zIHRoYXQgd2lsbCBiZSBvcGVuZWQgb3IgY2xvc2VkLlxuICAgICAqL1xuICAgIHRvZ2dsZShvcGVuOiBib29sZWFuLCAuLi5pbmRpY2VzOiBzdHJpbmdbXSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3VzKGluZGV4Pzogc3RyaW5nKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBhdHRhY2hDbG9zZUNsaWNrO1xuICAgIHByaXZhdGUgdW5zdWJzY3JpYmVDbGljaztcbiAgICBwcml2YXRlIGNvbnRleHRLZXlEb3duO1xufVxuIl19