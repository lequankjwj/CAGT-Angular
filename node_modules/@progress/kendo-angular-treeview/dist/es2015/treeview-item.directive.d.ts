/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { NavigationService } from './navigation/navigation.service';
import { SelectionService } from './selection/selection.service';
import { ExpandStateService } from './expand-state.service';
import { IndexBuilderService } from './index-builder.service';
import { TreeViewLookupService } from './treeview-lookup.service';
import { TreeItem } from './treeitem.interface';
import { CheckedState } from './checkbox/checked-state';
/**
 * @hidden
 *
 * A directive which manages the expanded state of the TreeView.
 */
import * as ɵngcc0 from '@angular/core';
export declare class TreeViewItemDirective implements OnInit, OnChanges, OnDestroy {
    private element;
    private expandService;
    private navigationService;
    private selectionService;
    private lookupService;
    private renderer;
    private ib;
    dataItem: any;
    index: string;
    parentDataItem: any;
    parentIndex: string;
    role: string;
    checkable: boolean;
    selectable: boolean;
    expandable: boolean;
    isChecked: CheckedState;
    isDisabled: boolean;
    isExpanded: boolean;
    isSelected: boolean;
    readonly isButton: boolean;
    readonly treeItem: TreeItem;
    readonly parentTreeItem: TreeItem;
    ariaChecked: string;
    readonly id: number;
    private _isExpanded;
    private _isSelected;
    private isInitialized;
    private subscriptions;
    constructor(element: ElementRef, expandService: ExpandStateService, navigationService: NavigationService, selectionService: SelectionService, lookupService: TreeViewLookupService, renderer: Renderer2, ib: IndexBuilderService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    subscribe(): void;
    private registerNavigationItem;
    private activateItem;
    private expand;
    private isFocusable;
    private focusItem;
    private moveLookupItem;
    private moveNavigationItem;
    private disableNavigationItem;
    private setAriaAttributes;
    private setDisabledClass;
    private setClass;
    private updateTabIndex;
    private setAttribute;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeViewItemDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<TreeViewItemDirective, "[kendoTreeViewItem]", never, { "role": "role"; "isDisabled": "isDisabled"; "isChecked": "isChecked"; "isExpanded": "isExpanded"; "isSelected": "isSelected"; "dataItem": "dataItem"; "index": "index"; "parentDataItem": "parentDataItem"; "parentIndex": "parentIndex"; "checkable": "checkable"; "selectable": "selectable"; "expandable": "expandable"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXZpZXctaXRlbS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidHJlZXZpZXctaXRlbS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4vc2VsZWN0aW9uL3NlbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEV4cGFuZFN0YXRlU2VydmljZSB9IGZyb20gJy4vZXhwYW5kLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW5kZXhCdWlsZGVyU2VydmljZSB9IGZyb20gJy4vaW5kZXgtYnVpbGRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFRyZWVWaWV3TG9va3VwU2VydmljZSB9IGZyb20gJy4vdHJlZXZpZXctbG9va3VwLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJlZUl0ZW0gfSBmcm9tICcuL3RyZWVpdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDaGVja2VkU3RhdGUgfSBmcm9tICcuL2NoZWNrYm94L2NoZWNrZWQtc3RhdGUnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKlxuICogQSBkaXJlY3RpdmUgd2hpY2ggbWFuYWdlcyB0aGUgZXhwYW5kZWQgc3RhdGUgb2YgdGhlIFRyZWVWaWV3LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUcmVlVmlld0l0ZW1EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBleHBhbmRTZXJ2aWNlO1xuICAgIHByaXZhdGUgbmF2aWdhdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBzZWxlY3Rpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgbG9va3VwU2VydmljZTtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgaWI7XG4gICAgZGF0YUl0ZW06IGFueTtcbiAgICBpbmRleDogc3RyaW5nO1xuICAgIHBhcmVudERhdGFJdGVtOiBhbnk7XG4gICAgcGFyZW50SW5kZXg6IHN0cmluZztcbiAgICByb2xlOiBzdHJpbmc7XG4gICAgY2hlY2thYmxlOiBib29sZWFuO1xuICAgIHNlbGVjdGFibGU6IGJvb2xlYW47XG4gICAgZXhwYW5kYWJsZTogYm9vbGVhbjtcbiAgICBpc0NoZWNrZWQ6IENoZWNrZWRTdGF0ZTtcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xuICAgIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBpc0J1dHRvbjogYm9vbGVhbjtcbiAgICByZWFkb25seSB0cmVlSXRlbTogVHJlZUl0ZW07XG4gICAgcmVhZG9ubHkgcGFyZW50VHJlZUl0ZW06IFRyZWVJdGVtO1xuICAgIGFyaWFDaGVja2VkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaWQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9pc0V4cGFuZGVkO1xuICAgIHByaXZhdGUgX2lzU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBpc0luaXRpYWxpemVkO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBleHBhbmRTZXJ2aWNlOiBFeHBhbmRTdGF0ZVNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZSwgc2VsZWN0aW9uU2VydmljZTogU2VsZWN0aW9uU2VydmljZSwgbG9va3VwU2VydmljZTogVHJlZVZpZXdMb29rdXBTZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCBpYjogSW5kZXhCdWlsZGVyU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHN1YnNjcmliZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgcmVnaXN0ZXJOYXZpZ2F0aW9uSXRlbTtcbiAgICBwcml2YXRlIGFjdGl2YXRlSXRlbTtcbiAgICBwcml2YXRlIGV4cGFuZDtcbiAgICBwcml2YXRlIGlzRm9jdXNhYmxlO1xuICAgIHByaXZhdGUgZm9jdXNJdGVtO1xuICAgIHByaXZhdGUgbW92ZUxvb2t1cEl0ZW07XG4gICAgcHJpdmF0ZSBtb3ZlTmF2aWdhdGlvbkl0ZW07XG4gICAgcHJpdmF0ZSBkaXNhYmxlTmF2aWdhdGlvbkl0ZW07XG4gICAgcHJpdmF0ZSBzZXRBcmlhQXR0cmlidXRlcztcbiAgICBwcml2YXRlIHNldERpc2FibGVkQ2xhc3M7XG4gICAgcHJpdmF0ZSBzZXRDbGFzcztcbiAgICBwcml2YXRlIHVwZGF0ZVRhYkluZGV4O1xuICAgIHByaXZhdGUgc2V0QXR0cmlidXRlO1xufVxuIl19