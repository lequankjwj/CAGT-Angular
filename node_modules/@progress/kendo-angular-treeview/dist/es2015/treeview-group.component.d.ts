/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, OnChanges, OnInit, OnDestroy, ChangeDetectorRef, TrackByFunction } from '@angular/core';
import { ExpandStateService } from './expand-state.service';
import { IndexBuilderService } from './index-builder.service';
import { TreeViewLookupService } from './treeview-lookup.service';
import { NavigationService } from './navigation/navigation.service';
import { NodeChildrenService } from './node-children.service';
import { LoadMoreService } from './load-more/load-more.service';
import { LoadingNotificationService } from './loading-notification.service';
import { CheckedState } from './checkbox/checked-state';
import { Observable } from 'rxjs';
import { DataChangeNotificationService } from './data-change-notification.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class TreeViewGroupComponent implements OnChanges, OnInit, OnDestroy {
    protected expandService: ExpandStateService;
    protected loadingService: LoadingNotificationService;
    protected indexBuilder: IndexBuilderService;
    protected treeViewLookupService: TreeViewLookupService;
    protected navigationService: NavigationService;
    protected nodeChildrenService: NodeChildrenService;
    protected dataChangeNotification: DataChangeNotificationService;
    protected changeDetectorRef: ChangeDetectorRef;
    kGroupClass: boolean;
    role: string;
    checkboxes: boolean;
    expandIcons: boolean;
    disabled: boolean;
    selectable: boolean;
    touchActions: boolean;
    trackBy: TrackByFunction<object>;
    nodes: (node: any, index: string) => Observable<any[]>;
    textField: string | string[];
    parentDataItem: any;
    parentIndex: string;
    nodeTemplateRef: TemplateRef<any>;
    loadMoreButtonTemplateRef: TemplateRef<any>;
    loadMoreService: LoadMoreService;
    initialNodesLoaded: boolean;
    loadingMoreNodes: boolean;
    readonly moreNodesAvailable: boolean;
    pageSize: number;
    data: any[];
    readonly loadMoreButtonIndex: string;
    /**
     * Represents the total number of nodes for the current level.
     */
    readonly totalNodesCount: number;
    private _data;
    private nodesSubscription;
    private loadMoreNodesSubscription;
    private singleRecordSubscriptions;
    constructor(expandService: ExpandStateService, loadingService: LoadingNotificationService, indexBuilder: IndexBuilderService, treeViewLookupService: TreeViewLookupService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, dataChangeNotification: DataChangeNotificationService, changeDetectorRef: ChangeDetectorRef);
    isChecked: (item: object, index: string) => CheckedState;
    isDisabled: (item: object, index: string) => boolean;
    isExpanded: (item: object, index: string) => boolean;
    isSelected: (item: object, index: string) => boolean;
    children: (item: object) => Observable<any[]>;
    hasChildren: (item: object) => boolean;
    readonly hasTemplate: boolean;
    expandNode(index: string, dataItem: any, expand: boolean): void;
    checkNode(index: string): void;
    nodeIndex(index: number): string;
    nodeText(dataItem: any): any;
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    fetchChildren(node: any, index: string): Observable<any>;
    readonly nextFields: string[];
    loadMoreNodes(): void;
    private loadMoreLocalNodes;
    private fetchMoreNodes;
    private setNodeChildren;
    private mapToTreeItem;
    private emitChildrenLoaded;
    private subscribeToNodesChange;
    private reselectItemAt;
    private registerLoadedNodes;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TreeViewGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TreeViewGroupComponent, "[kendoTreeViewGroup]", never, { "textField": "textField"; "isChecked": "isChecked"; "isDisabled": "isDisabled"; "isExpanded": "isExpanded"; "isSelected": "isSelected"; "children": "children"; "hasChildren": "hasChildren"; "checkboxes": "checkboxes"; "expandIcons": "expandIcons"; "disabled": "disabled"; "selectable": "selectable"; "touchActions": "touchActions"; "trackBy": "trackBy"; "nodes": "nodes"; "parentDataItem": "parentDataItem"; "parentIndex": "parentIndex"; "nodeTemplateRef": "nodeTemplateRef"; "loadMoreButtonTemplateRef": "loadMoreButtonTemplateRef"; "loadMoreService": "loadMoreService"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXZpZXctZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyZWV2aWV3LWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiwgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFRyYWNrQnlGdW5jdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXhwYW5kU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi9leHBhbmQtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBJbmRleEJ1aWxkZXJTZXJ2aWNlIH0gZnJvbSAnLi9pbmRleC1idWlsZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJlZVZpZXdMb29rdXBTZXJ2aWNlIH0gZnJvbSAnLi90cmVldmlldy1sb29rdXAuc2VydmljZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm9kZUNoaWxkcmVuU2VydmljZSB9IGZyb20gJy4vbm9kZS1jaGlsZHJlbi5zZXJ2aWNlJztcbmltcG9ydCB7IExvYWRNb3JlU2VydmljZSB9IGZyb20gJy4vbG9hZC1tb3JlL2xvYWQtbW9yZS5zZXJ2aWNlJztcbmltcG9ydCB7IExvYWRpbmdOb3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9sb2FkaW5nLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IENoZWNrZWRTdGF0ZSB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tlZC1zdGF0ZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRhQ2hhbmdlTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vZGF0YS1jaGFuZ2Utbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRyZWVWaWV3R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZXhwYW5kU2VydmljZTogRXhwYW5kU3RhdGVTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBsb2FkaW5nU2VydmljZTogTG9hZGluZ05vdGlmaWNhdGlvblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGluZGV4QnVpbGRlcjogSW5kZXhCdWlsZGVyU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgdHJlZVZpZXdMb29rdXBTZXJ2aWNlOiBUcmVlVmlld0xvb2t1cFNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgbm9kZUNoaWxkcmVuU2VydmljZTogTm9kZUNoaWxkcmVuU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgZGF0YUNoYW5nZU5vdGlmaWNhdGlvbjogRGF0YUNoYW5nZU5vdGlmaWNhdGlvblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBrR3JvdXBDbGFzczogYm9vbGVhbjtcbiAgICByb2xlOiBzdHJpbmc7XG4gICAgY2hlY2tib3hlczogYm9vbGVhbjtcbiAgICBleHBhbmRJY29uczogYm9vbGVhbjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBzZWxlY3RhYmxlOiBib29sZWFuO1xuICAgIHRvdWNoQWN0aW9uczogYm9vbGVhbjtcbiAgICB0cmFja0J5OiBUcmFja0J5RnVuY3Rpb248b2JqZWN0PjtcbiAgICBub2RlczogKG5vZGU6IGFueSwgaW5kZXg6IHN0cmluZykgPT4gT2JzZXJ2YWJsZTxhbnlbXT47XG4gICAgdGV4dEZpZWxkOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBwYXJlbnREYXRhSXRlbTogYW55O1xuICAgIHBhcmVudEluZGV4OiBzdHJpbmc7XG4gICAgbm9kZVRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGxvYWRNb3JlQnV0dG9uVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgbG9hZE1vcmVTZXJ2aWNlOiBMb2FkTW9yZVNlcnZpY2U7XG4gICAgaW5pdGlhbE5vZGVzTG9hZGVkOiBib29sZWFuO1xuICAgIGxvYWRpbmdNb3JlTm9kZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgbW9yZU5vZGVzQXZhaWxhYmxlOiBib29sZWFuO1xuICAgIHBhZ2VTaXplOiBudW1iZXI7XG4gICAgZGF0YTogYW55W107XG4gICAgcmVhZG9ubHkgbG9hZE1vcmVCdXR0b25JbmRleDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIHRvdGFsIG51bWJlciBvZiBub2RlcyBmb3IgdGhlIGN1cnJlbnQgbGV2ZWwuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdG90YWxOb2Rlc0NvdW50OiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfZGF0YTtcbiAgICBwcml2YXRlIG5vZGVzU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgbG9hZE1vcmVOb2Rlc1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHNpbmdsZVJlY29yZFN1YnNjcmlwdGlvbnM7XG4gICAgY29uc3RydWN0b3IoZXhwYW5kU2VydmljZTogRXhwYW5kU3RhdGVTZXJ2aWNlLCBsb2FkaW5nU2VydmljZTogTG9hZGluZ05vdGlmaWNhdGlvblNlcnZpY2UsIGluZGV4QnVpbGRlcjogSW5kZXhCdWlsZGVyU2VydmljZSwgdHJlZVZpZXdMb29rdXBTZXJ2aWNlOiBUcmVlVmlld0xvb2t1cFNlcnZpY2UsIG5hdmlnYXRpb25TZXJ2aWNlOiBOYXZpZ2F0aW9uU2VydmljZSwgbm9kZUNoaWxkcmVuU2VydmljZTogTm9kZUNoaWxkcmVuU2VydmljZSwgZGF0YUNoYW5nZU5vdGlmaWNhdGlvbjogRGF0YUNoYW5nZU5vdGlmaWNhdGlvblNlcnZpY2UsIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgaXNDaGVja2VkOiAoaXRlbTogb2JqZWN0LCBpbmRleDogc3RyaW5nKSA9PiBDaGVja2VkU3RhdGU7XG4gICAgaXNEaXNhYmxlZDogKGl0ZW06IG9iamVjdCwgaW5kZXg6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICBpc0V4cGFuZGVkOiAoaXRlbTogb2JqZWN0LCBpbmRleDogc3RyaW5nKSA9PiBib29sZWFuO1xuICAgIGlzU2VsZWN0ZWQ6IChpdGVtOiBvYmplY3QsIGluZGV4OiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgY2hpbGRyZW46IChpdGVtOiBvYmplY3QpID0+IE9ic2VydmFibGU8YW55W10+O1xuICAgIGhhc0NoaWxkcmVuOiAoaXRlbTogb2JqZWN0KSA9PiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhhc1RlbXBsYXRlOiBib29sZWFuO1xuICAgIGV4cGFuZE5vZGUoaW5kZXg6IHN0cmluZywgZGF0YUl0ZW06IGFueSwgZXhwYW5kOiBib29sZWFuKTogdm9pZDtcbiAgICBjaGVja05vZGUoaW5kZXg6IHN0cmluZyk6IHZvaWQ7XG4gICAgbm9kZUluZGV4KGluZGV4OiBudW1iZXIpOiBzdHJpbmc7XG4gICAgbm9kZVRleHQoZGF0YUl0ZW06IGFueSk6IGFueTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KTogdm9pZDtcbiAgICBmZXRjaENoaWxkcmVuKG5vZGU6IGFueSwgaW5kZXg6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcbiAgICByZWFkb25seSBuZXh0RmllbGRzOiBzdHJpbmdbXTtcbiAgICBsb2FkTW9yZU5vZGVzKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBsb2FkTW9yZUxvY2FsTm9kZXM7XG4gICAgcHJpdmF0ZSBmZXRjaE1vcmVOb2RlcztcbiAgICBwcml2YXRlIHNldE5vZGVDaGlsZHJlbjtcbiAgICBwcml2YXRlIG1hcFRvVHJlZUl0ZW07XG4gICAgcHJpdmF0ZSBlbWl0Q2hpbGRyZW5Mb2FkZWQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVUb05vZGVzQ2hhbmdlO1xuICAgIHByaXZhdGUgcmVzZWxlY3RJdGVtQXQ7XG4gICAgcHJpdmF0ZSByZWdpc3RlckxvYWRlZE5vZGVzO1xufVxuIl19