/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { CheckedState } from './checked-state';
/**
 * @hidden
 *
 * Represents the CheckBox component of the Kendo UI TreeView for Angular.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class CheckBoxComponent implements OnInit, DoCheck {
    private element;
    private renderer;
    private changeDetector;
    readonly classWrapper: boolean;
    /**
     * Specifies the [`id`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id) of the component.
     */
    id: string;
    /**
     * A function that determines if node is checked.
     */
    isChecked: any;
    /**
     * The node item.
     */
    node: any;
    /**
     * The node index.
     */
    index: string;
    /**
     * Specifies the label text of the component.
     */
    labelText: string;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * Fires when the user changes the check state of the component.
     */
    checkStateChange: EventEmitter<CheckedState>;
    readonly indeterminate: boolean;
    readonly checked: boolean;
    private checkState;
    constructor(element: ElementRef, renderer: Renderer2, changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    ngDoCheck(): void;
    handleChange(e: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CheckBoxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CheckBoxComponent, "kendo-checkbox", never, { "id": "id"; "tabindex": "tabindex"; "isChecked": "isChecked"; "node": "node"; "index": "index"; "labelText": "labelText"; }, { "checkStateChange": "checkStateChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNoZWNrYm94LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRG9DaGVjaywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2hlY2tlZFN0YXRlIH0gZnJvbSAnLi9jaGVja2VkLXN0YXRlJztcbi8qKlxuICogQGhpZGRlblxuICpcbiAqIFJlcHJlc2VudHMgdGhlIENoZWNrQm94IGNvbXBvbmVudCBvZiB0aGUgS2VuZG8gVUkgVHJlZVZpZXcgZm9yIEFuZ3VsYXIuXG4gKlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDaGVja0JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgRG9DaGVjayB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICByZWFkb25seSBjbGFzc1dyYXBwZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBbYGlkYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy9pZCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEEgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIG5vZGUgaXMgY2hlY2tlZC5cbiAgICAgKi9cbiAgICBpc0NoZWNrZWQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgbm9kZSBpdGVtLlxuICAgICAqL1xuICAgIG5vZGU6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgbm9kZSBpbmRleC5cbiAgICAgKi9cbiAgICBpbmRleDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbGFiZWwgdGV4dCBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGxhYmVsVGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgW2B0YWJpbmRleGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXgpIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgdGFiaW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNoYW5nZXMgdGhlIGNoZWNrIHN0YXRlIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgY2hlY2tTdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPENoZWNrZWRTdGF0ZT47XG4gICAgcmVhZG9ubHkgaW5kZXRlcm1pbmF0ZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBjaGVja2VkOiBib29sZWFuO1xuICAgIHByaXZhdGUgY2hlY2tTdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XG4gICAgaGFuZGxlQ2hhbmdlKGU6IGFueSk6IHZvaWQ7XG59XG4iXX0=