/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
/**
 * Represents the template for the TreeView drag clue when an item is dragged. To define the clue template,
 * nest an `<ng-template>` tag with the `kendoTreeViewDragClueTemplate` directive inside a `<kendo-treeview>` tag
 * ([see example]({% slug draganddrop_treeview %}#toc-templates)).
 *
 *
 * The text, attempted drop action, source item and destination item are available as context variables in the template:
 *
 *
 * - `let-text="text"` (`string`)
 * - `let-action="action"` ([`DropAction`]({% slug api_treeview_dropaction %}))
 * - `let-sourceItem="sourceItem"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))
 * - `let-destinationItem="destinationItem"` ([`TreeItemLookup`]({% slug api_treeview_treeitemlookup %}))
 */
import * as ɵngcc0 from '@angular/core';
export declare class DragClueTemplateDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragClueTemplateDirective, [{ optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DragClueTemplateDirective, "[kendoTreeViewDragClueTemplate]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1jbHVlLXRlbXBsYXRlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkcmFnLWNsdWUtdGVtcGxhdGUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHRlbXBsYXRlIGZvciB0aGUgVHJlZVZpZXcgZHJhZyBjbHVlIHdoZW4gYW4gaXRlbSBpcyBkcmFnZ2VkLiBUbyBkZWZpbmUgdGhlIGNsdWUgdGVtcGxhdGUsXG4gKiBuZXN0IGFuIGA8bmctdGVtcGxhdGU+YCB0YWcgd2l0aCB0aGUgYGtlbmRvVHJlZVZpZXdEcmFnQ2x1ZVRlbXBsYXRlYCBkaXJlY3RpdmUgaW5zaWRlIGEgYDxrZW5kby10cmVldmlldz5gIHRhZ1xuICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBkcmFnYW5kZHJvcF90cmVldmlldyAlfSN0b2MtdGVtcGxhdGVzKSkuXG4gKlxuICpcbiAqIFRoZSB0ZXh0LCBhdHRlbXB0ZWQgZHJvcCBhY3Rpb24sIHNvdXJjZSBpdGVtIGFuZCBkZXN0aW5hdGlvbiBpdGVtIGFyZSBhdmFpbGFibGUgYXMgY29udGV4dCB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlOlxuICpcbiAqXG4gKiAtIGBsZXQtdGV4dD1cInRleHRcImAgKGBzdHJpbmdgKVxuICogLSBgbGV0LWFjdGlvbj1cImFjdGlvblwiYCAoW2BEcm9wQWN0aW9uYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfZHJvcGFjdGlvbiAlfSkpXG4gKiAtIGBsZXQtc291cmNlSXRlbT1cInNvdXJjZUl0ZW1cImAgKFtgVHJlZUl0ZW1Mb29rdXBgXSh7JSBzbHVnIGFwaV90cmVldmlld190cmVlaXRlbWxvb2t1cCAlfSkpXG4gKiAtIGBsZXQtZGVzdGluYXRpb25JdGVtPVwiZGVzdGluYXRpb25JdGVtXCJgIChbYFRyZWVJdGVtTG9va3VwYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZWl0ZW1sb29rdXAgJX0pKVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEcmFnQ2x1ZVRlbXBsYXRlRGlyZWN0aXZlIHtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pik7XG59XG4iXX0=