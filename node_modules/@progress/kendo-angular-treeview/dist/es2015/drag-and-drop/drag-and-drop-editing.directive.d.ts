/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy } from '@angular/core';
import { TreeViewComponent } from '../treeview.component';
import { EditService } from './models';
/**
 * A directive which enables the update of the initially provided data array during drag-and-drop.
 *
 * Either use this directive in combination with one of the data binding directives ([`kendoTreeViewHierarchyBinding`]({% slug api_treeview_hierarchybindingdirective %})
 * or [`kendoTreeViewFlatDataBinding`]({% slug api_treeview_flatdatabindingdirective %})) which set their own edit handlers, or provide
 * your own [`editService`]({% slug api_treeview_editservice %}) to this directive. The latter subscribes to and calls the
 * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)
 * handlers when the corresponding events are triggered by the TreeView component.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DragAndDropEditingDirective implements OnDestroy {
    private treeview;
    /**
     * Specifies the handlers called on drag-and-drop [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem)
     * and [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem) events.
     */
    editService: EditService;
    private subscriptions;
    constructor(treeview: TreeViewComponent);
    ngOnDestroy(): void;
    private handleAdd;
    private handleRemove;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragAndDropEditingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DragAndDropEditingDirective, "[kendoTreeViewDragAndDropEditing]", never, { "editService": "editService"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1lZGl0aW5nLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJkcmFnLWFuZC1kcm9wLWVkaXRpbmcuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZVZpZXdDb21wb25lbnQgfSBmcm9tICcuLi90cmVldmlldy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRWRpdFNlcnZpY2UgfSBmcm9tICcuL21vZGVscyc7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIGVuYWJsZXMgdGhlIHVwZGF0ZSBvZiB0aGUgaW5pdGlhbGx5IHByb3ZpZGVkIGRhdGEgYXJyYXkgZHVyaW5nIGRyYWctYW5kLWRyb3AuXG4gKlxuICogRWl0aGVyIHVzZSB0aGlzIGRpcmVjdGl2ZSBpbiBjb21iaW5hdGlvbiB3aXRoIG9uZSBvZiB0aGUgZGF0YSBiaW5kaW5nIGRpcmVjdGl2ZXMgKFtga2VuZG9UcmVlVmlld0hpZXJhcmNoeUJpbmRpbmdgXSh7JSBzbHVnIGFwaV90cmVldmlld19oaWVyYXJjaHliaW5kaW5nZGlyZWN0aXZlICV9KVxuICogb3IgW2BrZW5kb1RyZWVWaWV3RmxhdERhdGFCaW5kaW5nYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfZmxhdGRhdGFiaW5kaW5nZGlyZWN0aXZlICV9KSkgd2hpY2ggc2V0IHRoZWlyIG93biBlZGl0IGhhbmRsZXJzLCBvciBwcm92aWRlXG4gKiB5b3VyIG93biBbYGVkaXRTZXJ2aWNlYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfZWRpdHNlcnZpY2UgJX0pIHRvIHRoaXMgZGlyZWN0aXZlLiBUaGUgbGF0dGVyIHN1YnNjcmliZXMgdG8gYW5kIGNhbGxzIHRoZVxuICogW2BhZGRJdGVtYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLWFkZGl0ZW0pIGFuZCBbYHJlbW92ZUl0ZW1gXSh7JSBzbHVnIGFwaV90cmVldmlld190cmVldmlld2NvbXBvbmVudCAlfSN0b2MtcmVtb3ZlaXRlbSlcbiAqIGhhbmRsZXJzIHdoZW4gdGhlIGNvcnJlc3BvbmRpbmcgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgYnkgdGhlIFRyZWVWaWV3IGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHJhZ0FuZERyb3BFZGl0aW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHRyZWV2aWV3O1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaGFuZGxlcnMgY2FsbGVkIG9uIGRyYWctYW5kLWRyb3AgW2BhZGRJdGVtYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLWFkZGl0ZW0pXG4gICAgICogYW5kIFtgcmVtb3ZlSXRlbWBdKHslIHNsdWcgYXBpX3RyZWV2aWV3X3RyZWV2aWV3Y29tcG9uZW50ICV9I3RvYy1yZW1vdmVpdGVtKSBldmVudHMuXG4gICAgICovXG4gICAgZWRpdFNlcnZpY2U6IEVkaXRTZXJ2aWNlO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBjb25zdHJ1Y3Rvcih0cmVldmlldzogVHJlZVZpZXdDb21wb25lbnQpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVBZGQ7XG4gICAgcHJpdmF0ZSBoYW5kbGVSZW1vdmU7XG59XG4iXX0=