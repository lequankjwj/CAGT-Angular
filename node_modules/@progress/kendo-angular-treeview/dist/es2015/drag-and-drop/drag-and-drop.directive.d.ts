/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterContentInit, ElementRef, NgZone, OnDestroy } from '@angular/core';
import Draggable from '@telerik/kendo-draggable';
import { DragClueService } from './drag-clue/drag-clue.service';
import { DropHintService } from './drop-hint/drop-hint.service';
import { DragClueTemplateDirective } from './drag-clue/drag-clue-template.directive';
import { DropHintTemplateDirective } from './drop-hint/drop-hint-template.directive';
import { TreeViewComponent } from '../treeview.component';
/**
 * A directive which enables the dragging and dropping items inside the current TreeView or between multiple linked TreeView component instances
 * ([see example]({% slug draganddrop_treeview %})).
 *
 * Triggers the [`nodeDragStart`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragstart),
 * [`nodeDrag`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrag),
 * [`nodeDrop`]({% slug api_treeview_treeviewcomponent %}#toc-nodedrop),
 * [`nodeDragEnd`]({% slug api_treeview_treeviewcomponent %}#toc-nodedragend),
 * [`addItem`]({% slug api_treeview_treeviewcomponent %}#toc-additem) and
 * [`removeItem`]({% slug api_treeview_treeviewcomponent %}#toc-removeitem)
 * events when the corresponding actions occur on the respective TreeView instance.
 */
import * as ɵngcc0 from '@angular/core';
export declare class DragAndDropDirective implements AfterContentInit, OnDestroy {
    private element;
    private zone;
    private treeview;
    private dragClueService;
    private dropHintService;
    /**
     * Specifies whether the `removeItem` event will be fired after an item is dropped when the `ctrl` key is pressed.
     * If enabled, the `removeItem` event will not be fired on the source TreeView
     * ([see example]({% slug draganddrop_treeview %}#toc-multiple-treeviews)).
     *
     * @default false
     */
    allowCopy: boolean;
    /**
     * Specifes the TreeViewComponent instances into which dragged items from the current TreeViewComponent can be dropped
     * ([see example]({% slug draganddrop_treeview %}#toc-multiple-treeviews)).
     */
    dropZoneTreeViews: TreeViewComponent[];
    /**
     * @hidden
     */
    dragClueTemplate: DragClueTemplateDirective;
    /**
     * @hidden
     */
    dropHintTemplate: DropHintTemplateDirective;
    /**
     * @hidden
     */
    userSelectStyle: string;
    protected draggable: Draggable;
    protected draggedItem: HTMLElement;
    /**
     * Describes the offset of the parent element if the latter has the `transform` CSS prop applied.
     * Transformed parents create new stacking context and the fixed children must be position based on the transformed parent.
     * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context
     */
    private containerOffset;
    constructor(element: ElementRef<HTMLElement>, zone: NgZone, treeview: TreeViewComponent, dragClueService: DragClueService, dropHintService: DropHintService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    handlePress({ originalEvent }: any): void;
    /**
     * @hidden
     */
    handleDrag({ originalEvent, clientX, clientY }: any): void;
    /**
     * @hidden
     */
    handleRelease({ originalEvent, clientY }: any): void;
    private updateDropHintState;
    private updateDragClueState;
    private initalizeDraggable;
    private notifyDragStart;
    private notifyDrag;
    private notifyDrop;
    private notifyDragEnd;
    private getTargetTreeView;
    private disableAnimationsForNextTick;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragAndDropDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DragAndDropDirective, "[kendoTreeViewDragAndDrop]", never, { "allowCopy": "allowCopy"; "dropZoneTreeViews": "dropZoneTreeViews"; }, {}, ["dragClueTemplate", "dropHintTemplate"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZHJhZy1hbmQtZHJvcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IERyYWdnYWJsZSBmcm9tICdAdGVsZXJpay9rZW5kby1kcmFnZ2FibGUnO1xuaW1wb3J0IHsgRHJhZ0NsdWVTZXJ2aWNlIH0gZnJvbSAnLi9kcmFnLWNsdWUvZHJhZy1jbHVlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJvcEhpbnRTZXJ2aWNlIH0gZnJvbSAnLi9kcm9wLWhpbnQvZHJvcC1oaW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ0NsdWVUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZHJhZy1jbHVlL2RyYWctY2x1ZS10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHJvcEhpbnRUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZHJvcC1oaW50L2Ryb3AtaGludC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVHJlZVZpZXdDb21wb25lbnQgfSBmcm9tICcuLi90cmVldmlldy5jb21wb25lbnQnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBlbmFibGVzIHRoZSBkcmFnZ2luZyBhbmQgZHJvcHBpbmcgaXRlbXMgaW5zaWRlIHRoZSBjdXJyZW50IFRyZWVWaWV3IG9yIGJldHdlZW4gbXVsdGlwbGUgbGlua2VkIFRyZWVWaWV3IGNvbXBvbmVudCBpbnN0YW5jZXNcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZHJhZ2FuZGRyb3BfdHJlZXZpZXcgJX0pKS5cbiAqXG4gKiBUcmlnZ2VycyB0aGUgW2Bub2RlRHJhZ1N0YXJ0YF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLW5vZGVkcmFnc3RhcnQpLFxuICogW2Bub2RlRHJhZ2BdKHslIHNsdWcgYXBpX3RyZWV2aWV3X3RyZWV2aWV3Y29tcG9uZW50ICV9I3RvYy1ub2RlZHJhZyksXG4gKiBbYG5vZGVEcm9wYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLW5vZGVkcm9wKSxcbiAqIFtgbm9kZURyYWdFbmRgXSh7JSBzbHVnIGFwaV90cmVldmlld190cmVldmlld2NvbXBvbmVudCAlfSN0b2Mtbm9kZWRyYWdlbmQpLFxuICogW2BhZGRJdGVtYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLWFkZGl0ZW0pIGFuZFxuICogW2ByZW1vdmVJdGVtYF0oeyUgc2x1ZyBhcGlfdHJlZXZpZXdfdHJlZXZpZXdjb21wb25lbnQgJX0jdG9jLXJlbW92ZWl0ZW0pXG4gKiBldmVudHMgd2hlbiB0aGUgY29ycmVzcG9uZGluZyBhY3Rpb25zIG9jY3VyIG9uIHRoZSByZXNwZWN0aXZlIFRyZWVWaWV3IGluc3RhbmNlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEcmFnQW5kRHJvcERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgem9uZTtcbiAgICBwcml2YXRlIHRyZWV2aWV3O1xuICAgIHByaXZhdGUgZHJhZ0NsdWVTZXJ2aWNlO1xuICAgIHByaXZhdGUgZHJvcEhpbnRTZXJ2aWNlO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBgcmVtb3ZlSXRlbWAgZXZlbnQgd2lsbCBiZSBmaXJlZCBhZnRlciBhbiBpdGVtIGlzIGRyb3BwZWQgd2hlbiB0aGUgYGN0cmxgIGtleSBpcyBwcmVzc2VkLlxuICAgICAqIElmIGVuYWJsZWQsIHRoZSBgcmVtb3ZlSXRlbWAgZXZlbnQgd2lsbCBub3QgYmUgZmlyZWQgb24gdGhlIHNvdXJjZSBUcmVlVmlld1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZHJhZ2FuZGRyb3BfdHJlZXZpZXcgJX0jdG9jLW11bHRpcGxlLXRyZWV2aWV3cykpLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBhbGxvd0NvcHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmZXMgdGhlIFRyZWVWaWV3Q29tcG9uZW50IGluc3RhbmNlcyBpbnRvIHdoaWNoIGRyYWdnZWQgaXRlbXMgZnJvbSB0aGUgY3VycmVudCBUcmVlVmlld0NvbXBvbmVudCBjYW4gYmUgZHJvcHBlZFxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZHJhZ2FuZGRyb3BfdHJlZXZpZXcgJX0jdG9jLW11bHRpcGxlLXRyZWV2aWV3cykpLlxuICAgICAqL1xuICAgIGRyb3Bab25lVHJlZVZpZXdzOiBUcmVlVmlld0NvbXBvbmVudFtdO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkcmFnQ2x1ZVRlbXBsYXRlOiBEcmFnQ2x1ZVRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkcm9wSGludFRlbXBsYXRlOiBEcm9wSGludFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB1c2VyU2VsZWN0U3R5bGU6IHN0cmluZztcbiAgICBwcm90ZWN0ZWQgZHJhZ2dhYmxlOiBEcmFnZ2FibGU7XG4gICAgcHJvdGVjdGVkIGRyYWdnZWRJdGVtOiBIVE1MRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgdGhlIG9mZnNldCBvZiB0aGUgcGFyZW50IGVsZW1lbnQgaWYgdGhlIGxhdHRlciBoYXMgdGhlIGB0cmFuc2Zvcm1gIENTUyBwcm9wIGFwcGxpZWQuXG4gICAgICogVHJhbnNmb3JtZWQgcGFyZW50cyBjcmVhdGUgbmV3IHN0YWNraW5nIGNvbnRleHQgYW5kIHRoZSBmaXhlZCBjaGlsZHJlbiBtdXN0IGJlIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSB0cmFuc2Zvcm1lZCBwYXJlbnQuXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NTU19Qb3NpdGlvbmluZy9VbmRlcnN0YW5kaW5nX3pfaW5kZXgvVGhlX3N0YWNraW5nX2NvbnRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbnRhaW5lck9mZnNldDtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Piwgem9uZTogTmdab25lLCB0cmVldmlldzogVHJlZVZpZXdDb21wb25lbnQsIGRyYWdDbHVlU2VydmljZTogRHJhZ0NsdWVTZXJ2aWNlLCBkcm9wSGludFNlcnZpY2U6IERyb3BIaW50U2VydmljZSk7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlUHJlc3MoeyBvcmlnaW5hbEV2ZW50IH06IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZURyYWcoeyBvcmlnaW5hbEV2ZW50LCBjbGllbnRYLCBjbGllbnRZIH06IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZVJlbGVhc2UoeyBvcmlnaW5hbEV2ZW50LCBjbGllbnRZIH06IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVEcm9wSGludFN0YXRlO1xuICAgIHByaXZhdGUgdXBkYXRlRHJhZ0NsdWVTdGF0ZTtcbiAgICBwcml2YXRlIGluaXRhbGl6ZURyYWdnYWJsZTtcbiAgICBwcml2YXRlIG5vdGlmeURyYWdTdGFydDtcbiAgICBwcml2YXRlIG5vdGlmeURyYWc7XG4gICAgcHJpdmF0ZSBub3RpZnlEcm9wO1xuICAgIHByaXZhdGUgbm90aWZ5RHJhZ0VuZDtcbiAgICBwcml2YXRlIGdldFRhcmdldFRyZWVWaWV3O1xuICAgIHByaXZhdGUgZGlzYWJsZUFuaW1hdGlvbnNGb3JOZXh0VGljaztcbn1cbiJdfQ==