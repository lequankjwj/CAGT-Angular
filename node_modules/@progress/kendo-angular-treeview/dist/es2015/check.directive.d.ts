/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy, OnChanges, NgZone } from '@angular/core';
import { TreeViewComponent } from './treeview.component';
import { CheckableSettings } from './checkable-settings';
import { CheckedState } from './checkbox/checked-state';
import { Subscription } from 'rxjs';
import { TreeItem } from './treeitem.interface';
import { TreeItemLookup } from './treeitem-lookup.interface';
/**
 * A directive which manages the in-memory checked state of the TreeView node
 * ([see example]({% slug checkboxes_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class CheckDirective implements OnChanges, OnDestroy {
    protected treeView: TreeViewComponent;
    private zone;
    /**
     * @hidden
     */
    isChecked: (item: object, index: string) => CheckedState;
    /**
     * Defines the item key that will be stored in the `checkedKeys` collection.
     */
    checkKey: string | ((context: TreeItem) => any);
    /**
     * Defines the collection that will store the checked keys
     * ([see example]({% slug checkboxes_treeview %})).
     */
    checkedKeys: any[];
    /**
     * Defines the checkable settings ([see example]({% slug checkboxes_treeview %}#toc-setup)).
     * If no value is provided, the default [`CheckableSettings`]({% slug api_treeview_checkablesettings %}) are applied.
     */
    checkable: boolean | CheckableSettings | string;
    /**
     * Fires when the `checkedKeys` collection was updated.
     */
    checkedKeysChange: EventEmitter<any[]>;
    protected subscriptions: Subscription;
    private readonly options;
    private checkActions;
    private _checkedKeys;
    private clickSubscription;
    constructor(treeView: TreeViewComponent, zone: NgZone);
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    protected isItemChecked(dataItem: any, index: string): CheckedState;
    protected isIndexChecked(index: string): CheckedState;
    protected itemKey(item: TreeItem): any;
    protected check(e: any): void;
    protected checkSingle(node: any): void;
    protected checkMultiple(node: TreeItemLookup): void;
    protected toggleCheckOnClick(): void;
    private unsubscribeClick;
    private checkNode;
    private checkParents;
    private notify;
    private addCheckedItemsChildren;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CheckDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CheckDirective, "[kendoTreeViewCheckable]", never, { "isChecked": "isChecked"; "checkedKeys": "checkedKeys"; "checkKey": "checkBy"; "checkable": "kendoTreeViewCheckable"; }, { "checkedKeysChange": "checkedKeysChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2suZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImNoZWNrLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlVmlld0NvbXBvbmVudCB9IGZyb20gJy4vdHJlZXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IENoZWNrYWJsZVNldHRpbmdzIH0gZnJvbSAnLi9jaGVja2FibGUtc2V0dGluZ3MnO1xuaW1wb3J0IHsgQ2hlY2tlZFN0YXRlIH0gZnJvbSAnLi9jaGVja2JveC9jaGVja2VkLXN0YXRlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVHJlZUl0ZW0gfSBmcm9tICcuL3RyZWVpdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUcmVlSXRlbUxvb2t1cCB9IGZyb20gJy4vdHJlZWl0ZW0tbG9va3VwLmludGVyZmFjZSc7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIG1hbmFnZXMgdGhlIGluLW1lbW9yeSBjaGVja2VkIHN0YXRlIG9mIHRoZSBUcmVlVmlldyBub2RlXG4gKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGNoZWNrYm94ZXNfdHJlZXZpZXcgJX0pKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2hlY2tEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIHRyZWVWaWV3OiBUcmVlVmlld0NvbXBvbmVudDtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlzQ2hlY2tlZDogKGl0ZW06IG9iamVjdCwgaW5kZXg6IHN0cmluZykgPT4gQ2hlY2tlZFN0YXRlO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGl0ZW0ga2V5IHRoYXQgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBjaGVja2VkS2V5c2AgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBjaGVja0tleTogc3RyaW5nIHwgKChjb250ZXh0OiBUcmVlSXRlbSkgPT4gYW55KTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2xsZWN0aW9uIHRoYXQgd2lsbCBzdG9yZSB0aGUgY2hlY2tlZCBrZXlzXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBjaGVja2JveGVzX3RyZWV2aWV3ICV9KSkuXG4gICAgICovXG4gICAgY2hlY2tlZEtleXM6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGNoZWNrYWJsZSBzZXR0aW5ncyAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGNoZWNrYm94ZXNfdHJlZXZpZXcgJX0jdG9jLXNldHVwKSkuXG4gICAgICogSWYgbm8gdmFsdWUgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IFtgQ2hlY2thYmxlU2V0dGluZ3NgXSh7JSBzbHVnIGFwaV90cmVldmlld19jaGVja2FibGVzZXR0aW5ncyAlfSkgYXJlIGFwcGxpZWQuXG4gICAgICovXG4gICAgY2hlY2thYmxlOiBib29sZWFuIHwgQ2hlY2thYmxlU2V0dGluZ3MgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgYGNoZWNrZWRLZXlzYCBjb2xsZWN0aW9uIHdhcyB1cGRhdGVkLlxuICAgICAqL1xuICAgIGNoZWNrZWRLZXlzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55W10+O1xuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zO1xuICAgIHByaXZhdGUgY2hlY2tBY3Rpb25zO1xuICAgIHByaXZhdGUgX2NoZWNrZWRLZXlzO1xuICAgIHByaXZhdGUgY2xpY2tTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3IodHJlZVZpZXc6IFRyZWVWaWV3Q29tcG9uZW50LCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgaXNJdGVtQ2hlY2tlZChkYXRhSXRlbTogYW55LCBpbmRleDogc3RyaW5nKTogQ2hlY2tlZFN0YXRlO1xuICAgIHByb3RlY3RlZCBpc0luZGV4Q2hlY2tlZChpbmRleDogc3RyaW5nKTogQ2hlY2tlZFN0YXRlO1xuICAgIHByb3RlY3RlZCBpdGVtS2V5KGl0ZW06IFRyZWVJdGVtKTogYW55O1xuICAgIHByb3RlY3RlZCBjaGVjayhlOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjaGVja1NpbmdsZShub2RlOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjaGVja011bHRpcGxlKG5vZGU6IFRyZWVJdGVtTG9va3VwKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdG9nZ2xlQ2hlY2tPbkNsaWNrKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1bnN1YnNjcmliZUNsaWNrO1xuICAgIHByaXZhdGUgY2hlY2tOb2RlO1xuICAgIHByaXZhdGUgY2hlY2tQYXJlbnRzO1xuICAgIHByaXZhdGUgbm90aWZ5O1xuICAgIHByaXZhdGUgYWRkQ2hlY2tlZEl0ZW1zQ2hpbGRyZW47XG59XG4iXX0=