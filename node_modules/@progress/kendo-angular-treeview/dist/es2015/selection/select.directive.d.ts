/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy } from '@angular/core';
import { TreeViewComponent } from '../treeview.component';
import { SelectableSettings } from './selectable-settings';
import { Subscription } from 'rxjs';
import { TreeItem } from '../treeitem.interface';
/**
 * A directive which manages the in-memory selection state of the TreeView node
 * ([see example]({% slug selection_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class SelectDirective implements OnDestroy {
    protected treeView: TreeViewComponent;
    /**
     * @hidden
     */
    isSelected: (item: object, index: string) => boolean;
    /**
     * Defines the item key that will be stored in the `selectedKeys` collection.
     */
    selectKey: string | ((context: TreeItem) => any);
    /**
     * Defines the current selection mode
     * ([see example]({% slug selection_treeview %}#toc-selection-modes)).
     */
    selection: boolean | SelectableSettings | string;
    /**
     * Defines the collection that will store the selected keys
     * ([see example]({% slug selection_treeview %}#toc-selection-modes)).
     */
    selectedKeys: any[];
    /**
     * Fires when the `selectedKeys` collection was updated.
     */
    selectedKeysChange: EventEmitter<any[]>;
    readonly getAriaMultiselectable: boolean;
    protected subscriptions: Subscription;
    private readonly options;
    private selectActions;
    private _selectedKeys;
    constructor(treeView: TreeViewComponent);
    ngOnDestroy(): void;
    protected itemKey(e: any): any;
    protected select(e: any): void;
    protected selectSingle(node: any): void;
    protected selectMultiple(node: any): void;
    private notify;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectDirective, "[kendoTreeViewSelectable]", never, { "isSelected": "isSelected"; "selectedKeys": "selectedKeys"; "selectKey": "selectBy"; "selection": "kendoTreeViewSelectable"; }, { "selectedKeysChange": "selectedKeysChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzZWxlY3QuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlVmlld0NvbXBvbmVudCB9IGZyb20gJy4uL3RyZWV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTZWxlY3RhYmxlU2V0dGluZ3MgfSBmcm9tICcuL3NlbGVjdGFibGUtc2V0dGluZ3MnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUcmVlSXRlbSB9IGZyb20gJy4uL3RyZWVpdGVtLmludGVyZmFjZSc7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIG1hbmFnZXMgdGhlIGluLW1lbW9yeSBzZWxlY3Rpb24gc3RhdGUgb2YgdGhlIFRyZWVWaWV3IG5vZGVcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2VsZWN0aW9uX3RyZWV2aWV3ICV9KSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIHRyZWVWaWV3OiBUcmVlVmlld0NvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNTZWxlY3RlZDogKGl0ZW06IG9iamVjdCwgaW5kZXg6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpdGVtIGtleSB0aGF0IHdpbGwgYmUgc3RvcmVkIGluIHRoZSBgc2VsZWN0ZWRLZXlzYCBjb2xsZWN0aW9uLlxuICAgICAqL1xuICAgIHNlbGVjdEtleTogc3RyaW5nIHwgKChjb250ZXh0OiBUcmVlSXRlbSkgPT4gYW55KTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjdXJyZW50IHNlbGVjdGlvbiBtb2RlXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzZWxlY3Rpb25fdHJlZXZpZXcgJX0jdG9jLXNlbGVjdGlvbi1tb2RlcykpLlxuICAgICAqL1xuICAgIHNlbGVjdGlvbjogYm9vbGVhbiB8IFNlbGVjdGFibGVTZXR0aW5ncyB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2xsZWN0aW9uIHRoYXQgd2lsbCBzdG9yZSB0aGUgc2VsZWN0ZWQga2V5c1xuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2VsZWN0aW9uX3RyZWV2aWV3ICV9I3RvYy1zZWxlY3Rpb24tbW9kZXMpKS5cbiAgICAgKi9cbiAgICBzZWxlY3RlZEtleXM6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGBzZWxlY3RlZEtleXNgIGNvbGxlY3Rpb24gd2FzIHVwZGF0ZWQuXG4gICAgICovXG4gICAgc2VsZWN0ZWRLZXlzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55W10+O1xuICAgIHJlYWRvbmx5IGdldEFyaWFNdWx0aXNlbGVjdGFibGU6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM7XG4gICAgcHJpdmF0ZSBzZWxlY3RBY3Rpb25zO1xuICAgIHByaXZhdGUgX3NlbGVjdGVkS2V5cztcbiAgICBjb25zdHJ1Y3Rvcih0cmVlVmlldzogVHJlZVZpZXdDb21wb25lbnQpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGl0ZW1LZXkoZTogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCBzZWxlY3QoZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2VsZWN0U2luZ2xlKG5vZGU6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNlbGVjdE11bHRpcGxlKG5vZGU6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBub3RpZnk7XG59XG4iXX0=