/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, OnChanges } from '@angular/core';
import { TreeViewComponent } from './treeview.component';
import { TreeItem } from './treeitem.interface';
/**
 * A directive which manages the disabled in-memory state of the TreeView node
 * ([see example]({% slug disabledstate_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DisableDirective implements OnChanges {
    protected treeView: TreeViewComponent;
    protected cdr: ChangeDetectorRef;
    /**
     * @hidden
     */
    isDisabled: (item: object, index: string) => boolean;
    /**
     * Defines the item key that will be stored in the `disabledKeys` collection.
     */
    disableKey: string | ((context: TreeItem) => any);
    /**
     * Defines the collection that will store the disabled keys.
     */
    disabledKeys: any[];
    constructor(treeView: TreeViewComponent, cdr: ChangeDetectorRef);
    ngOnChanges(changes?: any): void;
    protected itemKey(e: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DisableDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DisableDirective, "[kendoTreeViewDisable]", never, { "disabledKeys": "disabledKeys"; "isDisabled": "isDisabled"; "disableKey": "kendoTreeViewDisable"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzYWJsZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZGlzYWJsZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlVmlld0NvbXBvbmVudCB9IGZyb20gJy4vdHJlZXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IFRyZWVJdGVtIH0gZnJvbSAnLi90cmVlaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBtYW5hZ2VzIHRoZSBkaXNhYmxlZCBpbi1tZW1vcnkgc3RhdGUgb2YgdGhlIFRyZWVWaWV3IG5vZGVcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZGlzYWJsZWRzdGF0ZV90cmVldmlldyAlfSkpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEaXNhYmxlRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcm90ZWN0ZWQgdHJlZVZpZXc6IFRyZWVWaWV3Q29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBjZHI6IENoYW5nZURldGVjdG9yUmVmO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpc0Rpc2FibGVkOiAoaXRlbTogb2JqZWN0LCBpbmRleDogc3RyaW5nKSA9PiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGl0ZW0ga2V5IHRoYXQgd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGBkaXNhYmxlZEtleXNgIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgZGlzYWJsZUtleTogc3RyaW5nIHwgKChjb250ZXh0OiBUcmVlSXRlbSkgPT4gYW55KTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBjb2xsZWN0aW9uIHRoYXQgd2lsbCBzdG9yZSB0aGUgZGlzYWJsZWQga2V5cy5cbiAgICAgKi9cbiAgICBkaXNhYmxlZEtleXM6IGFueVtdO1xuICAgIGNvbnN0cnVjdG9yKHRyZWVWaWV3OiBUcmVlVmlld0NvbXBvbmVudCwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlcz86IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGl0ZW1LZXkoZTogYW55KTogYW55O1xufVxuIl19