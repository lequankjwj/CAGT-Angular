/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { EventEmitter, OnDestroy } from '@angular/core';
import { TreeViewComponent } from './treeview.component';
import { Subscription } from 'rxjs';
import { TreeItem } from './treeitem.interface';
/**
 * A directive which manages the expanded state of the TreeView
 * ([see example]({% slug expandedstate_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpandDirective implements OnDestroy {
    protected treeView: TreeViewComponent;
    /**
     * @hidden
     */
    isExpanded: (item: object, index: string) => boolean;
    /**
     * Defines the item key that will be stored in the `expandedKeys` collection.
     */
    expandKey: string | ((context: TreeItem) => any);
    /**
     * Fires when the `expandedKeys` collection was updated.
     */
    expandedKeysChange: EventEmitter<any[]>;
    /**
     * Defines the collection that will store the expanded keys.
     */
    expandedKeys: any[];
    protected subscriptions: Subscription;
    private _expandedKeys;
    constructor(treeView: TreeViewComponent);
    ngOnDestroy(): void;
    protected itemKey(e: any): any;
    protected toggleExpand({ index, dataItem, expand }: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExpandDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ExpandDirective, "[kendoTreeViewExpandable]", never, { "isExpanded": "isExpanded"; "expandedKeys": "expandedKeys"; "expandKey": "expandBy"; }, { "expandedKeysChange": "expandedKeysChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJleHBhbmQuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJlZVZpZXdDb21wb25lbnQgfSBmcm9tICcuL3RyZWV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRyZWVJdGVtIH0gZnJvbSAnLi90cmVlaXRlbS5pbnRlcmZhY2UnO1xuLyoqXG4gKiBBIGRpcmVjdGl2ZSB3aGljaCBtYW5hZ2VzIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgVHJlZVZpZXdcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgZXhwYW5kZWRzdGF0ZV90cmVldmlldyAlfSkpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFeHBhbmREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCB0cmVlVmlldzogVHJlZVZpZXdDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlzRXhwYW5kZWQ6IChpdGVtOiBvYmplY3QsIGluZGV4OiBzdHJpbmcpID0+IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgaXRlbSBrZXkgdGhhdCB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgYGV4cGFuZGVkS2V5c2AgY29sbGVjdGlvbi5cbiAgICAgKi9cbiAgICBleHBhbmRLZXk6IHN0cmluZyB8ICgoY29udGV4dDogVHJlZUl0ZW0pID0+IGFueSk7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgYGV4cGFuZGVkS2V5c2AgY29sbGVjdGlvbiB3YXMgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBleHBhbmRlZEtleXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnlbXT47XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgY29sbGVjdGlvbiB0aGF0IHdpbGwgc3RvcmUgdGhlIGV4cGFuZGVkIGtleXMuXG4gICAgICovXG4gICAgZXhwYW5kZWRLZXlzOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX2V4cGFuZGVkS2V5cztcbiAgICBjb25zdHJ1Y3Rvcih0cmVlVmlldzogVHJlZVZpZXdDb21wb25lbnQpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGl0ZW1LZXkoZTogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCB0b2dnbGVFeHBhbmQoeyBpbmRleCwgZGF0YUl0ZW0sIGV4cGFuZCB9OiBhbnkpOiB2b2lkO1xufVxuIl19