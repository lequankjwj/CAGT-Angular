/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Observable } from 'rxjs';
import { TreeViewComponent } from '../treeview.component';
import { LoadMoreRequestArgs } from './load-more-request-args';
/**
 * A directive that enables the display of only a limited amount of nodes per level
 * ([see example]({% slug loadmorebutton_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class LoadMoreDirective {
    private treeview;
    /**
     * Specifies the callback that will be called when the load more button is clicked.
     * Providing a function is only required when additional nodes are fetched on demand
     * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).
     */
    loadMoreNodes: ((loadMoreArgs: LoadMoreRequestArgs) => Observable<any[]>) | string;
    /**
     * Specifies the initial number of nodes that will be rendered on each level.
     * Every time the load more button is clicked, the data item page size will be incremented with this number.
     */
    pageSize: number;
    /**
     * Specifies the total number of root nodes.
     * Used when additional nodes are fetched on demand
     * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).
     */
    totalRootNodes: number;
    /**
     * Specifies which field holds information about the total number of child nodes of the data item.
     * Used when additional nodes are fetched on demand
     * ([see example]({% slug loadmorebutton_treeview %}#toc-remote-data)).
     */
    totalField: string;
    /**
     * Keeps track of the current page size of each node over expand/collapse cycles.
     */
    private pageSizes;
    /**
     * Used as an identifier for the root page size as the root collection of nodes is not associated with a data item.
     */
    private rootLevelId;
    constructor(treeview: TreeViewComponent);
    ngOnChanges(): void;
    private verifySettings;
    private getGroupSize;
    private setGroupSize;
    private getTotalNodesCount;
    private getInitalPageSize;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LoadMoreDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LoadMoreDirective, "[kendoTreeViewLoadMore]", never, { "loadMoreNodes": "kendoTreeViewLoadMore"; "pageSize": "pageSize"; "totalRootNodes": "totalRootNodes"; "totalField": "totalField"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1tb3JlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJsb2FkLW1vcmUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUcmVlVmlld0NvbXBvbmVudCB9IGZyb20gJy4uL3RyZWV2aWV3LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2FkTW9yZVJlcXVlc3RBcmdzIH0gZnJvbSAnLi9sb2FkLW1vcmUtcmVxdWVzdC1hcmdzJztcbi8qKlxuICogQSBkaXJlY3RpdmUgdGhhdCBlbmFibGVzIHRoZSBkaXNwbGF5IG9mIG9ubHkgYSBsaW1pdGVkIGFtb3VudCBvZiBub2RlcyBwZXIgbGV2ZWxcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgbG9hZG1vcmVidXR0b25fdHJlZXZpZXcgJX0pKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTG9hZE1vcmVEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgdHJlZXZpZXc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGxvYWQgbW9yZSBidXR0b24gaXMgY2xpY2tlZC5cbiAgICAgKiBQcm92aWRpbmcgYSBmdW5jdGlvbiBpcyBvbmx5IHJlcXVpcmVkIHdoZW4gYWRkaXRpb25hbCBub2RlcyBhcmUgZmV0Y2hlZCBvbiBkZW1hbmRcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGxvYWRtb3JlYnV0dG9uX3RyZWV2aWV3ICV9I3RvYy1yZW1vdGUtZGF0YSkpLlxuICAgICAqL1xuICAgIGxvYWRNb3JlTm9kZXM6ICgobG9hZE1vcmVBcmdzOiBMb2FkTW9yZVJlcXVlc3RBcmdzKSA9PiBPYnNlcnZhYmxlPGFueVtdPikgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBpbml0aWFsIG51bWJlciBvZiBub2RlcyB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgb24gZWFjaCBsZXZlbC5cbiAgICAgKiBFdmVyeSB0aW1lIHRoZSBsb2FkIG1vcmUgYnV0dG9uIGlzIGNsaWNrZWQsIHRoZSBkYXRhIGl0ZW0gcGFnZSBzaXplIHdpbGwgYmUgaW5jcmVtZW50ZWQgd2l0aCB0aGlzIG51bWJlci5cbiAgICAgKi9cbiAgICBwYWdlU2l6ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdG90YWwgbnVtYmVyIG9mIHJvb3Qgbm9kZXMuXG4gICAgICogVXNlZCB3aGVuIGFkZGl0aW9uYWwgbm9kZXMgYXJlIGZldGNoZWQgb24gZGVtYW5kXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBsb2FkbW9yZWJ1dHRvbl90cmVldmlldyAlfSN0b2MtcmVtb3RlLWRhdGEpKS5cbiAgICAgKi9cbiAgICB0b3RhbFJvb3ROb2RlczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGljaCBmaWVsZCBob2xkcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdG90YWwgbnVtYmVyIG9mIGNoaWxkIG5vZGVzIG9mIHRoZSBkYXRhIGl0ZW0uXG4gICAgICogVXNlZCB3aGVuIGFkZGl0aW9uYWwgbm9kZXMgYXJlIGZldGNoZWQgb24gZGVtYW5kXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBsb2FkbW9yZWJ1dHRvbl90cmVldmlldyAlfSN0b2MtcmVtb3RlLWRhdGEpKS5cbiAgICAgKi9cbiAgICB0b3RhbEZpZWxkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgcGFnZSBzaXplIG9mIGVhY2ggbm9kZSBvdmVyIGV4cGFuZC9jb2xsYXBzZSBjeWNsZXMuXG4gICAgICovXG4gICAgcHJpdmF0ZSBwYWdlU2l6ZXM7XG4gICAgLyoqXG4gICAgICogVXNlZCBhcyBhbiBpZGVudGlmaWVyIGZvciB0aGUgcm9vdCBwYWdlIHNpemUgYXMgdGhlIHJvb3QgY29sbGVjdGlvbiBvZiBub2RlcyBpcyBub3QgYXNzb2NpYXRlZCB3aXRoIGEgZGF0YSBpdGVtLlxuICAgICAqL1xuICAgIHByaXZhdGUgcm9vdExldmVsSWQ7XG4gICAgY29uc3RydWN0b3IodHJlZXZpZXc6IFRyZWVWaWV3Q29tcG9uZW50KTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIHByaXZhdGUgdmVyaWZ5U2V0dGluZ3M7XG4gICAgcHJpdmF0ZSBnZXRHcm91cFNpemU7XG4gICAgcHJpdmF0ZSBzZXRHcm91cFNpemU7XG4gICAgcHJpdmF0ZSBnZXRUb3RhbE5vZGVzQ291bnQ7XG4gICAgcHJpdmF0ZSBnZXRJbml0YWxQYWdlU2l6ZTtcbn1cbiJdfQ==