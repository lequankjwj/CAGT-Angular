/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterContentInit, AfterViewInit, EventEmitter, OnInit, OnDestroy, ElementRef, TemplateRef, Renderer2, ChangeDetectorRef } from '@angular/core';
import { DialogActionsComponent } from './dialog-actions.component';
import { DialogTitleBarComponent } from './dialog-titlebar.component';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ActionsLayout } from '../common/actions-layout';
import { DialogAction } from './dialog-settings';
/**
 * Represents the [Kendo UI Dialog component for Angular]({% slug overview_dialog_dialogs %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DialogComponent implements AfterContentInit, AfterViewInit, OnInit, OnDestroy {
    private _elRef;
    private _renderer;
    private cdr;
    /**
     * Specifies the action buttons that will be rendered.
     */
    actions: DialogAction[];
    /**
     * Specifies the layout of the action buttons in the Dialog.
     * This option is only applicable if the action buttons are specified through the `actions` options.
     *
     * @default 'stretched'
     */
    actionsLayout: ActionsLayout;
    /**
     * Specifies the query selector used to set the initial focus.
     */
    autoFocusedElement: string;
    /**
     * Specifies the text that is rendered in the title bar.
     */
    title: string;
    /**
     * Specifies the width of the Dialog.
     * A numeric value sets the width in pixels.
     * A string value sets the width in arbitrary units&mdash;for example, `50%`.
     */
    width: number | string;
    /**
     * Specifies the minimum width of the Dialog.
     * A numeric value sets the minimum width in pixels.
     * A string value sets the minimum width in arbitrary units&mdash;for example, `50%`.
     */
    minWidth: number | string;
    /**
     * Specifies the maximum width of the Dialog.
     * A numeric value sets the maximum width in pixels.
     * A string value sets the maximum width in arbitrary units&mdash;for example, `50%`.
     */
    maxWidth: number | string;
    /**
     * Specifies the height of the Dialog.
     * A numeric value sets the height in pixels.
     * A string value sets the height in arbitrary units&mdash;for example, `50%`.
     */
    height: number | string;
    /**
     * Specifies the minimum height of the Dialog.
     * A numeric value sets the minimum height in pixels.
     * A string value sets the minimum height in arbitrary units&mdash;for example, `50%`.
     */
    minHeight: number | string;
    /**
     * Specifies the maximum height of the Dialog.
     * A numeric value sets the maximum height in pixels.
     * A string value sets the maximum height in arbitrary units&mdash;for example, `50%`.
     */
    maxHeight: number | string;
    /**
     * @hidden
     */
    contentTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    titleId: string;
    /**
     * @hidden
     */
    closeTitle: string;
    /**
     * Fires when the user clicks an action button of the Dialog.
     * The event is fired only when the action buttons are specified through the `actions` options.
     */
    action: EventEmitter<DialogAction>;
    /**
     * Fires when the user clicks the **Close** button of the Dialog.
     */
    close: EventEmitter<any>;
    readonly dir: string;
    tabIndex: number;
    titlebarContent: DialogTitleBarComponent;
    titlebarView: DialogTitleBarComponent;
    actionsView: DialogActionsComponent;
    private direction;
    private subscriptions;
    constructor(_elRef: ElementRef, _renderer: Renderer2, localization: LocalizationService, cdr: ChangeDetectorRef);
    /**
     * @hidden
     */
    onComponentKeydown(event: any): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Focuses the wrapper of the Dialog component.
     */
    focus(): void;
    /**
     * @hidden
     */
    private handleInitialFocus;
    /**
     * @hidden
     */
    private handleActionButtonFocus;
    /**
     * @hidden
     */
    private keepFocusWithinComponent;
    /**
     * @hidden
     */
    private shouldFocusPrimary;
    /**
     * @hidden
     */
    private getAllFocusableChildren;
    /**
     * @hidden
     */
    private getLastFocusableElement;
    /**
     * @hidden
     */
    private generateTitleId;
    readonly wrapperClass: boolean;
    readonly styles: any;
    private bubble;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DialogComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DialogComponent, "kendo-dialog", ["kendoDialog"], { "actionsLayout": "actionsLayout"; "actions": "actions"; "autoFocusedElement": "autoFocusedElement"; "title": "title"; "width": "width"; "minWidth": "minWidth"; "maxWidth": "maxWidth"; "height": "height"; "minHeight": "minHeight"; "maxHeight": "maxHeight"; }, { "action": "action"; "close": "close"; }, ["titlebarContent"], ["kendo-dialog-titlebar", "*", "kendo-dialog-actions"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkaWFsb2cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT25EZXN0cm95LCBFbGVtZW50UmVmLCBUZW1wbGF0ZVJlZiwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhbG9nQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4vZGlhbG9nLWFjdGlvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ1RpdGxlQmFyQ29tcG9uZW50IH0gZnJvbSAnLi9kaWFsb2ctdGl0bGViYXIuY29tcG9uZW50JztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IEFjdGlvbnNMYXlvdXQgfSBmcm9tICcuLi9jb21tb24vYWN0aW9ucy1sYXlvdXQnO1xuaW1wb3J0IHsgRGlhbG9nQWN0aW9uIH0gZnJvbSAnLi9kaWFsb2ctc2V0dGluZ3MnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgRGlhbG9nIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19kaWFsb2dfZGlhbG9ncyAlfSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERpYWxvZ0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9lbFJlZjtcbiAgICBwcml2YXRlIF9yZW5kZXJlcjtcbiAgICBwcml2YXRlIGNkcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGFjdGlvbiBidXR0b25zIHRoYXQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgKi9cbiAgICBhY3Rpb25zOiBEaWFsb2dBY3Rpb25bXTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGxheW91dCBvZiB0aGUgYWN0aW9uIGJ1dHRvbnMgaW4gdGhlIERpYWxvZy5cbiAgICAgKiBUaGlzIG9wdGlvbiBpcyBvbmx5IGFwcGxpY2FibGUgaWYgdGhlIGFjdGlvbiBidXR0b25zIGFyZSBzcGVjaWZpZWQgdGhyb3VnaCB0aGUgYGFjdGlvbnNgIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAnc3RyZXRjaGVkJ1xuICAgICAqL1xuICAgIGFjdGlvbnNMYXlvdXQ6IEFjdGlvbnNMYXlvdXQ7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBxdWVyeSBzZWxlY3RvciB1c2VkIHRvIHNldCB0aGUgaW5pdGlhbCBmb2N1cy5cbiAgICAgKi9cbiAgICBhdXRvRm9jdXNlZEVsZW1lbnQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRleHQgdGhhdCBpcyByZW5kZXJlZCBpbiB0aGUgdGl0bGUgYmFyLlxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB3aWR0aCBvZiB0aGUgRGlhbG9nLlxuICAgICAqIEEgbnVtZXJpYyB2YWx1ZSBzZXRzIHRoZSB3aWR0aCBpbiBwaXhlbHMuXG4gICAgICogQSBzdHJpbmcgdmFsdWUgc2V0cyB0aGUgd2lkdGggaW4gYXJiaXRyYXJ5IHVuaXRzJm1kYXNoO2ZvciBleGFtcGxlLCBgNTAlYC5cbiAgICAgKi9cbiAgICB3aWR0aDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbWluaW11bSB3aWR0aCBvZiB0aGUgRGlhbG9nLlxuICAgICAqIEEgbnVtZXJpYyB2YWx1ZSBzZXRzIHRoZSBtaW5pbXVtIHdpZHRoIGluIHBpeGVscy5cbiAgICAgKiBBIHN0cmluZyB2YWx1ZSBzZXRzIHRoZSBtaW5pbXVtIHdpZHRoIGluIGFyYml0cmFyeSB1bml0cyZtZGFzaDtmb3IgZXhhbXBsZSwgYDUwJWAuXG4gICAgICovXG4gICAgbWluV2lkdGg6IG51bWJlciB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG1heGltdW0gd2lkdGggb2YgdGhlIERpYWxvZy5cbiAgICAgKiBBIG51bWVyaWMgdmFsdWUgc2V0cyB0aGUgbWF4aW11bSB3aWR0aCBpbiBwaXhlbHMuXG4gICAgICogQSBzdHJpbmcgdmFsdWUgc2V0cyB0aGUgbWF4aW11bSB3aWR0aCBpbiBhcmJpdHJhcnkgdW5pdHMmbWRhc2g7Zm9yIGV4YW1wbGUsIGA1MCVgLlxuICAgICAqL1xuICAgIG1heFdpZHRoOiBudW1iZXIgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBoZWlnaHQgb2YgdGhlIERpYWxvZy5cbiAgICAgKiBBIG51bWVyaWMgdmFsdWUgc2V0cyB0aGUgaGVpZ2h0IGluIHBpeGVscy5cbiAgICAgKiBBIHN0cmluZyB2YWx1ZSBzZXRzIHRoZSBoZWlnaHQgaW4gYXJiaXRyYXJ5IHVuaXRzJm1kYXNoO2ZvciBleGFtcGxlLCBgNTAlYC5cbiAgICAgKi9cbiAgICBoZWlnaHQ6IG51bWJlciB8IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoZSBEaWFsb2cuXG4gICAgICogQSBudW1lcmljIHZhbHVlIHNldHMgdGhlIG1pbmltdW0gaGVpZ2h0IGluIHBpeGVscy5cbiAgICAgKiBBIHN0cmluZyB2YWx1ZSBzZXRzIHRoZSBtaW5pbXVtIGhlaWdodCBpbiBhcmJpdHJhcnkgdW5pdHMmbWRhc2g7Zm9yIGV4YW1wbGUsIGA1MCVgLlxuICAgICAqL1xuICAgIG1pbkhlaWdodDogbnVtYmVyIHwgc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbWF4aW11bSBoZWlnaHQgb2YgdGhlIERpYWxvZy5cbiAgICAgKiBBIG51bWVyaWMgdmFsdWUgc2V0cyB0aGUgbWF4aW11bSBoZWlnaHQgaW4gcGl4ZWxzLlxuICAgICAqIEEgc3RyaW5nIHZhbHVlIHNldHMgdGhlIG1heGltdW0gaGVpZ2h0IGluIGFyYml0cmFyeSB1bml0cyZtZGFzaDtmb3IgZXhhbXBsZSwgYDUwJWAuXG4gICAgICovXG4gICAgbWF4SGVpZ2h0OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNvbnRlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdGl0bGVJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjbG9zZVRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjbGlja3MgYW4gYWN0aW9uIGJ1dHRvbiBvZiB0aGUgRGlhbG9nLlxuICAgICAqIFRoZSBldmVudCBpcyBmaXJlZCBvbmx5IHdoZW4gdGhlIGFjdGlvbiBidXR0b25zIGFyZSBzcGVjaWZpZWQgdGhyb3VnaCB0aGUgYGFjdGlvbnNgIG9wdGlvbnMuXG4gICAgICovXG4gICAgYWN0aW9uOiBFdmVudEVtaXR0ZXI8RGlhbG9nQWN0aW9uPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgKipDbG9zZSoqIGJ1dHRvbiBvZiB0aGUgRGlhbG9nLlxuICAgICAqL1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZWFkb25seSBkaXI6IHN0cmluZztcbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIHRpdGxlYmFyQ29udGVudDogRGlhbG9nVGl0bGVCYXJDb21wb25lbnQ7XG4gICAgdGl0bGViYXJWaWV3OiBEaWFsb2dUaXRsZUJhckNvbXBvbmVudDtcbiAgICBhY3Rpb25zVmlldzogRGlhbG9nQWN0aW9uc0NvbXBvbmVudDtcbiAgICBwcml2YXRlIGRpcmVjdGlvbjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgY29uc3RydWN0b3IoX2VsUmVmOiBFbGVtZW50UmVmLCBfcmVuZGVyZXI6IFJlbmRlcmVyMiwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Db21wb25lbnRLZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSB3cmFwcGVyIG9mIHRoZSBEaWFsb2cgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgaGFuZGxlSW5pdGlhbEZvY3VzO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGhhbmRsZUFjdGlvbkJ1dHRvbkZvY3VzO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGtlZXBGb2N1c1dpdGhpbkNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG91bGRGb2N1c1ByaW1hcnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0QWxsRm9jdXNhYmxlQ2hpbGRyZW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0TGFzdEZvY3VzYWJsZUVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2VuZXJhdGVUaXRsZUlkO1xuICAgIHJlYWRvbmx5IHdyYXBwZXJDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBzdHlsZXM6IGFueTtcbiAgICBwcml2YXRlIGJ1YmJsZTtcbn1cbiJdfQ==