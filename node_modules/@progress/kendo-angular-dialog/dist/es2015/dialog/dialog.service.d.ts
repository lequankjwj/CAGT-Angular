/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ComponentFactoryResolver } from '@angular/core';
import { DialogContainerService } from './dialog-container.service';
import { DialogRef, DialogSettings } from './dialog-settings';
/**
 * A service for opening Dialog windows dynamically
 * ([see example]({% slug service_dialog %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class DialogService {
    /**
     * @hidden
     */
    private resolver;
    private containerService;
    constructor(
    /**
     * @hidden
     */
    resolver: ComponentFactoryResolver, containerService: DialogContainerService);
    /**
     * Opens a Dialog window. Requires an element in the application that uses the
     * [`kendoDialogContainer`]({% slug api_dialog_dialogcontainerdirective %}) directive.
     * Created Dialogs will be mounted in the DOM directly after that element.
     *
     * @param {DialogAction} options - The options that define the Dialog.
     * @returns {DialogRef} - A reference to the Dialog object and the convenience properties.
     *
     * @example
     *
     * ```ts-no-run
     * _@Component({
     *   selector: 'my-app',
     *   template: `
     *     <button kendoButton (click)="open()">Harmless button</button>
     *     <div kendoDialogContainer></div>
     *   `
     * })
     * export class AppComponent {
     *     constructor( private dialogService: DialogService ) {}
     *
     *     public open() {
     *         var dialog = this.dialogService.open({
     *           title: "Please confirm",
     *           content: "Are you sure?",
     *           actions: [
     *             { text: "No" },
     *             { text: "Yes", primary: true }
     *           ]
     *         });
     *
     *         dialog.result.subscribe((result) => {
     *           if (result instanceof DialogCloseResult) {
     *             console.log("close");
     *           } else {
     *             console.log("action", result);
     *           }
     *         });
     *     }
     * }
     * ```
     *
     */
    open(options: DialogSettings): DialogRef;
    private initializeDialog;
    private applyOptions;
    private contentFrom;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DialogService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DialogService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGlhbG9nLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlhbG9nQ29udGFpbmVyU2VydmljZSB9IGZyb20gJy4vZGlhbG9nLWNvbnRhaW5lci5zZXJ2aWNlJztcbmltcG9ydCB7IERpYWxvZ1JlZiwgRGlhbG9nU2V0dGluZ3MgfSBmcm9tICcuL2RpYWxvZy1zZXR0aW5ncyc7XG4vKipcbiAqIEEgc2VydmljZSBmb3Igb3BlbmluZyBEaWFsb2cgd2luZG93cyBkeW5hbWljYWxseVxuICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBzZXJ2aWNlX2RpYWxvZyAlfSkpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEaWFsb2dTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXNvbHZlcjtcbiAgICBwcml2YXRlIGNvbnRhaW5lclNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGNvbnRhaW5lclNlcnZpY2U6IERpYWxvZ0NvbnRhaW5lclNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgRGlhbG9nIHdpbmRvdy4gUmVxdWlyZXMgYW4gZWxlbWVudCBpbiB0aGUgYXBwbGljYXRpb24gdGhhdCB1c2VzIHRoZVxuICAgICAqIFtga2VuZG9EaWFsb2dDb250YWluZXJgXSh7JSBzbHVnIGFwaV9kaWFsb2dfZGlhbG9nY29udGFpbmVyZGlyZWN0aXZlICV9KSBkaXJlY3RpdmUuXG4gICAgICogQ3JlYXRlZCBEaWFsb2dzIHdpbGwgYmUgbW91bnRlZCBpbiB0aGUgRE9NIGRpcmVjdGx5IGFmdGVyIHRoYXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RGlhbG9nQWN0aW9ufSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgdGhhdCBkZWZpbmUgdGhlIERpYWxvZy5cbiAgICAgKiBAcmV0dXJucyB7RGlhbG9nUmVmfSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBEaWFsb2cgb2JqZWN0IGFuZCB0aGUgY29udmVuaWVuY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0cy1uby1ydW5cbiAgICAgKiBfQENvbXBvbmVudCh7XG4gICAgICogICBzZWxlY3RvcjogJ215LWFwcCcsXG4gICAgICogICB0ZW1wbGF0ZTogYFxuICAgICAqICAgICA8YnV0dG9uIGtlbmRvQnV0dG9uIChjbGljayk9XCJvcGVuKClcIj5IYXJtbGVzcyBidXR0b248L2J1dHRvbj5cbiAgICAgKiAgICAgPGRpdiBrZW5kb0RpYWxvZ0NvbnRhaW5lcj48L2Rpdj5cbiAgICAgKiAgIGBcbiAgICAgKiB9KVxuICAgICAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgICAqICAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSBkaWFsb2dTZXJ2aWNlOiBEaWFsb2dTZXJ2aWNlICkge31cbiAgICAgKlxuICAgICAqICAgICBwdWJsaWMgb3BlbigpIHtcbiAgICAgKiAgICAgICAgIHZhciBkaWFsb2cgPSB0aGlzLmRpYWxvZ1NlcnZpY2Uub3Blbih7XG4gICAgICogICAgICAgICAgIHRpdGxlOiBcIlBsZWFzZSBjb25maXJtXCIsXG4gICAgICogICAgICAgICAgIGNvbnRlbnQ6IFwiQXJlIHlvdSBzdXJlP1wiLFxuICAgICAqICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICogICAgICAgICAgICAgeyB0ZXh0OiBcIk5vXCIgfSxcbiAgICAgKiAgICAgICAgICAgICB7IHRleHQ6IFwiWWVzXCIsIHByaW1hcnk6IHRydWUgfVxuICAgICAqICAgICAgICAgICBdXG4gICAgICogICAgICAgICB9KTtcbiAgICAgKlxuICAgICAqICAgICAgICAgZGlhbG9nLnJlc3VsdC5zdWJzY3JpYmUoKHJlc3VsdCkgPT4ge1xuICAgICAqICAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRGlhbG9nQ2xvc2VSZXN1bHQpIHtcbiAgICAgKiAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImNsb3NlXCIpO1xuICAgICAqICAgICAgICAgICB9IGVsc2Uge1xuICAgICAqICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWN0aW9uXCIsIHJlc3VsdCk7XG4gICAgICogICAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIH0pO1xuICAgICAqICAgICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgb3BlbihvcHRpb25zOiBEaWFsb2dTZXR0aW5ncyk6IERpYWxvZ1JlZjtcbiAgICBwcml2YXRlIGluaXRpYWxpemVEaWFsb2c7XG4gICAgcHJpdmF0ZSBhcHBseU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBjb250ZW50RnJvbTtcbn1cbiJdfQ==