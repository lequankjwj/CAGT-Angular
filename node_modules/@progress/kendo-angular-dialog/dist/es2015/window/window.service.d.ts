/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ComponentFactoryResolver } from '@angular/core';
import { WindowRef, WindowSettings } from './window-settings';
import { WindowContainerService } from '../window/window-container.service';
/**
 * A service for opening Windows dynamically
 * ([see example]({% slug service_window %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class WindowService {
    /**
     * @hidden
     */
    private resolver;
    private containerService;
    constructor(
    /**
     * @hidden
     */
    resolver: ComponentFactoryResolver, containerService: WindowContainerService);
    /**
     * Opens a Window component.
     *
     * @param {WindowSettings} settings - The settings that define the Window.
     * @returns {WindowRef} - A reference to the Window object.
     *
     * @example
     *
     * ```ts-no-run
     * _@Component({
     *   selector: 'my-app',
     *   template: `
     *     <button kendoButton (click)="open()">Open window</button>
     *     <div kendoWindowContainer></div>
     *   `
     * })
     * export class AppComponent {
     *     constructor( private windowService: WindowService ) {}
     *
     *     public open() {
     *         var window = this.windowService.open({
     *           title: "My window",
     *           content: "My content!"
     *         });
     *
     *         window.result.subscribe((result) => {
     *           if (result instanceof WindowCloseResult) {
     *             console.log("Window was closed");
     *           }
     *         });
     *     }
     * }
     * ```
     *
     */
    open(settings: WindowSettings): WindowRef;
    private applyOptions;
    private contentFrom;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WindowService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<WindowService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsid2luZG93LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV2luZG93UmVmLCBXaW5kb3dTZXR0aW5ncyB9IGZyb20gJy4vd2luZG93LXNldHRpbmdzJztcbmltcG9ydCB7IFdpbmRvd0NvbnRhaW5lclNlcnZpY2UgfSBmcm9tICcuLi93aW5kb3cvd2luZG93LWNvbnRhaW5lci5zZXJ2aWNlJztcbi8qKlxuICogQSBzZXJ2aWNlIGZvciBvcGVuaW5nIFdpbmRvd3MgZHluYW1pY2FsbHlcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2VydmljZV93aW5kb3cgJX0pKS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgV2luZG93U2VydmljZSB7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzb2x2ZXI7XG4gICAgcHJpdmF0ZSBjb250YWluZXJTZXJ2aWNlO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBjb250YWluZXJTZXJ2aWNlOiBXaW5kb3dDb250YWluZXJTZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBPcGVucyBhIFdpbmRvdyBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dpbmRvd1NldHRpbmdzfSBzZXR0aW5ncyAtIFRoZSBzZXR0aW5ncyB0aGF0IGRlZmluZSB0aGUgV2luZG93LlxuICAgICAqIEByZXR1cm5zIHtXaW5kb3dSZWZ9IC0gQSByZWZlcmVuY2UgdG8gdGhlIFdpbmRvdyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHMtbm8tcnVuXG4gICAgICogX0BDb21wb25lbnQoe1xuICAgICAqICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgdGVtcGxhdGU6IGBcbiAgICAgKiAgICAgPGJ1dHRvbiBrZW5kb0J1dHRvbiAoY2xpY2spPVwib3BlbigpXCI+T3BlbiB3aW5kb3c8L2J1dHRvbj5cbiAgICAgKiAgICAgPGRpdiBrZW5kb1dpbmRvd0NvbnRhaW5lcj48L2Rpdj5cbiAgICAgKiAgIGBcbiAgICAgKiB9KVxuICAgICAqIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgICAqICAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSB3aW5kb3dTZXJ2aWNlOiBXaW5kb3dTZXJ2aWNlICkge31cbiAgICAgKlxuICAgICAqICAgICBwdWJsaWMgb3BlbigpIHtcbiAgICAgKiAgICAgICAgIHZhciB3aW5kb3cgPSB0aGlzLndpbmRvd1NlcnZpY2Uub3Blbih7XG4gICAgICogICAgICAgICAgIHRpdGxlOiBcIk15IHdpbmRvd1wiLFxuICAgICAqICAgICAgICAgICBjb250ZW50OiBcIk15IGNvbnRlbnQhXCJcbiAgICAgKiAgICAgICAgIH0pO1xuICAgICAqXG4gICAgICogICAgICAgICB3aW5kb3cucmVzdWx0LnN1YnNjcmliZSgocmVzdWx0KSA9PiB7XG4gICAgICogICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBXaW5kb3dDbG9zZVJlc3VsdCkge1xuICAgICAqICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV2luZG93IHdhcyBjbG9zZWRcIik7XG4gICAgICogICAgICAgICAgIH1cbiAgICAgKiAgICAgICAgIH0pO1xuICAgICAqICAgICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICovXG4gICAgb3BlbihzZXR0aW5nczogV2luZG93U2V0dGluZ3MpOiBXaW5kb3dSZWY7XG4gICAgcHJpdmF0ZSBhcHBseU9wdGlvbnM7XG4gICAgcHJpdmF0ZSBjb250ZW50RnJvbTtcbn1cbiJdfQ==