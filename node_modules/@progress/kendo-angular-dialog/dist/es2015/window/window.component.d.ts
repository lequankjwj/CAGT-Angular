/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, OnDestroy, AfterViewInit, EventEmitter, ElementRef, Renderer2, QueryList, NgZone, OnChanges, SimpleChange, TemplateRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { DragResizeService } from './drag-resize.service';
import { WindowState, WindowDimensionSetting, WindowOffsetSetting, WindowMessages } from './window-settings';
import { ResizeHandleDirective } from './window-resize-handle.directive';
import { WindowTitleBarComponent } from './window-titlebar.component';
import { NavigationService } from './navigation.service';
/**
 * Represents the [Kendo UI Window component for Angular]({% slug overview_window_dialogs %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class WindowComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {
    private el;
    private renderer;
    private service;
    private navigation;
    private ngZone;
    private localization;
    /**
     * Specifies the query selector used to set the initial focus.
     */
    autoFocusedElement: string;
    /**
     * Specifies the text that is rendered in the title bar.
     */
    title: string;
    /**
     * Specifies whether the user will be able to drag the component.
     * @default true
     */
    draggable: boolean;
    /**
     * Specifies whether the user will be able to resize the component.
     * @default true
     */
    resizable: boolean;
    /**
     * Specifies if the content of the component is persisted in the DOM when minimized.
     * @default false
     */
    keepContent: boolean;
    /**
     * Specifies the initial state of the component.
     * If not specified, the value is set to `default`.
     *
     * The possible values are:
     * * `minimized`
     * * `maximized`
     * * `default`
     */
    state: WindowState;
    /**
     * Specifies the minimum width of the component.
     * The `minWidth` property has to be set in pixels.
     * @default 120
     */
    minWidth: number;
    /**
     * Specifies the minimum height of the Window.
     * The `minHeight` property has to be set in pixels.
     * @default 100
     */
    minHeight: number;
    /**
     * Specifies the width of the Window.
     * The `width` property has to be set in pixels.
     */
    width: number;
    /**
     * Specifies the height of the Window.
     * The `height` property has to be set in pixels.
     */
    height: number;
    /**
     * Specifies the initial top offset of the Window.
     * The `top` property has to be set in pixels.
     */
    top: number;
    /**
     * Specifies the initial left offset of the Window.
     * Numeric values are treated as pixels.
     */
    left: number;
    readonly closeButtonTitle: string;
    readonly restoreButtonTitle: string;
    readonly maximizeButtonTitle: string;
    readonly minimizeButtonTitle: string;
    /**
     * Fires when the user starts to move the Window.
     */
    dragStart: EventEmitter<any>;
    /**
     * Fires when the Window was moved by the user.
     */
    dragEnd: EventEmitter<any>;
    /**
     * Fires when the user starts to resize the Window.
     */
    resizeStart: EventEmitter<any>;
    /**
     * Fires when the Window was resized by the user.
     */
    resizeEnd: EventEmitter<any>;
    /**
     * Fires when the user closes the Window.
     */
    close: EventEmitter<any>;
    /**
     * Fires when the `width` property of the component was updated. The event is triggered only after the resizing
     * has ended. The event data contains the new width. Allows a two-way binding of the `width` property.
     */
    widthChange: EventEmitter<number>;
    /**
     * Fires when the `height` property of the component was updated. The event is triggered only after the resizing
     * has ended. The event data contains the new height. Allows a two-way binding of the `height` property.
     */
    heightChange: EventEmitter<number>;
    /**
     * Fires when the `top` property of the component was updated. The event is triggered only after the dragging
     * and resizing have ended. The event data contains the new top offset. Allows a two-way binding of the `top` property.
     */
    topChange: EventEmitter<number>;
    /**
     * Fires when the `left` property of the component was updated. The event is triggered only after the dragging
     * and resizing have ended. The event data contains the new left offset. Allows a two-way binding of the `left` property.
     */
    leftChange: EventEmitter<number>;
    /**
     * Fires when the `state` property of the component was updated. The event data contains the new state. Allows a
     * two-way binding of the `state` property.
     */
    stateChange: EventEmitter<WindowState>;
    /**
     * @hidden
     */
    contentTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    titleBarTemplate: TemplateRef<any>;
    /**
     * @hidden
     */
    messages: WindowMessages;
    tabIndex: number;
    readonly hostClasses: boolean;
    readonly dir: string;
    titleBarView: WindowTitleBarComponent;
    titleBarContent: WindowTitleBarComponent;
    resizeHandles: QueryList<ResizeHandleDirective>;
    resizeDirections: Array<string>;
    private direction;
    private draged;
    private resized;
    private windowSubscription;
    private localizationChangeSubscription;
    constructor(el: ElementRef, renderer: Renderer2, service: DragResizeService, navigation: NavigationService, ngZone: NgZone, localization: LocalizationService);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    ngOnDestroy(): void;
    /**
     * Focuses the wrapper of the Window component.
     */
    focus(): void;
    /**
     * Brings the current Window component on top of other Window components on the page.
     */
    bringToFront(): void;
    /**
     * Manually updates the `width` or `height` option of the Window.
     * The required style will be applied to the Window wrapper element and the
     * corresponding property of the component instance will be updated.
     * This method is intended to be used for sizing dynamically created components using the
     * [`WindowService`]({% slug api_dialog_windowservice %})
     * @param {WindowDimensionSetting} dimension - The option that will be updated
     * @param {number} value - The value set in pixels
     */
    setDimension(dimension: WindowDimensionSetting, value: number): void;
    /**
     * Manually updates the `top` or `left` offset of the Window.
     * The required style will be applied to the Window wrapper element and the
     * corresponding property of the component instance will be updated.
     * This method is intended to be used for positioning dynamically created components using the
     * [`WindowService`]({% slug api_dialog_windowservice %})
     * @param {WindowOffsetSetting} offset - The option that will be updated
     * @param {number} value - The value set in pixels
     */
    setOffset(offset: WindowOffsetSetting, value: number): void;
    readonly showDefaultTitleBar: boolean;
    readonly styleMinWidth: string;
    readonly styleMinHeight: string;
    readonly stylePosition: string;
    readonly wrapperMaximizedClass: boolean;
    readonly wrapperMinimizedClass: boolean;
    /**
     * @hidden
     */
    onComponentKeydown(event: KeyboardEvent): void;
    /**
     * @hidden
     */
    onComponentFocus(): void;
    /**
     * @hidden
     */
    onComponentBlur(): void;
    private subscribeEvents;
    private setNextZIndex;
    private setInitialOffset;
    private updateAllOffset;
    private setStyle;
    private removeStyle;
    private readonly options;
    private setOption;
    private handleInitialFocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WindowComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<WindowComponent, "kendo-window", ["kendoWindow"], { "keepContent": "keepContent"; "draggable": "draggable"; "resizable": "resizable"; "state": "state"; "minWidth": "minWidth"; "minHeight": "minHeight"; "width": "width"; "height": "height"; "top": "top"; "left": "left"; "autoFocusedElement": "autoFocusedElement"; "title": "title"; }, { "dragStart": "dragStart"; "dragEnd": "dragEnd"; "resizeStart": "resizeStart"; "resizeEnd": "resizeEnd"; "close": "close"; "widthChange": "widthChange"; "heightChange": "heightChange"; "topChange": "topChange"; "leftChange": "leftChange"; "stateChange": "stateChange"; }, ["titleBarContent"], ["kendo-window-titlebar", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ3aW5kb3cuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBRdWVyeUxpc3QsIE5nWm9uZSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2UsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBEcmFnUmVzaXplU2VydmljZSB9IGZyb20gJy4vZHJhZy1yZXNpemUuc2VydmljZSc7XG5pbXBvcnQgeyBXaW5kb3dTdGF0ZSwgV2luZG93RGltZW5zaW9uU2V0dGluZywgV2luZG93T2Zmc2V0U2V0dGluZywgV2luZG93TWVzc2FnZXMgfSBmcm9tICcuL3dpbmRvdy1zZXR0aW5ncyc7XG5pbXBvcnQgeyBSZXNpemVIYW5kbGVEaXJlY3RpdmUgfSBmcm9tICcuL3dpbmRvdy1yZXNpemUtaGFuZGxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBXaW5kb3dUaXRsZUJhckNvbXBvbmVudCB9IGZyb20gJy4vd2luZG93LXRpdGxlYmFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vbmF2aWdhdGlvbi5zZXJ2aWNlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIFdpbmRvdyBjb21wb25lbnQgZm9yIEFuZ3VsYXJdKHslIHNsdWcgb3ZlcnZpZXdfd2luZG93X2RpYWxvZ3MgJX0pLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBXaW5kb3dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBzZXJ2aWNlO1xuICAgIHByaXZhdGUgbmF2aWdhdGlvbjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHF1ZXJ5IHNlbGVjdG9yIHVzZWQgdG8gc2V0IHRoZSBpbml0aWFsIGZvY3VzLlxuICAgICAqL1xuICAgIGF1dG9Gb2N1c2VkRWxlbWVudDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgdGV4dCB0aGF0IGlzIHJlbmRlcmVkIGluIHRoZSB0aXRsZSBiYXIuXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgdXNlciB3aWxsIGJlIGFibGUgdG8gZHJhZyB0aGUgY29tcG9uZW50LlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBkcmFnZ2FibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHVzZXIgd2lsbCBiZSBhYmxlIHRvIHJlc2l6ZSB0aGUgY29tcG9uZW50LlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICByZXNpemFibGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQgaXMgcGVyc2lzdGVkIGluIHRoZSBET00gd2hlbiBtaW5pbWl6ZWQuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBrZWVwQ29udGVudDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgdmFsdWUgaXMgc2V0IHRvIGBkZWZhdWx0YC5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogYG1pbmltaXplZGBcbiAgICAgKiAqIGBtYXhpbWl6ZWRgXG4gICAgICogKiBgZGVmYXVsdGBcbiAgICAgKi9cbiAgICBzdGF0ZTogV2luZG93U3RhdGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBtaW5pbXVtIHdpZHRoIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICogVGhlIGBtaW5XaWR0aGAgcHJvcGVydHkgaGFzIHRvIGJlIHNldCBpbiBwaXhlbHMuXG4gICAgICogQGRlZmF1bHQgMTIwXG4gICAgICovXG4gICAgbWluV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG1pbmltdW0gaGVpZ2h0IG9mIHRoZSBXaW5kb3cuXG4gICAgICogVGhlIGBtaW5IZWlnaHRgIHByb3BlcnR5IGhhcyB0byBiZSBzZXQgaW4gcGl4ZWxzLlxuICAgICAqIEBkZWZhdWx0IDEwMFxuICAgICAqL1xuICAgIG1pbkhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgd2lkdGggb2YgdGhlIFdpbmRvdy5cbiAgICAgKiBUaGUgYHdpZHRoYCBwcm9wZXJ0eSBoYXMgdG8gYmUgc2V0IGluIHBpeGVscy5cbiAgICAgKi9cbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaGVpZ2h0IG9mIHRoZSBXaW5kb3cuXG4gICAgICogVGhlIGBoZWlnaHRgIHByb3BlcnR5IGhhcyB0byBiZSBzZXQgaW4gcGl4ZWxzLlxuICAgICAqL1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaW5pdGlhbCB0b3Agb2Zmc2V0IG9mIHRoZSBXaW5kb3cuXG4gICAgICogVGhlIGB0b3BgIHByb3BlcnR5IGhhcyB0byBiZSBzZXQgaW4gcGl4ZWxzLlxuICAgICAqL1xuICAgIHRvcDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgaW5pdGlhbCBsZWZ0IG9mZnNldCBvZiB0aGUgV2luZG93LlxuICAgICAqIE51bWVyaWMgdmFsdWVzIGFyZSB0cmVhdGVkIGFzIHBpeGVscy5cbiAgICAgKi9cbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgY2xvc2VCdXR0b25UaXRsZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHJlc3RvcmVCdXR0b25UaXRsZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG1heGltaXplQnV0dG9uVGl0bGU6IHN0cmluZztcbiAgICByZWFkb25seSBtaW5pbWl6ZUJ1dHRvblRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBzdGFydHMgdG8gbW92ZSB0aGUgV2luZG93LlxuICAgICAqL1xuICAgIGRyYWdTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgV2luZG93IHdhcyBtb3ZlZCBieSB0aGUgdXNlci5cbiAgICAgKi9cbiAgICBkcmFnRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSB1c2VyIHN0YXJ0cyB0byByZXNpemUgdGhlIFdpbmRvdy5cbiAgICAgKi9cbiAgICByZXNpemVTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgV2luZG93IHdhcyByZXNpemVkIGJ5IHRoZSB1c2VyLlxuICAgICAqL1xuICAgIHJlc2l6ZUVuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgdXNlciBjbG9zZXMgdGhlIFdpbmRvdy5cbiAgICAgKi9cbiAgICBjbG9zZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgYHdpZHRoYCBwcm9wZXJ0eSBvZiB0aGUgY29tcG9uZW50IHdhcyB1cGRhdGVkLiBUaGUgZXZlbnQgaXMgdHJpZ2dlcmVkIG9ubHkgYWZ0ZXIgdGhlIHJlc2l6aW5nXG4gICAgICogaGFzIGVuZGVkLiBUaGUgZXZlbnQgZGF0YSBjb250YWlucyB0aGUgbmV3IHdpZHRoLiBBbGxvd3MgYSB0d28td2F5IGJpbmRpbmcgb2YgdGhlIGB3aWR0aGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgd2lkdGhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGBoZWlnaHRgIHByb3BlcnR5IG9mIHRoZSBjb21wb25lbnQgd2FzIHVwZGF0ZWQuIFRoZSBldmVudCBpcyB0cmlnZ2VyZWQgb25seSBhZnRlciB0aGUgcmVzaXppbmdcbiAgICAgKiBoYXMgZW5kZWQuIFRoZSBldmVudCBkYXRhIGNvbnRhaW5zIHRoZSBuZXcgaGVpZ2h0LiBBbGxvd3MgYSB0d28td2F5IGJpbmRpbmcgb2YgdGhlIGBoZWlnaHRgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGhlaWdodENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgYHRvcGAgcHJvcGVydHkgb2YgdGhlIGNvbXBvbmVudCB3YXMgdXBkYXRlZC4gVGhlIGV2ZW50IGlzIHRyaWdnZXJlZCBvbmx5IGFmdGVyIHRoZSBkcmFnZ2luZ1xuICAgICAqIGFuZCByZXNpemluZyBoYXZlIGVuZGVkLiBUaGUgZXZlbnQgZGF0YSBjb250YWlucyB0aGUgbmV3IHRvcCBvZmZzZXQuIEFsbG93cyBhIHR3by13YXkgYmluZGluZyBvZiB0aGUgYHRvcGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgdG9wQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBgbGVmdGAgcHJvcGVydHkgb2YgdGhlIGNvbXBvbmVudCB3YXMgdXBkYXRlZC4gVGhlIGV2ZW50IGlzIHRyaWdnZXJlZCBvbmx5IGFmdGVyIHRoZSBkcmFnZ2luZ1xuICAgICAqIGFuZCByZXNpemluZyBoYXZlIGVuZGVkLiBUaGUgZXZlbnQgZGF0YSBjb250YWlucyB0aGUgbmV3IGxlZnQgb2Zmc2V0LiBBbGxvd3MgYSB0d28td2F5IGJpbmRpbmcgb2YgdGhlIGBsZWZ0YCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBsZWZ0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBgc3RhdGVgIHByb3BlcnR5IG9mIHRoZSBjb21wb25lbnQgd2FzIHVwZGF0ZWQuIFRoZSBldmVudCBkYXRhIGNvbnRhaW5zIHRoZSBuZXcgc3RhdGUuIEFsbG93cyBhXG4gICAgICogdHdvLXdheSBiaW5kaW5nIG9mIHRoZSBgc3RhdGVgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8V2luZG93U3RhdGU+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb250ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRpdGxlQmFyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG1lc3NhZ2VzOiBXaW5kb3dNZXNzYWdlcztcbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGhvc3RDbGFzc2VzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRpcjogc3RyaW5nO1xuICAgIHRpdGxlQmFyVmlldzogV2luZG93VGl0bGVCYXJDb21wb25lbnQ7XG4gICAgdGl0bGVCYXJDb250ZW50OiBXaW5kb3dUaXRsZUJhckNvbXBvbmVudDtcbiAgICByZXNpemVIYW5kbGVzOiBRdWVyeUxpc3Q8UmVzaXplSGFuZGxlRGlyZWN0aXZlPjtcbiAgICByZXNpemVEaXJlY3Rpb25zOiBBcnJheTxzdHJpbmc+O1xuICAgIHByaXZhdGUgZGlyZWN0aW9uO1xuICAgIHByaXZhdGUgZHJhZ2VkO1xuICAgIHByaXZhdGUgcmVzaXplZDtcbiAgICBwcml2YXRlIHdpbmRvd1N1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgc2VydmljZTogRHJhZ1Jlc2l6ZVNlcnZpY2UsIG5hdmlnYXRpb246IE5hdmlnYXRpb25TZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IHtcbiAgICAgICAgW3Byb3BlcnR5TmFtZTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgd3JhcHBlciBvZiB0aGUgV2luZG93IGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEJyaW5ncyB0aGUgY3VycmVudCBXaW5kb3cgY29tcG9uZW50IG9uIHRvcCBvZiBvdGhlciBXaW5kb3cgY29tcG9uZW50cyBvbiB0aGUgcGFnZS5cbiAgICAgKi9cbiAgICBicmluZ1RvRnJvbnQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNYW51YWxseSB1cGRhdGVzIHRoZSBgd2lkdGhgIG9yIGBoZWlnaHRgIG9wdGlvbiBvZiB0aGUgV2luZG93LlxuICAgICAqIFRoZSByZXF1aXJlZCBzdHlsZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIFdpbmRvdyB3cmFwcGVyIGVsZW1lbnQgYW5kIHRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgb2YgdGhlIGNvbXBvbmVudCBpbnN0YW5jZSB3aWxsIGJlIHVwZGF0ZWQuXG4gICAgICogVGhpcyBtZXRob2QgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3Igc2l6aW5nIGR5bmFtaWNhbGx5IGNyZWF0ZWQgY29tcG9uZW50cyB1c2luZyB0aGVcbiAgICAgKiBbYFdpbmRvd1NlcnZpY2VgXSh7JSBzbHVnIGFwaV9kaWFsb2dfd2luZG93c2VydmljZSAlfSlcbiAgICAgKiBAcGFyYW0ge1dpbmRvd0RpbWVuc2lvblNldHRpbmd9IGRpbWVuc2lvbiAtIFRoZSBvcHRpb24gdGhhdCB3aWxsIGJlIHVwZGF0ZWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgc2V0IGluIHBpeGVsc1xuICAgICAqL1xuICAgIHNldERpbWVuc2lvbihkaW1lbnNpb246IFdpbmRvd0RpbWVuc2lvblNldHRpbmcsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IHVwZGF0ZXMgdGhlIGB0b3BgIG9yIGBsZWZ0YCBvZmZzZXQgb2YgdGhlIFdpbmRvdy5cbiAgICAgKiBUaGUgcmVxdWlyZWQgc3R5bGUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBXaW5kb3cgd3JhcHBlciBlbGVtZW50IGFuZCB0aGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIHByb3BlcnR5IG9mIHRoZSBjb21wb25lbnQgaW5zdGFuY2Ugd2lsbCBiZSB1cGRhdGVkLlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgZm9yIHBvc2l0aW9uaW5nIGR5bmFtaWNhbGx5IGNyZWF0ZWQgY29tcG9uZW50cyB1c2luZyB0aGVcbiAgICAgKiBbYFdpbmRvd1NlcnZpY2VgXSh7JSBzbHVnIGFwaV9kaWFsb2dfd2luZG93c2VydmljZSAlfSlcbiAgICAgKiBAcGFyYW0ge1dpbmRvd09mZnNldFNldHRpbmd9IG9mZnNldCAtIFRoZSBvcHRpb24gdGhhdCB3aWxsIGJlIHVwZGF0ZWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgc2V0IGluIHBpeGVsc1xuICAgICAqL1xuICAgIHNldE9mZnNldChvZmZzZXQ6IFdpbmRvd09mZnNldFNldHRpbmcsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xuICAgIHJlYWRvbmx5IHNob3dEZWZhdWx0VGl0bGVCYXI6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc3R5bGVNaW5XaWR0aDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHN0eWxlTWluSGVpZ2h0OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgc3R5bGVQb3NpdGlvbjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHdyYXBwZXJNYXhpbWl6ZWRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSB3cmFwcGVyTWluaW1pemVkQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uQ29tcG9uZW50S2V5ZG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uQ29tcG9uZW50Rm9jdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Db21wb25lbnRCbHVyKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpYmVFdmVudHM7XG4gICAgcHJpdmF0ZSBzZXROZXh0WkluZGV4O1xuICAgIHByaXZhdGUgc2V0SW5pdGlhbE9mZnNldDtcbiAgICBwcml2YXRlIHVwZGF0ZUFsbE9mZnNldDtcbiAgICBwcml2YXRlIHNldFN0eWxlO1xuICAgIHByaXZhdGUgcmVtb3ZlU3R5bGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zO1xuICAgIHByaXZhdGUgc2V0T3B0aW9uO1xuICAgIHByaXZhdGUgaGFuZGxlSW5pdGlhbEZvY3VzO1xufVxuIl19