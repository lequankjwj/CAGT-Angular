/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { NgZone, EventEmitter, ElementRef, OnDestroy } from "@angular/core";
import { DraggableDirective } from '@progress/kendo-angular-common';
import { Subscription } from 'rxjs';
import { WindowOptions, WindowState } from './window-settings';
import { ChangeEvent } from './window-events';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class DragResizeService implements OnDestroy {
    private ngZone;
    close: EventEmitter<any>;
    focus: EventEmitter<any>;
    change: EventEmitter<ChangeEvent>;
    stateChange: EventEmitter<WindowState>;
    dragStart: EventEmitter<any>;
    dragEnd: EventEmitter<any>;
    resizeStart: EventEmitter<string>;
    resizeEnd: EventEmitter<any>;
    options: WindowOptions;
    restoreOptions: WindowOptions;
    window: ElementRef;
    lastAction: string;
    subscriptions: Subscription;
    dragSubscription: Subscription;
    constructor(ngZone: NgZone);
    ngOnDestroy(): void;
    init(el: ElementRef): void;
    onDrag(el: DraggableDirective): void;
    handleDrag({ originalX, originalY, pageX, pageY, startPosition }: {
        originalX: any;
        originalY: any;
        pageX: any;
        pageY: any;
        startPosition: any;
    }): void;
    onResize(handle: DraggableDirective, direction: string): void;
    handleResize(initial: any, dir: string, deltaX: number, deltaY: number): void;
    restoreAction(): void;
    defaultState(): void;
    storeOptions(): void;
    maximizeAction(): void;
    maximizeState(): void;
    minimizeAction(): void;
    minimizeState(): void;
    /**
     * Handles manual changes of the 'state' property.
     * Required to distinguish them from action clicks.
     */
    applyManualState(): void;
    closeAction(): void;
    ensureWidth(): void;
    clearHeight(): void;
    center(): void;
    currentOffsetAndPosition(): any;
    currentPosition(): any;
    setPosition(): void;
    setRestoreOption(style: string, value: number): void;
    readonly nextPossibleZIndex: number;
    readonly nextZIndex: number;
    readonly windowViewPort: any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DragResizeService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DragResizeService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1yZXNpemUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJkcmFnLXJlc2l6ZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE5nWm9uZSwgRXZlbnRFbWl0dGVyLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3kgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRHJhZ2dhYmxlRGlyZWN0aXZlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItY29tbW9uJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgV2luZG93T3B0aW9ucywgV2luZG93U3RhdGUgfSBmcm9tICcuL3dpbmRvdy1zZXR0aW5ncyc7XG5pbXBvcnQgeyBDaGFuZ2VFdmVudCB9IGZyb20gJy4vd2luZG93LWV2ZW50cyc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHJhZ1Jlc2l6ZVNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIGNsb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2hhbmdlRXZlbnQ+O1xuICAgIHN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8V2luZG93U3RhdGU+O1xuICAgIGRyYWdTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgZHJhZ0VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgcmVzaXplU3RhcnQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIHJlc2l6ZUVuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb3B0aW9uczogV2luZG93T3B0aW9ucztcbiAgICByZXN0b3JlT3B0aW9uczogV2luZG93T3B0aW9ucztcbiAgICB3aW5kb3c6IEVsZW1lbnRSZWY7XG4gICAgbGFzdEFjdGlvbjogc3RyaW5nO1xuICAgIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbjtcbiAgICBkcmFnU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgaW5pdChlbDogRWxlbWVudFJlZik6IHZvaWQ7XG4gICAgb25EcmFnKGVsOiBEcmFnZ2FibGVEaXJlY3RpdmUpOiB2b2lkO1xuICAgIGhhbmRsZURyYWcoeyBvcmlnaW5hbFgsIG9yaWdpbmFsWSwgcGFnZVgsIHBhZ2VZLCBzdGFydFBvc2l0aW9uIH06IHtcbiAgICAgICAgb3JpZ2luYWxYOiBhbnk7XG4gICAgICAgIG9yaWdpbmFsWTogYW55O1xuICAgICAgICBwYWdlWDogYW55O1xuICAgICAgICBwYWdlWTogYW55O1xuICAgICAgICBzdGFydFBvc2l0aW9uOiBhbnk7XG4gICAgfSk6IHZvaWQ7XG4gICAgb25SZXNpemUoaGFuZGxlOiBEcmFnZ2FibGVEaXJlY3RpdmUsIGRpcmVjdGlvbjogc3RyaW5nKTogdm9pZDtcbiAgICBoYW5kbGVSZXNpemUoaW5pdGlhbDogYW55LCBkaXI6IHN0cmluZywgZGVsdGFYOiBudW1iZXIsIGRlbHRhWTogbnVtYmVyKTogdm9pZDtcbiAgICByZXN0b3JlQWN0aW9uKCk6IHZvaWQ7XG4gICAgZGVmYXVsdFN0YXRlKCk6IHZvaWQ7XG4gICAgc3RvcmVPcHRpb25zKCk6IHZvaWQ7XG4gICAgbWF4aW1pemVBY3Rpb24oKTogdm9pZDtcbiAgICBtYXhpbWl6ZVN0YXRlKCk6IHZvaWQ7XG4gICAgbWluaW1pemVBY3Rpb24oKTogdm9pZDtcbiAgICBtaW5pbWl6ZVN0YXRlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBtYW51YWwgY2hhbmdlcyBvZiB0aGUgJ3N0YXRlJyBwcm9wZXJ0eS5cbiAgICAgKiBSZXF1aXJlZCB0byBkaXN0aW5ndWlzaCB0aGVtIGZyb20gYWN0aW9uIGNsaWNrcy5cbiAgICAgKi9cbiAgICBhcHBseU1hbnVhbFN0YXRlKCk6IHZvaWQ7XG4gICAgY2xvc2VBY3Rpb24oKTogdm9pZDtcbiAgICBlbnN1cmVXaWR0aCgpOiB2b2lkO1xuICAgIGNsZWFySGVpZ2h0KCk6IHZvaWQ7XG4gICAgY2VudGVyKCk6IHZvaWQ7XG4gICAgY3VycmVudE9mZnNldEFuZFBvc2l0aW9uKCk6IGFueTtcbiAgICBjdXJyZW50UG9zaXRpb24oKTogYW55O1xuICAgIHNldFBvc2l0aW9uKCk6IHZvaWQ7XG4gICAgc2V0UmVzdG9yZU9wdGlvbihzdHlsZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZDtcbiAgICByZWFkb25seSBuZXh0UG9zc2libGVaSW5kZXg6IG51bWJlcjtcbiAgICByZWFkb25seSBuZXh0WkluZGV4OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgd2luZG93Vmlld1BvcnQ6IGFueTtcbn1cbiJdfQ==