/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ApplicationRef, ComponentFactoryResolver, ElementRef, InjectionToken, Injector } from '@angular/core';
import { PopupSettings } from './models/popup-settings';
import { PopupRef } from './models/popup-ref';
/**
 * Used to inject the Popup container. If not provided, the first root component of
 * the application is used.
 *
 * > The `POPUP_CONTAINER` can be used only with the [`PopupService`]({% slug service_popup %}) class.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Popup module
 * import { PopupModule, POPUP_CONTAINER } from '@progress/kendo-angular-popup';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { ElementRef, NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, PopupModule], // import Popup module
 *     bootstrap:    [AppComponent],
 *     providers: [{
 *       provide: POPUP_CONTAINER,
 *       useFactory: () => {
 *          //return the container ElementRef, where the popup will be injected
 *          return { nativeElement: document.body } as ElementRef;
 *       }
 *     }]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare const POPUP_CONTAINER: InjectionToken<ElementRef<any>>;
/**
 * A service for opening Popup components dynamically
 * ([see example]({% slug service_popup %})).
 *
 * @export
 * @class PopupService
 */
export declare class PopupService {
    private applicationRef;
    private componentFactoryResolver;
    private injector;
    private container;
    /**
     * Gets the root view container into which the component will be injected.
     *
     * @returns {ComponentRef<any>}
     */
    private readonly rootViewContainer;
    /**
     * Sets or gets the HTML element of the root component container.
     *
     * @returns {HTMLElement}
     */
    readonly rootViewContainerNode: HTMLElement;
    constructor(applicationRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector, container: ElementRef);
    /**
     * Opens a Popup component. Created Popups are mounted
     * in the DOM directly in the root application component.
     *
     * @param {PopupSettings} options - The options which define the Popup.
     * @returns {ComponentRef<PopupComponent>} - A reference to the Popup object.
     *
     * @example
     *
     * ```ts-no-run
     * _@Component({
     *   selector: 'my-app',
     *   template: `
     *     <ng-template #template>
     *      Popup content
     *     </ng-template>
     *     <button #anchor kendoButton (click)="open(anchor, template)">Open</button>
     *   `
     * })
     * export class AppComponent {
     *     public popupRef: PopupRef;
     *
     *     constructor( private popupService: PopupService ) {}
     *
     *     public open(anchor: ElementRef, template: TemplateRef<any>): void {
     *         if (this.popupRef) {
     *              this.popupRef.close();
     *              this.popupRef = null;
     *              return;
     *         }
     *
     *         this.popupRef = this.popupService.open({
     *           anchor: anchor,
     *           content: template
     *         });
     *     }
     * }
     * ```
     */
    open(options?: PopupSettings): PopupRef;
    private appendPopup;
    /**
     * Gets the HTML element for a component reference.
     *
     * @param {ComponentRef<any>} componentRef
     * @returns {HTMLElement}
     */
    private getComponentRootNode;
    /**
     * Gets the `ComponentFactory` instance by its type.
     *
     * @param {*} componentClass
     * @param {*} nodes
     * @returns {ComponentRef<any>}
     */
    private getComponentFactory;
    /**
     * Creates a component reference from a `Component` type class.
     *
     * @param {*} componentClass
     * @param {*} nodes
     * @returns {ComponentRef<any>}
     */
    private createComponent;
    /**
     * Projects the inputs on the component.
     *
     * @param {ComponentRef<any>} component
     * @param {*} options
     * @returns {ComponentRef<any>}
     */
    private projectComponentInputs;
    /**
     * Gets the component and the nodes to append from the `content` option.
     *
     * @param {*} content
     * @returns {any}
     */
    private contentFrom;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PopupService, [null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PopupService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJwb3B1cC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEFwcGxpY2F0aW9uUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEVsZW1lbnRSZWYsIEluamVjdGlvblRva2VuLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9wdXBTZXR0aW5ncyB9IGZyb20gJy4vbW9kZWxzL3BvcHVwLXNldHRpbmdzJztcbmltcG9ydCB7IFBvcHVwUmVmIH0gZnJvbSAnLi9tb2RlbHMvcG9wdXAtcmVmJztcbi8qKlxuICogVXNlZCB0byBpbmplY3QgdGhlIFBvcHVwIGNvbnRhaW5lci4gSWYgbm90IHByb3ZpZGVkLCB0aGUgZmlyc3Qgcm9vdCBjb21wb25lbnQgb2ZcbiAqIHRoZSBhcHBsaWNhdGlvbiBpcyB1c2VkLlxuICpcbiAqID4gVGhlIGBQT1BVUF9DT05UQUlORVJgIGNhbiBiZSB1c2VkIG9ubHkgd2l0aCB0aGUgW2BQb3B1cFNlcnZpY2VgXSh7JSBzbHVnIHNlcnZpY2VfcG9wdXAgJX0pIGNsYXNzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHMtbm8tcnVuXG4gKiAvLyBJbXBvcnQgdGhlIFBvcHVwIG1vZHVsZVxuICogaW1wb3J0IHsgUG9wdXBNb2R1bGUsIFBPUFVQX0NPTlRBSU5FUiB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLXBvcHVwJztcbiAqXG4gKiAvLyBUaGUgYnJvd3NlciBwbGF0Zm9ybSB3aXRoIGEgY29tcGlsZXJcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICpcbiAqIGltcG9ydCB7IEVsZW1lbnRSZWYsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogLy8gSW1wb3J0IHRoZSBhcHAgY29tcG9uZW50XG4gKiBpbXBvcnQgeyBBcHBDb21wb25lbnQgfSBmcm9tICcuL2FwcC5jb21wb25lbnQnO1xuICpcbiAqIC8vIERlZmluZSB0aGUgYXBwIG1vZHVsZVxuICogX0BOZ01vZHVsZSh7XG4gKiAgICAgZGVjbGFyYXRpb25zOiBbQXBwQ29tcG9uZW50XSwgLy8gZGVjbGFyZSBhcHAgY29tcG9uZW50XG4gKiAgICAgaW1wb3J0czogICAgICBbQnJvd3Nlck1vZHVsZSwgUG9wdXBNb2R1bGVdLCAvLyBpbXBvcnQgUG9wdXAgbW9kdWxlXG4gKiAgICAgYm9vdHN0cmFwOiAgICBbQXBwQ29tcG9uZW50XSxcbiAqICAgICBwcm92aWRlcnM6IFt7XG4gKiAgICAgICBwcm92aWRlOiBQT1BVUF9DT05UQUlORVIsXG4gKiAgICAgICB1c2VGYWN0b3J5OiAoKSA9PiB7XG4gKiAgICAgICAgICAvL3JldHVybiB0aGUgY29udGFpbmVyIEVsZW1lbnRSZWYsIHdoZXJlIHRoZSBwb3B1cCB3aWxsIGJlIGluamVjdGVkXG4gKiAgICAgICAgICByZXR1cm4geyBuYXRpdmVFbGVtZW50OiBkb2N1bWVudC5ib2R5IH0gYXMgRWxlbWVudFJlZjtcbiAqICAgICAgIH1cbiAqICAgICB9XVxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUge31cbiAqXG4gKiAvLyBDb21waWxlIGFuZCBsYXVuY2ggdGhlIG1vZHVsZVxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFBPUFVQX0NPTlRBSU5FUjogSW5qZWN0aW9uVG9rZW48RWxlbWVudFJlZjxhbnk+Pjtcbi8qKlxuICogQSBzZXJ2aWNlIGZvciBvcGVuaW5nIFBvcHVwIGNvbXBvbmVudHMgZHluYW1pY2FsbHlcbiAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2VydmljZV9wb3B1cCAlfSkpLlxuICpcbiAqIEBleHBvcnRcbiAqIEBjbGFzcyBQb3B1cFNlcnZpY2VcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9wdXBTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGFwcGxpY2F0aW9uUmVmO1xuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuICAgIHByaXZhdGUgaW5qZWN0b3I7XG4gICAgcHJpdmF0ZSBjb250YWluZXI7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcm9vdCB2aWV3IGNvbnRhaW5lciBpbnRvIHdoaWNoIHRoZSBjb21wb25lbnQgd2lsbCBiZSBpbmplY3RlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtDb21wb25lbnRSZWY8YW55Pn1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvb3RWaWV3Q29udGFpbmVyO1xuICAgIC8qKlxuICAgICAqIFNldHMgb3IgZ2V0cyB0aGUgSFRNTCBlbGVtZW50IG9mIHRoZSByb290IGNvbXBvbmVudCBjb250YWluZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAgICovXG4gICAgcmVhZG9ubHkgcm9vdFZpZXdDb250YWluZXJOb2RlOiBIVE1MRWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihhcHBsaWNhdGlvblJlZjogQXBwbGljYXRpb25SZWYsIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBpbmplY3RvcjogSW5qZWN0b3IsIGNvbnRhaW5lcjogRWxlbWVudFJlZik7XG4gICAgLyoqXG4gICAgICogT3BlbnMgYSBQb3B1cCBjb21wb25lbnQuIENyZWF0ZWQgUG9wdXBzIGFyZSBtb3VudGVkXG4gICAgICogaW4gdGhlIERPTSBkaXJlY3RseSBpbiB0aGUgcm9vdCBhcHBsaWNhdGlvbiBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1BvcHVwU2V0dGluZ3N9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB3aGljaCBkZWZpbmUgdGhlIFBvcHVwLlxuICAgICAqIEByZXR1cm5zIHtDb21wb25lbnRSZWY8UG9wdXBDb21wb25lbnQ+fSAtIEEgcmVmZXJlbmNlIHRvIHRoZSBQb3B1cCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHMtbm8tcnVuXG4gICAgICogX0BDb21wb25lbnQoe1xuICAgICAqICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICAgICAqICAgdGVtcGxhdGU6IGBcbiAgICAgKiAgICAgPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cbiAgICAgKiAgICAgIFBvcHVwIGNvbnRlbnRcbiAgICAgKiAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgKiAgICAgPGJ1dHRvbiAjYW5jaG9yIGtlbmRvQnV0dG9uIChjbGljayk9XCJvcGVuKGFuY2hvciwgdGVtcGxhdGUpXCI+T3BlbjwvYnV0dG9uPlxuICAgICAqICAgYFxuICAgICAqIH0pXG4gICAgICogZXhwb3J0IGNsYXNzIEFwcENvbXBvbmVudCB7XG4gICAgICogICAgIHB1YmxpYyBwb3B1cFJlZjogUG9wdXBSZWY7XG4gICAgICpcbiAgICAgKiAgICAgY29uc3RydWN0b3IoIHByaXZhdGUgcG9wdXBTZXJ2aWNlOiBQb3B1cFNlcnZpY2UgKSB7fVxuICAgICAqXG4gICAgICogICAgIHB1YmxpYyBvcGVuKGFuY2hvcjogRWxlbWVudFJlZiwgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4pOiB2b2lkIHtcbiAgICAgKiAgICAgICAgIGlmICh0aGlzLnBvcHVwUmVmKSB7XG4gICAgICogICAgICAgICAgICAgIHRoaXMucG9wdXBSZWYuY2xvc2UoKTtcbiAgICAgKiAgICAgICAgICAgICAgdGhpcy5wb3B1cFJlZiA9IG51bGw7XG4gICAgICogICAgICAgICAgICAgIHJldHVybjtcbiAgICAgKiAgICAgICAgIH1cbiAgICAgKlxuICAgICAqICAgICAgICAgdGhpcy5wb3B1cFJlZiA9IHRoaXMucG9wdXBTZXJ2aWNlLm9wZW4oe1xuICAgICAqICAgICAgICAgICBhbmNob3I6IGFuY2hvcixcbiAgICAgKiAgICAgICAgICAgY29udGVudDogdGVtcGxhdGVcbiAgICAgKiAgICAgICAgIH0pO1xuICAgICAqICAgICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIG9wZW4ob3B0aW9ucz86IFBvcHVwU2V0dGluZ3MpOiBQb3B1cFJlZjtcbiAgICBwcml2YXRlIGFwcGVuZFBvcHVwO1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIEhUTUwgZWxlbWVudCBmb3IgYSBjb21wb25lbnQgcmVmZXJlbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb21wb25lbnRSZWY8YW55Pn0gY29tcG9uZW50UmVmXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q29tcG9uZW50Um9vdE5vZGU7XG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYENvbXBvbmVudEZhY3RvcnlgIGluc3RhbmNlIGJ5IGl0cyB0eXBlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBjb21wb25lbnRDbGFzc1xuICAgICAqIEBwYXJhbSB7Kn0gbm9kZXNcbiAgICAgKiBAcmV0dXJucyB7Q29tcG9uZW50UmVmPGFueT59XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb21wb25lbnRGYWN0b3J5O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21wb25lbnQgcmVmZXJlbmNlIGZyb20gYSBgQ29tcG9uZW50YCB0eXBlIGNsYXNzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSBjb21wb25lbnRDbGFzc1xuICAgICAqIEBwYXJhbSB7Kn0gbm9kZXNcbiAgICAgKiBAcmV0dXJucyB7Q29tcG9uZW50UmVmPGFueT59XG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogUHJvamVjdHMgdGhlIGlucHV0cyBvbiB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDb21wb25lbnRSZWY8YW55Pn0gY29tcG9uZW50XG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zXG4gICAgICogQHJldHVybnMge0NvbXBvbmVudFJlZjxhbnk+fVxuICAgICAqL1xuICAgIHByaXZhdGUgcHJvamVjdENvbXBvbmVudElucHV0cztcbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjb21wb25lbnQgYW5kIHRoZSBub2RlcyB0byBhcHBlbmQgZnJvbSB0aGUgYGNvbnRlbnRgIG9wdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gY29udGVudFxuICAgICAqIEByZXR1cm5zIHthbnl9XG4gICAgICovXG4gICAgcHJpdmF0ZSBjb250ZW50RnJvbTtcbn1cbiJdfQ==