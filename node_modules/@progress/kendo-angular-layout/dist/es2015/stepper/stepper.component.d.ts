/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, EventEmitter, Renderer2, ElementRef, SimpleChanges, OnChanges } from '@angular/core';
import { StepperOrientation } from './models/orientation';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { StepType } from './models/step-type';
import { StepperStepTemplateDirective } from './template-directives/step-template.directive';
import { StepperLabelTemplateDirective } from './template-directives/label-template.directive';
import { StepperActivateEvent } from './events/activate-event';
import { StepperIndicatorTemplateDirective } from './template-directives/indicator-template.directive';
import { StepperService } from './stepper.service';
/**
 * Represents the [Kendo UI Stepper component for Angular]({% slug overview_stepper %}).
 *
 * @example
 * ```ts-preview
 * _@Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-stepper [steps]="steps">
 *        </kendo-stepper>
 *    `
 * })
 * class AppComponent {
 *    public steps: Array<StepperStep> = [
 *      { label: 'Step One' }, { label: 'Step Two' }, { label: 'Step Three' }
 *    ];
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class StepperComponent implements OnChanges, OnDestroy {
    private renderer;
    private elem;
    private localization;
    private stepperService;
    hostClasses: boolean;
    readonly linearClass: boolean;
    ariaRole: string;
    direction: string;
    displayStyle: string;
    /**
     * Specifies the type of the steps in the Stepper.
     *
     * The possible values are:
     * * (Default) `indicator`
     * * `label`
     * * `full`
     */
    stepType: StepType;
    /**
     * Specifies the linear flow of the Stepper.
     *
     * @default true
     */
    linear: boolean;
    /**
     * Specifies the orientation of the Stepper
     * ([see example]({% slug orientation_stepper %})).
     *
     * The possible values are:
     * * (Default) `horizontal`
     * * `vertical`
     */
    orientation: StepperOrientation;
    /**
     * The index of the current step.
     */
    currentStep: number;
    /**
     * The collection of steps that will be rendered in the Stepper.
     * ([see example]({% slug step_appearance_stepper %}))
     */
    steps: any[];
    /**
     * Specifies a custom icon that will be rendered inside the step
     * for valid previous steps.
     */
    successIcon: string;
    /**
     * Specifies a custom icon that will be rendered inside the step
     * for invalid previous steps.
     */
    errorIcon: string;
    /**
     * Specifies the duration of the progress indicator animation in milliseconds. Defaults to `400ms`.
     *
     * The possible values are:
     *  * Boolean
     *    * (Default) `true`
     *    * false
     *  * Number
     */
    animation?: boolean | number;
    /**
     * Fires when a step is about to be activated. This event is preventable.
     */
    activate: EventEmitter<StepperActivateEvent>;
    /**
     * Fires when the `currentStep` property of the component was updated.
     * Used to provide a two-way binding for the `currentStep` property.
     */
    currentStepChange: EventEmitter<number>;
    /**
     * @hidden
     */
    stepTemplate: StepperStepTemplateDirective;
    /**
     * @hidden
     */
    labelTemplate: StepperLabelTemplateDirective;
    /**
     * @hidden
     */
    indicatorTemplate: StepperIndicatorTemplateDirective;
    private dynamicRTLSubscription;
    private _steps;
    constructor(renderer: Renderer2, elem: ElementRef, localization: LocalizationService, stepperService: StepperService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Manually triggers the validity check configured by the [isValid]({% slug api_layout_stepperstep %}#toc-isvalid) property of the steps.
     *
     * Steps that have their [validate]({% slug api_layout_stepperstep %}#toc-validate) property set to `false`, will not be validated.
     */
    validateSteps(): void;
    private applyHostStyling;
    /**
     * @hidden
     */
    readonly progressAnimation: any;
    /**
     * @hidden
     */
    readonly animationDuration: number;
    /**
     * @hidden
     */
    readonly stepsListStyling: Object;
    /**
     * @hidden
     */
    readonly progressBarStyling: Object;
    /***
     * @hidden
     */
    readonly isHorizontal: boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StepperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StepperComponent, "kendo-stepper", ["kendoStepper"], { "stepType": "stepType"; "linear": "linear"; "orientation": "orientation"; "animation": "animation"; "currentStep": "currentStep"; "steps": "steps"; "successIcon": "successIcon"; "errorIcon": "errorIcon"; }, { "activate": "activate"; "currentStepChange": "currentStepChange"; }, ["stepTemplate", "labelTemplate", "indicatorTemplate"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0ZXBwZXJPcmllbnRhdGlvbiB9IGZyb20gJy4vbW9kZWxzL29yaWVudGF0aW9uJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFN0ZXBUeXBlIH0gZnJvbSAnLi9tb2RlbHMvc3RlcC10eXBlJztcbmltcG9ydCB7IFN0ZXBwZXJTdGVwVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlLWRpcmVjdGl2ZXMvc3RlcC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3RlcHBlckxhYmVsVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlLWRpcmVjdGl2ZXMvbGFiZWwtdGVtcGxhdGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IFN0ZXBwZXJBY3RpdmF0ZUV2ZW50IH0gZnJvbSAnLi9ldmVudHMvYWN0aXZhdGUtZXZlbnQnO1xuaW1wb3J0IHsgU3RlcHBlckluZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi90ZW1wbGF0ZS1kaXJlY3RpdmVzL2luZGljYXRvci10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU3RlcHBlclNlcnZpY2UgfSBmcm9tICcuL3N0ZXBwZXIuc2VydmljZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIFtLZW5kbyBVSSBTdGVwcGVyIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19zdGVwcGVyICV9KS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHMtcHJldmlld1xuICogX0BDb21wb25lbnQoe1xuICogICAgc2VsZWN0b3I6ICdteS1hcHAnLFxuICogICAgdGVtcGxhdGU6IGBcbiAqICAgICAgICA8a2VuZG8tc3RlcHBlciBbc3RlcHNdPVwic3RlcHNcIj5cbiAqICAgICAgICA8L2tlbmRvLXN0ZXBwZXI+XG4gKiAgICBgXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgIHB1YmxpYyBzdGVwczogQXJyYXk8U3RlcHBlclN0ZXA+ID0gW1xuICogICAgICB7IGxhYmVsOiAnU3RlcCBPbmUnIH0sIHsgbGFiZWw6ICdTdGVwIFR3bycgfSwgeyBsYWJlbDogJ1N0ZXAgVGhyZWUnIH1cbiAqICAgIF07XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RlcHBlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgZWxlbTtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbjtcbiAgICBwcml2YXRlIHN0ZXBwZXJTZXJ2aWNlO1xuICAgIGhvc3RDbGFzc2VzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGxpbmVhckNsYXNzOiBib29sZWFuO1xuICAgIGFyaWFSb2xlOiBzdHJpbmc7XG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgZGlzcGxheVN0eWxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB0eXBlIG9mIHRoZSBzdGVwcyBpbiB0aGUgU3RlcHBlci5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogKERlZmF1bHQpIGBpbmRpY2F0b3JgXG4gICAgICogKiBgbGFiZWxgXG4gICAgICogKiBgZnVsbGBcbiAgICAgKi9cbiAgICBzdGVwVHlwZTogU3RlcFR5cGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBsaW5lYXIgZmxvdyBvZiB0aGUgU3RlcHBlci5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBsaW5lYXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgU3RlcHBlclxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgb3JpZW50YXRpb25fc3RlcHBlciAlfSkpLlxuICAgICAqXG4gICAgICogVGhlIHBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICogKiAoRGVmYXVsdCkgYGhvcml6b250YWxgXG4gICAgICogKiBgdmVydGljYWxgXG4gICAgICovXG4gICAgb3JpZW50YXRpb246IFN0ZXBwZXJPcmllbnRhdGlvbjtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgc3RlcC5cbiAgICAgKi9cbiAgICBjdXJyZW50U3RlcDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb2xsZWN0aW9uIG9mIHN0ZXBzIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBpbiB0aGUgU3RlcHBlci5cbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHN0ZXBfYXBwZWFyYW5jZV9zdGVwcGVyICV9KSlcbiAgICAgKi9cbiAgICBzdGVwczogYW55W107XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGEgY3VzdG9tIGljb24gdGhhdCB3aWxsIGJlIHJlbmRlcmVkIGluc2lkZSB0aGUgc3RlcFxuICAgICAqIGZvciB2YWxpZCBwcmV2aW91cyBzdGVwcy5cbiAgICAgKi9cbiAgICBzdWNjZXNzSWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBhIGN1c3RvbSBpY29uIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBpbnNpZGUgdGhlIHN0ZXBcbiAgICAgKiBmb3IgaW52YWxpZCBwcmV2aW91cyBzdGVwcy5cbiAgICAgKi9cbiAgICBlcnJvckljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGR1cmF0aW9uIG9mIHRoZSBwcm9ncmVzcyBpbmRpY2F0b3IgYW5pbWF0aW9uIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gYDQwMG1zYC5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICAqIEJvb2xlYW5cbiAgICAgKiAgICAqIChEZWZhdWx0KSBgdHJ1ZWBcbiAgICAgKiAgICAqIGZhbHNlXG4gICAgICogICogTnVtYmVyXG4gICAgICovXG4gICAgYW5pbWF0aW9uPzogYm9vbGVhbiB8IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGEgc3RlcCBpcyBhYm91dCB0byBiZSBhY3RpdmF0ZWQuIFRoaXMgZXZlbnQgaXMgcHJldmVudGFibGUuXG4gICAgICovXG4gICAgYWN0aXZhdGU6IEV2ZW50RW1pdHRlcjxTdGVwcGVyQWN0aXZhdGVFdmVudD47XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgYGN1cnJlbnRTdGVwYCBwcm9wZXJ0eSBvZiB0aGUgY29tcG9uZW50IHdhcyB1cGRhdGVkLlxuICAgICAqIFVzZWQgdG8gcHJvdmlkZSBhIHR3by13YXkgYmluZGluZyBmb3IgdGhlIGBjdXJyZW50U3RlcGAgcHJvcGVydHkuXG4gICAgICovXG4gICAgY3VycmVudFN0ZXBDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzdGVwVGVtcGxhdGU6IFN0ZXBwZXJTdGVwVGVtcGxhdGVEaXJlY3RpdmU7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGxhYmVsVGVtcGxhdGU6IFN0ZXBwZXJMYWJlbFRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpbmRpY2F0b3JUZW1wbGF0ZTogU3RlcHBlckluZGljYXRvclRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIHByaXZhdGUgZHluYW1pY1JUTFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIF9zdGVwcztcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtOiBFbGVtZW50UmVmLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIHN0ZXBwZXJTZXJ2aWNlOiBTdGVwcGVyU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IHRyaWdnZXJzIHRoZSB2YWxpZGl0eSBjaGVjayBjb25maWd1cmVkIGJ5IHRoZSBbaXNWYWxpZF0oeyUgc2x1ZyBhcGlfbGF5b3V0X3N0ZXBwZXJzdGVwICV9I3RvYy1pc3ZhbGlkKSBwcm9wZXJ0eSBvZiB0aGUgc3RlcHMuXG4gICAgICpcbiAgICAgKiBTdGVwcyB0aGF0IGhhdmUgdGhlaXIgW3ZhbGlkYXRlXSh7JSBzbHVnIGFwaV9sYXlvdXRfc3RlcHBlcnN0ZXAgJX0jdG9jLXZhbGlkYXRlKSBwcm9wZXJ0eSBzZXQgdG8gYGZhbHNlYCwgd2lsbCBub3QgYmUgdmFsaWRhdGVkLlxuICAgICAqL1xuICAgIHZhbGlkYXRlU3RlcHMoKTogdm9pZDtcbiAgICBwcml2YXRlIGFwcGx5SG9zdFN0eWxpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHByb2dyZXNzQW5pbWF0aW9uOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGFuaW1hdGlvbkR1cmF0aW9uOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0ZXBzTGlzdFN0eWxpbmc6IE9iamVjdDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcHJvZ3Jlc3NCYXJTdHlsaW5nOiBPYmplY3Q7XG4gICAgLyoqKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBpc0hvcml6b250YWw6IGJvb2xlYW47XG59XG4iXX0=