/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewChecked, ElementRef, EventEmitter, OnChanges, QueryList, SimpleChange, TemplateRef, OnInit, OnDestroy } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { PanelBarExpandMode } from './panelbar-expand-mode';
import { PanelBarItemComponent } from './panelbar-item.component';
import { PanelBarItemModel } from './panelbar-item-model';
import { PanelBarService } from "./panelbar.service";
import { PanelBarItemTemplateDirective } from "./panelbar-item-template.directive";
/**
 * Represents the [Kendo UI PanelBar component for Angular]({% slug overview_panelbar %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class PanelBarComponent implements AfterViewChecked, OnChanges, OnInit, OnDestroy {
    private localization;
    /**
     * Sets the expand mode of the PanelBar through the `PanelBarExpandMode` enum ([see example]({% slug expandmodes_panelbar %})).
     *
     * The available modes are:
     * - `"single"`&mdash;Expands only one item at a time. Expanding an item collapses the item that was previously expanded.
     * - `"multiple"`&mdash;The default mode of the PanelBar.
     * Expands more than one item at a time. Items can also be toggled.
     * - `"full"`&mdash;Expands only one item at a time.
     * The expanded area occupies the entire height of the PanelBar. Requires you to set the `height` property.
     */
    expandMode: PanelBarExpandMode;
    /**
     * Allows the PanelBar to modify the selected state of the items.
     */
    selectable: boolean;
    /**
     * Sets the animate state of the PanelBar ([see example]({% slug animations_panelbar %})).
     */
    animate: boolean;
    /**
     * Sets the height of the component when the `"full"` expand mode is used.
     * This option is ignored in the `"multiple"` and `"single"` expand modes.
     */
    height: any;
    /**
     * When set to `true`, the PanelBar renders the content of all items and they are persisted in the DOM
     * ([see example]({% slug templates_panelbar %}#toc-collections)).
     * By default, this option is set to `false`.
     */
    keepItemContent: boolean;
    /**
     * Sets the items of the PanelBar as an array of `PanelBarItemModel` instances
     * ([see example]({% slug items_panelbar %})).
     */
    items: Array<PanelBarItemModel>;
    /**
     * Fires each time the user interacts with a PanelBar item
     * ([see example]({% slug routing_panelbar %}#toc-getting-the-selected-item)).
     * The event data contains all items that are modified.
     */
    stateChange: EventEmitter<any>;
    tabIndex: number;
    role: string;
    activeDescendant: string;
    readonly hostHeight: string;
    readonly overflow: string;
    readonly dir: string;
    template: PanelBarItemTemplateDirective;
    contentItems: QueryList<PanelBarItemComponent>;
    contentChildItems: QueryList<PanelBarItemComponent>;
    viewChildItems: QueryList<PanelBarItemComponent>;
    private localizationChangeSubscription;
    private allItems;
    private childrenItems;
    private isViewInit;
    private focused;
    private _items;
    private _keepItemContent;
    private elementRef;
    private eventService;
    private keyBindings;
    constructor(elementRef: ElementRef, eventService: PanelBarService, localization: LocalizationService);
    /**
     * @hidden
     */
    invertKeys(original: any, inverted: any): any;
    readonly computedKeys: Object;
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    readonly templateRef: TemplateRef<any>;
    /**
     * @hidden
     */
    onComponentClick(event: any): void;
    /**
     * @hidden
     */
    onComponentFocus(): void;
    /**
     * @hidden
     */
    onComponentBlur(): void;
    /**
     * @hidden
     */
    onComponentKeyDown(event: any): void;
    private readonly viewItems;
    private validateConfiguration;
    private updateChildrenHeight;
    private onItemAction;
    readonly hostClasses: boolean;
    private isVisible;
    private getVisibleParent;
    private focusItem;
    private moveFocus;
    private focusLastItem;
    private focusFirstItem;
    private focusNextItem;
    private focusPreviousItem;
    private expandItem;
    private collapseItem;
    private selectFocusedItem;
    private visibleItems;
    private flatVisibleItems;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PanelBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PanelBarComponent, "kendo-panelbar", ["kendoPanelbar"], { "expandMode": "expandMode"; "selectable": "selectable"; "animate": "animate"; "height": "height"; "keepItemContent": "keepItemContent"; "items": "items"; }, { "stateChange": "stateChange"; }, ["template", "contentItems", "contentChildItems"], ["kendo-panelbar-item"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWxiYXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInBhbmVsYmFyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgUXVlcnlMaXN0LCBTaW1wbGVDaGFuZ2UsIFRlbXBsYXRlUmVmLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuaW1wb3J0IHsgUGFuZWxCYXJFeHBhbmRNb2RlIH0gZnJvbSAnLi9wYW5lbGJhci1leHBhbmQtbW9kZSc7XG5pbXBvcnQgeyBQYW5lbEJhckl0ZW1Db21wb25lbnQgfSBmcm9tICcuL3BhbmVsYmFyLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IFBhbmVsQmFySXRlbU1vZGVsIH0gZnJvbSAnLi9wYW5lbGJhci1pdGVtLW1vZGVsJztcbmltcG9ydCB7IFBhbmVsQmFyU2VydmljZSB9IGZyb20gXCIuL3BhbmVsYmFyLnNlcnZpY2VcIjtcbmltcG9ydCB7IFBhbmVsQmFySXRlbVRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSBcIi4vcGFuZWxiYXItaXRlbS10ZW1wbGF0ZS5kaXJlY3RpdmVcIjtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIFBhbmVsQmFyIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19wYW5lbGJhciAlfSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhbmVsQmFyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25DaGFuZ2VzLCBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZXhwYW5kIG1vZGUgb2YgdGhlIFBhbmVsQmFyIHRocm91Z2ggdGhlIGBQYW5lbEJhckV4cGFuZE1vZGVgIGVudW0gKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBleHBhbmRtb2Rlc19wYW5lbGJhciAlfSkpLlxuICAgICAqXG4gICAgICogVGhlIGF2YWlsYWJsZSBtb2RlcyBhcmU6XG4gICAgICogLSBgXCJzaW5nbGVcImAmbWRhc2g7RXhwYW5kcyBvbmx5IG9uZSBpdGVtIGF0IGEgdGltZS4gRXhwYW5kaW5nIGFuIGl0ZW0gY29sbGFwc2VzIHRoZSBpdGVtIHRoYXQgd2FzIHByZXZpb3VzbHkgZXhwYW5kZWQuXG4gICAgICogLSBgXCJtdWx0aXBsZVwiYCZtZGFzaDtUaGUgZGVmYXVsdCBtb2RlIG9mIHRoZSBQYW5lbEJhci5cbiAgICAgKiBFeHBhbmRzIG1vcmUgdGhhbiBvbmUgaXRlbSBhdCBhIHRpbWUuIEl0ZW1zIGNhbiBhbHNvIGJlIHRvZ2dsZWQuXG4gICAgICogLSBgXCJmdWxsXCJgJm1kYXNoO0V4cGFuZHMgb25seSBvbmUgaXRlbSBhdCBhIHRpbWUuXG4gICAgICogVGhlIGV4cGFuZGVkIGFyZWEgb2NjdXBpZXMgdGhlIGVudGlyZSBoZWlnaHQgb2YgdGhlIFBhbmVsQmFyLiBSZXF1aXJlcyB5b3UgdG8gc2V0IHRoZSBgaGVpZ2h0YCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBleHBhbmRNb2RlOiBQYW5lbEJhckV4cGFuZE1vZGU7XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRoZSBQYW5lbEJhciB0byBtb2RpZnkgdGhlIHNlbGVjdGVkIHN0YXRlIG9mIHRoZSBpdGVtcy5cbiAgICAgKi9cbiAgICBzZWxlY3RhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFuaW1hdGUgc3RhdGUgb2YgdGhlIFBhbmVsQmFyIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgYW5pbWF0aW9uc19wYW5lbGJhciAlfSkpLlxuICAgICAqL1xuICAgIGFuaW1hdGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBjb21wb25lbnQgd2hlbiB0aGUgYFwiZnVsbFwiYCBleHBhbmQgbW9kZSBpcyB1c2VkLlxuICAgICAqIFRoaXMgb3B0aW9uIGlzIGlnbm9yZWQgaW4gdGhlIGBcIm11bHRpcGxlXCJgIGFuZCBgXCJzaW5nbGVcImAgZXhwYW5kIG1vZGVzLlxuICAgICAqL1xuICAgIGhlaWdodDogYW55O1xuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIFBhbmVsQmFyIHJlbmRlcnMgdGhlIGNvbnRlbnQgb2YgYWxsIGl0ZW1zIGFuZCB0aGV5IGFyZSBwZXJzaXN0ZWQgaW4gdGhlIERPTVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgdGVtcGxhdGVzX3BhbmVsYmFyICV9I3RvYy1jb2xsZWN0aW9ucykpLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoaXMgb3B0aW9uIGlzIHNldCB0byBgZmFsc2VgLlxuICAgICAqL1xuICAgIGtlZXBJdGVtQ29udGVudDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBpdGVtcyBvZiB0aGUgUGFuZWxCYXIgYXMgYW4gYXJyYXkgb2YgYFBhbmVsQmFySXRlbU1vZGVsYCBpbnN0YW5jZXNcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGl0ZW1zX3BhbmVsYmFyICV9KSkuXG4gICAgICovXG4gICAgaXRlbXM6IEFycmF5PFBhbmVsQmFySXRlbU1vZGVsPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgaW50ZXJhY3RzIHdpdGggYSBQYW5lbEJhciBpdGVtXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyByb3V0aW5nX3BhbmVsYmFyICV9I3RvYy1nZXR0aW5nLXRoZS1zZWxlY3RlZC1pdGVtKSkuXG4gICAgICogVGhlIGV2ZW50IGRhdGEgY29udGFpbnMgYWxsIGl0ZW1zIHRoYXQgYXJlIG1vZGlmaWVkLlxuICAgICAqL1xuICAgIHN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0YWJJbmRleDogbnVtYmVyO1xuICAgIHJvbGU6IHN0cmluZztcbiAgICBhY3RpdmVEZXNjZW5kYW50OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgaG9zdEhlaWdodDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IG92ZXJmbG93OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZGlyOiBzdHJpbmc7XG4gICAgdGVtcGxhdGU6IFBhbmVsQmFySXRlbVRlbXBsYXRlRGlyZWN0aXZlO1xuICAgIGNvbnRlbnRJdGVtczogUXVlcnlMaXN0PFBhbmVsQmFySXRlbUNvbXBvbmVudD47XG4gICAgY29udGVudENoaWxkSXRlbXM6IFF1ZXJ5TGlzdDxQYW5lbEJhckl0ZW1Db21wb25lbnQ+O1xuICAgIHZpZXdDaGlsZEl0ZW1zOiBRdWVyeUxpc3Q8UGFuZWxCYXJJdGVtQ29tcG9uZW50PjtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbkNoYW5nZVN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGFsbEl0ZW1zO1xuICAgIHByaXZhdGUgY2hpbGRyZW5JdGVtcztcbiAgICBwcml2YXRlIGlzVmlld0luaXQ7XG4gICAgcHJpdmF0ZSBmb2N1c2VkO1xuICAgIHByaXZhdGUgX2l0ZW1zO1xuICAgIHByaXZhdGUgX2tlZXBJdGVtQ29udGVudDtcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBldmVudFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBrZXlCaW5kaW5ncztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBldmVudFNlcnZpY2U6IFBhbmVsQmFyU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaW52ZXJ0S2V5cyhvcmlnaW5hbDogYW55LCBpbnZlcnRlZDogYW55KTogYW55O1xuICAgIHJlYWRvbmx5IGNvbXB1dGVkS2V5czogT2JqZWN0O1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICByZWFkb25seSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Db21wb25lbnRDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Db21wb25lbnRGb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkNvbXBvbmVudEJsdXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25Db21wb25lbnRLZXlEb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdmlld0l0ZW1zO1xuICAgIHByaXZhdGUgdmFsaWRhdGVDb25maWd1cmF0aW9uO1xuICAgIHByaXZhdGUgdXBkYXRlQ2hpbGRyZW5IZWlnaHQ7XG4gICAgcHJpdmF0ZSBvbkl0ZW1BY3Rpb247XG4gICAgcmVhZG9ubHkgaG9zdENsYXNzZXM6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpc1Zpc2libGU7XG4gICAgcHJpdmF0ZSBnZXRWaXNpYmxlUGFyZW50O1xuICAgIHByaXZhdGUgZm9jdXNJdGVtO1xuICAgIHByaXZhdGUgbW92ZUZvY3VzO1xuICAgIHByaXZhdGUgZm9jdXNMYXN0SXRlbTtcbiAgICBwcml2YXRlIGZvY3VzRmlyc3RJdGVtO1xuICAgIHByaXZhdGUgZm9jdXNOZXh0SXRlbTtcbiAgICBwcml2YXRlIGZvY3VzUHJldmlvdXNJdGVtO1xuICAgIHByaXZhdGUgZXhwYW5kSXRlbTtcbiAgICBwcml2YXRlIGNvbGxhcHNlSXRlbTtcbiAgICBwcml2YXRlIHNlbGVjdEZvY3VzZWRJdGVtO1xuICAgIHByaXZhdGUgdmlzaWJsZUl0ZW1zO1xuICAgIHByaXZhdGUgZmxhdFZpc2libGVJdGVtcztcbn1cbiJdfQ==