/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef, QueryList, AfterContentChecked, AfterViewChecked, OnDestroy, ElementRef } from '@angular/core';
import { PanelBarService } from "./panelbar.service";
import { PanelBarContentDirective } from "./panelbar-content.directive";
import { PanelBarItemTitleDirective } from "./panelbar-item-title.directive";
import { PanelBarItemModel } from './panelbar-item-model';
import { Subscription } from 'rxjs';
/**
 * Represents the items of the PanelBar.
 */
import * as ɵngcc0 from '@angular/core';
export declare class PanelBarItemComponent implements AfterContentChecked, AfterViewChecked, OnDestroy {
    parent: PanelBarItemComponent;
    private eventService;
    private element;
    /**
     * Sets the title of the PanelBar item ([see example]({% slug items_panelbar %}#toc-titles)).
     */
    title: string;
    /**
     * Allows the component to set the `"id"` property to each item.
     * Used to set the `id` attributes of the nested elements and to enable the WAI-ARIA support.
     */
    id: string;
    /**
     * Defines the icon that will be rendered next to the title ([see example]({% slug items_panelbar %}#toc-title-icons)).
     */
    icon: string;
    /**
     * Defines  the icon that will be rendered next to the title by using a custom CSS class
     * ([see example]({% slug items_panelbar %}#toc-title-icons)).
     */
    iconClass: string;
    /**
     * Defines the location of the image that will be displayed next to the title
     * ([see example]({% slug items_panelbar %}#toc-title-images)).
     */
    imageUrl: string;
    /**
     * When set to `true`, disables a PanelBar item ([see example]({% slug items_panelbar %}#toc-disabled-state)).
     */
    disabled: boolean;
    /**
     * When set to `true`, expands the PanelBar item ([see example]({% slug items_panelbar %}#toc-expanded-state)).
     */
    expanded: boolean;
    /**
     * Sets the selected state of a PanelBar item ([see example]({% slug items_panelbar %}#toc-selected-state)).
     */
    selected: boolean;
    /**
     * Sets the content of the PanelBar item.
     * By design, it is used when the
     * [`items`]({% slug api_layout_panelbarcomponent %}#toc-items)
     * property of the PanelBar is set.
     */
    content: any;
    /**
     * @hidden
     */
    items: Array<PanelBarItemModel>;
    /**
     * @hidden
     */
    template: TemplateRef<any>;
    header: ElementRef;
    contentWrapper: ElementRef;
    contentHeight: string;
    contentOverflow: string;
    keepContent: boolean;
    childrenItems: Array<PanelBarItemComponent>;
    hasChildItems: boolean;
    hasItems: boolean;
    hasContent: boolean;
    state: string;
    readonly animate: boolean;
    role: string;
    titleAttribute: string;
    readonly kItemClass: boolean;
    readonly kStateDefaultClass: boolean;
    readonly kStateDisabledClass: boolean;
    readonly kStateExpandedClass: boolean;
    readonly itemId: string;
    readonly ariaExpanded: boolean;
    readonly ariaSelected: boolean;
    readonly ariaDisabled: boolean;
    /**
     * @hidden
     */
    readonly titleTemplate: TemplateRef<any>;
    viewChildItems: QueryList<PanelBarItemComponent>;
    contentItems: QueryList<PanelBarItemComponent>;
    contentTemplate: QueryList<PanelBarContentDirective>;
    titleTemplates: QueryList<PanelBarItemTitleDirective>;
    focused: boolean;
    wrapperFocused: boolean;
    protected subscriptions: Subscription;
    private _expanded;
    constructor(parent: PanelBarItemComponent, eventService: PanelBarService, element: ElementRef);
    /**
     * @hidden
     */
    headerHeight(): number;
    /**
     * @hidden
     */
    ngAfterContentChecked(): void;
    /**
     * @hidden
     */
    ngAfterViewChecked(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    onItemAction(): void;
    /**
     * @hidden
     */
    onItemClick(e: any): void;
    /**
     * @hidden
     */
    readonly iconClasses: any;
    /**
     * @hidden
     */
    serialize(): PanelBarItemModel;
    /**
     * @hidden
     */
    subTreeViewItems(): Array<PanelBarItemComponent>;
    /**
     * @hidden
     */
    validateConfiguration(): void;
    /**
     * @hidden
     */
    toggleAnimationState(value: boolean): void;
    /**
     * @hidden
     */
    toggleExpandedChildAnimations(value: boolean): void;
    private onWrapperFocusChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PanelBarItemComponent, [{ optional: true; host: true; skipSelf: true; }, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<PanelBarItemComponent, "kendo-panelbar-item", ["kendoPanelbarItem"], { "title": "title"; "id": "id"; "icon": "icon"; "iconClass": "iconClass"; "imageUrl": "imageUrl"; "disabled": "disabled"; "selected": "selected"; "expanded": "expanded"; "content": "content"; "items": "items"; "template": "template"; }, {}, ["contentItems", "contentTemplate", "titleTemplates"], ["kendo-panelbar-item"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWxiYXItaXRlbS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsicGFuZWxiYXItaXRlbS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFRlbXBsYXRlUmVmLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFuZWxCYXJTZXJ2aWNlIH0gZnJvbSBcIi4vcGFuZWxiYXIuc2VydmljZVwiO1xuaW1wb3J0IHsgUGFuZWxCYXJDb250ZW50RGlyZWN0aXZlIH0gZnJvbSBcIi4vcGFuZWxiYXItY29udGVudC5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFBhbmVsQmFySXRlbVRpdGxlRGlyZWN0aXZlIH0gZnJvbSBcIi4vcGFuZWxiYXItaXRlbS10aXRsZS5kaXJlY3RpdmVcIjtcbmltcG9ydCB7IFBhbmVsQmFySXRlbU1vZGVsIH0gZnJvbSAnLi9wYW5lbGJhci1pdGVtLW1vZGVsJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBpdGVtcyBvZiB0aGUgUGFuZWxCYXIuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFBhbmVsQmFySXRlbUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgcGFyZW50OiBQYW5lbEJhckl0ZW1Db21wb25lbnQ7XG4gICAgcHJpdmF0ZSBldmVudFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRpdGxlIG9mIHRoZSBQYW5lbEJhciBpdGVtIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgaXRlbXNfcGFuZWxiYXIgJX0jdG9jLXRpdGxlcykpLlxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQWxsb3dzIHRoZSBjb21wb25lbnQgdG8gc2V0IHRoZSBgXCJpZFwiYCBwcm9wZXJ0eSB0byBlYWNoIGl0ZW0uXG4gICAgICogVXNlZCB0byBzZXQgdGhlIGBpZGAgYXR0cmlidXRlcyBvZiB0aGUgbmVzdGVkIGVsZW1lbnRzIGFuZCB0byBlbmFibGUgdGhlIFdBSS1BUklBIHN1cHBvcnQuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpY29uIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBuZXh0IHRvIHRoZSB0aXRsZSAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGl0ZW1zX3BhbmVsYmFyICV9I3RvYy10aXRsZS1pY29ucykpLlxuICAgICAqL1xuICAgIGljb246IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzICB0aGUgaWNvbiB0aGF0IHdpbGwgYmUgcmVuZGVyZWQgbmV4dCB0byB0aGUgdGl0bGUgYnkgdXNpbmcgYSBjdXN0b20gQ1NTIGNsYXNzXG4gICAgICogKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBpdGVtc19wYW5lbGJhciAlfSN0b2MtdGl0bGUtaWNvbnMpKS5cbiAgICAgKi9cbiAgICBpY29uQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBsb2NhdGlvbiBvZiB0aGUgaW1hZ2UgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBuZXh0IHRvIHRoZSB0aXRsZVxuICAgICAqIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgaXRlbXNfcGFuZWxiYXIgJX0jdG9jLXRpdGxlLWltYWdlcykpLlxuICAgICAqL1xuICAgIGltYWdlVXJsOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYHRydWVgLCBkaXNhYmxlcyBhIFBhbmVsQmFyIGl0ZW0gKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBpdGVtc19wYW5lbGJhciAlfSN0b2MtZGlzYWJsZWQtc3RhdGUpKS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGV4cGFuZHMgdGhlIFBhbmVsQmFyIGl0ZW0gKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBpdGVtc19wYW5lbGJhciAlfSN0b2MtZXhwYW5kZWQtc3RhdGUpKS5cbiAgICAgKi9cbiAgICBleHBhbmRlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzZWxlY3RlZCBzdGF0ZSBvZiBhIFBhbmVsQmFyIGl0ZW0gKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBpdGVtc19wYW5lbGJhciAlfSN0b2Mtc2VsZWN0ZWQtc3RhdGUpKS5cbiAgICAgKi9cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjb250ZW50IG9mIHRoZSBQYW5lbEJhciBpdGVtLlxuICAgICAqIEJ5IGRlc2lnbiwgaXQgaXMgdXNlZCB3aGVuIHRoZVxuICAgICAqIFtgaXRlbXNgXSh7JSBzbHVnIGFwaV9sYXlvdXRfcGFuZWxiYXJjb21wb25lbnQgJX0jdG9jLWl0ZW1zKVxuICAgICAqIHByb3BlcnR5IG9mIHRoZSBQYW5lbEJhciBpcyBzZXQuXG4gICAgICovXG4gICAgY29udGVudDogYW55O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpdGVtczogQXJyYXk8UGFuZWxCYXJJdGVtTW9kZWw+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBoZWFkZXI6IEVsZW1lbnRSZWY7XG4gICAgY29udGVudFdyYXBwZXI6IEVsZW1lbnRSZWY7XG4gICAgY29udGVudEhlaWdodDogc3RyaW5nO1xuICAgIGNvbnRlbnRPdmVyZmxvdzogc3RyaW5nO1xuICAgIGtlZXBDb250ZW50OiBib29sZWFuO1xuICAgIGNoaWxkcmVuSXRlbXM6IEFycmF5PFBhbmVsQmFySXRlbUNvbXBvbmVudD47XG4gICAgaGFzQ2hpbGRJdGVtczogYm9vbGVhbjtcbiAgICBoYXNJdGVtczogYm9vbGVhbjtcbiAgICBoYXNDb250ZW50OiBib29sZWFuO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYW5pbWF0ZTogYm9vbGVhbjtcbiAgICByb2xlOiBzdHJpbmc7XG4gICAgdGl0bGVBdHRyaWJ1dGU6IHN0cmluZztcbiAgICByZWFkb25seSBrSXRlbUNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGtTdGF0ZURlZmF1bHRDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBrU3RhdGVEaXNhYmxlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGtTdGF0ZUV4cGFuZGVkQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgaXRlbUlkOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYXJpYUV4cGFuZGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGFyaWFTZWxlY3RlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBhcmlhRGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHRpdGxlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdmlld0NoaWxkSXRlbXM6IFF1ZXJ5TGlzdDxQYW5lbEJhckl0ZW1Db21wb25lbnQ+O1xuICAgIGNvbnRlbnRJdGVtczogUXVlcnlMaXN0PFBhbmVsQmFySXRlbUNvbXBvbmVudD47XG4gICAgY29udGVudFRlbXBsYXRlOiBRdWVyeUxpc3Q8UGFuZWxCYXJDb250ZW50RGlyZWN0aXZlPjtcbiAgICB0aXRsZVRlbXBsYXRlczogUXVlcnlMaXN0PFBhbmVsQmFySXRlbVRpdGxlRGlyZWN0aXZlPjtcbiAgICBmb2N1c2VkOiBib29sZWFuO1xuICAgIHdyYXBwZXJGb2N1c2VkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBfZXhwYW5kZWQ7XG4gICAgY29uc3RydWN0b3IocGFyZW50OiBQYW5lbEJhckl0ZW1Db21wb25lbnQsIGV2ZW50U2VydmljZTogUGFuZWxCYXJTZXJ2aWNlLCBlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGVhZGVySGVpZ2h0KCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkl0ZW1BY3Rpb24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25JdGVtQ2xpY2soZTogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaWNvbkNsYXNzZXM6IGFueTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2VyaWFsaXplKCk6IFBhbmVsQmFySXRlbU1vZGVsO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzdWJUcmVlVmlld0l0ZW1zKCk6IEFycmF5PFBhbmVsQmFySXRlbUNvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHZhbGlkYXRlQ29uZmlndXJhdGlvbigpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0b2dnbGVBbmltYXRpb25TdGF0ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRvZ2dsZUV4cGFuZGVkQ2hpbGRBbmltYXRpb25zKHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICBwcml2YXRlIG9uV3JhcHBlckZvY3VzQ2hhbmdlO1xufVxuIl19