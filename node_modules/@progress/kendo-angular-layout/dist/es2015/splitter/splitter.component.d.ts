/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, AfterContentInit, QueryList } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Orientation } from '../common/orientation';
import { SplitterPaneComponent } from './splitter-pane.component';
import { SplitterService } from './splitter.service';
/**
 * Represents the [Kendo UI Splitter component for Angular]({% slug overview_splitter %}).
 *
 * ```ts-preview
 *
 *  @Component({
 *    selector: 'my-app',
 *    template: `
 *        <kendo-splitter style="height: 280px;">
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / left pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane>
 *            <h3>Inner splitter / center pane</h3>
 *            <p>Resizable only.</p>
 *          </kendo-splitter-pane>
 *
 *          <kendo-splitter-pane [collapsible]="true" size="30%">
 *            <h3>Inner splitter / right pane</h3>
 *            <p>Resizable and collapsible.</p>
 *          </kendo-splitter-pane>
 *
 *        </kendo-splitter>
 *      `,
 *    styles: [ `
 *        h3 { font-size: 1.2em; }
 *        h3, p { margin: 10px; padding: 0; }
 *    ` ]
 *  })
 *  class AppComponent {}
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class SplitterComponent implements AfterContentInit {
    protected element: ElementRef;
    protected splitterService: SplitterService;
    private localization;
    /**
     * Specifies the orientation of the panes within the Splitter.
     * Panes in a horizontal Splitter are placed horizontally.
     * Panes in a vertical Splitter are placed vertically.
     */
    orientation: Orientation;
    /**
     * Fires after a Splitter pane is resized or collapsed.
     * Useful for triggering layout calculations on components
     * which are positioned inside the panes.
     */
    layoutChange: EventEmitter<string>;
    readonly hostClasses: boolean;
    readonly horizontalHostClasses: boolean;
    readonly verticalHostClasses: boolean;
    readonly dir: string;
    ariaRole: string;
    /**
     * @hidden
     */
    panes: QueryList<SplitterPaneComponent>;
    private paneChangesSubscription;
    constructor(element: ElementRef, splitterService: SplitterService, localization: LocalizationService, enclosingPane?: SplitterPaneComponent);
    ngAfterContentInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    private reconfigure;
    private unsubscribeChanges;
    private configure;
    private readonly direction;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SplitterComponent, [null, null, null, { optional: true; host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SplitterComponent, "kendo-splitter", ["kendoSplitter"], { "orientation": "orientation"; }, { "layoutChange": "layoutChange"; }, ["panes"], ["kendo-splitter-pane"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInNwbGl0dGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBBZnRlckNvbnRlbnRJbml0LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IE9yaWVudGF0aW9uIH0gZnJvbSAnLi4vY29tbW9uL29yaWVudGF0aW9uJztcbmltcG9ydCB7IFNwbGl0dGVyUGFuZUNvbXBvbmVudCB9IGZyb20gJy4vc3BsaXR0ZXItcGFuZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgU3BsaXR0ZXJTZXJ2aWNlIH0gZnJvbSAnLi9zcGxpdHRlci5zZXJ2aWNlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW0tlbmRvIFVJIFNwbGl0dGVyIGNvbXBvbmVudCBmb3IgQW5ndWxhcl0oeyUgc2x1ZyBvdmVydmlld19zcGxpdHRlciAlfSkuXG4gKlxuICogYGBgdHMtcHJldmlld1xuICpcbiAqICBAQ29tcG9uZW50KHtcbiAqICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAqICAgIHRlbXBsYXRlOiBgXG4gKiAgICAgICAgPGtlbmRvLXNwbGl0dGVyIHN0eWxlPVwiaGVpZ2h0OiAyODBweDtcIj5cbiAqXG4gKiAgICAgICAgICA8a2VuZG8tc3BsaXR0ZXItcGFuZSBbY29sbGFwc2libGVdPVwidHJ1ZVwiIHNpemU9XCIzMCVcIj5cbiAqICAgICAgICAgICAgPGgzPklubmVyIHNwbGl0dGVyIC8gbGVmdCBwYW5lPC9oMz5cbiAqICAgICAgICAgICAgPHA+UmVzaXphYmxlIGFuZCBjb2xsYXBzaWJsZS48L3A+XG4gKiAgICAgICAgICA8L2tlbmRvLXNwbGl0dGVyLXBhbmU+XG4gKlxuICogICAgICAgICAgPGtlbmRvLXNwbGl0dGVyLXBhbmU+XG4gKiAgICAgICAgICAgIDxoMz5Jbm5lciBzcGxpdHRlciAvIGNlbnRlciBwYW5lPC9oMz5cbiAqICAgICAgICAgICAgPHA+UmVzaXphYmxlIG9ubHkuPC9wPlxuICogICAgICAgICAgPC9rZW5kby1zcGxpdHRlci1wYW5lPlxuICpcbiAqICAgICAgICAgIDxrZW5kby1zcGxpdHRlci1wYW5lIFtjb2xsYXBzaWJsZV09XCJ0cnVlXCIgc2l6ZT1cIjMwJVwiPlxuICogICAgICAgICAgICA8aDM+SW5uZXIgc3BsaXR0ZXIgLyByaWdodCBwYW5lPC9oMz5cbiAqICAgICAgICAgICAgPHA+UmVzaXphYmxlIGFuZCBjb2xsYXBzaWJsZS48L3A+XG4gKiAgICAgICAgICA8L2tlbmRvLXNwbGl0dGVyLXBhbmU+XG4gKlxuICogICAgICAgIDwva2VuZG8tc3BsaXR0ZXI+XG4gKiAgICAgIGAsXG4gKiAgICBzdHlsZXM6IFsgYFxuICogICAgICAgIGgzIHsgZm9udC1zaXplOiAxLjJlbTsgfVxuICogICAgICAgIGgzLCBwIHsgbWFyZ2luOiAxMHB4OyBwYWRkaW5nOiAwOyB9XG4gKiAgICBgIF1cbiAqICB9KVxuICogIGNsYXNzIEFwcENvbXBvbmVudCB7fVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNwbGl0dGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJvdGVjdGVkIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIHNwbGl0dGVyU2VydmljZTogU3BsaXR0ZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgbG9jYWxpemF0aW9uO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHBhbmVzIHdpdGhpbiB0aGUgU3BsaXR0ZXIuXG4gICAgICogUGFuZXMgaW4gYSBob3Jpem9udGFsIFNwbGl0dGVyIGFyZSBwbGFjZWQgaG9yaXpvbnRhbGx5LlxuICAgICAqIFBhbmVzIGluIGEgdmVydGljYWwgU3BsaXR0ZXIgYXJlIHBsYWNlZCB2ZXJ0aWNhbGx5LlxuICAgICAqL1xuICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBhZnRlciBhIFNwbGl0dGVyIHBhbmUgaXMgcmVzaXplZCBvciBjb2xsYXBzZWQuXG4gICAgICogVXNlZnVsIGZvciB0cmlnZ2VyaW5nIGxheW91dCBjYWxjdWxhdGlvbnMgb24gY29tcG9uZW50c1xuICAgICAqIHdoaWNoIGFyZSBwb3NpdGlvbmVkIGluc2lkZSB0aGUgcGFuZXMuXG4gICAgICovXG4gICAgbGF5b3V0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICByZWFkb25seSBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICByZWFkb25seSBob3Jpem9udGFsSG9zdENsYXNzZXM6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdmVydGljYWxIb3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXI6IHN0cmluZztcbiAgICBhcmlhUm9sZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwYW5lczogUXVlcnlMaXN0PFNwbGl0dGVyUGFuZUNvbXBvbmVudD47XG4gICAgcHJpdmF0ZSBwYW5lQ2hhbmdlc1N1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBzcGxpdHRlclNlcnZpY2U6IFNwbGl0dGVyU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBlbmNsb3NpbmdQYW5lPzogU3BsaXR0ZXJQYW5lQ29tcG9uZW50KTtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBhbnkpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZWNvbmZpZ3VyZTtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlQ2hhbmdlcztcbiAgICBwcml2YXRlIGNvbmZpZ3VyZTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRpcmVjdGlvbjtcbn1cbiJdfQ==