/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, ElementRef, EventEmitter, Renderer2, AfterViewChecked } from '@angular/core';
import { Orientation } from '../common/orientation';
/**
 * Represents the pane component of the Splitter.
 */
import * as ɵngcc0 from '@angular/core';
export declare class SplitterPaneComponent implements AfterViewChecked {
    private element;
    private renderer;
    private cdr;
    /**
     * @hidden
     */
    order: number;
    /**
     * Sets the initial size of the pane.
     * Has to be between the `min` and `max` properties.
     */
    size: string;
    /**
     * Sets the minimum possible size of the pane.
     */
    min: string;
    /**
     * Sets the maximum possible size of the pane.
     */
    max: string;
    /**
     * Specifies if the user is allowed to resize the pane and provide space for other panes.
     */
    resizable: boolean;
    /**
     * Specifies if the user is allowed to hide the pane and provide space for other panes.
     */
    collapsible: boolean;
    /**
     * Specifies if overflowing content is scrollable or hidden.
     */
    scrollable: boolean;
    /**
     * Specifies if the pane is initially collapsed.
     */
    collapsed: boolean;
    /**
     * @hidden
     */
    orientation: Orientation;
    /**
     * @hidden
     */
    containsSplitter: boolean;
    /**
     * @hidden
     */
    overlayContent: boolean;
    /**
     * Fires each time the user resizes the Splitter pane.
     * The event data contains the new pane size.
     * Allows a two-way binding of the pane `size` property.
     */
    sizeChange: EventEmitter<string>;
    /**
     * Fires each time the `collapsed` property changes.
     * The event data contains the new property state.
     * Allows a two-way binding of the `collapsed` pane property.
     */
    collapsedChange: EventEmitter<boolean>;
    readonly isHidden: boolean;
    readonly styleDisplayFlex: boolean;
    hostClass: boolean;
    readonly staticPaneClass: boolean;
    readonly scrollablePaneClass: boolean;
    readonly fixedSize: boolean;
    /**
     * @hidden
     */
    forceExpand: boolean;
    private _size;
    private _order;
    constructor(element: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef);
    ngAfterViewChecked(): void;
    /**
     * @hidden
     */
    readonly computedSize: number;
    /**
     * @hidden
     */
    toggleOverlay(show: boolean): void;
    /**
     * @hidden
     */
    detectChanges(): void;
    /**
     * @hidden
     */
    private setOrderStyles;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SplitterPaneComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SplitterPaneComponent, "kendo-splitter-pane", ["kendoSplitterPane"], { "resizable": "resizable"; "collapsible": "collapsible"; "scrollable": "scrollable"; "collapsed": "collapsed"; "orientation": "orientation"; "containsSplitter": "containsSplitter"; "overlayContent": "overlayContent"; "order": "order"; "size": "size"; "min": "min"; "max": "max"; }, { "sizeChange": "sizeChange"; "collapsedChange": "collapsedChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsaXR0ZXItcGFuZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3BsaXR0ZXItcGFuZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXIyLCBBZnRlclZpZXdDaGVja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gJy4uL2NvbW1vbi9vcmllbnRhdGlvbic7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHBhbmUgY29tcG9uZW50IG9mIHRoZSBTcGxpdHRlci5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3BsaXR0ZXJQYW5lQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gICAgcHJpdmF0ZSBlbGVtZW50O1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9yZGVyOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5pdGlhbCBzaXplIG9mIHRoZSBwYW5lLlxuICAgICAqIEhhcyB0byBiZSBiZXR3ZWVuIHRoZSBgbWluYCBhbmQgYG1heGAgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICBzaXplOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWluaW11bSBwb3NzaWJsZSBzaXplIG9mIHRoZSBwYW5lLlxuICAgICAqL1xuICAgIG1pbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1heGltdW0gcG9zc2libGUgc2l6ZSBvZiB0aGUgcGFuZS5cbiAgICAgKi9cbiAgICBtYXg6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIHVzZXIgaXMgYWxsb3dlZCB0byByZXNpemUgdGhlIHBhbmUgYW5kIHByb3ZpZGUgc3BhY2UgZm9yIG90aGVyIHBhbmVzLlxuICAgICAqL1xuICAgIHJlc2l6YWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIHVzZXIgaXMgYWxsb3dlZCB0byBoaWRlIHRoZSBwYW5lIGFuZCBwcm92aWRlIHNwYWNlIGZvciBvdGhlciBwYW5lcy5cbiAgICAgKi9cbiAgICBjb2xsYXBzaWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgb3ZlcmZsb3dpbmcgY29udGVudCBpcyBzY3JvbGxhYmxlIG9yIGhpZGRlbi5cbiAgICAgKi9cbiAgICBzY3JvbGxhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBpZiB0aGUgcGFuZSBpcyBpbml0aWFsbHkgY29sbGFwc2VkLlxuICAgICAqL1xuICAgIGNvbGxhcHNlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb250YWluc1NwbGl0dGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvdmVybGF5Q29udGVudDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgcmVzaXplcyB0aGUgU3BsaXR0ZXIgcGFuZS5cbiAgICAgKiBUaGUgZXZlbnQgZGF0YSBjb250YWlucyB0aGUgbmV3IHBhbmUgc2l6ZS5cbiAgICAgKiBBbGxvd3MgYSB0d28td2F5IGJpbmRpbmcgb2YgdGhlIHBhbmUgYHNpemVgIHByb3BlcnR5LlxuICAgICAqL1xuICAgIHNpemVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgYGNvbGxhcHNlZGAgcHJvcGVydHkgY2hhbmdlcy5cbiAgICAgKiBUaGUgZXZlbnQgZGF0YSBjb250YWlucyB0aGUgbmV3IHByb3BlcnR5IHN0YXRlLlxuICAgICAqIEFsbG93cyBhIHR3by13YXkgYmluZGluZyBvZiB0aGUgYGNvbGxhcHNlZGAgcGFuZSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBjb2xsYXBzZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFkb25seSBpc0hpZGRlbjogYm9vbGVhbjtcbiAgICByZWFkb25seSBzdHlsZURpc3BsYXlGbGV4OiBib29sZWFuO1xuICAgIGhvc3RDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBzdGF0aWNQYW5lQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc2Nyb2xsYWJsZVBhbmVDbGFzczogYm9vbGVhbjtcbiAgICByZWFkb25seSBmaXhlZFNpemU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvcmNlRXhwYW5kOiBib29sZWFuO1xuICAgIHByaXZhdGUgX3NpemU7XG4gICAgcHJpdmF0ZSBfb3JkZXI7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGNvbXB1dGVkU2l6ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0b2dnbGVPdmVybGF5KHNob3c6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkZXRlY3RDaGFuZ2VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0T3JkZXJTdHlsZXM7XG59XG4iXX0=