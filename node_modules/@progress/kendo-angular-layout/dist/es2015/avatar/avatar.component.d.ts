/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, Renderer2, ElementRef, AfterViewInit } from '@angular/core';
import { AvatarFill } from './models/fill';
import { Shape } from './models/shape';
import { AvatarSize } from './models/size';
import { AvatarThemeColor } from './models/theme-color';
/**
 * Displays images, icons or initials representing people or other entities.
 */
import * as ɵngcc0 from '@angular/core';
export declare class AvatarComponent implements OnInit, AfterViewInit {
    private renderer;
    private element;
    hostClass: boolean;
    /**
     * @hidden
     */
    readonly solidClass: boolean;
    /**
     * @hidden
     */
    readonly outlineClass: boolean;
    /**
     * @hidden
     */
    readonly borderClass: boolean;
    /**
     * @hidden
     */
    readonly flexBasis: string;
    /**
     * Sets the shape for the avatar.
     *
     * Possible values are:
     * * (Default) `square`
     * * `circle`
     * * `rectangle`
     * * `rounded`
     *
     */
    shape: Shape;
    /**
     * Specifies the size of the avatar
     * ([see example]({% slug appearance_avatar %}#toc-size)).
     *
     * The possible values are:
     * * `small`
     * * `medium` (Default)
     * * `large`
     *
     */
    size: AvatarSize;
    /**
     * Specifies the theme color of the avatar.
     * The theme color will be applied as background and border color, while also amending the text color accordingly.
     *
     * The possible values are:
     * * `primary` (Default)&mdash;Applies coloring based on primary theme color.
     * * `secondary`&mdash;Applies coloring based on secondary theme color.
     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.
     * * `inherit`&mdash; Applies inherited coloring value.
     * * `info`&mdash;Applies coloring based on info theme color.
     * * `success`&mdash; Applies coloring based on success theme color.
     * * `warning`&mdash; Applies coloring based on warning theme color.
     * * `error`&mdash; Applies coloring based on error theme color.
     * * `dark`&mdash; Applies coloring based on dark theme color.
     * * `light`&mdash; Applies coloring based on light theme color.
     * * `inverse`&mdash; Applies coloring based on inverted theme color.
     *
     */
    themeColor: AvatarThemeColor;
    /**
     * Specifies the appearance fill style of the avatar.
     *
     * The possible values are:
     * * `solid` (Default)
     * * `outline`
     *
     */
    fill: AvatarFill;
    /**
     * Sets a border to the avatar.
     */
    border: boolean;
    /**
     * Defines a CSS class — or multiple classes separated by spaces —
     * which are applied to a span element inside the avatar.
     * Allows the usage of custom icons.
     */
    iconClass: string;
    /**
     * Sets the width of the avatar.
     */
    width: string;
    /**
     * @hidden
     */
    readonly avatarWidth: string;
    /**
     * Sets the height of the avatar.
     */
    height: string;
    /**
     * @hidden
     */
    readonly avatarHeight: string;
    /**
     * The CSS styles that will be rendered on the content element of the avatar.
     * Supports the type of values that are supported by [`ngStyle`]({{ site.data.urls.angular['ngstyleapi'] }}).
     */
    cssStyle?: any;
    /**
     * Sets `initials` to the avatar.
     */
    initials: string;
    /**
     * Sets the `icon` for the avatar.
     * All [Kendo UI Icons]({% slug icons %}#toc-list-of-font-icons) are supported.
     */
    icon: string;
    /**
     * Sets the `image` source of the avatar.
     */
    imageSrc: string;
    private _themeColor;
    private _size;
    private _shape;
    private avatar;
    constructor(renderer: Renderer2, element: ElementRef);
    ngAfterViewInit(): void;
    /**
     * @hidden
     */
    readonly imageUrl: string;
    ngOnInit(): void;
    /**
     * @hidden
     */
    iconClasses(): string;
    /**
     * @hidden
     */
    readonly customAvatar: boolean;
    private verifyProperties;
    private setAvatarClasses;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvatarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvatarComponent, "kendo-avatar", never, { "fill": "fill"; "border": "border"; "shape": "shape"; "size": "size"; "themeColor": "themeColor"; "iconClass": "iconClass"; "width": "width"; "height": "height"; "cssStyle": "cssStyle"; "initials": "initials"; "icon": "icon"; "imageSrc": "imageSrc"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdmF0YXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXZhdGFyRmlsbCB9IGZyb20gJy4vbW9kZWxzL2ZpbGwnO1xuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuL21vZGVscy9zaGFwZSc7XG5pbXBvcnQgeyBBdmF0YXJTaXplIH0gZnJvbSAnLi9tb2RlbHMvc2l6ZSc7XG5pbXBvcnQgeyBBdmF0YXJUaGVtZUNvbG9yIH0gZnJvbSAnLi9tb2RlbHMvdGhlbWUtY29sb3InO1xuLyoqXG4gKiBEaXNwbGF5cyBpbWFnZXMsIGljb25zIG9yIGluaXRpYWxzIHJlcHJlc2VudGluZyBwZW9wbGUgb3Igb3RoZXIgZW50aXRpZXMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2YXRhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGVsZW1lbnQ7XG4gICAgaG9zdENsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBzb2xpZENsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBvdXRsaW5lQ2xhc3M6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGJvcmRlckNsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBmbGV4QmFzaXM6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzaGFwZSBmb3IgdGhlIGF2YXRhci5cbiAgICAgKlxuICAgICAqIFBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICogKiAoRGVmYXVsdCkgYHNxdWFyZWBcbiAgICAgKiAqIGBjaXJjbGVgXG4gICAgICogKiBgcmVjdGFuZ2xlYFxuICAgICAqICogYHJvdW5kZWRgXG4gICAgICpcbiAgICAgKi9cbiAgICBzaGFwZTogU2hhcGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBzaXplIG9mIHRoZSBhdmF0YXJcbiAgICAgKiAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGFwcGVhcmFuY2VfYXZhdGFyICV9I3RvYy1zaXplKSkuXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAqIGBzbWFsbGBcbiAgICAgKiAqIGBtZWRpdW1gIChEZWZhdWx0KVxuICAgICAqICogYGxhcmdlYFxuICAgICAqXG4gICAgICovXG4gICAgc2l6ZTogQXZhdGFyU2l6ZTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHRoZW1lIGNvbG9yIG9mIHRoZSBhdmF0YXIuXG4gICAgICogVGhlIHRoZW1lIGNvbG9yIHdpbGwgYmUgYXBwbGllZCBhcyBiYWNrZ3JvdW5kIGFuZCBib3JkZXIgY29sb3IsIHdoaWxlIGFsc28gYW1lbmRpbmcgdGhlIHRleHQgY29sb3IgYWNjb3JkaW5nbHkuXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAqIGBwcmltYXJ5YCAoRGVmYXVsdCkmbWRhc2g7QXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiBwcmltYXJ5IHRoZW1lIGNvbG9yLlxuICAgICAqICogYHNlY29uZGFyeWAmbWRhc2g7QXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiBzZWNvbmRhcnkgdGhlbWUgY29sb3IuXG4gICAgICogKiBgdGVydGlhcnlgJm1kYXNoOyBBcHBsaWVzIGNvbG9yaW5nIGJhc2VkIG9uIHRlcnRpYXJ5IHRoZW1lIGNvbG9yLlxuICAgICAqICogYGluaGVyaXRgJm1kYXNoOyBBcHBsaWVzIGluaGVyaXRlZCBjb2xvcmluZyB2YWx1ZS5cbiAgICAgKiAqIGBpbmZvYCZtZGFzaDtBcHBsaWVzIGNvbG9yaW5nIGJhc2VkIG9uIGluZm8gdGhlbWUgY29sb3IuXG4gICAgICogKiBgc3VjY2Vzc2AmbWRhc2g7IEFwcGxpZXMgY29sb3JpbmcgYmFzZWQgb24gc3VjY2VzcyB0aGVtZSBjb2xvci5cbiAgICAgKiAqIGB3YXJuaW5nYCZtZGFzaDsgQXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiB3YXJuaW5nIHRoZW1lIGNvbG9yLlxuICAgICAqICogYGVycm9yYCZtZGFzaDsgQXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiBlcnJvciB0aGVtZSBjb2xvci5cbiAgICAgKiAqIGBkYXJrYCZtZGFzaDsgQXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiBkYXJrIHRoZW1lIGNvbG9yLlxuICAgICAqICogYGxpZ2h0YCZtZGFzaDsgQXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiBsaWdodCB0aGVtZSBjb2xvci5cbiAgICAgKiAqIGBpbnZlcnNlYCZtZGFzaDsgQXBwbGllcyBjb2xvcmluZyBiYXNlZCBvbiBpbnZlcnRlZCB0aGVtZSBjb2xvci5cbiAgICAgKlxuICAgICAqL1xuICAgIHRoZW1lQ29sb3I6IEF2YXRhclRoZW1lQ29sb3I7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBhcHBlYXJhbmNlIGZpbGwgc3R5bGUgb2YgdGhlIGF2YXRhci5cbiAgICAgKlxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgYXJlOlxuICAgICAqICogYHNvbGlkYCAoRGVmYXVsdClcbiAgICAgKiAqIGBvdXRsaW5lYFxuICAgICAqXG4gICAgICovXG4gICAgZmlsbDogQXZhdGFyRmlsbDtcbiAgICAvKipcbiAgICAgKiBTZXRzIGEgYm9yZGVyIHRvIHRoZSBhdmF0YXIuXG4gICAgICovXG4gICAgYm9yZGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgYSBDU1MgY2xhc3Mg4oCUIG9yIG11bHRpcGxlIGNsYXNzZXMgc2VwYXJhdGVkIGJ5IHNwYWNlcyDigJRcbiAgICAgKiB3aGljaCBhcmUgYXBwbGllZCB0byBhIHNwYW4gZWxlbWVudCBpbnNpZGUgdGhlIGF2YXRhci5cbiAgICAgKiBBbGxvd3MgdGhlIHVzYWdlIG9mIGN1c3RvbSBpY29ucy5cbiAgICAgKi9cbiAgICBpY29uQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB3aWR0aCBvZiB0aGUgYXZhdGFyLlxuICAgICAqL1xuICAgIHdpZHRoOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF2YXRhcldpZHRoOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBhdmF0YXIuXG4gICAgICovXG4gICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGF2YXRhckhlaWdodDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBDU1Mgc3R5bGVzIHRoYXQgd2lsbCBiZSByZW5kZXJlZCBvbiB0aGUgY29udGVudCBlbGVtZW50IG9mIHRoZSBhdmF0YXIuXG4gICAgICogU3VwcG9ydHMgdGhlIHR5cGUgb2YgdmFsdWVzIHRoYXQgYXJlIHN1cHBvcnRlZCBieSBbYG5nU3R5bGVgXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWyduZ3N0eWxlYXBpJ10gfX0pLlxuICAgICAqL1xuICAgIGNzc1N0eWxlPzogYW55O1xuICAgIC8qKlxuICAgICAqIFNldHMgYGluaXRpYWxzYCB0byB0aGUgYXZhdGFyLlxuICAgICAqL1xuICAgIGluaXRpYWxzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYGljb25gIGZvciB0aGUgYXZhdGFyLlxuICAgICAqIEFsbCBbS2VuZG8gVUkgSWNvbnNdKHslIHNsdWcgaWNvbnMgJX0jdG9jLWxpc3Qtb2YtZm9udC1pY29ucykgYXJlIHN1cHBvcnRlZC5cbiAgICAgKi9cbiAgICBpY29uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYGltYWdlYCBzb3VyY2Ugb2YgdGhlIGF2YXRhci5cbiAgICAgKi9cbiAgICBpbWFnZVNyYzogc3RyaW5nO1xuICAgIHByaXZhdGUgX3RoZW1lQ29sb3I7XG4gICAgcHJpdmF0ZSBfc2l6ZTtcbiAgICBwcml2YXRlIF9zaGFwZTtcbiAgICBwcml2YXRlIGF2YXRhcjtcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50OiBFbGVtZW50UmVmKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW1hZ2VVcmw6IHN0cmluZztcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpY29uQ2xhc3NlcygpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGN1c3RvbUF2YXRhcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHZlcmlmeVByb3BlcnRpZXM7XG4gICAgcHJpdmF0ZSBzZXRBdmF0YXJDbGFzc2VzO1xufVxuIl19