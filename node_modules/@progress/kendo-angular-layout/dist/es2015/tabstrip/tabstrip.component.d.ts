/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, QueryList, Renderer2, OnInit, OnDestroy } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { TabStripTabComponent } from './tabstrip-tab.component';
import { SelectEvent } from './tabstrip-events';
import { TabPosition } from './tab-position';
import { TabAlignment } from './tab-alignment';
/**
 * Represents the [Kendo UI TabStrip component for Angular]({% slug overview_tabstrip %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class TabStripComponent implements OnInit, OnDestroy {
    private localization;
    private renderer;
    private wrapper;
    /**
     * Sets the height of the TabStrip.
     */
    height: string | null | undefined;
    /**
     * Enables the tab animation.
     */
    animate: boolean;
    /**
     * Sets the alignment of the tabs.
     */
    tabAlignment: TabAlignment;
    /**
     * Sets the position of the tabs. Defaults to `top`.
     */
    tabPosition: TabPosition;
    /**
     * When set to `true`, the component renders all tabs and they are persisted in the DOM.
     * By default, `keepTabContent` is `false`.
     */
    keepTabContent: boolean;
    /**
     * @hidden
     */
    tablist: ElementRef;
    /**
     * Fires each time the user selects a tab ([see example]({% slug overview_tabstrip %}#toc-basic-usage)).
     * The event data contains the index of the selected tab and its title.
     */
    tabSelect: EventEmitter<SelectEvent>;
    hostClasses: boolean;
    readonly tabsAtTop: boolean;
    readonly tabsAtRight: boolean;
    readonly tabsAtBottom: boolean;
    readonly tabsAtLeft: boolean;
    readonly dir: string;
    /**
     * @hidden
     */
    tabs: QueryList<TabStripTabComponent>;
    tabHeadingContainers: QueryList<ElementRef<HTMLLIElement>>;
    /**
     * @hidden
     */
    _animate: boolean;
    private localizationChangeSubscription;
    private keyBindings;
    private _height;
    constructor(localization: LocalizationService, renderer: Renderer2, wrapper: ElementRef);
    /**
     * @hidden
     */
    contentClass(active: boolean): string;
    readonly computedKeys: Object;
    /**
     * @hidden
     */
    readonly tabsAlignment: string;
    /**
     * @hidden
     */
    invertKeys(original: any, inverted: any): any;
    /**
     * @hidden
     */
    onKeyDown(event: any): void;
    /**
     * @hidden
     */
    tabPanelId(id: number): string;
    /**
     * @hidden
     */
    tabId(id: number): string;
    /**
     * Allows the user to select a tab programmatically.
     * @param {number} index - The index of the tab that will be selected.
     */
    selectTab(index: number): void;
    /**
     * @hidden
     */
    onTabClick(originalEvent: MouseEvent, tabIndex: number): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private firstNavigatableIndex;
    private lastNavigatableIndex;
    private prevNavigatableIndex;
    private nextNavigatableIndex;
    private emitEvent;
    private deactivateAll;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TabStripComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TabStripComponent, "kendo-tabstrip", ["kendoTabStrip"], { "animate": "animate"; "tabPosition": "tabPosition"; "keepTabContent": "keepTabContent"; "height": "height"; "tabAlignment": "tabAlignment"; }, { "tabSelect": "tabSelect"; }, ["tabs"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFic3RyaXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhYnN0cmlwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QsIFJlbmRlcmVyMiwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFRhYlN0cmlwVGFiQ29tcG9uZW50IH0gZnJvbSAnLi90YWJzdHJpcC10YWIuY29tcG9uZW50JztcbmltcG9ydCB7IFNlbGVjdEV2ZW50IH0gZnJvbSAnLi90YWJzdHJpcC1ldmVudHMnO1xuaW1wb3J0IHsgVGFiUG9zaXRpb24gfSBmcm9tICcuL3RhYi1wb3NpdGlvbic7XG5pbXBvcnQgeyBUYWJBbGlnbm1lbnQgfSBmcm9tICcuL3RhYi1hbGlnbm1lbnQnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBbS2VuZG8gVUkgVGFiU3RyaXAgY29tcG9uZW50IGZvciBBbmd1bGFyXSh7JSBzbHVnIG92ZXJ2aWV3X3RhYnN0cmlwICV9KS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFiU3RyaXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIHdyYXBwZXI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBUYWJTdHJpcC5cbiAgICAgKi9cbiAgICBoZWlnaHQ6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgdGFiIGFuaW1hdGlvbi5cbiAgICAgKi9cbiAgICBhbmltYXRlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFsaWdubWVudCBvZiB0aGUgdGFicy5cbiAgICAgKi9cbiAgICB0YWJBbGlnbm1lbnQ6IFRhYkFsaWdubWVudDtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgdGFicy4gRGVmYXVsdHMgdG8gYHRvcGAuXG4gICAgICovXG4gICAgdGFiUG9zaXRpb246IFRhYlBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIGNvbXBvbmVudCByZW5kZXJzIGFsbCB0YWJzIGFuZCB0aGV5IGFyZSBwZXJzaXN0ZWQgaW4gdGhlIERPTS5cbiAgICAgKiBCeSBkZWZhdWx0LCBga2VlcFRhYkNvbnRlbnRgIGlzIGBmYWxzZWAuXG4gICAgICovXG4gICAga2VlcFRhYkNvbnRlbnQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRhYmxpc3Q6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB1c2VyIHNlbGVjdHMgYSB0YWIgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBvdmVydmlld190YWJzdHJpcCAlfSN0b2MtYmFzaWMtdXNhZ2UpKS5cbiAgICAgKiBUaGUgZXZlbnQgZGF0YSBjb250YWlucyB0aGUgaW5kZXggb2YgdGhlIHNlbGVjdGVkIHRhYiBhbmQgaXRzIHRpdGxlLlxuICAgICAqL1xuICAgIHRhYlNlbGVjdDogRXZlbnRFbWl0dGVyPFNlbGVjdEV2ZW50PjtcbiAgICBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICByZWFkb25seSB0YWJzQXRUb3A6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdGFic0F0UmlnaHQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgdGFic0F0Qm90dG9tOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHRhYnNBdExlZnQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgZGlyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRhYnM6IFF1ZXJ5TGlzdDxUYWJTdHJpcFRhYkNvbXBvbmVudD47XG4gICAgdGFiSGVhZGluZ0NvbnRhaW5lcnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPEhUTUxMSUVsZW1lbnQ+PjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgX2FuaW1hdGU6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb25DaGFuZ2VTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBrZXlCaW5kaW5ncztcbiAgICBwcml2YXRlIF9oZWlnaHQ7XG4gICAgY29uc3RydWN0b3IobG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCByZW5kZXJlcjogUmVuZGVyZXIyLCB3cmFwcGVyOiBFbGVtZW50UmVmKTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29udGVudENsYXNzKGFjdGl2ZTogYm9vbGVhbik6IHN0cmluZztcbiAgICByZWFkb25seSBjb21wdXRlZEtleXM6IE9iamVjdDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgdGFic0FsaWdubWVudDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpbnZlcnRLZXlzKG9yaWdpbmFsOiBhbnksIGludmVydGVkOiBhbnkpOiBhbnk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uS2V5RG93bihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdGFiUGFuZWxJZChpZDogbnVtYmVyKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICB0YWJJZChpZDogbnVtYmVyKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB0aGUgdXNlciB0byBzZWxlY3QgYSB0YWIgcHJvZ3JhbW1hdGljYWxseS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggb2YgdGhlIHRhYiB0aGF0IHdpbGwgYmUgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgc2VsZWN0VGFiKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvblRhYkNsaWNrKG9yaWdpbmFsRXZlbnQ6IE1vdXNlRXZlbnQsIHRhYkluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIGZpcnN0TmF2aWdhdGFibGVJbmRleDtcbiAgICBwcml2YXRlIGxhc3ROYXZpZ2F0YWJsZUluZGV4O1xuICAgIHByaXZhdGUgcHJldk5hdmlnYXRhYmxlSW5kZXg7XG4gICAgcHJpdmF0ZSBuZXh0TmF2aWdhdGFibGVJbmRleDtcbiAgICBwcml2YXRlIGVtaXRFdmVudDtcbiAgICBwcml2YXRlIGRlYWN0aXZhdGVBbGw7XG59XG4iXX0=