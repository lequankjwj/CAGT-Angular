/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, ElementRef, Renderer2, QueryList } from '@angular/core';
import { NgControl } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ShowOptions } from './models/show-options';
import { ErrorComponent } from './error.component';
import { HintComponent } from './hint.component';
import { Orientation } from './models/orientation';
/**
 * Specifies a container for form-bound controls (Kendo controls or native HTML controls).
 * Applies styling and behavior rules.
 */
import * as ɵngcc0 from '@angular/core';
export declare class FormFieldComponent implements AfterViewInit {
    private renderer;
    private localizationService;
    hostClass: boolean;
    /**
     * @hidden
     */
    direction: string;
    readonly errorClass: boolean;
    readonly disabledClass: boolean;
    formControls: QueryList<NgControl>;
    controlElementRefs: QueryList<ElementRef>;
    kendoInput: any;
    errorChildren: QueryList<ErrorComponent>;
    hintChildren: QueryList<HintComponent>;
    /**
     *
     * Specifies when the Hint messages will be shown.
     *
     * The possible values are:
     *
     * * (Default) `initial`&mdash;Allows displaying hints when the form-bound component state is
     * `valid` or `untouched` and `pristine`.
     * * `always`&mdash;Allows full control over the visibility of the hints.
     *
     */
    showHints: ShowOptions;
    /**
     * Specifies the layout orientation of the form field.
     *
     * * The possible values are:
     *
     * * (Default) `vertical`
     * * `horizontal`
     */
    orientation: Orientation;
    /**
     * Specifies when the Error messages will be shown.
     *
     * The possible values are:
     *
     * * (Default) `initial`&mdash;Allows displaying errors when the form-bound component state is
     * `invalid` and `touched` or `dirty`.
     * * `always`&mdash;Allows full control over the visibility of the errors.
     *
     */
    showErrors: ShowOptions;
    /**
     * @hidden
     */
    readonly horizontal: boolean;
    /**
     * @hidden
     */
    readonly hasHints: boolean;
    /**
     * @hidden
     */
    readonly hasErrors: boolean;
    private control;
    private subscriptions;
    private rtl;
    constructor(renderer: Renderer2, localizationService: LocalizationService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private disabledKendoInput;
    private disabledControl;
    private disabledElement;
    private validateFormControl;
    private isControlGroup;
    private isRadioControl;
    private updateDescription;
    private findControlElements;
    private generateDescriptionIds;
    private showHintsInitial;
    private showErrorsInitial;
    private setDescription;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FormFieldComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FormFieldComponent, "kendo-formfield", never, { "showHints": "showHints"; "orientation": "orientation"; "showErrors": "showErrors"; }, {}, ["kendoInput", "formControls", "controlElementRefs", "errorChildren", "hintChildren"], ["label, kendo-label", "*", "kendo-formhint", "kendo-formerror"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWZpZWxkLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJmb3JtZmllbGQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFNob3dPcHRpb25zIH0gZnJvbSAnLi9tb2RlbHMvc2hvdy1vcHRpb25zJztcbmltcG9ydCB7IEVycm9yQ29tcG9uZW50IH0gZnJvbSAnLi9lcnJvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGludENvbXBvbmVudCB9IGZyb20gJy4vaGludC5jb21wb25lbnQnO1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tICcuL21vZGVscy9vcmllbnRhdGlvbic7XG4vKipcbiAqIFNwZWNpZmllcyBhIGNvbnRhaW5lciBmb3IgZm9ybS1ib3VuZCBjb250cm9scyAoS2VuZG8gY29udHJvbHMgb3IgbmF0aXZlIEhUTUwgY29udHJvbHMpLlxuICogQXBwbGllcyBzdHlsaW5nIGFuZCBiZWhhdmlvciBydWxlcy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRm9ybUZpZWxkQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvblNlcnZpY2U7XG4gICAgaG9zdENsYXNzOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkaXJlY3Rpb246IHN0cmluZztcbiAgICByZWFkb25seSBlcnJvckNsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGRpc2FibGVkQ2xhc3M6IGJvb2xlYW47XG4gICAgZm9ybUNvbnRyb2xzOiBRdWVyeUxpc3Q8TmdDb250cm9sPjtcbiAgICBjb250cm9sRWxlbWVudFJlZnM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgICBrZW5kb0lucHV0OiBhbnk7XG4gICAgZXJyb3JDaGlsZHJlbjogUXVlcnlMaXN0PEVycm9yQ29tcG9uZW50PjtcbiAgICBoaW50Q2hpbGRyZW46IFF1ZXJ5TGlzdDxIaW50Q29tcG9uZW50PjtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFNwZWNpZmllcyB3aGVuIHRoZSBIaW50IG1lc3NhZ2VzIHdpbGwgYmUgc2hvd24uXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKlxuICAgICAqICogKERlZmF1bHQpIGBpbml0aWFsYCZtZGFzaDtBbGxvd3MgZGlzcGxheWluZyBoaW50cyB3aGVuIHRoZSBmb3JtLWJvdW5kIGNvbXBvbmVudCBzdGF0ZSBpc1xuICAgICAqIGB2YWxpZGAgb3IgYHVudG91Y2hlZGAgYW5kIGBwcmlzdGluZWAuXG4gICAgICogKiBgYWx3YXlzYCZtZGFzaDtBbGxvd3MgZnVsbCBjb250cm9sIG92ZXIgdGhlIHZpc2liaWxpdHkgb2YgdGhlIGhpbnRzLlxuICAgICAqXG4gICAgICovXG4gICAgc2hvd0hpbnRzOiBTaG93T3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGxheW91dCBvcmllbnRhdGlvbiBvZiB0aGUgZm9ybSBmaWVsZC5cbiAgICAgKlxuICAgICAqICogVGhlIHBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gICAgICpcbiAgICAgKiAqIChEZWZhdWx0KSBgdmVydGljYWxgXG4gICAgICogKiBgaG9yaXpvbnRhbGBcbiAgICAgKi9cbiAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb247XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZW4gdGhlIEVycm9yIG1lc3NhZ2VzIHdpbGwgYmUgc2hvd24uXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKlxuICAgICAqICogKERlZmF1bHQpIGBpbml0aWFsYCZtZGFzaDtBbGxvd3MgZGlzcGxheWluZyBlcnJvcnMgd2hlbiB0aGUgZm9ybS1ib3VuZCBjb21wb25lbnQgc3RhdGUgaXNcbiAgICAgKiBgaW52YWxpZGAgYW5kIGB0b3VjaGVkYCBvciBgZGlydHlgLlxuICAgICAqICogYGFsd2F5c2AmbWRhc2g7QWxsb3dzIGZ1bGwgY29udHJvbCBvdmVyIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBlcnJvcnMuXG4gICAgICpcbiAgICAgKi9cbiAgICBzaG93RXJyb3JzOiBTaG93T3B0aW9ucztcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaG9yaXpvbnRhbDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaGFzSGludHM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhhc0Vycm9yczogYm9vbGVhbjtcbiAgICBwcml2YXRlIGNvbnRyb2w7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIHByaXZhdGUgcnRsO1xuICAgIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlcjIsIGxvY2FsaXphdGlvblNlcnZpY2U6IExvY2FsaXphdGlvblNlcnZpY2UpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZEtlbmRvSW5wdXQ7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZENvbnRyb2w7XG4gICAgcHJpdmF0ZSBkaXNhYmxlZEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUZvcm1Db250cm9sO1xuICAgIHByaXZhdGUgaXNDb250cm9sR3JvdXA7XG4gICAgcHJpdmF0ZSBpc1JhZGlvQ29udHJvbDtcbiAgICBwcml2YXRlIHVwZGF0ZURlc2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZmluZENvbnRyb2xFbGVtZW50cztcbiAgICBwcml2YXRlIGdlbmVyYXRlRGVzY3JpcHRpb25JZHM7XG4gICAgcHJpdmF0ZSBzaG93SGludHNJbml0aWFsO1xuICAgIHByaXZhdGUgc2hvd0Vycm9yc0luaXRpYWw7XG4gICAgcHJpdmF0ZSBzZXREZXNjcmlwdGlvbjtcbn1cbiJdfQ==