/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { AfterViewInit, Renderer2, ElementRef, OnChanges, OnDestroy, NgZone, Injector, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { SliderBase } from '../sliders-common/slider-base';
/**
 * Represents the [Kendo UI Slider component for Angular]({% slug overview_slider %}).
 */
import * as ɵngcc0 from '@angular/core';
export declare class SliderComponent extends SliderBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {
    protected localization: LocalizationService;
    protected injector: Injector;
    protected renderer: Renderer2;
    protected ngZone: NgZone;
    protected changeDetector: ChangeDetectorRef;
    protected hostElement: ElementRef;
    /**
     * @hidden
     */
    focusableId: string;
    /**
     * Changes the `title` attribute of the drag handle so that it can be localized.
     */
    dragHandleTitle: string;
    /**
     * Sets the title of the **Increase** button of the Slider ([see example]({% slug sidebuttons_slider %}#toc-titles)).
     */
    incrementTitle: string;
    /**
     * Determines if the animation will be played on value change.
     * Regardless of this setting, no animation will be played during the initial rendering.
     */
    animate: boolean;
    /**
     * Sets the title of the **Decrease** button of the Slider ([see example]({% slug sidebuttons_slider %}#toc-titles)).
     */
    decrementTitle: string;
    /**
     * Renders the arrow side buttons of the Slider ([see example]({% slug sidebuttons_slider %}#toc-hidden-state)).
     * When `showButtons` is set to `false`, the buttons are not displayed.
     */
    showButtons: boolean;
    /**
     * The current value of the Slider when it is initially displayed.
     * The component can use either NgModel or the `value` binding but not both of them at the same time.
     */
    value: number;
    /**
     * @hidden
     */
    tabIndex: number;
    draghandle: ElementRef;
    decreaseButton: ElementRef;
    increaseButton: ElementRef;
    constructor(localization: LocalizationService, injector: Injector, renderer: Renderer2, ngZone: NgZone, changeDetector: ChangeDetectorRef, hostElement: ElementRef);
    /**
     * @hidden
     */
    handleFocus: () => void;
    /**
     * @hidden
     */
    handleBlur: () => void;
    /**
     * Focuses the Slider.
     *
     * @example
     * ```ts-no-run
     * _@Component({
     * selector: 'my-app',
     * template: `
     *  <button (click)="slider.focus()">Focus</button>
     *  <kendo-slider #slider></kendo-slider>
     * `
     * })
     * class AppComponent { }
     * ```
     */
    focus(): void;
    /**
     * Blurs the Slider.
     */
    blur(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    readonly incrementMessage: string;
    /**
     * @hidden
     */
    readonly decrementMessage: string;
    /**
     * @hidden
     */
    readonly dragHandleMessage: string;
    /**
     * @hidden
     */
    onWrapClick: (args: any) => void;
    /**
     * @hidden
     */
    handleDragPress(args: any): void;
    /**
     * @hidden
     */
    onHandleDrag(args: any): void;
    /**
     * @hidden
     */
    onKeyDown: (e: any) => void;
    /**
     * @hidden
     */
    onHandleRelease(): void;
    /**
     * @hidden
     */
    writeValue(value: number): void;
    /**
     * @hidden
     */
    registerOnChange(fn: () => any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: () => any): void;
    /**
     * @hidden
     */
    changeValue(value: number): void;
    /**
     * @hidden
     */
    sizeComponent(animate: boolean): void;
    protected focused: boolean;
    private dragging;
    private setValueChangeInterval;
    private ngChange;
    private ngTouched;
    private decreaseValue;
    private increaseValue;
    private getProps;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SliderComponent, "kendo-slider", ["kendoSlider"], { "focusableId": "focusableId"; "animate": "animate"; "showButtons": "showButtons"; "value": "value"; "tabIndex": "tabIndex"; "dragHandleTitle": "dragHandleTitle"; "incrementTitle": "incrementTitle"; "decrementTitle": "decrementTitle"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE5nWm9uZSwgSW5qZWN0b3IsIFNpbXBsZUNoYW5nZXMsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IFNsaWRlckJhc2UgfSBmcm9tICcuLi9zbGlkZXJzLWNvbW1vbi9zbGlkZXItYmFzZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIFtLZW5kbyBVSSBTbGlkZXIgY29tcG9uZW50IGZvciBBbmd1bGFyXSh7JSBzbHVnIG92ZXJ2aWV3X3NsaWRlciAlfSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNsaWRlckNvbXBvbmVudCBleHRlbmRzIFNsaWRlckJhc2UgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGluamVjdG9yOiBJbmplY3RvcjtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3VzYWJsZUlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyB0aGUgYHRpdGxlYCBhdHRyaWJ1dGUgb2YgdGhlIGRyYWcgaGFuZGxlIHNvIHRoYXQgaXQgY2FuIGJlIGxvY2FsaXplZC5cbiAgICAgKi9cbiAgICBkcmFnSGFuZGxlVGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0aXRsZSBvZiB0aGUgKipJbmNyZWFzZSoqIGJ1dHRvbiBvZiB0aGUgU2xpZGVyIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgc2lkZWJ1dHRvbnNfc2xpZGVyICV9I3RvYy10aXRsZXMpKS5cbiAgICAgKi9cbiAgICBpbmNyZW1lbnRUaXRsZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgdGhlIGFuaW1hdGlvbiB3aWxsIGJlIHBsYXllZCBvbiB2YWx1ZSBjaGFuZ2UuXG4gICAgICogUmVnYXJkbGVzcyBvZiB0aGlzIHNldHRpbmcsIG5vIGFuaW1hdGlvbiB3aWxsIGJlIHBsYXllZCBkdXJpbmcgdGhlIGluaXRpYWwgcmVuZGVyaW5nLlxuICAgICAqL1xuICAgIGFuaW1hdGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGl0bGUgb2YgdGhlICoqRGVjcmVhc2UqKiBidXR0b24gb2YgdGhlIFNsaWRlciAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHNpZGVidXR0b25zX3NsaWRlciAlfSN0b2MtdGl0bGVzKSkuXG4gICAgICovXG4gICAgZGVjcmVtZW50VGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBhcnJvdyBzaWRlIGJ1dHRvbnMgb2YgdGhlIFNsaWRlciAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIHNpZGVidXR0b25zX3NsaWRlciAlfSN0b2MtaGlkZGVuLXN0YXRlKSkuXG4gICAgICogV2hlbiBgc2hvd0J1dHRvbnNgIGlzIHNldCB0byBgZmFsc2VgLCB0aGUgYnV0dG9ucyBhcmUgbm90IGRpc3BsYXllZC5cbiAgICAgKi9cbiAgICBzaG93QnV0dG9uczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgU2xpZGVyIHdoZW4gaXQgaXMgaW5pdGlhbGx5IGRpc3BsYXllZC5cbiAgICAgKiBUaGUgY29tcG9uZW50IGNhbiB1c2UgZWl0aGVyIE5nTW9kZWwgb3IgdGhlIGB2YWx1ZWAgYmluZGluZyBidXQgbm90IGJvdGggb2YgdGhlbSBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAqL1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHRhYkluZGV4OiBudW1iZXI7XG4gICAgZHJhZ2hhbmRsZTogRWxlbWVudFJlZjtcbiAgICBkZWNyZWFzZUJ1dHRvbjogRWxlbWVudFJlZjtcbiAgICBpbmNyZWFzZUJ1dHRvbjogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3Rvcihsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIGluamVjdG9yOiBJbmplY3RvciwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgbmdab25lOiBOZ1pvbmUsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVGb2N1czogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQmx1cjogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBTbGlkZXIuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYHRzLW5vLXJ1blxuICAgICAqIF9AQ29tcG9uZW50KHtcbiAgICAgKiBzZWxlY3RvcjogJ215LWFwcCcsXG4gICAgICogdGVtcGxhdGU6IGBcbiAgICAgKiAgPGJ1dHRvbiAoY2xpY2spPVwic2xpZGVyLmZvY3VzKClcIj5Gb2N1czwvYnV0dG9uPlxuICAgICAqICA8a2VuZG8tc2xpZGVyICNzbGlkZXI+PC9rZW5kby1zbGlkZXI+XG4gICAgICogYFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwQ29tcG9uZW50IHsgfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmx1cnMgdGhlIFNsaWRlci5cbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaW5jcmVtZW50TWVzc2FnZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBkZWNyZW1lbnRNZXNzYWdlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRyYWdIYW5kbGVNZXNzYWdlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uV3JhcENsaWNrOiAoYXJnczogYW55KSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVEcmFnUHJlc3MoYXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25IYW5kbGVEcmFnKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG9uS2V5RG93bjogKGU6IGFueSkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25IYW5kbGVSZWxlYXNlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICgpID0+IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjaGFuZ2VWYWx1ZSh2YWx1ZTogbnVtYmVyKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgc2l6ZUNvbXBvbmVudChhbmltYXRlOiBib29sZWFuKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZm9jdXNlZDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGRyYWdnaW5nO1xuICAgIHByaXZhdGUgc2V0VmFsdWVDaGFuZ2VJbnRlcnZhbDtcbiAgICBwcml2YXRlIG5nQ2hhbmdlO1xuICAgIHByaXZhdGUgbmdUb3VjaGVkO1xuICAgIHByaXZhdGUgZGVjcmVhc2VWYWx1ZTtcbiAgICBwcml2YXRlIGluY3JlYXNlVmFsdWU7XG4gICAgcHJpdmF0ZSBnZXRQcm9wcztcbn1cbiJdfQ==