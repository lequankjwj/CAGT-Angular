/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnChanges, SimpleChanges, EventEmitter, ElementRef } from '@angular/core';
import { RGBA } from './models';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class ColorInputComponent implements OnChanges {
    private host;
    /**
     * The color value that will be parsed and populate the hex & rgba inputs.
     * Required input property.
     */
    value: string;
    /**
     * Sets whether the alpha slider will be shown.
     */
    opacity: boolean;
    /**
     * Sets the disabled state of the ColorInput.
     */
    disabled: boolean;
    /**
     * Sets the read-only state of the ColorInput.
     */
    readonly: boolean;
    /**
     * Emits a parsed rgba string color.
     */
    valueChange: EventEmitter<string>;
    colorInputClass: boolean;
    /**
     * The rgba inputs values.
     */
    rgba: RGBA;
    hex: string;
    /**
     * Indicates whether any of the inputs are focused.
     */
    private readonly isFocused;
    /**
     * Indicates whether any of the rgba inputs have value.
     */
    private readonly rgbaInputValid;
    constructor(host: ElementRef);
    ngOnChanges(changes: SimpleChanges): void;
    handleRgbaValueChange(): void;
    handleHexValueChange(hex: string): void;
    handleRgbaInputBlur(): void;
    handleHexInputBlur(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColorInputComponent, "kendo-colorinput", never, { "opacity": "opacity"; "disabled": "disabled"; "readonly": "readonly"; "value": "value"; }, { "valueChange": "valueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItaW5wdXQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbG9yLWlucHV0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEV2ZW50RW1pdHRlciwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUkdCQSB9IGZyb20gJy4vbW9kZWxzJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb2xvcklucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGhvc3Q7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbG9yIHZhbHVlIHRoYXQgd2lsbCBiZSBwYXJzZWQgYW5kIHBvcHVsYXRlIHRoZSBoZXggJiByZ2JhIGlucHV0cy5cbiAgICAgKiBSZXF1aXJlZCBpbnB1dCBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICB2YWx1ZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0aGUgYWxwaGEgc2xpZGVyIHdpbGwgYmUgc2hvd24uXG4gICAgICovXG4gICAgb3BhY2l0eTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkaXNhYmxlZCBzdGF0ZSBvZiB0aGUgQ29sb3JJbnB1dC5cbiAgICAgKi9cbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSByZWFkLW9ubHkgc3RhdGUgb2YgdGhlIENvbG9ySW5wdXQuXG4gICAgICovXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRW1pdHMgYSBwYXJzZWQgcmdiYSBzdHJpbmcgY29sb3IuXG4gICAgICovXG4gICAgdmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIGNvbG9ySW5wdXRDbGFzczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgcmdiYSBpbnB1dHMgdmFsdWVzLlxuICAgICAqL1xuICAgIHJnYmE6IFJHQkE7XG4gICAgaGV4OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgYW55IG9mIHRoZSBpbnB1dHMgYXJlIGZvY3VzZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBpc0ZvY3VzZWQ7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgYW55IG9mIHRoZSByZ2JhIGlucHV0cyBoYXZlIHZhbHVlLlxuICAgICAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcmdiYUlucHV0VmFsaWQ7XG4gICAgY29uc3RydWN0b3IoaG9zdDogRWxlbWVudFJlZik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgaGFuZGxlUmdiYVZhbHVlQ2hhbmdlKCk6IHZvaWQ7XG4gICAgaGFuZGxlSGV4VmFsdWVDaGFuZ2UoaGV4OiBzdHJpbmcpOiB2b2lkO1xuICAgIGhhbmRsZVJnYmFJbnB1dEJsdXIoKTogdm9pZDtcbiAgICBoYW5kbGVIZXhJbnB1dEJsdXIoKTogdm9pZDtcbn1cbiJdfQ==