/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2, NgZone, EventEmitter, SimpleChanges, OnChanges, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { OutputFormat, KendoDragEvent, HSVA } from './models';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * The ColorGradient component enables smooth color transitions and provides options for selecting specific colors over the drag handle.
 * The ColorGradient is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ColorGradientComponent implements OnChanges, OnDestroy, ControlValueAccessor {
    private host;
    private ngZone;
    private renderer;
    private cdr;
    hostClasses: boolean;
    readonly disabledClass: boolean;
    readonly hostTabindex: number;
    /**
     * @hidden
     */
    readonly gradientId: string;
    /**
     * @hidden
     */
    id: string;
    /**
     * @hidden
     */
    direction: string;
    /**
     * Defines whether the alpha slider will be displayed.
     */
    opacity: boolean;
    /**
     * Sets the disabled state of the ColorGradient.
     */
    disabled: boolean;
    /**
     * Sets the read-only state of the ColorGradient.
     */
    readonly: boolean;
    /**
     * Specifies whether the ColorGradient should display a 'Clear color' button.
     */
    clearButton: boolean;
    /**
     * Specifies the value of the initially selected color.
     */
    value: string;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * Fires each time the user selects a new color.
     */
    valueChange: EventEmitter<string>;
    /**
     * @hidden
     */
    backgroundColor: string;
    /**
     * @hidden
     *
     * Represents the currently selected `hue`, `saturation`, `value`, and `alpha` values.
     * The values are initially set in `ngOnInit` or in `ngOnChanges` and are
     * updated on moving the drag handle or the sliders.
     */
    hsva: HSVA;
    /**
     * Indicates whether the ColorGradient or any of its content is focused.
     */
    readonly isFocused: boolean;
    /**
     * @hidden
     */
    readonly alphaSliderValue: number;
    /**
     * Specifies the output format of the ColorGradientComponent.
     * The input value may be in a different format. However, it will be parsed into the output `format`
     * after the component processes it.
     *
     * The supported values are:
     * * (Default) `rgba`
     * * `hex`
     */
    format: OutputFormat;
    private _value;
    private _tabindex;
    private listeners;
    private dynamicRTLSubscription;
    private alphaSlider;
    private gradientWrapper;
    private dragHandle;
    private readonly gradientRect;
    constructor(host: ElementRef, ngZone: NgZone, renderer: Renderer2, cdr: ChangeDetectorRef, localizationService: LocalizationService);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Focuses the component.
     */
    focus(): void;
    /**
     * @hidden
     */
    reset(): void;
    /**
     * @hidden
     */
    handleDragPress(args: KendoDragEvent): void;
    /**
     * @hidden
     */
    onHandleDrag(args: any): void;
    /**
     * @hidden
     */
    onHandleRelease(): void;
    /**
     * @hidden
     */
    changePosition(position: KendoDragEvent): void;
    /**
     * @hidden
     */
    handleHueSliderChange(hue: number): void;
    /**
     * @hidden
     */
    handleAlphaSliderChange(alpha: number): void;
    /**
     * @hidden
     */
    handleInputsValueChange(color: string): void;
    /**
     * @hidden
     */
    writeValue(value: string): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty(): boolean;
    private notifyNgChanged;
    private notifyNgTouched;
    private moveDragHandle;
    private updateUI;
    private handleValueChange;
    private setDragHandleElementPosition;
    private setAlphaSliderBackground;
    private addEventListeners;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorGradientComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColorGradientComponent, "kendo-colorgradient", never, { "id": "id"; "opacity": "opacity"; "disabled": "disabled"; "readonly": "readonly"; "clearButton": "clearButton"; "format": "format"; "value": "value"; "tabindex": "tabindex"; }, { "valueChange": "valueChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItZ3JhZGllbnQuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbG9yLWdyYWRpZW50LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgTmdab25lLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPdXRwdXRGb3JtYXQsIEtlbmRvRHJhZ0V2ZW50LCBIU1ZBIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuLyoqXG4gKiBUaGUgQ29sb3JHcmFkaWVudCBjb21wb25lbnQgZW5hYmxlcyBzbW9vdGggY29sb3IgdHJhbnNpdGlvbnMgYW5kIHByb3ZpZGVzIG9wdGlvbnMgZm9yIHNlbGVjdGluZyBzcGVjaWZpYyBjb2xvcnMgb3ZlciB0aGUgZHJhZyBoYW5kbGUuXG4gKiBUaGUgQ29sb3JHcmFkaWVudCBpcyBpbmRlcGVuZGVudGx5IHVzZWQgYnkgYGtlbmRvLWNvbG9ycGlja2VyYCBhbmQgY2FuIGJlIGRpcmVjdGx5IGFkZGVkIHRvIHRoZSBwYWdlLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDb2xvckdyYWRpZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcbiAgICBwcml2YXRlIGhvc3Q7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICByZWFkb25seSBkaXNhYmxlZENsYXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGhvc3RUYWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBncmFkaWVudElkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgd2hldGhlciB0aGUgYWxwaGEgc2xpZGVyIHdpbGwgYmUgZGlzcGxheWVkLlxuICAgICAqL1xuICAgIG9wYWNpdHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIENvbG9yR3JhZGllbnQuXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVhZC1vbmx5IHN0YXRlIG9mIHRoZSBDb2xvckdyYWRpZW50LlxuICAgICAqL1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBDb2xvckdyYWRpZW50IHNob3VsZCBkaXNwbGF5IGEgJ0NsZWFyIGNvbG9yJyBidXR0b24uXG4gICAgICovXG4gICAgY2xlYXJCdXR0b246IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSBvZiB0aGUgaW5pdGlhbGx5IHNlbGVjdGVkIGNvbG9yLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBbYHRhYmluZGV4YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleCkgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICB0YWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGVhY2ggdGltZSB0aGUgdXNlciBzZWxlY3RzIGEgbmV3IGNvbG9yLlxuICAgICAqL1xuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgYmFja2dyb3VuZENvbG9yOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqXG4gICAgICogUmVwcmVzZW50cyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGBodWVgLCBgc2F0dXJhdGlvbmAsIGB2YWx1ZWAsIGFuZCBgYWxwaGFgIHZhbHVlcy5cbiAgICAgKiBUaGUgdmFsdWVzIGFyZSBpbml0aWFsbHkgc2V0IGluIGBuZ09uSW5pdGAgb3IgaW4gYG5nT25DaGFuZ2VzYCBhbmQgYXJlXG4gICAgICogdXBkYXRlZCBvbiBtb3ZpbmcgdGhlIGRyYWcgaGFuZGxlIG9yIHRoZSBzbGlkZXJzLlxuICAgICAqL1xuICAgIGhzdmE6IEhTVkE7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIENvbG9yR3JhZGllbnQgb3IgYW55IG9mIGl0cyBjb250ZW50IGlzIGZvY3VzZWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaXNGb2N1c2VkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBhbHBoYVNsaWRlclZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBvdXRwdXQgZm9ybWF0IG9mIHRoZSBDb2xvckdyYWRpZW50Q29tcG9uZW50LlxuICAgICAqIFRoZSBpbnB1dCB2YWx1ZSBtYXkgYmUgaW4gYSBkaWZmZXJlbnQgZm9ybWF0LiBIb3dldmVyLCBpdCB3aWxsIGJlIHBhcnNlZCBpbnRvIHRoZSBvdXRwdXQgYGZvcm1hdGBcbiAgICAgKiBhZnRlciB0aGUgY29tcG9uZW50IHByb2Nlc3NlcyBpdC5cbiAgICAgKlxuICAgICAqIFRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTpcbiAgICAgKiAqIChEZWZhdWx0KSBgcmdiYWBcbiAgICAgKiAqIGBoZXhgXG4gICAgICovXG4gICAgZm9ybWF0OiBPdXRwdXRGb3JtYXQ7XG4gICAgcHJpdmF0ZSBfdmFsdWU7XG4gICAgcHJpdmF0ZSBfdGFiaW5kZXg7XG4gICAgcHJpdmF0ZSBsaXN0ZW5lcnM7XG4gICAgcHJpdmF0ZSBkeW5hbWljUlRMU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgYWxwaGFTbGlkZXI7XG4gICAgcHJpdmF0ZSBncmFkaWVudFdyYXBwZXI7XG4gICAgcHJpdmF0ZSBkcmFnSGFuZGxlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhZGllbnRSZWN0O1xuICAgIGNvbnN0cnVjdG9yKGhvc3Q6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBsb2NhbGl6YXRpb25TZXJ2aWNlOiBMb2NhbGl6YXRpb25TZXJ2aWNlKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZXNldCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVEcmFnUHJlc3MoYXJnczogS2VuZG9EcmFnRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBvbkhhbmRsZURyYWcoYXJnczogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25IYW5kbGVSZWxlYXNlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNoYW5nZVBvc2l0aW9uKHBvc2l0aW9uOiBLZW5kb0RyYWdFdmVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUh1ZVNsaWRlckNoYW5nZShodWU6IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGhhbmRsZUFscGhhU2xpZGVyQ2hhbmdlKGFscGhhOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBoYW5kbGVJbnB1dHNWYWx1ZUNoYW5nZShjb2xvcjogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqIFVzZWQgYnkgdGhlIFRleHRCb3hDb250YWluZXIgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjb21wb25lbnQgaXMgZW1wdHkuXG4gICAgICovXG4gICAgaXNFbXB0eSgpOiBib29sZWFuO1xuICAgIHByaXZhdGUgbm90aWZ5TmdDaGFuZ2VkO1xuICAgIHByaXZhdGUgbm90aWZ5TmdUb3VjaGVkO1xuICAgIHByaXZhdGUgbW92ZURyYWdIYW5kbGU7XG4gICAgcHJpdmF0ZSB1cGRhdGVVSTtcbiAgICBwcml2YXRlIGhhbmRsZVZhbHVlQ2hhbmdlO1xuICAgIHByaXZhdGUgc2V0RHJhZ0hhbmRsZUVsZW1lbnRQb3NpdGlvbjtcbiAgICBwcml2YXRlIHNldEFscGhhU2xpZGVyQmFja2dyb3VuZDtcbiAgICBwcml2YXRlIGFkZEV2ZW50TGlzdGVuZXJzO1xufVxuIl19