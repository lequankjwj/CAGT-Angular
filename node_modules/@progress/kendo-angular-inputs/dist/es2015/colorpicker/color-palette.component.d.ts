/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, EventEmitter, SimpleChanges, OnChanges, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TileSize, OutputFormat, TableCell } from './models';
import { ColorPaletteService } from './services/color-palette.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * The ColorPalette component provides a set of predefined palette presets and enables you to implement a custom color palette.
 * The ColorPalette is independently used by `kendo-colorpicker` and can be directly added to the page.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ColorPaletteComponent implements OnInit, OnDestroy, OnChanges, ControlValueAccessor {
    private service;
    /**
     * @hidden
     */
    direction: string;
    /**
     * @hidden
     */
    readonly paletteId: string;
    /**
     * @hidden
     */
    id: string;
    /**
     * Specifies the output format of the ColorPaletteComponent.
     * The input value may be in a different format. However, it will be parsed into the output `format`
     * after the component processes it.
     *
     * The supported values are:
     * * (Default) `hex`
     * * `rgba`
     * * `name`
     */
    format: OutputFormat;
    /**
     * Specifies the value of the initially selected color.
     */
    value: string;
    /**
     * Specifies the number of columns that will be displayed.
     * Defaults to `10`.
     */
    columns: number;
    /**
     * The color palette that will be displayed.
     *
     * The supported values are:
     * * The name of the predefined palette preset (for example, `office`, `basic`, and `apex`).
     * * A string with comma-separated colors.
     * * A string array.
     */
    palette: string | Array<string>;
    /**
     * Specifies the [`tabindex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.
     */
    tabindex: number;
    /**
     * Sets the disabled state of the ColorPalette.
     */
    disabled?: boolean;
    /**
     * Sets the read-only state of the ColorPalette.
     */
    readonly?: boolean;
    /**
     * Specifies the size of a color cell.
     *
     * The possible values are:
     * * (Default) `tileSize = 24`
     * * `{ width: number, height: number }`
     */
    tileSize: number | TileSize;
    /**
     * @hidden
     */
    readonly tileLayout: TileSize;
    /**
     * Fires each time the color selection is changed.
     */
    selectionChange: EventEmitter<string>;
    /**
     * Fires each time the value is changed.
     */
    valueChange: EventEmitter<string>;
    /**
     * Fires each time the user selects a cell with the mouse or presses `Enter`.
     *
     * @hidden
     */
    cellSelection: EventEmitter<string>;
    /**
     * @hidden
     */
    readonly colorRows: string[][];
    /**
     * @hidden
     */
    focusedCell: TableCell;
    /**
     * @hidden
     */
    readonly hostTabindex: number;
    /**
     * @hidden
     */
    hostClasses: boolean;
    /**
     * @hidden
     */
    readonly disabledClass: boolean;
    private selection;
    private _value;
    private _columns;
    private _palette;
    private _tabindex;
    private dynamicRTLSubscription;
    constructor(service: ColorPaletteService, localizationService: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @hidden
     */
    handleKeydown(event: any): void;
    /**
     * @hidden
     */
    handleHostBlur(): void;
    /**
     * @hidden
     */
    handleCellSelection(value: string, focusedCell?: TableCell): void;
    /**
     * @hidden
     */
    writeValue(value: string): void;
    /**
     * @hidden
     */
    registerOnChange(fn: any): void;
    /**
     * @hidden
     */
    registerOnTouched(fn: any): void;
    /**
     * @hidden
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * @hidden
     * Used by the TextBoxContainer to determine if the component is empty.
     */
    isEmpty(): boolean;
    /**
     * Clears the color value of the ColorPalette.
     */
    reset(): void;
    private setRows;
    private handleCellNavigation;
    private handleEnter;
    private notifyNgTouched;
    private notifyNgChanged;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColorPaletteComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColorPaletteComponent, "kendo-colorpalette", never, { "id": "id"; "format": "format"; "tileSize": "tileSize"; "value": "value"; "columns": "columns"; "palette": "palette"; "tabindex": "tabindex"; "disabled": "disabled"; "readonly": "readonly"; }, { "selectionChange": "selectionChange"; "valueChange": "valueChange"; "cellSelection": "cellSelection"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcGFsZXR0ZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY29sb3ItcGFsZXR0ZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgT25Jbml0LCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFRpbGVTaXplLCBPdXRwdXRGb3JtYXQsIFRhYmxlQ2VsbCB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IENvbG9yUGFsZXR0ZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2NvbG9yLXBhbGV0dGUuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIFRoZSBDb2xvclBhbGV0dGUgY29tcG9uZW50IHByb3ZpZGVzIGEgc2V0IG9mIHByZWRlZmluZWQgcGFsZXR0ZSBwcmVzZXRzIGFuZCBlbmFibGVzIHlvdSB0byBpbXBsZW1lbnQgYSBjdXN0b20gY29sb3IgcGFsZXR0ZS5cbiAqIFRoZSBDb2xvclBhbGV0dGUgaXMgaW5kZXBlbmRlbnRseSB1c2VkIGJ5IGBrZW5kby1jb2xvcnBpY2tlcmAgYW5kIGNhbiBiZSBkaXJlY3RseSBhZGRlZCB0byB0aGUgcGFnZS5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29sb3JQYWxldHRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByaXZhdGUgc2VydmljZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IHBhbGV0dGVJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgb3V0cHV0IGZvcm1hdCBvZiB0aGUgQ29sb3JQYWxldHRlQ29tcG9uZW50LlxuICAgICAqIFRoZSBpbnB1dCB2YWx1ZSBtYXkgYmUgaW4gYSBkaWZmZXJlbnQgZm9ybWF0LiBIb3dldmVyLCBpdCB3aWxsIGJlIHBhcnNlZCBpbnRvIHRoZSBvdXRwdXQgYGZvcm1hdGBcbiAgICAgKiBhZnRlciB0aGUgY29tcG9uZW50IHByb2Nlc3NlcyBpdC5cbiAgICAgKlxuICAgICAqIFRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTpcbiAgICAgKiAqIChEZWZhdWx0KSBgaGV4YFxuICAgICAqICogYHJnYmFgXG4gICAgICogKiBgbmFtZWBcbiAgICAgKi9cbiAgICBmb3JtYXQ6IE91dHB1dEZvcm1hdDtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHZhbHVlIG9mIHRoZSBpbml0aWFsbHkgc2VsZWN0ZWQgY29sb3IuXG4gICAgICovXG4gICAgdmFsdWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQuXG4gICAgICogRGVmYXVsdHMgdG8gYDEwYC5cbiAgICAgKi9cbiAgICBjb2x1bW5zOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbG9yIHBhbGV0dGUgdGhhdCB3aWxsIGJlIGRpc3BsYXllZC5cbiAgICAgKlxuICAgICAqIFRoZSBzdXBwb3J0ZWQgdmFsdWVzIGFyZTpcbiAgICAgKiAqIFRoZSBuYW1lIG9mIHRoZSBwcmVkZWZpbmVkIHBhbGV0dGUgcHJlc2V0IChmb3IgZXhhbXBsZSwgYG9mZmljZWAsIGBiYXNpY2AsIGFuZCBgYXBleGApLlxuICAgICAqICogQSBzdHJpbmcgd2l0aCBjb21tYS1zZXBhcmF0ZWQgY29sb3JzLlxuICAgICAqICogQSBzdHJpbmcgYXJyYXkuXG4gICAgICovXG4gICAgcGFsZXR0ZTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIFtgdGFiaW5kZXhgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL3RhYmluZGV4KSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZGlzYWJsZWQgc3RhdGUgb2YgdGhlIENvbG9yUGFsZXR0ZS5cbiAgICAgKi9cbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVhZC1vbmx5IHN0YXRlIG9mIHRoZSBDb2xvclBhbGV0dGUuXG4gICAgICovXG4gICAgcmVhZG9ubHk/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc2l6ZSBvZiBhIGNvbG9yIGNlbGwuXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAqIChEZWZhdWx0KSBgdGlsZVNpemUgPSAyNGBcbiAgICAgKiAqIGB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH1gXG4gICAgICovXG4gICAgdGlsZVNpemU6IG51bWJlciB8IFRpbGVTaXplO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSB0aWxlTGF5b3V0OiBUaWxlU2l6ZTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIGNvbG9yIHNlbGVjdGlvbiBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIHNlbGVjdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogRmlyZXMgZWFjaCB0aW1lIHRoZSB2YWx1ZSBpcyBjaGFuZ2VkLlxuICAgICAqL1xuICAgIHZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBlYWNoIHRpbWUgdGhlIHVzZXIgc2VsZWN0cyBhIGNlbGwgd2l0aCB0aGUgbW91c2Ugb3IgcHJlc3NlcyBgRW50ZXJgLlxuICAgICAqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGNlbGxTZWxlY3Rpb246IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb2xvclJvd3M6IHN0cmluZ1tdW107XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIGZvY3VzZWRDZWxsOiBUYWJsZUNlbGw7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlYWRvbmx5IGhvc3RUYWJpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBob3N0Q2xhc3NlczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGlzYWJsZWRDbGFzczogYm9vbGVhbjtcbiAgICBwcml2YXRlIHNlbGVjdGlvbjtcbiAgICBwcml2YXRlIF92YWx1ZTtcbiAgICBwcml2YXRlIF9jb2x1bW5zO1xuICAgIHByaXZhdGUgX3BhbGV0dGU7XG4gICAgcHJpdmF0ZSBfdGFiaW5kZXg7XG4gICAgcHJpdmF0ZSBkeW5hbWljUlRMU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2U6IENvbG9yUGFsZXR0ZVNlcnZpY2UsIGxvY2FsaXphdGlvblNlcnZpY2U6IExvY2FsaXphdGlvblNlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlSG9zdEJsdXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaGFuZGxlQ2VsbFNlbGVjdGlvbih2YWx1ZTogc3RyaW5nLCBmb2N1c2VkQ2VsbD86IFRhYmxlQ2VsbCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBVc2VkIGJ5IHRoZSBUZXh0Qm94Q29udGFpbmVyIHRvIGRldGVybWluZSBpZiB0aGUgY29tcG9uZW50IGlzIGVtcHR5LlxuICAgICAqL1xuICAgIGlzRW1wdHkoKTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGNvbG9yIHZhbHVlIG9mIHRoZSBDb2xvclBhbGV0dGUuXG4gICAgICovXG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHNldFJvd3M7XG4gICAgcHJpdmF0ZSBoYW5kbGVDZWxsTmF2aWdhdGlvbjtcbiAgICBwcml2YXRlIGhhbmRsZUVudGVyO1xuICAgIHByaXZhdGUgbm90aWZ5TmdUb3VjaGVkO1xuICAgIHByaXZhdGUgbm90aWZ5TmdDaGFuZ2VkO1xufVxuIl19