/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @hidden
 */
var RowSelectionState = /** @class */ (function () {
    function RowSelectionState() {
        this.keys = new Set();
    }
    RowSelectionState.prototype.clear = function () {
        this.keys.clear();
    };
    RowSelectionState.prototype.has = function (key) {
        return this.keys.has(key);
    };
    RowSelectionState.prototype.add = function (key) {
        this.keys.add(key);
    };
    RowSelectionState.prototype.remove = function (key) {
        this.keys.delete(key);
    };
    RowSelectionState.prototype.toArray = function () {
        var result = [];
        this.keys.forEach(function (key) {
            result.push({ itemKey: key });
        });
        return result;
    };
    RowSelectionState.prototype.fromArray = function (arr) {
        var _this = this;
        this.keys.clear();
        arr.forEach(function (item) {
            _this.add(item.itemKey);
        });
    };
    return RowSelectionState;
}());
exports.RowSelectionState = RowSelectionState;
/**
 * @hidden
 */
var CellSelectionState = /** @class */ (function () {
    function CellSelectionState() {
        this.keys = new Map();
    }
    CellSelectionState.prototype.clear = function () {
        this.keys.clear();
    };
    CellSelectionState.prototype.has = function (key, columnKey) {
        return this.keys.has(key) && this.keys.get(key).has(columnKey);
    };
    CellSelectionState.prototype.add = function (key, columnKey) {
        if (!this.keys.has(key)) {
            this.keys.set(key, new Set());
        }
        var columnSet = this.keys.get(key);
        columnSet.add(columnKey);
    };
    CellSelectionState.prototype.remove = function (key, columnKey) {
        if (this.keys.has(key)) {
            var columnSet = this.keys.get(key);
            columnSet.delete(columnKey);
            if (!columnSet.size) {
                this.keys.delete(key);
            }
        }
    };
    CellSelectionState.prototype.toArray = function () {
        var result = [];
        this.forEach(function (itemKey, columnKey) {
            result.push({ itemKey: itemKey, columnKey: columnKey });
        });
        return result;
    };
    CellSelectionState.prototype.fromArray = function (state) {
        var _this = this;
        this.keys.clear();
        state.forEach(function (item) {
            _this.add(item.itemKey, item.columnKey);
        });
    };
    CellSelectionState.prototype.updateColumKeys = function (changes) {
        var _this = this;
        var hasChanges = false;
        this.keys.forEach(function (value, key) {
            var newKeys = [];
            value.forEach(function (columnKey) {
                if (changes.has(columnKey)) {
                    newKeys.push(changes.get(columnKey));
                    hasChanges = true;
                }
                else {
                    newKeys.push(columnKey);
                }
            });
            _this.keys.set(key, new Set(newKeys));
        });
        return hasChanges;
    };
    CellSelectionState.prototype.forEach = function (callback) {
        this.keys.forEach(function (value, key) {
            value.forEach(function (columnKey) {
                callback(key, columnKey);
            });
        });
    };
    return CellSelectionState;
}());
exports.CellSelectionState = CellSelectionState;
/**
 * @hidden
 */
exports.createState = function (settings) { return settings.mode === 'cell' ? new CellSelectionState() : new RowSelectionState(); };
