/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, AfterViewInit, OnChanges, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ColumnComponent } from '../../columns/column.component';
import { ColumnBase } from '../../columns/column-base';
import { SortDescriptor } from '@progress/kendo-data-query';
import { SortSettings } from '../../columns/sort-settings';
import { CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { SinglePopupService } from '../../common/single-popup.service';
import { FilterableSettings } from '../../filtering/filterable';
import { DropTargetDirective } from '../../dragdrop/drop-target.directive';
import { DraggableColumnDirective } from '../../dragdrop/draggable-column.directive';
import { DragHintService } from '../../dragdrop/drag-hint.service';
import { DropCueService } from '../../dragdrop/drop-cue.service';
import { ColumnReorderService } from '../../dragdrop/column-reorder.service';
import { SortService } from '../../common/sort.service';
import { SelectionService } from '../../selection/selection.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class HeaderComponent implements AfterViewInit, OnInit, OnChanges, OnDestroy {
    private popupService;
    private hint;
    private cue;
    private reorderService;
    private sortService;
    private selectionService;
    private localization;
    private cd;
    /**
     * @hidden
     */
    totalColumnLevels: number;
    columns: Array<ColumnBase>;
    scrollable: boolean;
    filterable: FilterableSettings;
    sort: Array<SortDescriptor>;
    filter: CompositeFilterDescriptor;
    sortable: SortSettings;
    lockedColumnsCount: number;
    resizable: boolean;
    reorderable: boolean;
    columnMenu: boolean;
    columnMenuTemplate: TemplateRef<any>;
    totalColumnsCount: number;
    sortedFields: any;
    readonly headerClass: boolean;
    readonly sortableLabel: string;
    dropTargets: QueryList<DropTargetDirective>;
    readonly unlockedColumnsCount: number;
    private subscription;
    private targetSubscription;
    private _leafColumns;
    constructor(popupService: SinglePopupService, hint: DragHintService, cue: DropCueService, reorderService: ColumnReorderService, sortService: SortService, selectionService: SelectionService, localization: LocalizationService, cd: ChangeDetectorRef);
    sortColumn(column: ColumnComponent, event: any, link: any): boolean;
    onHeaderKeydown(column: ColumnComponent, args: KeyboardEvent): void;
    showSortNumbering(column: ColumnComponent): boolean;
    sortOrder(field: string): number;
    sortIcon(field: string): any;
    sortState(column: ColumnComponent): string;
    sortStatus(column: ColumnComponent): string;
    toggleSort(column: ColumnComponent): Array<SortDescriptor>;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: any): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isFirstOnRow(column: ColumnComponent, index: number): boolean;
    logicalColumnIndex(column: any): number;
    readonly showFilterMenu: boolean;
    readonly showFilterRow: boolean;
    showColumnMenu(column: any): boolean;
    isFilterable(column: ColumnComponent): boolean;
    canDrop(draggable: DraggableColumnDirective, target: DropTargetDirective): boolean;
    shouldActivate(column: ColumnBase): boolean;
    isSortable(column: ColumnComponent): boolean;
    trackByIndex(index: number, _item: any): any;
    protected toggleDirection(field: string, allowUnsort: boolean, initialDirection: "asc" | "desc"): SortDescriptor;
    columnsForLevel(level: number): Array<ColumnBase>;
    isColumnGroupComponent(column: ColumnBase): boolean;
    readonly columnLevels: Array<number>;
    renderSelectAll(column: any): boolean;
    selectAllClick(args: any): void;
    private sortDescriptor;
    readonly leafColumns: ColumnBase[];
    private attachTargets;
    private normalizeTarget;
    private trackMove;
    private calculateBefore;
    private enter;
    private leave;
    private drop;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HeaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<HeaderComponent, "[kendoTreeListHeader]", never, { "columns": "columns"; "sort": "sort"; "sortable": "sortable"; "lockedColumnsCount": "lockedColumnsCount"; "resizable": "resizable"; "reorderable": "reorderable"; "columnMenu": "columnMenu"; "totalColumnsCount": "totalColumnsCount"; "totalColumnLevels": "totalColumnLevels"; "scrollable": "scrollable"; "filterable": "filterable"; "filter": "filter"; "columnMenuTemplate": "columnMenuTemplate"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJoZWFkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFF1ZXJ5TGlzdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbHVtbnMvY29sdW1uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb2x1bW5CYXNlIH0gZnJvbSAnLi4vLi4vY29sdW1ucy9jb2x1bW4tYmFzZSc7XG5pbXBvcnQgeyBTb3J0RGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IFNvcnRTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2NvbHVtbnMvc29ydC1zZXR0aW5ncyc7XG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xuaW1wb3J0IHsgU2luZ2xlUG9wdXBTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vY29tbW9uL3NpbmdsZS1wb3B1cC5zZXJ2aWNlJztcbmltcG9ydCB7IEZpbHRlcmFibGVTZXR0aW5ncyB9IGZyb20gJy4uLy4uL2ZpbHRlcmluZy9maWx0ZXJhYmxlJztcbmltcG9ydCB7IERyb3BUYXJnZXREaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kcmFnZHJvcC9kcm9wLXRhcmdldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHJhZ2dhYmxlQ29sdW1uRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZHJhZ2Ryb3AvZHJhZ2dhYmxlLWNvbHVtbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRHJhZ0hpbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZHJhZ2Ryb3AvZHJhZy1oaW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJvcEN1ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9kcmFnZHJvcC9kcm9wLWN1ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvbHVtblJlb3JkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZHJhZ2Ryb3AvY29sdW1uLXJlb3JkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTb3J0U2VydmljZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9zb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSGVhZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBwb3B1cFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBoaW50O1xuICAgIHByaXZhdGUgY3VlO1xuICAgIHByaXZhdGUgcmVvcmRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBzb3J0U2VydmljZTtcbiAgICBwcml2YXRlIHNlbGVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSBjZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgdG90YWxDb2x1bW5MZXZlbHM6IG51bWJlcjtcbiAgICBjb2x1bW5zOiBBcnJheTxDb2x1bW5CYXNlPjtcbiAgICBzY3JvbGxhYmxlOiBib29sZWFuO1xuICAgIGZpbHRlcmFibGU6IEZpbHRlcmFibGVTZXR0aW5ncztcbiAgICBzb3J0OiBBcnJheTxTb3J0RGVzY3JpcHRvcj47XG4gICAgZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIHNvcnRhYmxlOiBTb3J0U2V0dGluZ3M7XG4gICAgbG9ja2VkQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgcmVzaXphYmxlOiBib29sZWFuO1xuICAgIHJlb3JkZXJhYmxlOiBib29sZWFuO1xuICAgIGNvbHVtbk1lbnU6IGJvb2xlYW47XG4gICAgY29sdW1uTWVudVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHRvdGFsQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgc29ydGVkRmllbGRzOiBhbnk7XG4gICAgcmVhZG9ubHkgaGVhZGVyQ2xhc3M6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgc29ydGFibGVMYWJlbDogc3RyaW5nO1xuICAgIGRyb3BUYXJnZXRzOiBRdWVyeUxpc3Q8RHJvcFRhcmdldERpcmVjdGl2ZT47XG4gICAgcmVhZG9ubHkgdW5sb2NrZWRDb2x1bW5zQ291bnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHRhcmdldFN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIF9sZWFmQ29sdW1ucztcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlcnZpY2U6IFNpbmdsZVBvcHVwU2VydmljZSwgaGludDogRHJhZ0hpbnRTZXJ2aWNlLCBjdWU6IERyb3BDdWVTZXJ2aWNlLCByZW9yZGVyU2VydmljZTogQ29sdW1uUmVvcmRlclNlcnZpY2UsIHNvcnRTZXJ2aWNlOiBTb3J0U2VydmljZSwgc2VsZWN0aW9uU2VydmljZTogU2VsZWN0aW9uU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIHNvcnRDb2x1bW4oY29sdW1uOiBDb2x1bW5Db21wb25lbnQsIGV2ZW50OiBhbnksIGxpbms6IGFueSk6IGJvb2xlYW47XG4gICAgb25IZWFkZXJLZXlkb3duKGNvbHVtbjogQ29sdW1uQ29tcG9uZW50LCBhcmdzOiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBzaG93U29ydE51bWJlcmluZyhjb2x1bW46IENvbHVtbkNvbXBvbmVudCk6IGJvb2xlYW47XG4gICAgc29ydE9yZGVyKGZpZWxkOiBzdHJpbmcpOiBudW1iZXI7XG4gICAgc29ydEljb24oZmllbGQ6IHN0cmluZyk6IGFueTtcbiAgICBzb3J0U3RhdGUoY29sdW1uOiBDb2x1bW5Db21wb25lbnQpOiBzdHJpbmc7XG4gICAgc29ydFN0YXR1cyhjb2x1bW46IENvbHVtbkNvbXBvbmVudCk6IHN0cmluZztcbiAgICB0b2dnbGVTb3J0KGNvbHVtbjogQ29sdW1uQ29tcG9uZW50KTogQXJyYXk8U29ydERlc2NyaXB0b3I+O1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGlzRmlyc3RPblJvdyhjb2x1bW46IENvbHVtbkNvbXBvbmVudCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgbG9naWNhbENvbHVtbkluZGV4KGNvbHVtbjogYW55KTogbnVtYmVyO1xuICAgIHJlYWRvbmx5IHNob3dGaWx0ZXJNZW51OiBib29sZWFuO1xuICAgIHJlYWRvbmx5IHNob3dGaWx0ZXJSb3c6IGJvb2xlYW47XG4gICAgc2hvd0NvbHVtbk1lbnUoY29sdW1uOiBhbnkpOiBib29sZWFuO1xuICAgIGlzRmlsdGVyYWJsZShjb2x1bW46IENvbHVtbkNvbXBvbmVudCk6IGJvb2xlYW47XG4gICAgY2FuRHJvcChkcmFnZ2FibGU6IERyYWdnYWJsZUNvbHVtbkRpcmVjdGl2ZSwgdGFyZ2V0OiBEcm9wVGFyZ2V0RGlyZWN0aXZlKTogYm9vbGVhbjtcbiAgICBzaG91bGRBY3RpdmF0ZShjb2x1bW46IENvbHVtbkJhc2UpOiBib29sZWFuO1xuICAgIGlzU29ydGFibGUoY29sdW1uOiBDb2x1bW5Db21wb25lbnQpOiBib29sZWFuO1xuICAgIHRyYWNrQnlJbmRleChpbmRleDogbnVtYmVyLCBfaXRlbTogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCB0b2dnbGVEaXJlY3Rpb24oZmllbGQ6IHN0cmluZywgYWxsb3dVbnNvcnQ6IGJvb2xlYW4sIGluaXRpYWxEaXJlY3Rpb246IFwiYXNjXCIgfCBcImRlc2NcIik6IFNvcnREZXNjcmlwdG9yO1xuICAgIGNvbHVtbnNGb3JMZXZlbChsZXZlbDogbnVtYmVyKTogQXJyYXk8Q29sdW1uQmFzZT47XG4gICAgaXNDb2x1bW5Hcm91cENvbXBvbmVudChjb2x1bW46IENvbHVtbkJhc2UpOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbHVtbkxldmVsczogQXJyYXk8bnVtYmVyPjtcbiAgICByZW5kZXJTZWxlY3RBbGwoY29sdW1uOiBhbnkpOiBib29sZWFuO1xuICAgIHNlbGVjdEFsbENsaWNrKGFyZ3M6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzb3J0RGVzY3JpcHRvcjtcbiAgICByZWFkb25seSBsZWFmQ29sdW1uczogQ29sdW1uQmFzZVtdO1xuICAgIHByaXZhdGUgYXR0YWNoVGFyZ2V0cztcbiAgICBwcml2YXRlIG5vcm1hbGl6ZVRhcmdldDtcbiAgICBwcml2YXRlIHRyYWNrTW92ZTtcbiAgICBwcml2YXRlIGNhbGN1bGF0ZUJlZm9yZTtcbiAgICBwcml2YXRlIGVudGVyO1xuICAgIHByaXZhdGUgbGVhdmU7XG4gICAgcHJpdmF0ZSBkcm9wO1xufVxuIl19