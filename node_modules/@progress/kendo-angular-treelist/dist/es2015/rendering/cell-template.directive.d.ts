/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
/**
 * Represents the column cell template of the TreeList ([more information and example]({% slug templates_columns_treelist %}#toc-cell-template)).
 * Helps to customize the content of the cells. To define the cell template, nest an `<ng-template>` tag
 * with the `kendoTreeListCellTemplate` directive inside a `<kendo-treelist-column>` tag.
 *
 * The template context is set to the current data item and the following additional fields are passed:
 * - `columnIndex`&mdash;The current column index. Use it as an alias for a template variable by utilizing the `let-columnIndex="columnIndex"` syntax.
 * - `column`&mdash;The current column instance. Use it as an alias for a template variable by utilizing the `let-column="column"` syntax.
 * - `dataItem`&mdash;The current data item. Represents the default context that will be assigned to any template variable which utilizes the `let-x` syntax&mdash;for example, `let-dataItem`.
 * - `cellContext`&mdash;An object used to pass context information to built-in directives.
 * - `hasChildren`&mdash;Specifies if the item has children.
 * - `isExpanded`&mdash;Specifies if the item is expanded.
 * - `level`&mdash;The hierarchy level of the item.
 * - `loading`&mdash;Specifies if the item children are currently loading.
 * - `rowIndex`&mdash;The current row index. Use it as an alias for a template variable by utilizing the `let-rowIndex="rowIndex"` syntax.
 *
 * {% meta height:470 %}
 * {% embed_file data-binding/hierarchy/app.component.ts preview %}
 * {% embed_file shared/app.module.ts %}
 * {% embed_file shared/main.ts %}
 * {% embed_file shared/filesystem.ts %}
 * {% endmeta %}
 */
import * as ɵngcc0 from '@angular/core';
export declare class CellTemplateDirective {
    templateRef: TemplateRef<any>;
    constructor(templateRef: TemplateRef<any>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CellTemplateDirective, [{ optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CellTemplateDirective, "[kendoTreeListCellTemplate]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiY2VsbC10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgY29sdW1uIGNlbGwgdGVtcGxhdGUgb2YgdGhlIFRyZWVMaXN0IChbbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZV0oeyUgc2x1ZyB0ZW1wbGF0ZXNfY29sdW1uc190cmVlbGlzdCAlfSN0b2MtY2VsbC10ZW1wbGF0ZSkpLlxuICogSGVscHMgdG8gY3VzdG9taXplIHRoZSBjb250ZW50IG9mIHRoZSBjZWxscy4gVG8gZGVmaW5lIHRoZSBjZWxsIHRlbXBsYXRlLCBuZXN0IGFuIGA8bmctdGVtcGxhdGU+YCB0YWdcbiAqIHdpdGggdGhlIGBrZW5kb1RyZWVMaXN0Q2VsbFRlbXBsYXRlYCBkaXJlY3RpdmUgaW5zaWRlIGEgYDxrZW5kby10cmVlbGlzdC1jb2x1bW4+YCB0YWcuXG4gKlxuICogVGhlIHRlbXBsYXRlIGNvbnRleHQgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGRhdGEgaXRlbSBhbmQgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIGZpZWxkcyBhcmUgcGFzc2VkOlxuICogLSBgY29sdW1uSW5kZXhgJm1kYXNoO1RoZSBjdXJyZW50IGNvbHVtbiBpbmRleC4gVXNlIGl0IGFzIGFuIGFsaWFzIGZvciBhIHRlbXBsYXRlIHZhcmlhYmxlIGJ5IHV0aWxpemluZyB0aGUgYGxldC1jb2x1bW5JbmRleD1cImNvbHVtbkluZGV4XCJgIHN5bnRheC5cbiAqIC0gYGNvbHVtbmAmbWRhc2g7VGhlIGN1cnJlbnQgY29sdW1uIGluc3RhbmNlLiBVc2UgaXQgYXMgYW4gYWxpYXMgZm9yIGEgdGVtcGxhdGUgdmFyaWFibGUgYnkgdXRpbGl6aW5nIHRoZSBgbGV0LWNvbHVtbj1cImNvbHVtblwiYCBzeW50YXguXG4gKiAtIGBkYXRhSXRlbWAmbWRhc2g7VGhlIGN1cnJlbnQgZGF0YSBpdGVtLiBSZXByZXNlbnRzIHRoZSBkZWZhdWx0IGNvbnRleHQgdGhhdCB3aWxsIGJlIGFzc2lnbmVkIHRvIGFueSB0ZW1wbGF0ZSB2YXJpYWJsZSB3aGljaCB1dGlsaXplcyB0aGUgYGxldC14YCBzeW50YXgmbWRhc2g7Zm9yIGV4YW1wbGUsIGBsZXQtZGF0YUl0ZW1gLlxuICogLSBgY2VsbENvbnRleHRgJm1kYXNoO0FuIG9iamVjdCB1c2VkIHRvIHBhc3MgY29udGV4dCBpbmZvcm1hdGlvbiB0byBidWlsdC1pbiBkaXJlY3RpdmVzLlxuICogLSBgaGFzQ2hpbGRyZW5gJm1kYXNoO1NwZWNpZmllcyBpZiB0aGUgaXRlbSBoYXMgY2hpbGRyZW4uXG4gKiAtIGBpc0V4cGFuZGVkYCZtZGFzaDtTcGVjaWZpZXMgaWYgdGhlIGl0ZW0gaXMgZXhwYW5kZWQuXG4gKiAtIGBsZXZlbGAmbWRhc2g7VGhlIGhpZXJhcmNoeSBsZXZlbCBvZiB0aGUgaXRlbS5cbiAqIC0gYGxvYWRpbmdgJm1kYXNoO1NwZWNpZmllcyBpZiB0aGUgaXRlbSBjaGlsZHJlbiBhcmUgY3VycmVudGx5IGxvYWRpbmcuXG4gKiAtIGByb3dJbmRleGAmbWRhc2g7VGhlIGN1cnJlbnQgcm93IGluZGV4LiBVc2UgaXQgYXMgYW4gYWxpYXMgZm9yIGEgdGVtcGxhdGUgdmFyaWFibGUgYnkgdXRpbGl6aW5nIHRoZSBgbGV0LXJvd0luZGV4PVwicm93SW5kZXhcImAgc3ludGF4LlxuICpcbiAqIHslIG1ldGEgaGVpZ2h0OjQ3MCAlfVxuICogeyUgZW1iZWRfZmlsZSBkYXRhLWJpbmRpbmcvaGllcmFyY2h5L2FwcC5jb21wb25lbnQudHMgcHJldmlldyAlfVxuICogeyUgZW1iZWRfZmlsZSBzaGFyZWQvYXBwLm1vZHVsZS50cyAlfVxuICogeyUgZW1iZWRfZmlsZSBzaGFyZWQvbWFpbi50cyAlfVxuICogeyUgZW1iZWRfZmlsZSBzaGFyZWQvZmlsZXN5c3RlbS50cyAlfVxuICogeyUgZW5kbWV0YSAlfVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDZWxsVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KTtcbn1cbiJdfQ==