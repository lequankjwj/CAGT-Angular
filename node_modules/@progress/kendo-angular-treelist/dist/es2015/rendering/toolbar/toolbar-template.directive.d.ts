/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { TemplateRef } from '@angular/core';
import { OptionChangesService } from '../../common/option-changes.service';
/**
 * Represents the toolbar template of the TreeList.
 *
 * The template context has the following field:
 * - `position`&mdash;The position at which the toolbar template is rendered. The possible values are "top" and "bottom".
 *
 * @example
 * {% meta height:470 %}
 * {% embed_file configuration/toolbar-template/app.component.ts preview %}
 * {% embed_file shared/app.module.ts %}
 * {% embed_file shared/main.ts %}
 * {% embed_file shared/employees.ts %}
 * {% endmeta %}
 */
import * as ɵngcc0 from '@angular/core';
export declare class ToolbarTemplateDirective {
    templateRef: TemplateRef<any>;
    private optionChanges;
    _position: 'top' | 'bottom' | 'both';
    /**
     * The position of the toolbar ([see example]({% slug toolbartemplate_treelist %})).
     *
     * The possible values are:
     * - `top`&mdash;Positions the toolbar above the group panel or header.
     * - `bottom`&mdash;Positions the toolbar below the pager.
     * - `both`&mdash;Displays two toolbar instances. Positions the first one above
     * the group panel or header and the second one below the pager.
     */
    position: 'top' | 'bottom' | 'both';
    constructor(templateRef: TemplateRef<any>, optionChanges: OptionChangesService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToolbarTemplateDirective, [{ optional: true; }, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ToolbarTemplateDirective, "[kendoTreeListToolbarTemplate]", never, { "position": "position"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbGJhci10ZW1wbGF0ZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT3B0aW9uQ2hhbmdlc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9jb21tb24vb3B0aW9uLWNoYW5nZXMuc2VydmljZSc7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHRvb2xiYXIgdGVtcGxhdGUgb2YgdGhlIFRyZWVMaXN0LlxuICpcbiAqIFRoZSB0ZW1wbGF0ZSBjb250ZXh0IGhhcyB0aGUgZm9sbG93aW5nIGZpZWxkOlxuICogLSBgcG9zaXRpb25gJm1kYXNoO1RoZSBwb3NpdGlvbiBhdCB3aGljaCB0aGUgdG9vbGJhciB0ZW1wbGF0ZSBpcyByZW5kZXJlZC4gVGhlIHBvc3NpYmxlIHZhbHVlcyBhcmUgXCJ0b3BcIiBhbmQgXCJib3R0b21cIi5cbiAqXG4gKiBAZXhhbXBsZVxuICogeyUgbWV0YSBoZWlnaHQ6NDcwICV9XG4gKiB7JSBlbWJlZF9maWxlIGNvbmZpZ3VyYXRpb24vdG9vbGJhci10ZW1wbGF0ZS9hcHAuY29tcG9uZW50LnRzIHByZXZpZXcgJX1cbiAqIHslIGVtYmVkX2ZpbGUgc2hhcmVkL2FwcC5tb2R1bGUudHMgJX1cbiAqIHslIGVtYmVkX2ZpbGUgc2hhcmVkL21haW4udHMgJX1cbiAqIHslIGVtYmVkX2ZpbGUgc2hhcmVkL2VtcGxveWVlcy50cyAlfVxuICogeyUgZW5kbWV0YSAlfVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb29sYmFyVGVtcGxhdGVEaXJlY3RpdmUge1xuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHByaXZhdGUgb3B0aW9uQ2hhbmdlcztcbiAgICBfcG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbScgfCAnYm90aCc7XG4gICAgLyoqXG4gICAgICogVGhlIHBvc2l0aW9uIG9mIHRoZSB0b29sYmFyIChbc2VlIGV4YW1wbGVdKHslIHNsdWcgdG9vbGJhcnRlbXBsYXRlX3RyZWVsaXN0ICV9KSkuXG4gICAgICpcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZTpcbiAgICAgKiAtIGB0b3BgJm1kYXNoO1Bvc2l0aW9ucyB0aGUgdG9vbGJhciBhYm92ZSB0aGUgZ3JvdXAgcGFuZWwgb3IgaGVhZGVyLlxuICAgICAqIC0gYGJvdHRvbWAmbWRhc2g7UG9zaXRpb25zIHRoZSB0b29sYmFyIGJlbG93IHRoZSBwYWdlci5cbiAgICAgKiAtIGBib3RoYCZtZGFzaDtEaXNwbGF5cyB0d28gdG9vbGJhciBpbnN0YW5jZXMuIFBvc2l0aW9ucyB0aGUgZmlyc3Qgb25lIGFib3ZlXG4gICAgICogdGhlIGdyb3VwIHBhbmVsIG9yIGhlYWRlciBhbmQgdGhlIHNlY29uZCBvbmUgYmVsb3cgdGhlIHBhZ2VyLlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiAndG9wJyB8ICdib3R0b20nIHwgJ2JvdGgnO1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBvcHRpb25DaGFuZ2VzOiBPcHRpb25DaGFuZ2VzU2VydmljZSk7XG59XG4iXX0=