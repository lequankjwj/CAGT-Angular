/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit, OnDestroy } from '@angular/core';
import { TreeListComponent } from '../treelist.component';
import { EditService } from './edit-service.interface';
import { Subscription, Observable } from 'rxjs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare abstract class EditingDirectiveBase implements OnInit, OnDestroy {
    protected treelist: TreeListComponent;
    /**
     * The edit service that will handle the operations.
     */
    editService: EditService;
    /**
     * Gets or sets a function that will be called to determine the unique identifier
     * for new items. The function receives the `item` and its `parent` as parameters
     * and must return an ID.
     */
    newItemId: (item: any, parent?: any) => any;
    /**
     * A function that is called to confirm if the `dataItem` will be removed.
     */
    removeConfirmation: (dataItem: any, parent?: any) => Promise<boolean> | Observable<boolean> | boolean;
    protected subscriptions: Subscription;
    protected userEditService: EditService;
    protected isNew: boolean;
    protected parent: any;
    protected dataItem: any;
    protected idCallback: any;
    protected abstract createModel(args: any): any;
    protected abstract saveModel(args: any): any;
    constructor(treelist: TreeListComponent);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    protected readonly defaultEditService: EditService;
    protected addHandler({ parent }: any): void;
    protected saveHandler(args: any): void;
    protected cancelHandler(args: any): void;
    protected removeHandler({ dataItem, parent }: any): void;
    protected closeEditor(args?: any): void;
    protected clean(): void;
    protected onStateChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditingDirectiveBase, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<EditingDirectiveBase, never, never, { "editService": "editService"; "newItemId": "newItemId"; "removeConfirmation": "removeConfirmation"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdGluZy1kaXJlY3RpdmUtYmFzZS5kLnRzIiwic291cmNlcyI6WyJlZGl0aW5nLWRpcmVjdGl2ZS1iYXNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlTGlzdENvbXBvbmVudCB9IGZyb20gJy4uL3RyZWVsaXN0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFZGl0U2VydmljZSB9IGZyb20gJy4vZWRpdC1zZXJ2aWNlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24sIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBFZGl0aW5nRGlyZWN0aXZlQmFzZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgdHJlZWxpc3Q6IFRyZWVMaXN0Q29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBlZGl0IHNlcnZpY2UgdGhhdCB3aWxsIGhhbmRsZSB0aGUgb3BlcmF0aW9ucy5cbiAgICAgKi9cbiAgICBlZGl0U2VydmljZTogRWRpdFNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogR2V0cyBvciBzZXRzIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBkZXRlcm1pbmUgdGhlIHVuaXF1ZSBpZGVudGlmaWVyXG4gICAgICogZm9yIG5ldyBpdGVtcy4gVGhlIGZ1bmN0aW9uIHJlY2VpdmVzIHRoZSBgaXRlbWAgYW5kIGl0cyBgcGFyZW50YCBhcyBwYXJhbWV0ZXJzXG4gICAgICogYW5kIG11c3QgcmV0dXJuIGFuIElELlxuICAgICAqL1xuICAgIG5ld0l0ZW1JZDogKGl0ZW06IGFueSwgcGFyZW50PzogYW55KSA9PiBhbnk7XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB0byBjb25maXJtIGlmIHRoZSBgZGF0YUl0ZW1gIHdpbGwgYmUgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICByZW1vdmVDb25maXJtYXRpb246IChkYXRhSXRlbTogYW55LCBwYXJlbnQ/OiBhbnkpID0+IFByb21pc2U8Ym9vbGVhbj4gfCBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uO1xuICAgIHByb3RlY3RlZCB1c2VyRWRpdFNlcnZpY2U6IEVkaXRTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBpc05ldzogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgcGFyZW50OiBhbnk7XG4gICAgcHJvdGVjdGVkIGRhdGFJdGVtOiBhbnk7XG4gICAgcHJvdGVjdGVkIGlkQ2FsbGJhY2s6IGFueTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgY3JlYXRlTW9kZWwoYXJnczogYW55KTogYW55O1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBzYXZlTW9kZWwoYXJnczogYW55KTogYW55O1xuICAgIGNvbnN0cnVjdG9yKHRyZWVsaXN0OiBUcmVlTGlzdENvbXBvbmVudCk7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlZmF1bHRFZGl0U2VydmljZTogRWRpdFNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGFkZEhhbmRsZXIoeyBwYXJlbnQgfTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2F2ZUhhbmRsZXIoYXJnczogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY2FuY2VsSGFuZGxlcihhcmdzOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCByZW1vdmVIYW5kbGVyKHsgZGF0YUl0ZW0sIHBhcmVudCB9OiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjbG9zZUVkaXRvcihhcmdzPzogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgY2xlYW4oKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25TdGF0ZUNoYW5nZSgpOiB2b2lkO1xufVxuIl19