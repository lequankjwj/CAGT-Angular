/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnInit } from '@angular/core';
import { ColumnComponent } from '../columns/column.component';
import { FilterService } from './filter.service';
import { CompositeFilterDescriptor, FilterDescriptor } from '@progress/kendo-data-query';
import { BaseFilterCellComponent } from './base-filter-cell.component';
import { FilterComponent } from './filter-component.interface';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { CalendarView, DateInputFormatPlaceholder } from '@progress/kendo-angular-dateinputs';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class DateFilterComponent extends BaseFilterCellComponent implements FilterComponent, OnInit {
    protected localization: LocalizationService;
    /**
     * The column with which the filter is associated.
     * @type {ColumnComponent}
     */
    column: ColumnComponent;
    /**
     * The current root filter.
     * @type {CompositeFilterDescriptor}
     */
    filter: CompositeFilterDescriptor;
    /**
     * The default filter operator. Defaults to `contains`.
     * @type {string}
     */
    operator: string;
    /**
     * The current filter for the associated column field.
     * @readonly
     * @type {FilterDescriptor}
     */
    readonly currentFilter: FilterDescriptor;
    /**
     * Specifies the date format that is used when the component is not focused.
     * By default, the `column.format` value is used (if set).
     */
    /**
    * Specifies the date format that is used when the component is not focused.
    * By default, the `column.format` value is used (if set).
    *
    * @readonly
    * @type {string}
    */
    format: string;
    /**
     * Specifies the smallest value that is valid.
     * @type {Date}
     */
    min: Date;
    /**
     * Specifies the greatest value that is valid.
     * @type {Date}
     */
    max: Date;
    /**
     * Defines the descriptions of the format sections in the input field.
     * * `wide`&mdash;Displays the full description of the format section. For example, turns `MM` into `month`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `narrow`&mdash;Displays the narrow description of the format section. For example, turns `MM` into `mo.`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `short`&mdash;Displays the short description of the format section. For example, turns `MM` into `mo.`.
     * Retrieved from [CLDR](https://github.com/telerik/kendo-intl/blob/develop/docs/cldr/index.md).
     * * `formatPattern`&mdash;Directly displays the format section.
     * * [`CustomFormatPlaceholder`]({% slug api_dateinputs_dateinputcustomformatplaceholder %})&mdash;
     * An object that defines the description of the format sections.
     * For example, `{ day: 'd.', month: 'M.', year: 'y', hour: 'h.' }`.
     */
    formatPlaceholder: DateInputFormatPlaceholder;
    /**
     * Specifies the hint that the component displays when its value is `null`.
     */
    placeholder: string;
    /**
     * Defines the active view that the calendar initially renders.
     * By default, the active view is `month`.
     *
     * > You have to set `activeView` within the `topView`-`bottomView` range.
     */
    activeView: CalendarView;
    /**
     * Defines the bottommost calendar view, to which the user can navigate.
     */
    bottomView: CalendarView;
    /**
     * Defines the topmost calendar view, to which the user can navigate.
     */
    topView: CalendarView;
    /**
     * Determines whether to display a week number column in the `month` view of the Calendar.
     */
    weekNumber: boolean;
    private readonly columnFormat;
    /**
     * The current filter operator for the associated column field.
     * @readonly
     * @type {string}
     */
    readonly currentOperator: string;
    protected defaultOperators: Array<{
        text: string;
        value: string;
    }>;
    private _format;
    private subscription;
    constructor(filterService: FilterService, localization: LocalizationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    protected localizationChange(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateFilterComponent, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DateFilterComponent, never, never, { "operator": "operator"; "activeView": "activeView"; "bottomView": "bottomView"; "topView": "topView"; "weekNumber": "weekNumber"; "format": "format"; "column": "column"; "filter": "filter"; "min": "min"; "max": "max"; "formatPlaceholder": "formatPlaceholder"; "placeholder": "placeholder"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1maWx0ZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImRhdGUtZmlsdGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb2x1bW5Db21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRmlsdGVyU2VydmljZSB9IGZyb20gJy4vZmlsdGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciwgRmlsdGVyRGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IEJhc2VGaWx0ZXJDZWxsQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlLWZpbHRlci1jZWxsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGaWx0ZXJDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1jb21wb25lbnQuaW50ZXJmYWNlJztcbmltcG9ydCB7IExvY2FsaXphdGlvblNlcnZpY2UgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuJztcbmltcG9ydCB7IENhbGVuZGFyVmlldywgRGF0ZUlucHV0Rm9ybWF0UGxhY2Vob2xkZXIgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1kYXRlaW5wdXRzJztcbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlRmlsdGVyQ29tcG9uZW50IGV4dGVuZHMgQmFzZUZpbHRlckNlbGxDb21wb25lbnQgaW1wbGVtZW50cyBGaWx0ZXJDb21wb25lbnQsIE9uSW5pdCB7XG4gICAgcHJvdGVjdGVkIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29sdW1uIHdpdGggd2hpY2ggdGhlIGZpbHRlciBpcyBhc3NvY2lhdGVkLlxuICAgICAqIEB0eXBlIHtDb2x1bW5Db21wb25lbnR9XG4gICAgICovXG4gICAgY29sdW1uOiBDb2x1bW5Db21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgcm9vdCBmaWx0ZXIuXG4gICAgICogQHR5cGUge0NvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3J9XG4gICAgICovXG4gICAgZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IGZpbHRlciBvcGVyYXRvci4gRGVmYXVsdHMgdG8gYGNvbnRhaW5zYC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIG9wZXJhdG9yOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgZmlsdGVyIGZvciB0aGUgYXNzb2NpYXRlZCBjb2x1bW4gZmllbGQuXG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHR5cGUge0ZpbHRlckRlc2NyaXB0b3J9XG4gICAgICovXG4gICAgcmVhZG9ubHkgY3VycmVudEZpbHRlcjogRmlsdGVyRGVzY3JpcHRvcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGRhdGUgZm9ybWF0IHRoYXQgaXMgdXNlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbm90IGZvY3VzZWQuXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIGBjb2x1bW4uZm9ybWF0YCB2YWx1ZSBpcyB1c2VkIChpZiBzZXQpLlxuICAgICAqL1xuICAgIC8qKlxuICAgICogU3BlY2lmaWVzIHRoZSBkYXRlIGZvcm1hdCB0aGF0IGlzIHVzZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBmb2N1c2VkLlxuICAgICogQnkgZGVmYXVsdCwgdGhlIGBjb2x1bW4uZm9ybWF0YCB2YWx1ZSBpcyB1c2VkIChpZiBzZXQpLlxuICAgICpcbiAgICAqIEByZWFkb25seVxuICAgICogQHR5cGUge3N0cmluZ31cbiAgICAqL1xuICAgIGZvcm1hdDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgc21hbGxlc3QgdmFsdWUgdGhhdCBpcyB2YWxpZC5cbiAgICAgKiBAdHlwZSB7RGF0ZX1cbiAgICAgKi9cbiAgICBtaW46IERhdGU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBncmVhdGVzdCB2YWx1ZSB0aGF0IGlzIHZhbGlkLlxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqL1xuICAgIG1heDogRGF0ZTtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBkZXNjcmlwdGlvbnMgb2YgdGhlIGZvcm1hdCBzZWN0aW9ucyBpbiB0aGUgaW5wdXQgZmllbGQuXG4gICAgICogKiBgd2lkZWAmbWRhc2g7RGlzcGxheXMgdGhlIGZ1bGwgZGVzY3JpcHRpb24gb2YgdGhlIGZvcm1hdCBzZWN0aW9uLiBGb3IgZXhhbXBsZSwgdHVybnMgYE1NYCBpbnRvIGBtb250aGAuXG4gICAgICogUmV0cmlldmVkIGZyb20gW0NMRFJdKGh0dHBzOi8vZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWludGwvYmxvYi9kZXZlbG9wL2RvY3MvY2xkci9pbmRleC5tZCkuXG4gICAgICogKiBgbmFycm93YCZtZGFzaDtEaXNwbGF5cyB0aGUgbmFycm93IGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXQgc2VjdGlvbi4gRm9yIGV4YW1wbGUsIHR1cm5zIGBNTWAgaW50byBgbW8uYC5cbiAgICAgKiBSZXRyaWV2ZWQgZnJvbSBbQ0xEUl0oaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8taW50bC9ibG9iL2RldmVsb3AvZG9jcy9jbGRyL2luZGV4Lm1kKS5cbiAgICAgKiAqIGBzaG9ydGAmbWRhc2g7RGlzcGxheXMgdGhlIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXQgc2VjdGlvbi4gRm9yIGV4YW1wbGUsIHR1cm5zIGBNTWAgaW50byBgbW8uYC5cbiAgICAgKiBSZXRyaWV2ZWQgZnJvbSBbQ0xEUl0oaHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8taW50bC9ibG9iL2RldmVsb3AvZG9jcy9jbGRyL2luZGV4Lm1kKS5cbiAgICAgKiAqIGBmb3JtYXRQYXR0ZXJuYCZtZGFzaDtEaXJlY3RseSBkaXNwbGF5cyB0aGUgZm9ybWF0IHNlY3Rpb24uXG4gICAgICogKiBbYEN1c3RvbUZvcm1hdFBsYWNlaG9sZGVyYF0oeyUgc2x1ZyBhcGlfZGF0ZWlucHV0c19kYXRlaW5wdXRjdXN0b21mb3JtYXRwbGFjZWhvbGRlciAlfSkmbWRhc2g7XG4gICAgICogQW4gb2JqZWN0IHRoYXQgZGVmaW5lcyB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGZvcm1hdCBzZWN0aW9ucy5cbiAgICAgKiBGb3IgZXhhbXBsZSwgYHsgZGF5OiAnZC4nLCBtb250aDogJ00uJywgeWVhcjogJ3knLCBob3VyOiAnaC4nIH1gLlxuICAgICAqL1xuICAgIGZvcm1hdFBsYWNlaG9sZGVyOiBEYXRlSW5wdXRGb3JtYXRQbGFjZWhvbGRlcjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGhpbnQgdGhhdCB0aGUgY29tcG9uZW50IGRpc3BsYXlzIHdoZW4gaXRzIHZhbHVlIGlzIGBudWxsYC5cbiAgICAgKi9cbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGFjdGl2ZSB2aWV3IHRoYXQgdGhlIGNhbGVuZGFyIGluaXRpYWxseSByZW5kZXJzLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBhY3RpdmUgdmlldyBpcyBgbW9udGhgLlxuICAgICAqXG4gICAgICogPiBZb3UgaGF2ZSB0byBzZXQgYGFjdGl2ZVZpZXdgIHdpdGhpbiB0aGUgYHRvcFZpZXdgLWBib3R0b21WaWV3YCByYW5nZS5cbiAgICAgKi9cbiAgICBhY3RpdmVWaWV3OiBDYWxlbmRhclZpZXc7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgYm90dG9tbW9zdCBjYWxlbmRhciB2aWV3LCB0byB3aGljaCB0aGUgdXNlciBjYW4gbmF2aWdhdGUuXG4gICAgICovXG4gICAgYm90dG9tVmlldzogQ2FsZW5kYXJWaWV3O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIHRvcG1vc3QgY2FsZW5kYXIgdmlldywgdG8gd2hpY2ggdGhlIHVzZXIgY2FuIG5hdmlnYXRlLlxuICAgICAqL1xuICAgIHRvcFZpZXc6IENhbGVuZGFyVmlldztcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdG8gZGlzcGxheSBhIHdlZWsgbnVtYmVyIGNvbHVtbiBpbiB0aGUgYG1vbnRoYCB2aWV3IG9mIHRoZSBDYWxlbmRhci5cbiAgICAgKi9cbiAgICB3ZWVrTnVtYmVyOiBib29sZWFuO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29sdW1uRm9ybWF0O1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGZpbHRlciBvcGVyYXRvciBmb3IgdGhlIGFzc29jaWF0ZWQgY29sdW1uIGZpZWxkLlxuICAgICAqIEByZWFkb25seVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVhZG9ubHkgY3VycmVudE9wZXJhdG9yOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIGRlZmF1bHRPcGVyYXRvcnM6IEFycmF5PHtcbiAgICAgICAgdGV4dDogc3RyaW5nO1xuICAgICAgICB2YWx1ZTogc3RyaW5nO1xuICAgIH0+O1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgbG9jYWxpemF0aW9uQ2hhbmdlKCk6IHZvaWQ7XG59XG4iXX0=