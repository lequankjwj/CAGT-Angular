/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { FilterDescriptor, CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { ColumnComponent } from "../../columns/column.component";
import { FilterService } from '../filter.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class NumericFilterMenuInputComponent {
    operators: Array<{
        text: string;
        value: string;
    }>;
    column: ColumnComponent;
    filter: CompositeFilterDescriptor;
    operator: string;
    currentFilter: FilterDescriptor;
    filterService: FilterService;
    /**
     * Specifies the value which is used to increment or decrement the component value.
     * @type {numeric}
     */
    step: number;
    /**
     * Specifies the smallest value that is valid.
     * @type {number}
     */
    min: number;
    /**
     * Specifies the greatest value that is valid.
     * @type {number}
     */
    max: number;
    /**
     * Specifies whether the **Up** and **Down** spin buttons will be rendered.
     * @type {boolean}
     */
    spinners: boolean;
    /**
     * Specifies the number precision tat is applied to the component value when it is focused.
     * If the user enters a number with a greater precision than is currently configured, the component value is rounded.
     *
     * @type {number}
     */
    decimals: number;
    /**
     * Specifies the number format that is used when the component is not focused.
     * By default, the `column.format` value is used (if set).
     */
    format: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NumericFilterMenuInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NumericFilterMenuInputComponent, "kendo-treelist-numeric-filter-menu-input", never, { "operators": "operators"; "step": "step"; "spinners": "spinners"; "column": "column"; "filter": "filter"; "operator": "operator"; "currentFilter": "currentFilter"; "filterService": "filterService"; "min": "min"; "max": "max"; "decimals": "decimals"; "format": "format"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtZXJpYy1maWx0ZXItbWVudS1pbnB1dC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibnVtZXJpYy1maWx0ZXItbWVudS1pbnB1dC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuaW1wb3J0IHsgRmlsdGVyRGVzY3JpcHRvciwgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IENvbHVtbkNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi9jb2x1bW5zL2NvbHVtbi5jb21wb25lbnRcIjtcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tICcuLi9maWx0ZXIuc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnVtZXJpY0ZpbHRlck1lbnVJbnB1dENvbXBvbmVudCB7XG4gICAgb3BlcmF0b3JzOiBBcnJheTx7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9PjtcbiAgICBjb2x1bW46IENvbHVtbkNvbXBvbmVudDtcbiAgICBmaWx0ZXI6IENvbXBvc2l0ZUZpbHRlckRlc2NyaXB0b3I7XG4gICAgb3BlcmF0b3I6IHN0cmluZztcbiAgICBjdXJyZW50RmlsdGVyOiBGaWx0ZXJEZXNjcmlwdG9yO1xuICAgIGZpbHRlclNlcnZpY2U6IEZpbHRlclNlcnZpY2U7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSB2YWx1ZSB3aGljaCBpcyB1c2VkIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgdGhlIGNvbXBvbmVudCB2YWx1ZS5cbiAgICAgKiBAdHlwZSB7bnVtZXJpY31cbiAgICAgKi9cbiAgICBzdGVwOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBzbWFsbGVzdCB2YWx1ZSB0aGF0IGlzIHZhbGlkLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgbWluOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBncmVhdGVzdCB2YWx1ZSB0aGF0IGlzIHZhbGlkLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgbWF4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHdoZXRoZXIgdGhlICoqVXAqKiBhbmQgKipEb3duKiogc3BpbiBidXR0b25zIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgc3Bpbm5lcnM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBudW1iZXIgcHJlY2lzaW9uIHRhdCBpcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQgdmFsdWUgd2hlbiBpdCBpcyBmb2N1c2VkLlxuICAgICAqIElmIHRoZSB1c2VyIGVudGVycyBhIG51bWJlciB3aXRoIGEgZ3JlYXRlciBwcmVjaXNpb24gdGhhbiBpcyBjdXJyZW50bHkgY29uZmlndXJlZCwgdGhlIGNvbXBvbmVudCB2YWx1ZSBpcyByb3VuZGVkLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBkZWNpbWFsczogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgbnVtYmVyIGZvcm1hdCB0aGF0IGlzIHVzZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIG5vdCBmb2N1c2VkLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBgY29sdW1uLmZvcm1hdGAgdmFsdWUgaXMgdXNlZCAoaWYgc2V0KS5cbiAgICAgKi9cbiAgICBmb3JtYXQ6IHN0cmluZztcbn1cbiJdfQ==