/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, EventEmitter } from '@angular/core';
import { TreeListComponent } from '../treelist.component';
/**
 * A directive which controls the expanded state of the items
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpandableDirective implements OnDestroy {
    private treelist;
    /**
     * Fires when the expandedKeys are changed.
     */
    expandedKeysChange: EventEmitter<any>;
    /**
     * Sets the expanded item keys.
     */
    expandedKeys: any[];
    /**
     * Specifies if the items should be initially expanded.
     * @default false
     */
    initiallyExpanded: boolean;
    /**
     * Defines the item key that will be stored in the expandedKeys collection.
     * Defaults to the TreeList idField.
     */
    expandBy: string | ((dataItem: any) => any);
    protected readonly keyGetter: any;
    protected subscriptions: any;
    protected state: any;
    protected _expandBy: any;
    protected _expandedKeys: any[];
    constructor(treelist: TreeListComponent);
    /**
     * @hidden
     */
    isExpanded(item: any): boolean;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    private toggleState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExpandableDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ExpandableDirective, "[kendoTreeListExpandable]", ["kendoTreeListExpandable"], { "initiallyExpanded": "initiallyExpanded"; "expandedKeys": "expandedKeys"; "expandBy": "expandBy"; }, { "expandedKeysChange": "expandedKeysChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kYWJsZS5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZXhwYW5kYWJsZS5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlTGlzdENvbXBvbmVudCB9IGZyb20gJy4uL3RyZWVsaXN0LmNvbXBvbmVudCc7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIGNvbnRyb2xzIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgaXRlbXNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhwYW5kYWJsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSB0cmVlbGlzdDtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBleHBhbmRlZEtleXMgYXJlIGNoYW5nZWQuXG4gICAgICovXG4gICAgZXhwYW5kZWRLZXlzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBleHBhbmRlZCBpdGVtIGtleXMuXG4gICAgICovXG4gICAgZXhwYW5kZWRLZXlzOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGl0ZW1zIHNob3VsZCBiZSBpbml0aWFsbHkgZXhwYW5kZWQuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBpbml0aWFsbHlFeHBhbmRlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBpdGVtIGtleSB0aGF0IHdpbGwgYmUgc3RvcmVkIGluIHRoZSBleHBhbmRlZEtleXMgY29sbGVjdGlvbi5cbiAgICAgKiBEZWZhdWx0cyB0byB0aGUgVHJlZUxpc3QgaWRGaWVsZC5cbiAgICAgKi9cbiAgICBleHBhbmRCeTogc3RyaW5nIHwgKChkYXRhSXRlbTogYW55KSA9PiBhbnkpO1xuICAgIHByb3RlY3RlZCByZWFkb25seSBrZXlHZXR0ZXI6IGFueTtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogYW55O1xuICAgIHByb3RlY3RlZCBzdGF0ZTogYW55O1xuICAgIHByb3RlY3RlZCBfZXhwYW5kQnk6IGFueTtcbiAgICBwcm90ZWN0ZWQgX2V4cGFuZGVkS2V5czogYW55W107XG4gICAgY29uc3RydWN0b3IodHJlZWxpc3Q6IFRyZWVMaXN0Q29tcG9uZW50KTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNFeHBhbmRlZChpdGVtOiBhbnkpOiBib29sZWFuO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHRvZ2dsZVN0YXRlO1xufVxuIl19