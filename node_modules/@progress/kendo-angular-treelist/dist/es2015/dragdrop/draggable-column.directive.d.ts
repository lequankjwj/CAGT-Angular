/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { DraggableDirective } from '@progress/kendo-angular-common';
import { DragAndDropService } from './drag-and-drop.service';
import { DragHintService } from './drag-hint.service';
import { DragAndDropContext } from './context-types';
import { DropCueService } from './drop-cue.service';
import { NavigationService } from '../navigation/navigation.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class DraggableColumnDirective implements OnInit, OnDestroy {
    draggable: DraggableDirective;
    element: ElementRef;
    private zone;
    private service;
    private hint;
    private cue;
    private nav;
    private renderer;
    context: DragAndDropContext;
    enableDrag: boolean;
    drag: EventEmitter<any>;
    readonly hostClass: boolean;
    private subscriptions;
    private enabled;
    constructor(draggable: DraggableDirective, element: ElementRef, zone: NgZone, service: DragAndDropService, hint: DragHintService, cue: DropCueService, nav: NavigationService, renderer: Renderer2);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private drop;
    private performDrag;
    private elementUnderCursor;
    private updateTouchAction;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DraggableColumnDirective, [{ host: true; }, null, null, null, null, null, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DraggableColumnDirective, "[kendoDraggableColumn]", never, { "context": "context"; "enableDrag": "enableDrag"; }, { "drag": "drag"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLWNvbHVtbi5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZHJhZ2dhYmxlLWNvbHVtbi5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEcmFnZ2FibGVEaXJlY3RpdmUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1jb21tb24nO1xuaW1wb3J0IHsgRHJhZ0FuZERyb3BTZXJ2aWNlIH0gZnJvbSAnLi9kcmFnLWFuZC1kcm9wLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ0hpbnRTZXJ2aWNlIH0gZnJvbSAnLi9kcmFnLWhpbnQuc2VydmljZSc7XG5pbXBvcnQgeyBEcmFnQW5kRHJvcENvbnRleHQgfSBmcm9tICcuL2NvbnRleHQtdHlwZXMnO1xuaW1wb3J0IHsgRHJvcEN1ZVNlcnZpY2UgfSBmcm9tICcuL2Ryb3AtY3VlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmF2aWdhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9uYXZpZ2F0aW9uL25hdmlnYXRpb24uc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHJhZ2dhYmxlQ29sdW1uRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIGRyYWdnYWJsZTogRHJhZ2dhYmxlRGlyZWN0aXZlO1xuICAgIGVsZW1lbnQ6IEVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgc2VydmljZTtcbiAgICBwcml2YXRlIGhpbnQ7XG4gICAgcHJpdmF0ZSBjdWU7XG4gICAgcHJpdmF0ZSBuYXY7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBjb250ZXh0OiBEcmFnQW5kRHJvcENvbnRleHQ7XG4gICAgZW5hYmxlRHJhZzogYm9vbGVhbjtcbiAgICBkcmFnOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICByZWFkb25seSBob3N0Q2xhc3M6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIHByaXZhdGUgZW5hYmxlZDtcbiAgICBjb25zdHJ1Y3RvcihkcmFnZ2FibGU6IERyYWdnYWJsZURpcmVjdGl2ZSwgZWxlbWVudDogRWxlbWVudFJlZiwgem9uZTogTmdab25lLCBzZXJ2aWNlOiBEcmFnQW5kRHJvcFNlcnZpY2UsIGhpbnQ6IERyYWdIaW50U2VydmljZSwgY3VlOiBEcm9wQ3VlU2VydmljZSwgbmF2OiBOYXZpZ2F0aW9uU2VydmljZSwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgZHJvcDtcbiAgICBwcml2YXRlIHBlcmZvcm1EcmFnO1xuICAgIHByaXZhdGUgZWxlbWVudFVuZGVyQ3Vyc29yO1xuICAgIHByaXZhdGUgdXBkYXRlVG91Y2hBY3Rpb247XG59XG4iXX0=