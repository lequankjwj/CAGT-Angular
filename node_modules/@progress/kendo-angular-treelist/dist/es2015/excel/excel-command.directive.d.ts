/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2 as Renderer, NgZone } from '@angular/core';
import { Button } from '@progress/kendo-angular-buttons';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { ExcelService } from './excel.service';
/**
 * Represents the `export-to-Excel` command of the TreeList. You can apply this
 * directive to any `button` element inside a
 * [`ToolbarTemplate`]({% slug api_treelist_commandcolumncomponent %}).
 * When the user clicks a button associated with the directive, the
 * [`excelExport`]({% slug api_treelist_treelistcomponent %}#toc-excelexport) event
 * fires ([see example]({% slug excelexport_treelist %})).
 *
 * @example
 * ```html-no-run
 * <kendo-treelist>
 *      <ng-template kendoTreeListToolbarTemplate>
 *          <button kendoTreeListExcelCommand>Export to PDF</button>
 *      </ng-template>
 *      <kendo-treelist-excel fileName="TreeList.xlsx">
 *      </kendo-treelist-excel>
 * </kendo-treelist>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExcelCommandDirective extends Button {
    private excelService;
    /**
     * @hidden
     */
    onClick(e: any): void;
    /**
     * @hidden
     */
    readonly excelClass: boolean;
    constructor(excelService: ExcelService, element: ElementRef, renderer: Renderer, localization: LocalizationService, ngZone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelCommandDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ExcelCommandDirective, "[kendoTreeListExcelCommand]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtY29tbWFuZC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiZXhjZWwtY29tbWFuZC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBSZW5kZXJlcjIgYXMgUmVuZGVyZXIsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItYnV0dG9ucyc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBFeGNlbFNlcnZpY2UgfSBmcm9tICcuL2V4Y2VsLnNlcnZpY2UnO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBgZXhwb3J0LXRvLUV4Y2VsYCBjb21tYW5kIG9mIHRoZSBUcmVlTGlzdC4gWW91IGNhbiBhcHBseSB0aGlzXG4gKiBkaXJlY3RpdmUgdG8gYW55IGBidXR0b25gIGVsZW1lbnQgaW5zaWRlIGFcbiAqIFtgVG9vbGJhclRlbXBsYXRlYF0oeyUgc2x1ZyBhcGlfdHJlZWxpc3RfY29tbWFuZGNvbHVtbmNvbXBvbmVudCAlfSkuXG4gKiBXaGVuIHRoZSB1c2VyIGNsaWNrcyBhIGJ1dHRvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGRpcmVjdGl2ZSwgdGhlXG4gKiBbYGV4Y2VsRXhwb3J0YF0oeyUgc2x1ZyBhcGlfdHJlZWxpc3RfdHJlZWxpc3Rjb21wb25lbnQgJX0jdG9jLWV4Y2VsZXhwb3J0KSBldmVudFxuICogZmlyZXMgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBleGNlbGV4cG9ydF90cmVlbGlzdCAlfSkpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sLW5vLXJ1blxuICogPGtlbmRvLXRyZWVsaXN0PlxuICogICAgICA8bmctdGVtcGxhdGUga2VuZG9UcmVlTGlzdFRvb2xiYXJUZW1wbGF0ZT5cbiAqICAgICAgICAgIDxidXR0b24ga2VuZG9UcmVlTGlzdEV4Y2VsQ29tbWFuZD5FeHBvcnQgdG8gUERGPC9idXR0b24+XG4gKiAgICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgICAgIDxrZW5kby10cmVlbGlzdC1leGNlbCBmaWxlTmFtZT1cIlRyZWVMaXN0Lnhsc3hcIj5cbiAqICAgICAgPC9rZW5kby10cmVlbGlzdC1leGNlbD5cbiAqIDwva2VuZG8tdHJlZWxpc3Q+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRXhjZWxDb21tYW5kRGlyZWN0aXZlIGV4dGVuZHMgQnV0dG9uIHtcbiAgICBwcml2YXRlIGV4Y2VsU2VydmljZTtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25DbGljayhlOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBleGNlbENsYXNzOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGV4Y2VsU2VydmljZTogRXhjZWxTZXJ2aWNlLCBlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xufVxuIl19