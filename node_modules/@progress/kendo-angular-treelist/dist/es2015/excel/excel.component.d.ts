/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, QueryList, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { ColumnBase, CellOptions } from '@progress/kendo-angular-excel-export';
import { TreeListComponent } from '../treelist.component';
import { ExcelService } from './excel.service';
import { LocalizationService } from '@progress/kendo-angular-l10n';
/**
 * The expected type of result for the treelist excel export fetchData function.
 */
import * as ɵngcc0 from '@angular/core';
export interface ExcelExportData {
    /**
     * The root data that should be exported.
     */
    data: any[] | Observable<any[]>;
    /**
     * A function that returns the children for an item.
     */
    fetchChildren: any;
    /**
     * A function that indicates if a particular item has children.
     */
    hasChildren: any;
}
/**
 * Configures the settings for the export of TreeList in Excel ([see example]({% slug excelexport_treelist %})).
 */
export declare class ExcelComponent implements OnDestroy {
    private excelService;
    private localization;
    private zone;
    /**
     * Specifies the file name of the exported Excel file.
     * @default "Export.xlsx"
     */
    fileName: string;
    /**
     * Enables or disables column filtering in the Excel file. This behavior is different from the filtering feature of the TreeList.
     */
    filterable: boolean;
    /**
     * The author of the workbook.
     */
    creator?: string;
    /**
     * The date on which the workbook was created. Defaults to `new Date()`.
     */
    date?: Date;
    /**
     * If set to `true`, the content is forwarded to `proxyURL` even if the browser supports the saving of files locally.
     */
    forceProxy: boolean;
    /**
     * The URL of the server-side proxy which streams the file to the end user.
     * You need to use a proxy if the browser is not capable of saving files locally&mdash;for example,
     * Internet Explorer 9 and Safari. The responsibility for implementing the server-side proxy is yours.
     *
     * In the request body, the proxy receives a POST request with the following parameters:
     * - `contentType`&mdash;The MIME type of the file.
     * - `base64`&mdash;The base-64 encoded file content.
     * - `fileName`&mdash;The file name, as requested by the caller.
     *
     * The proxy returns the decoded file with the `"Content-Disposition"` header set to `attachment; filename="<fileName.xslx>"`.
     */
    proxyURL: string;
    /**
     * The function that is used to get the exported data options. By default, uses the current data of the TreeList.
     * To export data that is different from the current TreeList data, provide a custom function.
     */
    fetchData: (component: TreeListComponent) => ExcelExportData;
    /**
     * Specifies if the item levels in the Excel file are collapsible.
     * > Applicable only if the treelist has footers.
     */
    collapsible: boolean;
    /**
     * Specifies if export should include all pages
     * @default true
     */
    allPages: boolean;
    /**
     * Specifies if the export should expand all items or should use the current TreeList state.
     * @default true
     */
    expandAll: boolean;
    /**
     * The options of the cells that are inserted before the data to indicate the hierarchy.
     */
    paddingCellOptions: CellOptions;
    /**
     * @hidden
     */
    columns: QueryList<ColumnBase>;
    private saveSubscription;
    private dataSubscription;
    constructor(excelService: ExcelService, localization: LocalizationService, zone: NgZone);
    ngOnDestroy(): void;
    protected save(component: TreeListComponent): void;
    protected exportData(component: any, result?: ExcelExportData): void;
    protected saveFile(options: any): void;
    protected componentViewOptions(component: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ExcelComponent, "kendo-treelist-excel", never, { "fileName": "fileName"; "allPages": "allPages"; "expandAll": "expandAll"; "filterable": "filterable"; "creator": "creator"; "date": "date"; "forceProxy": "forceProxy"; "proxyURL": "proxyURL"; "fetchData": "fetchData"; "collapsible": "collapsible"; "paddingCellOptions": "paddingCellOptions"; }, {}, ["columns"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImV4Y2VsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IE9uRGVzdHJveSwgUXVlcnlMaXN0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbHVtbkJhc2UsIENlbGxPcHRpb25zIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZXhjZWwtZXhwb3J0JztcbmltcG9ydCB7IFRyZWVMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vdHJlZWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IEV4Y2VsU2VydmljZSB9IGZyb20gJy4vZXhjZWwuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG4vKipcbiAqIFRoZSBleHBlY3RlZCB0eXBlIG9mIHJlc3VsdCBmb3IgdGhlIHRyZWVsaXN0IGV4Y2VsIGV4cG9ydCBmZXRjaERhdGEgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXhjZWxFeHBvcnREYXRhIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcm9vdCBkYXRhIHRoYXQgc2hvdWxkIGJlIGV4cG9ydGVkLlxuICAgICAqL1xuICAgIGRhdGE6IGFueVtdIHwgT2JzZXJ2YWJsZTxhbnlbXT47XG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGNoaWxkcmVuIGZvciBhbiBpdGVtLlxuICAgICAqL1xuICAgIGZldGNoQ2hpbGRyZW46IGFueTtcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRoYXQgaW5kaWNhdGVzIGlmIGEgcGFydGljdWxhciBpdGVtIGhhcyBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBoYXNDaGlsZHJlbjogYW55O1xufVxuLyoqXG4gKiBDb25maWd1cmVzIHRoZSBzZXR0aW5ncyBmb3IgdGhlIGV4cG9ydCBvZiBUcmVlTGlzdCBpbiBFeGNlbCAoW3NlZSBleGFtcGxlXSh7JSBzbHVnIGV4Y2VsZXhwb3J0X3RyZWVsaXN0ICV9KSkuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEV4Y2VsQ29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGV4Y2VsU2VydmljZTtcbiAgICBwcml2YXRlIGxvY2FsaXphdGlvbjtcbiAgICBwcml2YXRlIHpvbmU7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBmaWxlIG5hbWUgb2YgdGhlIGV4cG9ydGVkIEV4Y2VsIGZpbGUuXG4gICAgICogQGRlZmF1bHQgXCJFeHBvcnQueGxzeFwiXG4gICAgICovXG4gICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBFbmFibGVzIG9yIGRpc2FibGVzIGNvbHVtbiBmaWx0ZXJpbmcgaW4gdGhlIEV4Y2VsIGZpbGUuIFRoaXMgYmVoYXZpb3IgaXMgZGlmZmVyZW50IGZyb20gdGhlIGZpbHRlcmluZyBmZWF0dXJlIG9mIHRoZSBUcmVlTGlzdC5cbiAgICAgKi9cbiAgICBmaWx0ZXJhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBhdXRob3Igb2YgdGhlIHdvcmtib29rLlxuICAgICAqL1xuICAgIGNyZWF0b3I/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgb24gd2hpY2ggdGhlIHdvcmtib29rIHdhcyBjcmVhdGVkLiBEZWZhdWx0cyB0byBgbmV3IERhdGUoKWAuXG4gICAgICovXG4gICAgZGF0ZT86IERhdGU7XG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIGB0cnVlYCwgdGhlIGNvbnRlbnQgaXMgZm9yd2FyZGVkIHRvIGBwcm94eVVSTGAgZXZlbiBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0aGUgc2F2aW5nIG9mIGZpbGVzIGxvY2FsbHkuXG4gICAgICovXG4gICAgZm9yY2VQcm94eTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgVVJMIG9mIHRoZSBzZXJ2ZXItc2lkZSBwcm94eSB3aGljaCBzdHJlYW1zIHRoZSBmaWxlIHRvIHRoZSBlbmQgdXNlci5cbiAgICAgKiBZb3UgbmVlZCB0byB1c2UgYSBwcm94eSBpZiB0aGUgYnJvd3NlciBpcyBub3QgY2FwYWJsZSBvZiBzYXZpbmcgZmlsZXMgbG9jYWxseSZtZGFzaDtmb3IgZXhhbXBsZSxcbiAgICAgKiBJbnRlcm5ldCBFeHBsb3JlciA5IGFuZCBTYWZhcmkuIFRoZSByZXNwb25zaWJpbGl0eSBmb3IgaW1wbGVtZW50aW5nIHRoZSBzZXJ2ZXItc2lkZSBwcm94eSBpcyB5b3Vycy5cbiAgICAgKlxuICAgICAqIEluIHRoZSByZXF1ZXN0IGJvZHksIHRoZSBwcm94eSByZWNlaXZlcyBhIFBPU1QgcmVxdWVzdCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAgICAgKiAtIGBjb250ZW50VHlwZWAmbWRhc2g7VGhlIE1JTUUgdHlwZSBvZiB0aGUgZmlsZS5cbiAgICAgKiAtIGBiYXNlNjRgJm1kYXNoO1RoZSBiYXNlLTY0IGVuY29kZWQgZmlsZSBjb250ZW50LlxuICAgICAqIC0gYGZpbGVOYW1lYCZtZGFzaDtUaGUgZmlsZSBuYW1lLCBhcyByZXF1ZXN0ZWQgYnkgdGhlIGNhbGxlci5cbiAgICAgKlxuICAgICAqIFRoZSBwcm94eSByZXR1cm5zIHRoZSBkZWNvZGVkIGZpbGUgd2l0aCB0aGUgYFwiQ29udGVudC1EaXNwb3NpdGlvblwiYCBoZWFkZXIgc2V0IHRvIGBhdHRhY2htZW50OyBmaWxlbmFtZT1cIjxmaWxlTmFtZS54c2x4PlwiYC5cbiAgICAgKi9cbiAgICBwcm94eVVSTDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB0aGF0IGlzIHVzZWQgdG8gZ2V0IHRoZSBleHBvcnRlZCBkYXRhIG9wdGlvbnMuIEJ5IGRlZmF1bHQsIHVzZXMgdGhlIGN1cnJlbnQgZGF0YSBvZiB0aGUgVHJlZUxpc3QuXG4gICAgICogVG8gZXhwb3J0IGRhdGEgdGhhdCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgY3VycmVudCBUcmVlTGlzdCBkYXRhLCBwcm92aWRlIGEgY3VzdG9tIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZldGNoRGF0YTogKGNvbXBvbmVudDogVHJlZUxpc3RDb21wb25lbnQpID0+IEV4Y2VsRXhwb3J0RGF0YTtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgaWYgdGhlIGl0ZW0gbGV2ZWxzIGluIHRoZSBFeGNlbCBmaWxlIGFyZSBjb2xsYXBzaWJsZS5cbiAgICAgKiA+IEFwcGxpY2FibGUgb25seSBpZiB0aGUgdHJlZWxpc3QgaGFzIGZvb3RlcnMuXG4gICAgICovXG4gICAgY29sbGFwc2libGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIGV4cG9ydCBzaG91bGQgaW5jbHVkZSBhbGwgcGFnZXNcbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgYWxsUGFnZXM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIGlmIHRoZSBleHBvcnQgc2hvdWxkIGV4cGFuZCBhbGwgaXRlbXMgb3Igc2hvdWxkIHVzZSB0aGUgY3VycmVudCBUcmVlTGlzdCBzdGF0ZS5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZXhwYW5kQWxsOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBvcHRpb25zIG9mIHRoZSBjZWxscyB0aGF0IGFyZSBpbnNlcnRlZCBiZWZvcmUgdGhlIGRhdGEgdG8gaW5kaWNhdGUgdGhlIGhpZXJhcmNoeS5cbiAgICAgKi9cbiAgICBwYWRkaW5nQ2VsbE9wdGlvbnM6IENlbGxPcHRpb25zO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb2x1bW5zOiBRdWVyeUxpc3Q8Q29sdW1uQmFzZT47XG4gICAgcHJpdmF0ZSBzYXZlU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZGF0YVN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihleGNlbFNlcnZpY2U6IEV4Y2VsU2VydmljZSwgbG9jYWxpemF0aW9uOiBMb2NhbGl6YXRpb25TZXJ2aWNlLCB6b25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNhdmUoY29tcG9uZW50OiBUcmVlTGlzdENvbXBvbmVudCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGV4cG9ydERhdGEoY29tcG9uZW50OiBhbnksIHJlc3VsdD86IEV4Y2VsRXhwb3J0RGF0YSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNhdmVGaWxlKG9wdGlvbnM6IGFueSk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGNvbXBvbmVudFZpZXdPcHRpb25zKGNvbXBvbmVudDogYW55KTogYW55O1xufVxuIl19