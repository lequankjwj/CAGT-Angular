/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { SimpleChange, OnInit, OnDestroy, OnChanges, DoCheck } from '@angular/core';
import { State, CompositeFilterDescriptor, SortDescriptor } from '@progress/kendo-data-query';
import { TreeListComponent } from '../treelist.component';
import { DataStateChangeEvent } from '../data/change-event-args.interface';
import * as ɵngcc0 from '@angular/core';
export declare abstract class BaseBindingDirective implements OnInit, OnDestroy, OnChanges, DoCheck {
    protected treelist: TreeListComponent;
    /**
     * Defines the descriptors by which the data will be sorted.
     */
    sort: SortDescriptor[];
    /**
     * Defines the descriptor by which the data will be filtered.
     */
    filter: CompositeFilterDescriptor;
    /**
     * Defines the descriptor by which the data will be filtered.
     */
    aggregate: any;
    protected state: State;
    protected abstract data: any;
    protected dataChanged: boolean;
    protected cache: any;
    protected originalData: any[];
    protected _aggregate: any;
    private subscriptions;
    constructor(treelist: TreeListComponent);
    /**
     * @hidden
     */
    ngOnInit(): void;
    /**
     * @hidden
     */
    ngOnDestroy(): void;
    ngDoCheck(): void;
    /**
     * @hidden
     */
    ngOnChanges(changes: {
        [propertyName: string]: SimpleChange;
    }): void;
    /**
     * @hidden
     */
    onStateChange(state: DataStateChangeEvent): void;
    /**
     * @hidden
     */
    rebind(): void;
    protected abstract getChildren(item?: any): any;
    protected abstract itemKey(item: any): any;
    protected applyState({ sort, filter }: State): void;
    protected fetchChildren(item?: any): any;
    protected hasChildren(item: any): boolean;
    protected filterItems(items: any): any[];
    protected calculateAggregates(items: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseBindingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseBindingDirective, never, never, { "sort": "sort"; "filter": "filter"; "aggregate": "aggregate"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1iaW5kaW5nLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJiYXNlLWJpbmRpbmcuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBTaW1wbGVDaGFuZ2UsIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMsIERvQ2hlY2sgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0YXRlLCBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yLCBTb3J0RGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcbmltcG9ydCB7IFRyZWVMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi4vdHJlZWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IERhdGFTdGF0ZUNoYW5nZUV2ZW50IH0gZnJvbSAnLi4vZGF0YS9jaGFuZ2UtZXZlbnQtYXJncy5pbnRlcmZhY2UnO1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgQmFzZUJpbmRpbmdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBEb0NoZWNrIHtcbiAgICBwcm90ZWN0ZWQgdHJlZWxpc3Q6IFRyZWVMaXN0Q29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIERlZmluZXMgdGhlIGRlc2NyaXB0b3JzIGJ5IHdoaWNoIHRoZSBkYXRhIHdpbGwgYmUgc29ydGVkLlxuICAgICAqL1xuICAgIHNvcnQ6IFNvcnREZXNjcmlwdG9yW107XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyB0aGUgZGVzY3JpcHRvciBieSB3aGljaCB0aGUgZGF0YSB3aWxsIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcbiAgICAvKipcbiAgICAgKiBEZWZpbmVzIHRoZSBkZXNjcmlwdG9yIGJ5IHdoaWNoIHRoZSBkYXRhIHdpbGwgYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYWdncmVnYXRlOiBhbnk7XG4gICAgcHJvdGVjdGVkIHN0YXRlOiBTdGF0ZTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZGF0YTogYW55O1xuICAgIHByb3RlY3RlZCBkYXRhQ2hhbmdlZDogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgY2FjaGU6IGFueTtcbiAgICBwcm90ZWN0ZWQgb3JpZ2luYWxEYXRhOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgX2FnZ3JlZ2F0ZTogYW55O1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBjb25zdHJ1Y3Rvcih0cmVlbGlzdDogVHJlZUxpc3RDb21wb25lbnQpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiB7XG4gICAgICAgIFtwcm9wZXJ0eU5hbWU6IHN0cmluZ106IFNpbXBsZUNoYW5nZTtcbiAgICB9KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgb25TdGF0ZUNoYW5nZShzdGF0ZTogRGF0YVN0YXRlQ2hhbmdlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWJpbmQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0Q2hpbGRyZW4oaXRlbT86IGFueSk6IGFueTtcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgaXRlbUtleShpdGVtOiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGFwcGx5U3RhdGUoeyBzb3J0LCBmaWx0ZXIgfTogU3RhdGUpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBmZXRjaENoaWxkcmVuKGl0ZW0/OiBhbnkpOiBhbnk7XG4gICAgcHJvdGVjdGVkIGhhc0NoaWxkcmVuKGl0ZW06IGFueSk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGZpbHRlckl0ZW1zKGl0ZW1zOiBhbnkpOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlQWdncmVnYXRlcyhpdGVtczogYW55KTogYW55O1xufVxuIl19