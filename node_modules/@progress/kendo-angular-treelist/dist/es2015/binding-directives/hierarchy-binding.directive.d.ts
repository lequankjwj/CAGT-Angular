/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { BaseBindingDirective } from './base-binding.directive';
import { LocalDataChangesService } from '../editing/local-data-changes.service';
import { TreeListComponent } from '../treelist.component';
/**
 * A directive which binds the TreeList to a tree of objects.
 *
 * The directive encapsulates the in-memory handling of data operations such as
 * [sorting]({% slug sorting_treelist %}), [aggregation]({% slug treelist_with_aggregates %})
 * and [filtering]({% slug filtering_treelist %}) ([more information and examples]({% slug databinding_treelist %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class HierarchyBindingDirective extends BaseBindingDirective {
    protected treelist: TreeListComponent;
    /**
     *  The name of the field which holds the child data items of the node.
     */
    childrenField: string;
    /**
     * The array of data which will be used to populate the TreeList.
     */
    data: any[];
    childrenGetter: any;
    childrenSetter: any;
    constructor(treelist: TreeListComponent, localDataChanges: LocalDataChangesService);
    protected getChildren(item?: any): any[];
    protected itemKey(item: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<HierarchyBindingDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<HierarchyBindingDirective, "[kendoTreeListHierarchyBinding]", ["kendoTreeListHierarchyBinding"], { "childrenField": "childrenField"; "data": "kendoTreeListHierarchyBinding"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGllcmFyY2h5LWJpbmRpbmcuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImhpZXJhcmNoeS1iaW5kaW5nLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEJhc2VCaW5kaW5nRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLWJpbmRpbmcuZGlyZWN0aXZlJztcbmltcG9ydCB7IExvY2FsRGF0YUNoYW5nZXNTZXJ2aWNlIH0gZnJvbSAnLi4vZWRpdGluZy9sb2NhbC1kYXRhLWNoYW5nZXMuc2VydmljZSc7XG5pbXBvcnQgeyBUcmVlTGlzdENvbXBvbmVudCB9IGZyb20gJy4uL3RyZWVsaXN0LmNvbXBvbmVudCc7XG4vKipcbiAqIEEgZGlyZWN0aXZlIHdoaWNoIGJpbmRzIHRoZSBUcmVlTGlzdCB0byBhIHRyZWUgb2Ygb2JqZWN0cy5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGVuY2Fwc3VsYXRlcyB0aGUgaW4tbWVtb3J5IGhhbmRsaW5nIG9mIGRhdGEgb3BlcmF0aW9ucyBzdWNoIGFzXG4gKiBbc29ydGluZ10oeyUgc2x1ZyBzb3J0aW5nX3RyZWVsaXN0ICV9KSwgW2FnZ3JlZ2F0aW9uXSh7JSBzbHVnIHRyZWVsaXN0X3dpdGhfYWdncmVnYXRlcyAlfSlcbiAqIGFuZCBbZmlsdGVyaW5nXSh7JSBzbHVnIGZpbHRlcmluZ190cmVlbGlzdCAlfSkgKFttb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlc10oeyUgc2x1ZyBkYXRhYmluZGluZ190cmVlbGlzdCAlfSkpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBIaWVyYXJjaHlCaW5kaW5nRGlyZWN0aXZlIGV4dGVuZHMgQmFzZUJpbmRpbmdEaXJlY3RpdmUge1xuICAgIHByb3RlY3RlZCB0cmVlbGlzdDogVHJlZUxpc3RDb21wb25lbnQ7XG4gICAgLyoqXG4gICAgICogIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCB3aGljaCBob2xkcyB0aGUgY2hpbGQgZGF0YSBpdGVtcyBvZiB0aGUgbm9kZS5cbiAgICAgKi9cbiAgICBjaGlsZHJlbkZpZWxkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGFycmF5IG9mIGRhdGEgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIHBvcHVsYXRlIHRoZSBUcmVlTGlzdC5cbiAgICAgKi9cbiAgICBkYXRhOiBhbnlbXTtcbiAgICBjaGlsZHJlbkdldHRlcjogYW55O1xuICAgIGNoaWxkcmVuU2V0dGVyOiBhbnk7XG4gICAgY29uc3RydWN0b3IodHJlZWxpc3Q6IFRyZWVMaXN0Q29tcG9uZW50LCBsb2NhbERhdGFDaGFuZ2VzOiBMb2NhbERhdGFDaGFuZ2VzU2VydmljZSk7XG4gICAgcHJvdGVjdGVkIGdldENoaWxkcmVuKGl0ZW0/OiBhbnkpOiBhbnlbXTtcbiAgICBwcm90ZWN0ZWQgaXRlbUtleShpdGVtOiBhbnkpOiB2b2lkO1xufVxuIl19