/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Injectable } from '@angular/core';
import { FocusRoot } from './focus-root';
/**
 * Represents group of components that can be activated or focused.
 *
 * A focus group may contain focusable elements, such as rows, cells and input elements.
 *
 * Elements are added to the focus group by tagging them with the `kendoTreeListFocusable` directive.
 * See [Controlling the Focus]({% slug keyboard_navigation_treelist %}#toc-controlling-the-focus).
 *
 * @hidden
 */
export class FocusGroup {
    /**
     * @hidden
     */
    constructor(root) {
        this.root = root;
        this.active = true;
        this.children = [];
        this.root.registerGroup(this);
    }
    get focusableChildren() {
        return this.children.filter(el => el.canFocus());
    }
    get isActive() {
        return this.active;
    }
    ngOnDestroy() {
        this.root.unregisterGroup(this);
    }
    /**
     * @hidden
     */
    registerElement(element) {
        this.unregisterElement(element);
        this.children.push(element);
    }
    /**
     * @hidden
     */
    unregisterElement(element) {
        this.children = this.children.filter(f => f !== element);
    }
    /**
     * Returns a boolean value which indicates if the group will receive focus when the cell is focused.
     * Evaluates to `true` when the focus group has a single focusable element such as a button or a checkbox.
     *
     * @returns A boolean value which indicates if the group will receive focus when the cell is focused.
     */
    isNavigable() {
        const focusable = this.focusableChildren;
        return focusable.length === 1 && focusable[0].isNavigable();
    }
    /**
     * Returns a boolean value which indicates if the focus group contains focusable component.
     *
     * @returns A boolean value which indicates if the focus group contains focusable component.
     */
    canFocus() {
        return this.focusableChildren.length > 0;
    }
    /**
     * Focuses the first focusable component, if any.
     */
    focus() {
        if (this.canFocus() && !this.hasFocus()) {
            this.focusableChildren[0].focus();
        }
    }
    /**
     * @hidden
     */
    activate() {
        this.toggleState(true);
    }
    /**
     * @hidden
     */
    deactivate() {
        this.toggleState(false);
    }
    hasFocus() {
        return this.children.reduce((focused, element) => focused || element.hasFocus(), false);
    }
    toggleState(active) {
        if (this.active !== active) {
            this.active = active;
            this.children.forEach(f => f.toggle(active));
        }
    }
}
FocusGroup.decorators = [
    { type: Injectable },
];
/** @nocollapse */
FocusGroup.ctorParameters = () => [
    { type: FocusRoot }
];
