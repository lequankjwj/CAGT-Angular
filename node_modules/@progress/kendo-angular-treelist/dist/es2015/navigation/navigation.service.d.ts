/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ChangeDetectorRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { Subject } from 'rxjs';
import { FocusRoot } from './focus-root';
import { FocusableDirective } from './focusable.directive';
import { LogicalCell } from './logical-cell.interface';
import { LogicalRow } from './logical-row.interface';
import { NavigationCell } from './navigation-cell.interface';
import { NavigationChange } from './navigation-change.interface';
import { NavigationMetadata } from './navigation-metadata';
import { NavigationRow } from './navigation-row.interface';
import { DomEventsService } from '../common/dom-events.service';
import { EditService } from '../editing/edit.service';
import { ExpandStateService } from '../expand-state/expand-state.service';
import { PagerContextService } from '../pager/pager-context.service';
import { ScrollRequestService } from '../scrolling/scroll-request.service';
import { SelectionService } from '../selection/selection.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class NavigationViewport {
    firstItemIndex: number;
    lastItemIndex: number;
    constructor(firstItemIndex: number, lastItemIndex: number);
    containsRow(dataRowIndex: number): boolean;
    intersects(start: number, end: number): boolean;
}
/**
 * @hidden
 */
export declare class NavigationService implements OnDestroy {
    private zone;
    private domEvents;
    private pagerContextService;
    private scrollRequestService;
    private focusRoot;
    private editService;
    private localization;
    private expandState;
    private selectionService;
    private changeDetector;
    private focusableParent;
    readonly changes: Subject<NavigationChange>;
    readonly cellKeydown: EventEmitter<any>;
    metadata: NavigationMetadata;
    readonly enabled: boolean;
    readonly activeCell: NavigationCell;
    readonly activeRow: NavigationRow;
    viewport: NavigationViewport;
    columnViewport: NavigationViewport;
    private activeRowIndex;
    private alive;
    private active;
    private mode;
    private model;
    private cursor;
    private meta;
    private subs;
    private pendingRowIndex;
    private virtualCell;
    private readonly activeDataRow;
    constructor(zone: NgZone, domEvents: DomEventsService, pagerContextService: PagerContextService, scrollRequestService: ScrollRequestService, focusRoot: FocusRoot, editService: EditService, localization: LocalizationService, expandState: ExpandStateService, selectionService: SelectionService, changeDetector: ChangeDetectorRef, focusableParent: FocusableDirective);
    init(meta: NavigationMetadata): void;
    ngOnDestroy(): void;
    registerCell(cell: LogicalCell): void;
    registerCellOnCurrentRow(cell: LogicalCell): void;
    unregisterCell(index: number, rowIndex: number, cell: LogicalCell): void;
    registerRow(row: LogicalRow): void;
    updateRow(row: LogicalRow): void;
    unregisterRow(index: number, row: LogicalRow): void;
    isCellFocusable(cell: LogicalCell): boolean;
    isCellFocused(cell: LogicalCell): boolean;
    navigateTo(el: Element): void;
    tryFocus(el: Element): boolean;
    needsViewport(): boolean;
    setViewport(firstItemIndex: number, lastItemIndex: number): void;
    setColumnViewport(firstItemIndex: number, lastItemIndex: number): void;
    focusCell(rowIndex?: number, colIndex?: number): NavigationCell;
    focusNextCell(wrap?: boolean): NavigationCell;
    focusPrevCell(wrap?: boolean): NavigationCell;
    toggle(active: boolean): void;
    hasFocus(): boolean;
    autoFocusCell(start: number, end: number): boolean;
    private focusAdjacentCell;
    private enterCell;
    private leaveCell;
    private activateElements;
    private deactivateElements;
    private activateRow;
    private moveCursorFwd;
    private moveCursorBwd;
    private updateSelection;
    private onCursorKeydown;
    private onContentKeydown;
    private onCellKeydown;
    private onCursorChanges;
    private onFocusOut;
    private onWindowBlur;
    private onKeydown;
    private onTabout;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NavigationService, [null, null, null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NavigationService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aWdhdGlvbi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGb2N1c1Jvb3QgfSBmcm9tICcuL2ZvY3VzLXJvb3QnO1xuaW1wb3J0IHsgRm9jdXNhYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi9mb2N1c2FibGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IExvZ2ljYWxDZWxsIH0gZnJvbSAnLi9sb2dpY2FsLWNlbGwuaW50ZXJmYWNlJztcbmltcG9ydCB7IExvZ2ljYWxSb3cgfSBmcm9tICcuL2xvZ2ljYWwtcm93LmludGVyZmFjZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uQ2VsbCB9IGZyb20gJy4vbmF2aWdhdGlvbi1jZWxsLmludGVyZmFjZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uQ2hhbmdlIH0gZnJvbSAnLi9uYXZpZ2F0aW9uLWNoYW5nZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbk1ldGFkYXRhIH0gZnJvbSAnLi9uYXZpZ2F0aW9uLW1ldGFkYXRhJztcbmltcG9ydCB7IE5hdmlnYXRpb25Sb3cgfSBmcm9tICcuL25hdmlnYXRpb24tcm93LmludGVyZmFjZSc7XG5pbXBvcnQgeyBEb21FdmVudHNTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL2RvbS1ldmVudHMuc2VydmljZSc7XG5pbXBvcnQgeyBFZGl0U2VydmljZSB9IGZyb20gJy4uL2VkaXRpbmcvZWRpdC5zZXJ2aWNlJztcbmltcG9ydCB7IEV4cGFuZFN0YXRlU2VydmljZSB9IGZyb20gJy4uL2V4cGFuZC1zdGF0ZS9leHBhbmQtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBQYWdlckNvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi4vcGFnZXIvcGFnZXItY29udGV4dC5zZXJ2aWNlJztcbmltcG9ydCB7IFNjcm9sbFJlcXVlc3RTZXJ2aWNlIH0gZnJvbSAnLi4vc2Nyb2xsaW5nL3Njcm9sbC1yZXF1ZXN0LnNlcnZpY2UnO1xuaW1wb3J0IHsgU2VsZWN0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlbGVjdGlvbi9zZWxlY3Rpb24uc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmF2aWdhdGlvblZpZXdwb3J0IHtcbiAgICBmaXJzdEl0ZW1JbmRleDogbnVtYmVyO1xuICAgIGxhc3RJdGVtSW5kZXg6IG51bWJlcjtcbiAgICBjb25zdHJ1Y3RvcihmaXJzdEl0ZW1JbmRleDogbnVtYmVyLCBsYXN0SXRlbUluZGV4OiBudW1iZXIpO1xuICAgIGNvbnRhaW5zUm93KGRhdGFSb3dJbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBpbnRlcnNlY3RzKHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogYm9vbGVhbjtcbn1cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYXZpZ2F0aW9uU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSB6b25lO1xuICAgIHByaXZhdGUgZG9tRXZlbnRzO1xuICAgIHByaXZhdGUgcGFnZXJDb250ZXh0U2VydmljZTtcbiAgICBwcml2YXRlIHNjcm9sbFJlcXVlc3RTZXJ2aWNlO1xuICAgIHByaXZhdGUgZm9jdXNSb290O1xuICAgIHByaXZhdGUgZWRpdFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBsb2NhbGl6YXRpb247XG4gICAgcHJpdmF0ZSBleHBhbmRTdGF0ZTtcbiAgICBwcml2YXRlIHNlbGVjdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjtcbiAgICBwcml2YXRlIGZvY3VzYWJsZVBhcmVudDtcbiAgICByZWFkb25seSBjaGFuZ2VzOiBTdWJqZWN0PE5hdmlnYXRpb25DaGFuZ2U+O1xuICAgIHJlYWRvbmx5IGNlbGxLZXlkb3duOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBtZXRhZGF0YTogTmF2aWdhdGlvbk1ldGFkYXRhO1xuICAgIHJlYWRvbmx5IGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgcmVhZG9ubHkgYWN0aXZlQ2VsbDogTmF2aWdhdGlvbkNlbGw7XG4gICAgcmVhZG9ubHkgYWN0aXZlUm93OiBOYXZpZ2F0aW9uUm93O1xuICAgIHZpZXdwb3J0OiBOYXZpZ2F0aW9uVmlld3BvcnQ7XG4gICAgY29sdW1uVmlld3BvcnQ6IE5hdmlnYXRpb25WaWV3cG9ydDtcbiAgICBwcml2YXRlIGFjdGl2ZVJvd0luZGV4O1xuICAgIHByaXZhdGUgYWxpdmU7XG4gICAgcHJpdmF0ZSBhY3RpdmU7XG4gICAgcHJpdmF0ZSBtb2RlO1xuICAgIHByaXZhdGUgbW9kZWw7XG4gICAgcHJpdmF0ZSBjdXJzb3I7XG4gICAgcHJpdmF0ZSBtZXRhO1xuICAgIHByaXZhdGUgc3VicztcbiAgICBwcml2YXRlIHBlbmRpbmdSb3dJbmRleDtcbiAgICBwcml2YXRlIHZpcnR1YWxDZWxsO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlRGF0YVJvdztcbiAgICBjb25zdHJ1Y3Rvcih6b25lOiBOZ1pvbmUsIGRvbUV2ZW50czogRG9tRXZlbnRzU2VydmljZSwgcGFnZXJDb250ZXh0U2VydmljZTogUGFnZXJDb250ZXh0U2VydmljZSwgc2Nyb2xsUmVxdWVzdFNlcnZpY2U6IFNjcm9sbFJlcXVlc3RTZXJ2aWNlLCBmb2N1c1Jvb3Q6IEZvY3VzUm9vdCwgZWRpdFNlcnZpY2U6IEVkaXRTZXJ2aWNlLCBsb2NhbGl6YXRpb246IExvY2FsaXphdGlvblNlcnZpY2UsIGV4cGFuZFN0YXRlOiBFeHBhbmRTdGF0ZVNlcnZpY2UsIHNlbGVjdGlvblNlcnZpY2U6IFNlbGVjdGlvblNlcnZpY2UsIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgZm9jdXNhYmxlUGFyZW50OiBGb2N1c2FibGVEaXJlY3RpdmUpO1xuICAgIGluaXQobWV0YTogTmF2aWdhdGlvbk1ldGFkYXRhKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyQ2VsbChjZWxsOiBMb2dpY2FsQ2VsbCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJDZWxsT25DdXJyZW50Um93KGNlbGw6IExvZ2ljYWxDZWxsKTogdm9pZDtcbiAgICB1bnJlZ2lzdGVyQ2VsbChpbmRleDogbnVtYmVyLCByb3dJbmRleDogbnVtYmVyLCBjZWxsOiBMb2dpY2FsQ2VsbCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJSb3cocm93OiBMb2dpY2FsUm93KTogdm9pZDtcbiAgICB1cGRhdGVSb3cocm93OiBMb2dpY2FsUm93KTogdm9pZDtcbiAgICB1bnJlZ2lzdGVyUm93KGluZGV4OiBudW1iZXIsIHJvdzogTG9naWNhbFJvdyk6IHZvaWQ7XG4gICAgaXNDZWxsRm9jdXNhYmxlKGNlbGw6IExvZ2ljYWxDZWxsKTogYm9vbGVhbjtcbiAgICBpc0NlbGxGb2N1c2VkKGNlbGw6IExvZ2ljYWxDZWxsKTogYm9vbGVhbjtcbiAgICBuYXZpZ2F0ZVRvKGVsOiBFbGVtZW50KTogdm9pZDtcbiAgICB0cnlGb2N1cyhlbDogRWxlbWVudCk6IGJvb2xlYW47XG4gICAgbmVlZHNWaWV3cG9ydCgpOiBib29sZWFuO1xuICAgIHNldFZpZXdwb3J0KGZpcnN0SXRlbUluZGV4OiBudW1iZXIsIGxhc3RJdGVtSW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgc2V0Q29sdW1uVmlld3BvcnQoZmlyc3RJdGVtSW5kZXg6IG51bWJlciwgbGFzdEl0ZW1JbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICBmb2N1c0NlbGwocm93SW5kZXg/OiBudW1iZXIsIGNvbEluZGV4PzogbnVtYmVyKTogTmF2aWdhdGlvbkNlbGw7XG4gICAgZm9jdXNOZXh0Q2VsbCh3cmFwPzogYm9vbGVhbik6IE5hdmlnYXRpb25DZWxsO1xuICAgIGZvY3VzUHJldkNlbGwod3JhcD86IGJvb2xlYW4pOiBOYXZpZ2F0aW9uQ2VsbDtcbiAgICB0b2dnbGUoYWN0aXZlOiBib29sZWFuKTogdm9pZDtcbiAgICBoYXNGb2N1cygpOiBib29sZWFuO1xuICAgIGF1dG9Gb2N1c0NlbGwoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpOiBib29sZWFuO1xuICAgIHByaXZhdGUgZm9jdXNBZGphY2VudENlbGw7XG4gICAgcHJpdmF0ZSBlbnRlckNlbGw7XG4gICAgcHJpdmF0ZSBsZWF2ZUNlbGw7XG4gICAgcHJpdmF0ZSBhY3RpdmF0ZUVsZW1lbnRzO1xuICAgIHByaXZhdGUgZGVhY3RpdmF0ZUVsZW1lbnRzO1xuICAgIHByaXZhdGUgYWN0aXZhdGVSb3c7XG4gICAgcHJpdmF0ZSBtb3ZlQ3Vyc29yRndkO1xuICAgIHByaXZhdGUgbW92ZUN1cnNvckJ3ZDtcbiAgICBwcml2YXRlIHVwZGF0ZVNlbGVjdGlvbjtcbiAgICBwcml2YXRlIG9uQ3Vyc29yS2V5ZG93bjtcbiAgICBwcml2YXRlIG9uQ29udGVudEtleWRvd247XG4gICAgcHJpdmF0ZSBvbkNlbGxLZXlkb3duO1xuICAgIHByaXZhdGUgb25DdXJzb3JDaGFuZ2VzO1xuICAgIHByaXZhdGUgb25Gb2N1c091dDtcbiAgICBwcml2YXRlIG9uV2luZG93Qmx1cjtcbiAgICBwcml2YXRlIG9uS2V5ZG93bjtcbiAgICBwcml2YXRlIG9uVGFib3V0O1xufVxuIl19