/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { FocusableElement } from "./focusable-element.interface";
import { FocusRoot } from './focus-root';
/**
 * Represents group of components that can be activated or focused.
 *
 * A focus group may contain focusable elements, such as rows, cells and input elements.
 *
 * Elements are added to the focus group by tagging them with the `kendoTreeListFocusable` directive.
 * See [Controlling the Focus]({% slug keyboard_navigation_treelist %}#toc-controlling-the-focus).
 *
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare class FocusGroup {
    private root;
    private active;
    private children;
    private readonly focusableChildren;
    readonly isActive: boolean;
    /**
     * @hidden
     */
    constructor(root: FocusRoot);
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    registerElement(element: FocusableElement): void;
    /**
     * @hidden
     */
    unregisterElement(element: FocusableElement): void;
    /**
     * Returns a boolean value which indicates if the group will receive focus when the cell is focused.
     * Evaluates to `true` when the focus group has a single focusable element such as a button or a checkbox.
     *
     * @returns A boolean value which indicates if the group will receive focus when the cell is focused.
     */
    isNavigable(): boolean;
    /**
     * Returns a boolean value which indicates if the focus group contains focusable component.
     *
     * @returns A boolean value which indicates if the focus group contains focusable component.
     */
    canFocus(): boolean;
    /**
     * Focuses the first focusable component, if any.
     */
    focus(): void;
    /**
     * @hidden
     */
    activate(): void;
    /**
     * @hidden
     */
    deactivate(): void;
    private hasFocus;
    private toggleState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FocusGroup, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FocusGroup>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtZ3JvdXAuZC50cyIsInNvdXJjZXMiOlsiZm9jdXMtZ3JvdXAuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgeyBGb2N1c2FibGVFbGVtZW50IH0gZnJvbSBcIi4vZm9jdXNhYmxlLWVsZW1lbnQuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBGb2N1c1Jvb3QgfSBmcm9tICcuL2ZvY3VzLXJvb3QnO1xuLyoqXG4gKiBSZXByZXNlbnRzIGdyb3VwIG9mIGNvbXBvbmVudHMgdGhhdCBjYW4gYmUgYWN0aXZhdGVkIG9yIGZvY3VzZWQuXG4gKlxuICogQSBmb2N1cyBncm91cCBtYXkgY29udGFpbiBmb2N1c2FibGUgZWxlbWVudHMsIHN1Y2ggYXMgcm93cywgY2VsbHMgYW5kIGlucHV0IGVsZW1lbnRzLlxuICpcbiAqIEVsZW1lbnRzIGFyZSBhZGRlZCB0byB0aGUgZm9jdXMgZ3JvdXAgYnkgdGFnZ2luZyB0aGVtIHdpdGggdGhlIGBrZW5kb1RyZWVMaXN0Rm9jdXNhYmxlYCBkaXJlY3RpdmUuXG4gKiBTZWUgW0NvbnRyb2xsaW5nIHRoZSBGb2N1c10oeyUgc2x1ZyBrZXlib2FyZF9uYXZpZ2F0aW9uX3RyZWVsaXN0ICV9I3RvYy1jb250cm9sbGluZy10aGUtZm9jdXMpLlxuICpcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRm9jdXNHcm91cCB7XG4gICAgcHJpdmF0ZSByb290O1xuICAgIHByaXZhdGUgYWN0aXZlO1xuICAgIHByaXZhdGUgY2hpbGRyZW47XG4gICAgcHJpdmF0ZSByZWFkb25seSBmb2N1c2FibGVDaGlsZHJlbjtcbiAgICByZWFkb25seSBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdDogRm9jdXNSb290KTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWdpc3RlckVsZW1lbnQoZWxlbWVudDogRm9jdXNhYmxlRWxlbWVudCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHVucmVnaXN0ZXJFbGVtZW50KGVsZW1lbnQ6IEZvY3VzYWJsZUVsZW1lbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBib29sZWFuIHZhbHVlIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgZ3JvdXAgd2lsbCByZWNlaXZlIGZvY3VzIHdoZW4gdGhlIGNlbGwgaXMgZm9jdXNlZC5cbiAgICAgKiBFdmFsdWF0ZXMgdG8gYHRydWVgIHdoZW4gdGhlIGZvY3VzIGdyb3VwIGhhcyBhIHNpbmdsZSBmb2N1c2FibGUgZWxlbWVudCBzdWNoIGFzIGEgYnV0dG9uIG9yIGEgY2hlY2tib3guXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIGJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIGlmIHRoZSBncm91cCB3aWxsIHJlY2VpdmUgZm9jdXMgd2hlbiB0aGUgY2VsbCBpcyBmb2N1c2VkLlxuICAgICAqL1xuICAgIGlzTmF2aWdhYmxlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gdmFsdWUgd2hpY2ggaW5kaWNhdGVzIGlmIHRoZSBmb2N1cyBncm91cCBjb250YWlucyBmb2N1c2FibGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgQSBib29sZWFuIHZhbHVlIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgZm9jdXMgZ3JvdXAgY29udGFpbnMgZm9jdXNhYmxlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBjYW5Gb2N1cygpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIGZpcnN0IGZvY3VzYWJsZSBjb21wb25lbnQsIGlmIGFueS5cbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBhY3RpdmF0ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBkZWFjdGl2YXRlKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBoYXNGb2N1cztcbiAgICBwcml2YXRlIHRvZ2dsZVN0YXRlO1xufVxuIl19