/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { QueryList } from '@angular/core';
import { ColumnBase } from './column-base';
import { OptionChangesService } from '../common/option-changes.service';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
export declare function isColumnGroupComponent(column: any): column is ColumnGroupComponent;
/**
 * Represents the column group header of the TreeList
 * ([more information and examples]({% slug multicolumnheaders_columns_treelist %})).
 *
 * {% meta height:533 %}
 * {% embed_file configuration/multi-column-headers/app.component.ts preview %}
 * {% embed_file shared/app.module.ts %}
 * {% embed_file shared/main.ts %}
 * {% embed_file shared/filesystem.ts %}
 * {% endmeta %}
 */
export declare class ColumnGroupComponent extends ColumnBase {
    /**
     * @hidden
     */
    includeInChooser: boolean;
    /**
     * @hidden
     */
    isColumnGroup: boolean;
    /**
     * @hidden
     */
    minResizableWidth: number;
    /**
     * @hidden
     */
    children: QueryList<ColumnBase>;
    constructor(parent?: ColumnBase, optionChanges?: OptionChangesService);
    /**
     * @hidden
     */
    rowspan(): number;
    /**
     * @hidden
     */
    readonly colspan: number;
    /**
     * @hidden
     */
    readonly leafIndex: number;
    readonly childrenArray: any[];
    readonly hasChildren: boolean;
    private readonly firstChild;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColumnGroupComponent, [{ optional: true; host: true; skipSelf: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColumnGroupComponent, "kendo-treelist-column-group", never, {}, {}, ["children"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWdyb3VwLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjb2x1bW4tZ3JvdXAuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uQmFzZSB9IGZyb20gJy4vY29sdW1uLWJhc2UnO1xuaW1wb3J0IHsgT3B0aW9uQ2hhbmdlc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vb3B0aW9uLWNoYW5nZXMuc2VydmljZSc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgZnVuY3Rpb24gaXNDb2x1bW5Hcm91cENvbXBvbmVudChjb2x1bW46IGFueSk6IGNvbHVtbiBpcyBDb2x1bW5Hcm91cENvbXBvbmVudDtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgY29sdW1uIGdyb3VwIGhlYWRlciBvZiB0aGUgVHJlZUxpc3RcbiAqIChbbW9yZSBpbmZvcm1hdGlvbiBhbmQgZXhhbXBsZXNdKHslIHNsdWcgbXVsdGljb2x1bW5oZWFkZXJzX2NvbHVtbnNfdHJlZWxpc3QgJX0pKS5cbiAqXG4gKiB7JSBtZXRhIGhlaWdodDo1MzMgJX1cbiAqIHslIGVtYmVkX2ZpbGUgY29uZmlndXJhdGlvbi9tdWx0aS1jb2x1bW4taGVhZGVycy9hcHAuY29tcG9uZW50LnRzIHByZXZpZXcgJX1cbiAqIHslIGVtYmVkX2ZpbGUgc2hhcmVkL2FwcC5tb2R1bGUudHMgJX1cbiAqIHslIGVtYmVkX2ZpbGUgc2hhcmVkL21haW4udHMgJX1cbiAqIHslIGVtYmVkX2ZpbGUgc2hhcmVkL2ZpbGVzeXN0ZW0udHMgJX1cbiAqIHslIGVuZG1ldGEgJX1cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ29sdW1uR3JvdXBDb21wb25lbnQgZXh0ZW5kcyBDb2x1bW5CYXNlIHtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaW5jbHVkZUluQ2hvb3NlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgaXNDb2x1bW5Hcm91cDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgbWluUmVzaXphYmxlV2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgY2hpbGRyZW46IFF1ZXJ5TGlzdDxDb2x1bW5CYXNlPjtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ/OiBDb2x1bW5CYXNlLCBvcHRpb25DaGFuZ2VzPzogT3B0aW9uQ2hhbmdlc1NlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByb3dzcGFuKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAaGlkZGVuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29sc3BhbjogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICByZWFkb25seSBsZWFmSW5kZXg6IG51bWJlcjtcbiAgICByZWFkb25seSBjaGlsZHJlbkFycmF5OiBhbnlbXTtcbiAgICByZWFkb25seSBoYXNDaGlsZHJlbjogYm9vbGVhbjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpcnN0Q2hpbGQ7XG59XG4iXX0=