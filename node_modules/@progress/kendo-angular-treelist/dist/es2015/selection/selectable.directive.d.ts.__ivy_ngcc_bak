/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { OnDestroy, EventEmitter } from '@angular/core';
import { TreeListComponent } from '../treelist.component';
/**
 * The `kendoTreeListSelectable` state items.
 */
export interface SelectionItem {
    /**
     * The key that identifies the selected item.
     */
    itemKey: any;
    /**
     * The key that identifies the selected item column. Available in `cell` selection mode.
     */
    columnKey?: any;
}
/**
 * A directive which controls the selection state
 */
export declare class SelectableDirective implements OnDestroy {
    private treelist;
    /**
     * @hidden
     */
    selectable: any;
    /**
     * Specifies the selected items.
     */
    selectedItems: SelectionItem[];
    /**
     * Fires when the selected items are changed.
     */
    selectedItemsChange: EventEmitter<SelectionItem[]>;
    /**
     * The field name or a function that specify the dataItems key.
     */
    itemKey: string | ((dataItem: any) => any);
    /**
     * The field name or a function that specify the columns key.
     */
    columnKey: string | ((column: any, columnIndex: number) => any);
    protected readonly keyGetter: any;
    protected readonly columnKeyGetter: any;
    protected subscriptions: any;
    protected state: any;
    protected _settings: any;
    protected lastChange: any[];
    protected _columnKeyGetter: any;
    protected _keyGetter: any;
    constructor(treelist: TreeListComponent);
    ngOnDestroy(): void;
    /**
     * @hidden
     */
    protected cellSelected(dataItem: any, column: any, columnIndex: number): boolean;
    /**
     * @hidden
     */
    protected rowSelected(dataItem: any): boolean;
    protected selectionChange({ action, items }: any): void;
    protected emitSelectedItemsChange(): void;
    private subscribeSelection;
    private unsubscribeSelection;
    private updateColumnIndices;
    private readonly leafColumns;
}
