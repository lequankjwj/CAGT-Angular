/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { ElementRef, Renderer2, NgZone } from '@angular/core';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import { EditService } from './edit.service';
import { BaseCommandDirective } from './base-command.directive';
/**
 * Represents the `remove` command of the TreeList. You can apply this directive to any `button` element
 * inside a [`CommandColumnComponent`]({% slug api_treelist_commandcolumncomponent %}).
 * When an associated button with the directive is clicked, the
 * [`remove` event]({% slug api_treelist_treelistcomponent %}#toc-remove)
 * is triggered ([see example]({% slug editing_reactive_forms_treelist %})).
 *
 * > * When the row is in the edit mode, the button with the `kendoTreeListRemoveCommand` is automatically hidden.
 * > * The directive takes as input the `cellContext` from the cell template.
 *
 * @example
 * ```html-no-run
 * <kendo-treelist>
 *   <kendo-treelist-command-column title="command">
 *     <ng-template kendoTreeListCellTemplate let-cellContext="cellContext">
 *       <button [kendoTreeListRemoveCommand]="cellContext">Remove row</button>
 *     </ng-template>
 *   </kendo-treelist-command-column>
 * </kendo-treelist>
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class RemoveCommandDirective extends BaseCommandDirective {
    /**
     * The `cellContext` provided to the template.
     */
    cellContext: any;
    commandClass: boolean;
    protected readVisible: boolean;
    constructor(editService: EditService, element: ElementRef, renderer: Renderer2, localization: LocalizationService, ngZone: NgZone);
    protected onClick(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RemoveCommandDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<RemoveCommandDirective, "[kendoTreeListRemoveCommand]", never, { "cellContext": "kendoTreeListRemoveCommand"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3ZlLWNvbW1hbmQuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbInJlbW92ZS1jb21tYW5kLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCB7IEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMb2NhbGl6YXRpb25TZXJ2aWNlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbDEwbic7XG5pbXBvcnQgeyBFZGl0U2VydmljZSB9IGZyb20gJy4vZWRpdC5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VDb21tYW5kRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLWNvbW1hbmQuZGlyZWN0aXZlJztcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgYHJlbW92ZWAgY29tbWFuZCBvZiB0aGUgVHJlZUxpc3QuIFlvdSBjYW4gYXBwbHkgdGhpcyBkaXJlY3RpdmUgdG8gYW55IGBidXR0b25gIGVsZW1lbnRcbiAqIGluc2lkZSBhIFtgQ29tbWFuZENvbHVtbkNvbXBvbmVudGBdKHslIHNsdWcgYXBpX3RyZWVsaXN0X2NvbW1hbmRjb2x1bW5jb21wb25lbnQgJX0pLlxuICogV2hlbiBhbiBhc3NvY2lhdGVkIGJ1dHRvbiB3aXRoIHRoZSBkaXJlY3RpdmUgaXMgY2xpY2tlZCwgdGhlXG4gKiBbYHJlbW92ZWAgZXZlbnRdKHslIHNsdWcgYXBpX3RyZWVsaXN0X3RyZWVsaXN0Y29tcG9uZW50ICV9I3RvYy1yZW1vdmUpXG4gKiBpcyB0cmlnZ2VyZWQgKFtzZWUgZXhhbXBsZV0oeyUgc2x1ZyBlZGl0aW5nX3JlYWN0aXZlX2Zvcm1zX3RyZWVsaXN0ICV9KSkuXG4gKlxuICogPiAqIFdoZW4gdGhlIHJvdyBpcyBpbiB0aGUgZWRpdCBtb2RlLCB0aGUgYnV0dG9uIHdpdGggdGhlIGBrZW5kb1RyZWVMaXN0UmVtb3ZlQ29tbWFuZGAgaXMgYXV0b21hdGljYWxseSBoaWRkZW4uXG4gKiA+ICogVGhlIGRpcmVjdGl2ZSB0YWtlcyBhcyBpbnB1dCB0aGUgYGNlbGxDb250ZXh0YCBmcm9tIHRoZSBjZWxsIHRlbXBsYXRlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sLW5vLXJ1blxuICogPGtlbmRvLXRyZWVsaXN0PlxuICogICA8a2VuZG8tdHJlZWxpc3QtY29tbWFuZC1jb2x1bW4gdGl0bGU9XCJjb21tYW5kXCI+XG4gKiAgICAgPG5nLXRlbXBsYXRlIGtlbmRvVHJlZUxpc3RDZWxsVGVtcGxhdGUgbGV0LWNlbGxDb250ZXh0PVwiY2VsbENvbnRleHRcIj5cbiAqICAgICAgIDxidXR0b24gW2tlbmRvVHJlZUxpc3RSZW1vdmVDb21tYW5kXT1cImNlbGxDb250ZXh0XCI+UmVtb3ZlIHJvdzwvYnV0dG9uPlxuICogICAgIDwvbmctdGVtcGxhdGU+XG4gKiAgIDwva2VuZG8tdHJlZWxpc3QtY29tbWFuZC1jb2x1bW4+XG4gKiA8L2tlbmRvLXRyZWVsaXN0PlxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFJlbW92ZUNvbW1hbmREaXJlY3RpdmUgZXh0ZW5kcyBCYXNlQ29tbWFuZERpcmVjdGl2ZSB7XG4gICAgLyoqXG4gICAgICogVGhlIGBjZWxsQ29udGV4dGAgcHJvdmlkZWQgdG8gdGhlIHRlbXBsYXRlLlxuICAgICAqL1xuICAgIGNlbGxDb250ZXh0OiBhbnk7XG4gICAgY29tbWFuZENsYXNzOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCByZWFkVmlzaWJsZTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlZGl0U2VydmljZTogRWRpdFNlcnZpY2UsIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIGxvY2FsaXphdGlvbjogTG9jYWxpemF0aW9uU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIHByb3RlY3RlZCBvbkNsaWNrKCk6IHZvaWQ7XG59XG4iXX0=