/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Injectable } from '@angular/core';
// import { ExpandEvent } from './expand-event';
import { Subject, Subscription, merge } from "rxjs";
import { ViewCollection } from '../data/data.collection';
import { SelectionChangeEvent } from './selection-change-event';
import { Keys } from '@progress/kendo-angular-common';
/**
 * @hidden
 */
export var defaultSelected = function (_item) { return false; };
var noop = function () { return false; };
var ɵ0 = noop;
/**
 * @hidden
 */
var SelectionService = /** @class */ (function () {
    function SelectionService() {
        this.changes = new Subject();
        this.isSelected = defaultSelected;
        this.isRowSelected = noop;
        this.isCellSelected = noop;
        this.enabled = false;
        this._settings = {};
        this.tables = [];
        this.subscriptions = new Subscription();
    }
    Object.defineProperty(SelectionService.prototype, "settings", {
        get: function () {
            return this._settings;
        },
        set: function (value) {
            if (typeof value === 'object') {
                this._settings = value;
            }
            else {
                this._settings = {
                    enabled: value
                };
            }
            this.enabled = this._settings.enabled !== false;
            if (this.enabled) {
                if (this._settings.mode === 'cell') {
                    this.isCellSelected = this.cellSelected;
                    this.isRowSelected = noop;
                }
                else {
                    this.isCellSelected = noop;
                    this.isRowSelected = this.rowSelected;
                }
            }
            else {
                this.isCellSelected = noop;
                this.isRowSelected = noop;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionService.prototype, "enableMarquee", {
        get: function () {
            return this.enabled && this.settings.drag !== false && this.settings.multiple;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionService.prototype, "enableMultiple", {
        get: function () {
            return this.enabled && this.settings.multiple;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionService.prototype, "rowSelection", {
        get: function () {
            return this.enabled && this.settings.mode !== 'cell';
        },
        enumerable: true,
        configurable: true
    });
    SelectionService.prototype.init = function (treelist) {
        var _this = this;
        this.view = treelist.view;
        this.columnsContainer = treelist.columnsContainer;
        this.subscriptions.add(merge(treelist.pageChange, treelist.dataStateChange).subscribe(function () {
            _this.selectionOrigin = null;
        }));
        this.subscriptions.add(treelist.domEvents.cellMousedown.subscribe(function (args) {
            if (_this.enabled && _this._settings.multiple && args.originalEvent.shiftKey) {
                args.originalEvent.preventDefault();
            }
        }));
    };
    SelectionService.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    SelectionService.prototype.registerTable = function (table) {
        this.tables.push(table);
    };
    SelectionService.prototype.unregisterTable = function (table) {
        this.tables = this.tables.filter(function (t) { return t !== table; });
    };
    SelectionService.prototype.click = function (args, toggle) {
        var dataItem = args.dataItem, column = args.column, columnIndex = args.columnIndex, originalEvent = args.originalEvent;
        if (originalEvent.keyCode === Keys.Enter) {
            return;
        }
        var selected = this.isSelected(dataItem, column, columnIndex);
        var toggleSelected = originalEvent.ctrlKey || toggle;
        if (this._settings.multiple) {
            if (originalEvent.shiftKey) {
                var origin = this.selectionOrigin || {
                    columnIndex: 0,
                    column: this.leafColumns[0],
                    item: this.view.firstItem.data
                };
                this.selectRange({ item: dataItem, column: column, columnIndex: columnIndex }, origin);
            }
            else {
                this.selectionOrigin = {
                    item: dataItem,
                    column: column,
                    columnIndex: columnIndex
                };
                var action = toggleSelected ? (selected ? 'remove' : 'add') : 'select';
                this.changes.next(new SelectionChangeEvent(action, [{
                        dataItem: dataItem,
                        column: column,
                        columnIndex: columnIndex
                    }]));
            }
        }
        else if (!selected || toggleSelected) {
            var action = selected && toggleSelected ? 'remove' : 'select';
            this.changes.next(new SelectionChangeEvent(action, [{
                    dataItem: dataItem,
                    column: column,
                    columnIndex: columnIndex
                }]));
        }
        if (originalEvent.ctrlKey) {
            originalEvent.preventDefault();
        }
    };
    SelectionService.prototype.checkboxClick = function (args) {
        var _this = this;
        if (args.column.checkChildren && args.viewItem.hasChildren && !args.originalEvent.shiftKey && !args.originalEvent.ctrlKey) {
            var data = [args.dataItem];
            var selected_1 = Boolean(args.viewItem.selected);
            ViewCollection.loadView({
                fields: Object.assign({}, this.view.fieldAccessor(), {
                    data: data,
                    hasFooter: false,
                    pageable: false,
                    isVirtual: false
                }),
                loaded: this.view.loaded,
                selectionState: this.view.selectionState
            }).subscribe(function (view) {
                if (!view) {
                    return;
                }
                var selectedItems = view.data.filter(function (item) { return Boolean(item.selected) === selected_1; }).map(function (item) { return ({
                    dataItem: item.data
                }); });
                _this.changes.next(new SelectionChangeEvent(selected_1 ? 'remove' : 'add', selectedItems));
            });
        }
        else {
            this.click(args, true);
        }
    };
    SelectionService.prototype.toggleAll = function (select) {
        var _this = this;
        ViewCollection.loadView({
            fields: Object.assign({}, this.view.fieldAccessor(), {
                hasFooter: false,
                pageable: false,
                isVirtual: false
            }),
            loaded: this.view.loaded,
            selectionState: this.view.selectionState
        }).subscribe(function (view) {
            if (!view) {
                return;
            }
            var selectedItems = view.data.filter(function (item) { return Boolean(item.selected) !== select; }).map(function (item) { return ({
                dataItem: item.data
            }); });
            _this.changes.next(new SelectionChangeEvent(select ? 'add' : 'remove', selectedItems));
        });
    };
    SelectionService.prototype.selectRange = function (firstPoint, secondPoint) {
        var rangeItems = this.rangeItems(firstPoint, secondPoint);
        this.changes.next(new SelectionChangeEvent('select', rangeItems));
    };
    SelectionService.prototype.rangeItems = function (firstPoint, secondPoint) {
        var firstIndex = this.view.findIndex(function (item) { return item.data === firstPoint.item || item === firstPoint.item; });
        var secondIndex = this.view.findIndex(function (item) { return item.data === secondPoint.item || item === secondPoint.item; });
        var startIndex = Math.min(firstIndex, secondIndex);
        var endIndex = Math.max(firstIndex, secondIndex);
        var rangeItems = this.view.data.slice(startIndex, endIndex + 1).filter(function (item) { return item.type === 'data'; });
        if (this._settings.mode === 'cell') {
            var leafColumns = this.leafColumns;
            var startColumnIndex = Math.min(firstPoint.columnIndex, secondPoint.columnIndex);
            var endColumnIndex = Math.max(firstPoint.columnIndex, secondPoint.columnIndex);
            var selectedItems = [];
            for (var idx = 0; idx < rangeItems.length; idx++) {
                for (var columnIdx = startColumnIndex; columnIdx <= endColumnIndex; columnIdx++) {
                    selectedItems.push({
                        dataItem: rangeItems[idx].data,
                        column: leafColumns[columnIdx],
                        columnIndex: columnIdx
                    });
                }
            }
            return selectedItems;
        }
        return rangeItems.map(function (item) { return ({
            dataItem: item.data
        }); });
    };
    SelectionService.prototype.updateSelectedState = function () {
        if (this.rowSelection) {
            this.view.updateSelectedState();
        }
    };
    SelectionService.prototype.targetArgs = function (target, skipFocusable) {
        var result;
        this.tables.some(function (t) {
            result = t.targetArgs(target, skipFocusable);
            return result;
        });
        return result;
    };
    SelectionService.prototype.rowSelected = function (dataItem) {
        return this.isSelected(dataItem);
    };
    SelectionService.prototype.cellSelected = function (dataItem, column, columnIndex) {
        return this.isSelected(dataItem, column, columnIndex);
    };
    Object.defineProperty(SelectionService.prototype, "leafColumns", {
        // expose in the treelist?
        get: function () {
            return this.columnsContainer.lockedLeafColumns.toArray().concat(this.columnsContainer.nonLockedLeafColumns.toArray());
        },
        enumerable: true,
        configurable: true
    });
    SelectionService.decorators = [
        { type: Injectable },
    ];
    return SelectionService;
}());
export { SelectionService };
export { ɵ0 };
