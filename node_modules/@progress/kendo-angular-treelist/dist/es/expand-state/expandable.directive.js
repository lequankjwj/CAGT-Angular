/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { TreeListComponent } from '../treelist.component';
import { getter } from '@progress/kendo-common';
import { isString } from '../utils';
/**
 * A directive which controls the expanded state of the items
 */
var ExpandableDirective = /** @class */ (function () {
    function ExpandableDirective(treelist) {
        this.treelist = treelist;
        /**
         * Fires when the expandedKeys are changed.
         */
        this.expandedKeysChange = new EventEmitter();
        /**
         * Specifies if the items should be initially expanded.
         * @default false
         */
        this.initiallyExpanded = false;
        this.state = new Set();
        this.treelist.isExpanded = this.isExpanded.bind(this);
        this.toggleState = this.toggleState.bind(this);
        this.subscriptions = this.treelist.expandStateChange.subscribe(this.toggleState);
    }
    Object.defineProperty(ExpandableDirective.prototype, "expandedKeys", {
        get: function () {
            return Array.from(this.state.keys());
        },
        /**
         * Sets the expanded item keys.
         */
        set: function (value) {
            if (value !== this._expandedKeys) {
                this._expandedKeys = value;
                this.treelist.updateView();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExpandableDirective.prototype, "expandBy", {
        /**
         * Defines the item key that will be stored in the expandedKeys collection.
         * Defaults to the TreeList idField.
         */
        set: function (key) {
            if (isString(key)) {
                this._expandBy = getter(key);
            }
            else {
                this._expandBy = key;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExpandableDirective.prototype, "keyGetter", {
        get: function () {
            return this._expandBy || this.treelist.idGetter;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ExpandableDirective.prototype.isExpanded = function (item) {
        var key = this.keyGetter(item);
        return this.state.has(key) ? !this.initiallyExpanded : this.initiallyExpanded;
    };
    ExpandableDirective.prototype.ngOnChanges = function (changes) {
        if (changes.expandedKeys) {
            this.state = new Set(this._expandedKeys);
        }
        else if (changes.initiallyExpanded) {
            this.state.clear();
        }
    };
    ExpandableDirective.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    ExpandableDirective.prototype.toggleState = function (args) {
        var key = this.keyGetter(args.dataItem);
        if (Boolean(this.initiallyExpanded) !== args.expand) {
            this.state.add(key);
        }
        else {
            this.state.delete(key);
        }
        this.expandedKeysChange.emit(this.expandedKeys);
    };
    ExpandableDirective.decorators = [
        { type: Directive, args: [{
                    exportAs: 'kendoTreeListExpandable',
                    selector: '[kendoTreeListExpandable]'
                },] },
    ];
    /** @nocollapse */
    ExpandableDirective.ctorParameters = function () { return [
        { type: TreeListComponent }
    ]; };
    ExpandableDirective.propDecorators = {
        expandedKeysChange: [{ type: Output }],
        expandedKeys: [{ type: Input }],
        initiallyExpanded: [{ type: Input }],
        expandBy: [{ type: Input }]
    };
    return ExpandableDirective;
}());
export { ExpandableDirective };
