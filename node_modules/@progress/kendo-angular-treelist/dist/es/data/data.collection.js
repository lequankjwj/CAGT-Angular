/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { isObservable, Subscription, BehaviorSubject } from 'rxjs';
import { take } from 'rxjs/operators';
import { EventEmitter } from '@angular/core';
/**
 * @hidden
 */
export var EXPANDED_STATE = {
    isExpanded: function () { return true; }
};
/**
 * @hidden
 */
export var UNSELECTED_STATE = {
    isRowSelected: function () { return false; }
};
/**
 * @hidden
 */
export var NOT_EDITED_STATE = {
    hasNew: function () { return false; },
    context: function () { return null; }
};
var identity = function (item) { return item; };
var ɵ0 = identity;
function loadView(view, subject) {
    view.loadData();
    if (view.loading) {
        view.dataLoaded.pipe(take(1)).subscribe(function () {
            loadView(view, subject);
        });
    }
    else {
        subject.next(view);
    }
}
var LOADING = 'loading';
var ViewRange = /** @class */ (function () {
    function ViewRange(skip, pageSize) {
        this.skip = skip;
        this.pageSize = pageSize;
    }
    ViewRange.create = function (options) {
        var skip = options.skip, pageSize = options.pageSize, pageable = options.pageable, isVirtual = options.isVirtual;
        var rangeType = ViewRange;
        if (pageSize) {
            if (pageable) {
                rangeType = PagerRange;
            }
            else if (isVirtual) {
                rangeType = VirtualRange;
            }
        }
        return new rangeType(skip, pageSize);
    };
    ViewRange.prototype.inRange = function (_index, _rowIndex) {
        return true;
    };
    ViewRange.prototype.levelInRange = function (_parent, _items, _rowIndex) {
        return true;
    };
    ViewRange.prototype.includeParents = function (_children) {
    };
    return ViewRange;
}());
var PagerRange = /** @class */ (function (_super) {
    tslib_1.__extends(PagerRange, _super);
    function PagerRange() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.expandAll = true;
        return _this;
    }
    PagerRange.prototype.inRange = function (index, _rowIndex) {
        return this.skip <= index && index < this.skip + this.pageSize;
    };
    PagerRange.prototype.levelInRange = function (parent, items, _rowIndex) {
        return parent.level === -1 ||
            (this.skip <= parent.index + items.length && parent.index + 1 < this.skip + this.pageSize);
    };
    PagerRange.prototype.includeParents = function (children) {
        var parentLevel = children.parentLevel;
        while (parentLevel && !parentLevel.inRange) {
            parentLevel.inRange = true;
            parentLevel = parentLevel.parentLevel;
        }
    };
    return PagerRange;
}(ViewRange));
var VirtualRange = /** @class */ (function (_super) {
    tslib_1.__extends(VirtualRange, _super);
    function VirtualRange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VirtualRange.prototype.inRange = function (_index, rowIndex) {
        return this.skip <= rowIndex && rowIndex < this.skip + this.pageSize;
    };
    VirtualRange.prototype.levelInRange = function (parent, _items, rowIndex) {
        return this.inRange(parent.index, rowIndex);
    };
    return VirtualRange;
}(ViewRange));
/**
 * @hidden
 */
var ViewItemFactory = /** @class */ (function () {
    function ViewItemFactory(expandState, editState, selectionState, loaded, fieldAccessor, rootItem) {
        this.expandState = expandState;
        this.editState = editState;
        this.selectionState = selectionState;
        this.loaded = loaded;
        this.fieldAccessor = fieldAccessor;
        this.observables = [];
        this.rowIndex = 0;
        var options = this.fieldAccessor();
        this.fetchChildren = options.fetchChildren;
        this.hasChildren = options.hasChildren;
        this.idGetter = options.idGetter;
        this.hasFooter = options.hasFooter;
        this.viewRange = ViewRange.create(options);
        if (rootItem) {
            this.rootLevel = this.loadChildren(rootItem);
        }
        else {
            this.rootLevel = this.dataLevel({
                level: -1,
                id: null,
                expanded: true
            }, options.data);
        }
    }
    // try to stop iteration if cached total and viewRange ends
    ViewItemFactory.prototype.generate = function () {
        var result = [];
        var dataLevels = [this.rootLevel];
        var itemIndex = 0;
        var itemCount = 0;
        this.addNew(result);
        while (dataLevels.length) {
            while (dataLevels[0] && dataLevels[0].idx >= dataLevels[0].items.length) {
                var dataLevel = dataLevels.shift();
                if (this.hasFooter && dataLevel.expanded && dataLevel.items.length) {
                    if (dataLevel.inRange || this.viewRange.levelInRange(dataLevel.parent, dataLevel.items, this.rowIndex)) {
                        result.push({
                            type: 'footer',
                            items: dataLevel.items,
                            aggregates: dataLevel.aggregates,
                            level: dataLevel.level,
                            parentIndex: dataLevel.parentIndex,
                            rowIndex: this.rowIndex
                        });
                        this.viewRange.includeParents(dataLevel);
                    }
                    this.rowIndex++;
                }
            }
            if (!dataLevels.length) {
                break;
            }
            var currentLevel = dataLevels[0];
            var dataItem = currentLevel.items[currentLevel.idx++];
            var viewItem = {
                type: 'data',
                data: dataItem,
                id: this.idGetter(dataItem),
                rowIndex: this.rowIndex,
                index: itemIndex,
                level: currentLevel.level,
                hasChildren: this.hasChildren(dataItem),
                parent: currentLevel.parent
            };
            if (currentLevel.expanded) {
                this.rowIndex++;
                if (this.viewRange.inRange(itemIndex, viewItem.rowIndex)) {
                    if (this.offsetFirst) {
                        viewItem.rowIndex++;
                        this.rowIndex++;
                        this.offsetFirst = false;
                    }
                    result.push(viewItem);
                    viewItem.editContext = this.editState.context(viewItem.data);
                    viewItem.selected = this.selectionState.isRowSelected(dataItem);
                    this.addNew(result, dataItem);
                }
                itemIndex++;
            }
            itemCount++;
            var expanded = viewItem.hasChildren && this.expandState.isExpanded(viewItem.data);
            if (viewItem.hasChildren && (expanded || this.viewRange.expandAll)) {
                viewItem.expanded = expanded && currentLevel.expanded;
                var children = this.loadChildren(viewItem);
                if (children) {
                    dataLevels.unshift(children);
                    children.parentLevel = currentLevel;
                }
            }
        }
        return {
            items: result,
            observables: this.observables,
            total: itemCount,
            totalVisible: itemIndex,
            totalRows: this.rowIndex
        };
    };
    ViewItemFactory.prototype.loadChildren = function (parent) {
        var parentId = parent.id;
        if (this.loaded.has(parentId)) {
            var children = this.loaded.get(parentId);
            if (children === LOADING) {
                parent.loading = true;
            }
            else {
                return this.dataLevel(parent, children);
            }
        }
        else {
            var children = this.fetchChildren(parent.data);
            if (isObservable(children)) {
                this.observables.push({
                    observable: children,
                    parentId: parentId
                });
                parent.loading = true;
            }
            else if (children) {
                this.loaded.set(parentId, children);
                return this.dataLevel(parent, children);
            }
        }
    };
    ViewItemFactory.prototype.dataLevel = function (parent, children) {
        children = children || {};
        var data = children.data || children;
        var items = data && data.length ? data : [];
        return {
            idx: 0,
            level: parent.level + 1,
            items: items,
            aggregates: children.aggregates,
            expanded: parent.expanded,
            parentIndex: parent.index,
            parent: parent
        };
    };
    ViewItemFactory.prototype.addNew = function (result, parent) {
        if (this.editState.hasNew(parent)) {
            var inRange = this.viewRange.inRange(0, this.rowIndex);
            var rowIndex = parent || inRange ? this.rowIndex : this.viewRange.skip;
            result.push({
                parent: parent,
                isNew: true,
                type: 'data',
                data: this.editState.newItem.dataItem,
                editContext: this.editState.newItem,
                rowIndex: rowIndex
            });
            if (parent || inRange) {
                this.rowIndex++;
            }
            else {
                this.offsetFirst = true;
            }
        }
    };
    return ViewItemFactory;
}());
export { ViewItemFactory };
/**
 * @hidden
 */
var ViewCollection = /** @class */ (function () {
    function ViewCollection(fieldAccessor, expandState, editState, selectionState) {
        this.fieldAccessor = fieldAccessor;
        this.expandState = expandState;
        this.editState = editState;
        this.selectionState = selectionState;
        this.childrenLoaded = new EventEmitter();
        this.dataLoaded = new EventEmitter();
        this.resetPage = new EventEmitter();
        this.total = 0;
        this.totalVisible = 0;
        this.loaded = new Map();
        this.loading = false;
        this._totalRows = 0;
        this.loadingCount = 0;
    }
    ViewCollection.loadView = function (options) {
        var subject = new BehaviorSubject(null);
        var viewFields = function () { return Object.assign({
            idGetter: identity,
            pageable: false,
            isVirtual: false,
            skip: 0
        }, options.fields); };
        var childrenView = new ViewCollection(viewFields, options.expandState || EXPANDED_STATE, options.editState || NOT_EDITED_STATE, options.selectionState || UNSELECTED_STATE);
        if (options.loaded) {
            childrenView.loaded = options.loaded;
        }
        loadView(childrenView, subject);
        return subject;
    };
    Object.defineProperty(ViewCollection.prototype, "totalRows", {
        get: function () {
            if (!this._data) {
                this.loadData();
            }
            return this._totalRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewCollection.prototype, "data", {
        get: function () {
            if (!this._data) {
                this.loadData();
            }
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewCollection.prototype, "length", {
        get: function () { return this.data.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewCollection.prototype, "first", {
        get: function () { return this.data[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewCollection.prototype, "firstItem", {
        get: function () {
            return this.find(function (item) { return item.type === 'data'; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewCollection.prototype, "last", {
        get: function () { return this.data[this.data.length - 1]; },
        enumerable: true,
        configurable: true
    });
    ViewCollection.prototype.at = function (index) {
        return this.data[index];
    };
    ViewCollection.prototype.itemIndex = function (item) {
        var idGetter = this.fieldAccessor().idGetter;
        return this.data.findIndex(function (i) { return i.id === idGetter(item); });
    };
    ViewCollection.prototype.map = function (fn) { return this.data.map(fn); };
    ViewCollection.prototype.filter = function (fn) {
        return this.data.filter(fn);
    };
    ViewCollection.prototype.findIndex = function (fn) {
        return this.data.findIndex(fn);
    };
    ViewCollection.prototype.reduce = function (fn, init) {
        return this.data.reduce(fn, init);
    };
    ViewCollection.prototype.forEach = function (fn) {
        this.data.forEach(fn);
    };
    ViewCollection.prototype.some = function (fn) {
        return this.data.some(fn);
    };
    ViewCollection.prototype.find = function (fn) {
        return this.data.find(fn);
    };
    ViewCollection.prototype.toString = function () { return this.data.toString(); };
    ViewCollection.prototype.updateSelectedState = function () {
        var _this = this;
        this.forEach(function (item) {
            if (item.type === 'data') {
                item.selected = _this.selectionState.isRowSelected(item.data);
            }
        });
    };
    ViewCollection.prototype.updateEditedState = function () {
        var _this = this;
        this.forEach(function (item) {
            if (item.type === 'data') {
                item.editContext = _this.editState.context(item.data);
            }
        });
    };
    ViewCollection.prototype.reset = function () {
        this.loaded.clear();
        this.clear();
        this.unsubscribeChildren();
    };
    ViewCollection.prototype.resetItem = function (item, resetChildren) {
        var idGetter = this.fieldAccessor().idGetter;
        var toReset = [item];
        while (toReset.length) {
            var current = toReset.shift();
            var id = idGetter(current);
            if (this.loaded.has(id)) {
                var children = this.loaded.get(id);
                this.loaded.delete(id);
                if (resetChildren) {
                    toReset.push.apply(toReset, children.data || children);
                }
            }
        }
        this.clear();
    };
    ViewCollection.prototype.clear = function () {
        this._data = null;
    };
    ViewCollection.prototype.loadData = function () {
        var _this = this;
        var itemFactory = new ViewItemFactory(this.expandState, this.editState, this.selectionState, this.loaded, this.fieldAccessor);
        var result = itemFactory.generate();
        if (!result.loading && result.total && (!result.items.length || !result.items.some(function (i) { return i.type === 'data'; }))) {
            this.resetPage.emit();
            result = new ViewItemFactory(this.expandState, this.editState, this.selectionState, this.loaded, this.fieldAccessor).generate();
        }
        this._data = result.items;
        this.total = result.total;
        this.totalVisible = result.totalVisible;
        this._totalRows = result.totalRows;
        if (result.observables && result.observables.length) {
            this.loading = true;
            this.loadingCount += result.observables.length;
            if (!this.childrenSubscription) {
                this.childrenSubscription = new Subscription();
            }
            result.observables.forEach(function (o) {
                _this.loaded.set(o.parentId, LOADING);
                _this.childrenSubscription.add(o.observable.subscribe(function (children) {
                    _this.clear();
                    _this.loaded.set(o.parentId, children);
                    _this.childrenLoaded.emit();
                    _this.loadingCount--;
                    if (_this.loadingCount === 0) {
                        _this.loading = false;
                        _this.unsubscribeChildren();
                        _this.dataLoaded.emit();
                    }
                }));
            });
        }
        else {
            this.dataLoaded.emit();
        }
    };
    ViewCollection.prototype.unsubscribeChildren = function () {
        if (this.childrenSubscription) {
            this.childrenSubscription.unsubscribe();
            this.childrenSubscription = null;
            this.loadingCount = 0;
        }
    };
    return ViewCollection;
}());
export { ViewCollection };
export { ɵ0 };
