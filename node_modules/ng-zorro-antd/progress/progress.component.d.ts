/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NgStyleInterface, NumberInput } from 'ng-zorro-antd/core/types';
import { NzProgressCirclePath, NzProgressFormatter, NzProgressGapPositionType, NzProgressStatusType, NzProgressStepItem, NzProgressStrokeColorType, NzProgressStrokeLinecapType, NzProgressTypeType } from './typings';
import * as ɵngcc0 from '@angular/core';
export declare class NzProgressComponent implements OnChanges, OnInit, OnDestroy {
    nzConfigService: NzConfigService;
    static ngAcceptInputType_nzSuccessPercent: NumberInput;
    static ngAcceptInputType_nzPercent: NumberInput;
    static ngAcceptInputType_nzStrokeWidth: NumberInput;
    static ngAcceptInputType_nzGapDegree: NumberInput;
    static ngAcceptInputType_nzSteps: NumberInput;
    nzShowInfo: boolean;
    nzWidth: number;
    nzStrokeColor?: NzProgressStrokeColorType;
    nzSize: 'default' | 'small';
    nzFormat?: NzProgressFormatter;
    nzSuccessPercent?: number;
    nzPercent: number;
    nzStrokeWidth?: number;
    nzGapDegree?: number;
    nzStatus?: NzProgressStatusType;
    nzType: NzProgressTypeType;
    nzGapPosition: NzProgressGapPositionType;
    nzStrokeLinecap: NzProgressStrokeLinecapType;
    nzSteps?: number;
    steps: NzProgressStepItem[];
    /** Gradient style when `nzType` is `line`. */
    lineGradient: string | null;
    /** If user uses gradient color. */
    isGradient: boolean;
    /** If the linear progress is a step progress. */
    isSteps: boolean;
    /**
     * Each progress whose `nzType` is circle or dashboard should have unique id to
     * define `<linearGradient>`.
     */
    gradientId: number;
    /** Paths to rendered in the template. */
    progressCirclePath: NzProgressCirclePath[];
    circleGradient?: Array<{
        offset: string;
        color: string;
    }>;
    trailPathStyle: NgStyleInterface | null;
    pathString?: string;
    icon: string;
    trackByFn: (index: number) => string;
    get formatter(): NzProgressFormatter;
    get status(): NzProgressStatusType;
    get strokeWidth(): number;
    get isCircleStyle(): boolean;
    private cachedStatus;
    private inferredStatus;
    private destroy$;
    constructor(nzConfigService: NzConfigService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateIcon;
    /**
     * Calculate step render configs.
     */
    private getSteps;
    /**
     * Calculate paths when the type is circle or dashboard.
     */
    private getCirclePaths;
    private setStrokeColor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzProgressComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzProgressComponent, "nz-progress", ["nzProgress"], { "nzShowInfo": "nzShowInfo"; "nzWidth": "nzWidth"; "nzStrokeColor": "nzStrokeColor"; "nzSize": "nzSize"; "nzPercent": "nzPercent"; "nzStrokeWidth": "nzStrokeWidth"; "nzGapDegree": "nzGapDegree"; "nzType": "nzType"; "nzGapPosition": "nzGapPosition"; "nzStrokeLinecap": "nzStrokeLinecap"; "nzFormat": "nzFormat"; "nzSuccessPercent": "nzSuccessPercent"; "nzStatus": "nzStatus"; "nzSteps": "nzSteps"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9jb25maWcnO1xuaW1wb3J0IHsgTmdTdHlsZUludGVyZmFjZSwgTnVtYmVySW5wdXQgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgTnpQcm9ncmVzc0NpcmNsZVBhdGgsIE56UHJvZ3Jlc3NGb3JtYXR0ZXIsIE56UHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGUsIE56UHJvZ3Jlc3NTdGF0dXNUeXBlLCBOelByb2dyZXNzU3RlcEl0ZW0sIE56UHJvZ3Jlc3NTdHJva2VDb2xvclR5cGUsIE56UHJvZ3Jlc3NTdHJva2VMaW5lY2FwVHlwZSwgTnpQcm9ncmVzc1R5cGVUeXBlIH0gZnJvbSAnLi90eXBpbmdzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56UHJvZ3Jlc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTdWNjZXNzUGVyY2VudDogTnVtYmVySW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256UGVyY2VudDogTnVtYmVySW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U3Ryb2tlV2lkdGg6IE51bWJlcklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekdhcERlZ3JlZTogTnVtYmVySW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U3RlcHM6IE51bWJlcklucHV0O1xuICAgIG56U2hvd0luZm86IGJvb2xlYW47XG4gICAgbnpXaWR0aDogbnVtYmVyO1xuICAgIG56U3Ryb2tlQ29sb3I/OiBOelByb2dyZXNzU3Ryb2tlQ29sb3JUeXBlO1xuICAgIG56U2l6ZTogJ2RlZmF1bHQnIHwgJ3NtYWxsJztcbiAgICBuekZvcm1hdD86IE56UHJvZ3Jlc3NGb3JtYXR0ZXI7XG4gICAgbnpTdWNjZXNzUGVyY2VudD86IG51bWJlcjtcbiAgICBuelBlcmNlbnQ6IG51bWJlcjtcbiAgICBuelN0cm9rZVdpZHRoPzogbnVtYmVyO1xuICAgIG56R2FwRGVncmVlPzogbnVtYmVyO1xuICAgIG56U3RhdHVzPzogTnpQcm9ncmVzc1N0YXR1c1R5cGU7XG4gICAgbnpUeXBlOiBOelByb2dyZXNzVHlwZVR5cGU7XG4gICAgbnpHYXBQb3NpdGlvbjogTnpQcm9ncmVzc0dhcFBvc2l0aW9uVHlwZTtcbiAgICBuelN0cm9rZUxpbmVjYXA6IE56UHJvZ3Jlc3NTdHJva2VMaW5lY2FwVHlwZTtcbiAgICBuelN0ZXBzPzogbnVtYmVyO1xuICAgIHN0ZXBzOiBOelByb2dyZXNzU3RlcEl0ZW1bXTtcbiAgICAvKiogR3JhZGllbnQgc3R5bGUgd2hlbiBgbnpUeXBlYCBpcyBgbGluZWAuICovXG4gICAgbGluZUdyYWRpZW50OiBzdHJpbmcgfCBudWxsO1xuICAgIC8qKiBJZiB1c2VyIHVzZXMgZ3JhZGllbnQgY29sb3IuICovXG4gICAgaXNHcmFkaWVudDogYm9vbGVhbjtcbiAgICAvKiogSWYgdGhlIGxpbmVhciBwcm9ncmVzcyBpcyBhIHN0ZXAgcHJvZ3Jlc3MuICovXG4gICAgaXNTdGVwczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBFYWNoIHByb2dyZXNzIHdob3NlIGBuelR5cGVgIGlzIGNpcmNsZSBvciBkYXNoYm9hcmQgc2hvdWxkIGhhdmUgdW5pcXVlIGlkIHRvXG4gICAgICogZGVmaW5lIGA8bGluZWFyR3JhZGllbnQ+YC5cbiAgICAgKi9cbiAgICBncmFkaWVudElkOiBudW1iZXI7XG4gICAgLyoqIFBhdGhzIHRvIHJlbmRlcmVkIGluIHRoZSB0ZW1wbGF0ZS4gKi9cbiAgICBwcm9ncmVzc0NpcmNsZVBhdGg6IE56UHJvZ3Jlc3NDaXJjbGVQYXRoW107XG4gICAgY2lyY2xlR3JhZGllbnQ/OiBBcnJheTx7XG4gICAgICAgIG9mZnNldDogc3RyaW5nO1xuICAgICAgICBjb2xvcjogc3RyaW5nO1xuICAgIH0+O1xuICAgIHRyYWlsUGF0aFN0eWxlOiBOZ1N0eWxlSW50ZXJmYWNlIHwgbnVsbDtcbiAgICBwYXRoU3RyaW5nPzogc3RyaW5nO1xuICAgIGljb246IHN0cmluZztcbiAgICB0cmFja0J5Rm46IChpbmRleDogbnVtYmVyKSA9PiBzdHJpbmc7XG4gICAgZ2V0IGZvcm1hdHRlcigpOiBOelByb2dyZXNzRm9ybWF0dGVyO1xuICAgIGdldCBzdGF0dXMoKTogTnpQcm9ncmVzc1N0YXR1c1R5cGU7XG4gICAgZ2V0IHN0cm9rZVdpZHRoKCk6IG51bWJlcjtcbiAgICBnZXQgaXNDaXJjbGVTdHlsZSgpOiBib29sZWFuO1xuICAgIHByaXZhdGUgY2FjaGVkU3RhdHVzO1xuICAgIHByaXZhdGUgaW5mZXJyZWRTdGF0dXM7XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBjb25zdHJ1Y3RvcihuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgdXBkYXRlSWNvbjtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgc3RlcCByZW5kZXIgY29uZmlncy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFN0ZXBzO1xuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBwYXRocyB3aGVuIHRoZSB0eXBlIGlzIGNpcmNsZSBvciBkYXNoYm9hcmQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDaXJjbGVQYXRocztcbiAgICBwcml2YXRlIHNldFN0cm9rZUNvbG9yO1xufVxuIl19