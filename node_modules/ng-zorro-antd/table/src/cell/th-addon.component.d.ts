/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { BooleanInput } from 'ng-zorro-antd/core/types';
import { Subject } from 'rxjs';
import { NzTableFilterFn, NzTableFilterList, NzTableFilterValue, NzTableSortFn, NzTableSortOrder } from '../table.types';
import * as ɵngcc0 from '@angular/core';
export declare class NzThAddOnComponent implements OnChanges, OnInit, OnDestroy {
    private cdr;
    static ngAcceptInputType_nzShowSort: BooleanInput;
    static ngAcceptInputType_nzShowFilter: BooleanInput;
    static ngAcceptInputType_nzCustomFilter: BooleanInput;
    manualClickOrder$: Subject<NzThAddOnComponent>;
    calcOperatorChange$: Subject<unknown>;
    nzFilterValue: NzTableFilterValue;
    sortOrder: NzTableSortOrder;
    sortDirections: NzTableSortOrder[];
    private sortOrderChange$;
    private destroy$;
    private isNzShowSortChanged;
    private isNzShowFilterChanged;
    nzColumnKey?: string;
    nzFilterMultiple: boolean;
    nzSortOrder: NzTableSortOrder;
    nzSortPriority: number | boolean;
    nzSortDirections: NzTableSortOrder[];
    nzFilters: NzTableFilterList;
    nzSortFn: NzTableSortFn | boolean | null;
    nzFilterFn: NzTableFilterFn | boolean | null;
    nzShowSort: boolean;
    nzShowFilter: boolean;
    nzCustomFilter: boolean;
    readonly nzCheckedChange: EventEmitter<boolean>;
    readonly nzSortOrderChange: EventEmitter<NzTableSortOrder>;
    readonly nzFilterChange: EventEmitter<any>;
    /** @deprecated use nzColumnKey instead **/
    nzSortKey?: string;
    /** @deprecated use nzSortOrder instead **/
    nzSort: NzTableSortOrder;
    /** @deprecated use nzSortOrderChange instead **/
    readonly nzSortChange: EventEmitter<NzTableSortOrder>;
    getNextSortDirection(sortDirections: NzTableSortOrder[], current: NzTableSortOrder): NzTableSortOrder;
    emitNextSortValue(): void;
    setSortOrder(order: NzTableSortOrder): void;
    clearSortOrder(): void;
    onFilterValueChange(value: NzTableFilterValue): void;
    updateCalcOperator(): void;
    constructor(cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzThAddOnComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzThAddOnComponent, "th[nzSortKey], th[nzColumnKey], th[nzSort], th[nzSortFn], th[nzSortOrder], th[nzFilters], th[nzShowSort], th[nzShowFilter], th[nzCustomFilter]", never, { "nzFilterMultiple": "nzFilterMultiple"; "nzSortOrder": "nzSortOrder"; "nzSortPriority": "nzSortPriority"; "nzSortDirections": "nzSortDirections"; "nzFilters": "nzFilters"; "nzSortFn": "nzSortFn"; "nzFilterFn": "nzFilterFn"; "nzShowSort": "nzShowSort"; "nzShowFilter": "nzShowFilter"; "nzCustomFilter": "nzCustomFilter"; "nzSort": "nzSort"; "nzColumnKey": "nzColumnKey"; "nzSortKey": "nzSortKey"; }, { "nzCheckedChange": "nzCheckedChange"; "nzSortOrderChange": "nzSortOrderChange"; "nzFilterChange": "nzFilterChange"; "nzSortChange": "nzSortChange"; }, never, ["[nz-th-extra]", "nz-filter-trigger", "*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGgtYWRkb24uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRoLWFkZG9uLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56VGFibGVGaWx0ZXJGbiwgTnpUYWJsZUZpbHRlckxpc3QsIE56VGFibGVGaWx0ZXJWYWx1ZSwgTnpUYWJsZVNvcnRGbiwgTnpUYWJsZVNvcnRPcmRlciB9IGZyb20gJy4uL3RhYmxlLnR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56VGhBZGRPbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uelNob3dTb3J0OiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256U2hvd0ZpbHRlcjogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekN1c3RvbUZpbHRlcjogQm9vbGVhbklucHV0O1xuICAgIG1hbnVhbENsaWNrT3JkZXIkOiBTdWJqZWN0PE56VGhBZGRPbkNvbXBvbmVudD47XG4gICAgY2FsY09wZXJhdG9yQ2hhbmdlJDogU3ViamVjdDx1bmtub3duPjtcbiAgICBuekZpbHRlclZhbHVlOiBOelRhYmxlRmlsdGVyVmFsdWU7XG4gICAgc29ydE9yZGVyOiBOelRhYmxlU29ydE9yZGVyO1xuICAgIHNvcnREaXJlY3Rpb25zOiBOelRhYmxlU29ydE9yZGVyW107XG4gICAgcHJpdmF0ZSBzb3J0T3JkZXJDaGFuZ2UkO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSBpc056U2hvd1NvcnRDaGFuZ2VkO1xuICAgIHByaXZhdGUgaXNOelNob3dGaWx0ZXJDaGFuZ2VkO1xuICAgIG56Q29sdW1uS2V5Pzogc3RyaW5nO1xuICAgIG56RmlsdGVyTXVsdGlwbGU6IGJvb2xlYW47XG4gICAgbnpTb3J0T3JkZXI6IE56VGFibGVTb3J0T3JkZXI7XG4gICAgbnpTb3J0UHJpb3JpdHk6IG51bWJlciB8IGJvb2xlYW47XG4gICAgbnpTb3J0RGlyZWN0aW9uczogTnpUYWJsZVNvcnRPcmRlcltdO1xuICAgIG56RmlsdGVyczogTnpUYWJsZUZpbHRlckxpc3Q7XG4gICAgbnpTb3J0Rm46IE56VGFibGVTb3J0Rm4gfCBib29sZWFuIHwgbnVsbDtcbiAgICBuekZpbHRlckZuOiBOelRhYmxlRmlsdGVyRm4gfCBib29sZWFuIHwgbnVsbDtcbiAgICBuelNob3dTb3J0OiBib29sZWFuO1xuICAgIG56U2hvd0ZpbHRlcjogYm9vbGVhbjtcbiAgICBuekN1c3RvbUZpbHRlcjogYm9vbGVhbjtcbiAgICByZWFkb25seSBuekNoZWNrZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICByZWFkb25seSBuelNvcnRPcmRlckNoYW5nZTogRXZlbnRFbWl0dGVyPE56VGFibGVTb3J0T3JkZXI+O1xuICAgIHJlYWRvbmx5IG56RmlsdGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgdXNlIG56Q29sdW1uS2V5IGluc3RlYWQgKiovXG4gICAgbnpTb3J0S2V5Pzogc3RyaW5nO1xuICAgIC8qKiBAZGVwcmVjYXRlZCB1c2UgbnpTb3J0T3JkZXIgaW5zdGVhZCAqKi9cbiAgICBuelNvcnQ6IE56VGFibGVTb3J0T3JkZXI7XG4gICAgLyoqIEBkZXByZWNhdGVkIHVzZSBuelNvcnRPcmRlckNoYW5nZSBpbnN0ZWFkICoqL1xuICAgIHJlYWRvbmx5IG56U29ydENoYW5nZTogRXZlbnRFbWl0dGVyPE56VGFibGVTb3J0T3JkZXI+O1xuICAgIGdldE5leHRTb3J0RGlyZWN0aW9uKHNvcnREaXJlY3Rpb25zOiBOelRhYmxlU29ydE9yZGVyW10sIGN1cnJlbnQ6IE56VGFibGVTb3J0T3JkZXIpOiBOelRhYmxlU29ydE9yZGVyO1xuICAgIGVtaXROZXh0U29ydFZhbHVlKCk6IHZvaWQ7XG4gICAgc2V0U29ydE9yZGVyKG9yZGVyOiBOelRhYmxlU29ydE9yZGVyKTogdm9pZDtcbiAgICBjbGVhclNvcnRPcmRlcigpOiB2b2lkO1xuICAgIG9uRmlsdGVyVmFsdWVDaGFuZ2UodmFsdWU6IE56VGFibGVGaWx0ZXJWYWx1ZSk6IHZvaWQ7XG4gICAgdXBkYXRlQ2FsY09wZXJhdG9yKCk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19