/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { ChangeDetectorRef, DebugElement, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BooleanInput } from 'ng-zorro-antd/core/types';
import { DateHelperService } from 'ng-zorro-antd/i18n';
import { TimeHolder } from './time-holder';
import { NzTimeValueAccessorDirective } from './time-value-accessor.directive';
import * as ɵngcc0 from '@angular/core';
export declare type NzTimePickerUnit = 'hour' | 'minute' | 'second' | '12-hour';
export declare class NzTimePickerPanelComponent implements ControlValueAccessor, OnInit, OnDestroy, OnChanges {
    private cdr;
    dateHelper: DateHelperService;
    static ngAcceptInputType_nzUse12Hours: BooleanInput;
    private _nzHourStep;
    private _nzMinuteStep;
    private _nzSecondStep;
    private unsubscribe$;
    private onChange?;
    private onTouch?;
    private _format;
    private _disabledHours?;
    private _disabledMinutes?;
    private _disabledSeconds?;
    private _allowEmpty;
    time: TimeHolder;
    hourEnabled: boolean;
    minuteEnabled: boolean;
    secondEnabled: boolean;
    firstScrolled: boolean;
    enabledColumns: number;
    hourRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    minuteRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    secondRange: ReadonlyArray<{
        index: number;
        disabled: boolean;
    }>;
    use12HoursRange: ReadonlyArray<{
        index: number;
        value: string;
    }>;
    nzTimeValueAccessorDirective?: NzTimeValueAccessorDirective;
    hourListElement?: DebugElement;
    minuteListElement?: DebugElement;
    secondListElement?: DebugElement;
    use12HoursListElement?: DebugElement;
    nzInDatePicker: boolean;
    nzAddOn?: TemplateRef<void>;
    nzHideDisabledOptions: boolean;
    nzClearText?: string;
    nzPlaceHolder?: string;
    nzUse12Hours: boolean;
    nzDefaultOpenValue?: Date;
    readonly closePanel: EventEmitter<void>;
    set nzAllowEmpty(value: boolean);
    get nzAllowEmpty(): boolean;
    set nzDisabledHours(value: undefined | (() => number[]));
    get nzDisabledHours(): undefined | (() => number[]);
    set nzDisabledMinutes(value: undefined | ((hour: number) => number[]));
    get nzDisabledMinutes(): undefined | ((hour: number) => number[]);
    set nzDisabledSeconds(value: undefined | ((hour: number, minute: number) => number[]));
    get nzDisabledSeconds(): undefined | ((hour: number, minute: number) => number[]);
    set format(value: string);
    get format(): string;
    set nzHourStep(value: number);
    get nzHourStep(): number;
    set nzMinuteStep(value: number);
    get nzMinuteStep(): number;
    set nzSecondStep(value: number);
    get nzSecondStep(): number;
    selectInputRange(): void;
    buildHours(): void;
    buildMinutes(): void;
    buildSeconds(): void;
    build12Hours(): void;
    buildTimes(): void;
    scrollToTime(delay?: number): void;
    selectHour(hour: {
        index: number;
        disabled: boolean;
    }): void;
    selectMinute(minute: {
        index: number;
        disabled: boolean;
    }): void;
    selectSecond(second: {
        index: number;
        disabled: boolean;
    }): void;
    select12Hours(value: {
        index: number;
        value: string;
    }): void;
    scrollToSelected(instance: HTMLElement, index: number, duration: number | undefined, unit: NzTimePickerUnit): void;
    translateIndex(index: number, unit: NzTimePickerUnit): number;
    scrollTo(element: HTMLElement, to: number, duration: number): void;
    calcIndex(array: number[] | undefined, index: number): number;
    protected changed(): void;
    protected touched(): void;
    timeDisabled(value: Date): boolean;
    onClickNow(): void;
    isSelectedHour(hour: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedMinute(minute: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelectedSecond(second: {
        index: number;
        disabled: boolean;
    }): boolean;
    isSelected12Hours(value: {
        index: number;
        value: string;
    }): boolean;
    constructor(cdr: ChangeDetectorRef, dateHelper: DateHelperService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: Date): void;
    registerOnChange(fn: (value: Date) => void): void;
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzTimePickerPanelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzTimePickerPanelComponent, "nz-time-picker-panel", ["nzTimePickerPanel"], { "nzInDatePicker": "nzInDatePicker"; "nzHideDisabledOptions": "nzHideDisabledOptions"; "nzUse12Hours": "nzUse12Hours"; "nzAllowEmpty": "nzAllowEmpty"; "nzDisabledHours": "nzDisabledHours"; "nzDisabledMinutes": "nzDisabledMinutes"; "nzDisabledSeconds": "nzDisabledSeconds"; "format": "format"; "nzHourStep": "nzHourStep"; "nzMinuteStep": "nzMinuteStep"; "nzSecondStep": "nzSecondStep"; "nzAddOn": "nzAddOn"; "nzClearText": "nzClearText"; "nzPlaceHolder": "nzPlaceHolder"; "nzDefaultOpenValue": "nzDefaultOpenValue"; }, { "closePanel": "closePanel"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXItcGFuZWwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRpbWUtcGlja2VyLXBhbmVsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGVidWdFbGVtZW50LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBEYXRlSGVscGVyU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvaTE4bic7XG5pbXBvcnQgeyBUaW1lSG9sZGVyIH0gZnJvbSAnLi90aW1lLWhvbGRlcic7XG5pbXBvcnQgeyBOelRpbWVWYWx1ZUFjY2Vzc29yRGlyZWN0aXZlIH0gZnJvbSAnLi90aW1lLXZhbHVlLWFjY2Vzc29yLmRpcmVjdGl2ZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIE56VGltZVBpY2tlclVuaXQgPSAnaG91cicgfCAnbWludXRlJyB8ICdzZWNvbmQnIHwgJzEyLWhvdXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpUaW1lUGlja2VyUGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XG4gICAgcHJpdmF0ZSBjZHI7XG4gICAgZGF0ZUhlbHBlcjogRGF0ZUhlbHBlclNlcnZpY2U7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256VXNlMTJIb3VyczogQm9vbGVhbklucHV0O1xuICAgIHByaXZhdGUgX256SG91clN0ZXA7XG4gICAgcHJpdmF0ZSBfbnpNaW51dGVTdGVwO1xuICAgIHByaXZhdGUgX256U2Vjb25kU3RlcDtcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlJDtcbiAgICBwcml2YXRlIG9uQ2hhbmdlPztcbiAgICBwcml2YXRlIG9uVG91Y2g/O1xuICAgIHByaXZhdGUgX2Zvcm1hdDtcbiAgICBwcml2YXRlIF9kaXNhYmxlZEhvdXJzPztcbiAgICBwcml2YXRlIF9kaXNhYmxlZE1pbnV0ZXM/O1xuICAgIHByaXZhdGUgX2Rpc2FibGVkU2Vjb25kcz87XG4gICAgcHJpdmF0ZSBfYWxsb3dFbXB0eTtcbiAgICB0aW1lOiBUaW1lSG9sZGVyO1xuICAgIGhvdXJFbmFibGVkOiBib29sZWFuO1xuICAgIG1pbnV0ZUVuYWJsZWQ6IGJvb2xlYW47XG4gICAgc2Vjb25kRW5hYmxlZDogYm9vbGVhbjtcbiAgICBmaXJzdFNjcm9sbGVkOiBib29sZWFuO1xuICAgIGVuYWJsZWRDb2x1bW5zOiBudW1iZXI7XG4gICAgaG91clJhbmdlOiBSZWFkb25seUFycmF5PHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfT47XG4gICAgbWludXRlUmFuZ2U6IFJlYWRvbmx5QXJyYXk8e1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9PjtcbiAgICBzZWNvbmRSYW5nZTogUmVhZG9ubHlBcnJheTx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH0+O1xuICAgIHVzZTEySG91cnNSYW5nZTogUmVhZG9ubHlBcnJheTx7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfT47XG4gICAgbnpUaW1lVmFsdWVBY2Nlc3NvckRpcmVjdGl2ZT86IE56VGltZVZhbHVlQWNjZXNzb3JEaXJlY3RpdmU7XG4gICAgaG91ckxpc3RFbGVtZW50PzogRGVidWdFbGVtZW50O1xuICAgIG1pbnV0ZUxpc3RFbGVtZW50PzogRGVidWdFbGVtZW50O1xuICAgIHNlY29uZExpc3RFbGVtZW50PzogRGVidWdFbGVtZW50O1xuICAgIHVzZTEySG91cnNMaXN0RWxlbWVudD86IERlYnVnRWxlbWVudDtcbiAgICBuekluRGF0ZVBpY2tlcjogYm9vbGVhbjtcbiAgICBuekFkZE9uPzogVGVtcGxhdGVSZWY8dm9pZD47XG4gICAgbnpIaWRlRGlzYWJsZWRPcHRpb25zOiBib29sZWFuO1xuICAgIG56Q2xlYXJUZXh0Pzogc3RyaW5nO1xuICAgIG56UGxhY2VIb2xkZXI/OiBzdHJpbmc7XG4gICAgbnpVc2UxMkhvdXJzOiBib29sZWFuO1xuICAgIG56RGVmYXVsdE9wZW5WYWx1ZT86IERhdGU7XG4gICAgcmVhZG9ubHkgY2xvc2VQYW5lbDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIHNldCBuekFsbG93RW1wdHkodmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBuekFsbG93RW1wdHkoKTogYm9vbGVhbjtcbiAgICBzZXQgbnpEaXNhYmxlZEhvdXJzKHZhbHVlOiB1bmRlZmluZWQgfCAoKCkgPT4gbnVtYmVyW10pKTtcbiAgICBnZXQgbnpEaXNhYmxlZEhvdXJzKCk6IHVuZGVmaW5lZCB8ICgoKSA9PiBudW1iZXJbXSk7XG4gICAgc2V0IG56RGlzYWJsZWRNaW51dGVzKHZhbHVlOiB1bmRlZmluZWQgfCAoKGhvdXI6IG51bWJlcikgPT4gbnVtYmVyW10pKTtcbiAgICBnZXQgbnpEaXNhYmxlZE1pbnV0ZXMoKTogdW5kZWZpbmVkIHwgKChob3VyOiBudW1iZXIpID0+IG51bWJlcltdKTtcbiAgICBzZXQgbnpEaXNhYmxlZFNlY29uZHModmFsdWU6IHVuZGVmaW5lZCB8ICgoaG91cjogbnVtYmVyLCBtaW51dGU6IG51bWJlcikgPT4gbnVtYmVyW10pKTtcbiAgICBnZXQgbnpEaXNhYmxlZFNlY29uZHMoKTogdW5kZWZpbmVkIHwgKChob3VyOiBudW1iZXIsIG1pbnV0ZTogbnVtYmVyKSA9PiBudW1iZXJbXSk7XG4gICAgc2V0IGZvcm1hdCh2YWx1ZTogc3RyaW5nKTtcbiAgICBnZXQgZm9ybWF0KCk6IHN0cmluZztcbiAgICBzZXQgbnpIb3VyU3RlcCh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgbnpIb3VyU3RlcCgpOiBudW1iZXI7XG4gICAgc2V0IG56TWludXRlU3RlcCh2YWx1ZTogbnVtYmVyKTtcbiAgICBnZXQgbnpNaW51dGVTdGVwKCk6IG51bWJlcjtcbiAgICBzZXQgbnpTZWNvbmRTdGVwKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBuelNlY29uZFN0ZXAoKTogbnVtYmVyO1xuICAgIHNlbGVjdElucHV0UmFuZ2UoKTogdm9pZDtcbiAgICBidWlsZEhvdXJzKCk6IHZvaWQ7XG4gICAgYnVpbGRNaW51dGVzKCk6IHZvaWQ7XG4gICAgYnVpbGRTZWNvbmRzKCk6IHZvaWQ7XG4gICAgYnVpbGQxMkhvdXJzKCk6IHZvaWQ7XG4gICAgYnVpbGRUaW1lcygpOiB2b2lkO1xuICAgIHNjcm9sbFRvVGltZShkZWxheT86IG51bWJlcik6IHZvaWQ7XG4gICAgc2VsZWN0SG91cihob3VyOiB7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIH0pOiB2b2lkO1xuICAgIHNlbGVjdE1pbnV0ZShtaW51dGU6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfSk6IHZvaWQ7XG4gICAgc2VsZWN0U2Vjb25kKHNlY29uZDoge1xuICAgICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICB9KTogdm9pZDtcbiAgICBzZWxlY3QxMkhvdXJzKHZhbHVlOiB7XG4gICAgICAgIGluZGV4OiBudW1iZXI7XG4gICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfSk6IHZvaWQ7XG4gICAgc2Nyb2xsVG9TZWxlY3RlZChpbnN0YW5jZTogSFRNTEVsZW1lbnQsIGluZGV4OiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQsIHVuaXQ6IE56VGltZVBpY2tlclVuaXQpOiB2b2lkO1xuICAgIHRyYW5zbGF0ZUluZGV4KGluZGV4OiBudW1iZXIsIHVuaXQ6IE56VGltZVBpY2tlclVuaXQpOiBudW1iZXI7XG4gICAgc2Nyb2xsVG8oZWxlbWVudDogSFRNTEVsZW1lbnQsIHRvOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIGNhbGNJbmRleChhcnJheTogbnVtYmVyW10gfCB1bmRlZmluZWQsIGluZGV4OiBudW1iZXIpOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGNoYW5nZWQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdG91Y2hlZCgpOiB2b2lkO1xuICAgIHRpbWVEaXNhYmxlZCh2YWx1ZTogRGF0ZSk6IGJvb2xlYW47XG4gICAgb25DbGlja05vdygpOiB2b2lkO1xuICAgIGlzU2VsZWN0ZWRIb3VyKGhvdXI6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfSk6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RlZE1pbnV0ZShtaW51dGU6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfSk6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RlZFNlY29uZChzZWNvbmQ6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgfSk6IGJvb2xlYW47XG4gICAgaXNTZWxlY3RlZDEySG91cnModmFsdWU6IHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcbiAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICB9KTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihjZHI6IENoYW5nZURldGVjdG9yUmVmLCBkYXRlSGVscGVyOiBEYXRlSGVscGVyU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IERhdGUpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogRGF0ZSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuIl19