/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BooleanInput, NumberInput } from 'ng-zorro-antd/core/types';
import { NzSliderHandleComponent } from './handle.component';
import { NzSliderService } from './slider.service';
import { NzExtendedMark, NzMarks, NzSliderHandler, NzSliderShowTooltip, NzSliderValue } from './typings';
import * as ɵngcc0 from '@angular/core';
export declare class NzSliderComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {
    private sliderService;
    private cdr;
    private platform;
    static ngAcceptInputType_nzDisabled: BooleanInput;
    static ngAcceptInputType_nzDots: BooleanInput;
    static ngAcceptInputType_nzIncluded: BooleanInput;
    static ngAcceptInputType_nzRange: BooleanInput;
    static ngAcceptInputType_nzVertical: BooleanInput;
    static ngAcceptInputType_nzMax: NumberInput;
    static ngAcceptInputType_nzMin: NumberInput;
    static ngAcceptInputType_nzStep: NumberInput;
    static ngAcceptInputType_nzReverse: BooleanInput;
    slider: ElementRef<HTMLDivElement>;
    handlerComponents: QueryList<NzSliderHandleComponent>;
    nzDisabled: boolean;
    nzDots: boolean;
    nzIncluded: boolean;
    nzRange: boolean;
    nzVertical: boolean;
    nzReverse: boolean;
    nzDefaultValue?: NzSliderValue;
    nzMarks: NzMarks | null;
    nzMax: number;
    nzMin: number;
    nzStep: number;
    nzTooltipVisible: NzSliderShowTooltip;
    nzTooltipPlacement: string;
    nzTipFormatter?: null | ((value: number) => string);
    readonly nzOnAfterChange: EventEmitter<NzSliderValue>;
    value: NzSliderValue | null;
    cacheSliderStart: number | null;
    cacheSliderLength: number | null;
    activeValueIndex: number | undefined;
    track: {
        offset: null | number;
        length: null | number;
    };
    handles: NzSliderHandler[];
    marksArray: NzExtendedMark[] | null;
    bounds: {
        lower: NzSliderValue | null;
        upper: NzSliderValue | null;
    };
    private dragStart$?;
    private dragMove$?;
    private dragEnd$?;
    private dragStart_?;
    private dragMove_?;
    private dragEnd_?;
    constructor(sliderService: NzSliderService, cdr: ChangeDetectorRef, platform: Platform);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    writeValue(val: NzSliderValue | null): void;
    onValueChange(_value: NzSliderValue): void;
    onTouched(): void;
    registerOnChange(fn: (value: NzSliderValue) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Event handler is only triggered when a slider handler is focused.
     */
    onKeyDown(e: KeyboardEvent): void;
    private setValue;
    private getValue;
    /**
     * Clone & sort current value and convert them to offsets, then return the new one.
     */
    private getValueToOffset;
    /**
     * Find the closest value to be activated.
     */
    private setActiveValueIndex;
    private setActiveValue;
    /**
     * Update track and handles' position and length.
     */
    private updateTrackAndHandles;
    private onDragStart;
    private onDragMove;
    private getLogicalValue;
    private onDragEnd;
    /**
     * Create user interactions handles.
     */
    private bindDraggingHandlers;
    private subscribeDrag;
    private unsubscribeDrag;
    private toggleDragMoving;
    private toggleDragDisabled;
    private findClosestValue;
    private valueToOffset;
    private getSliderStartPosition;
    private getSliderLength;
    /**
     * Cache DOM layout/reflow operations for performance (may not necessary?)
     */
    private cacheSliderProperty;
    private formatValue;
    /**
     * Show one handle's tooltip and hide others'.
     */
    private showHandleTooltip;
    private hideAllHandleTooltip;
    private generateMarkItems;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzSliderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzSliderComponent, "nz-slider", ["nzSlider"], { "nzDisabled": "nzDisabled"; "nzDots": "nzDots"; "nzIncluded": "nzIncluded"; "nzRange": "nzRange"; "nzVertical": "nzVertical"; "nzReverse": "nzReverse"; "nzMarks": "nzMarks"; "nzMax": "nzMax"; "nzMin": "nzMin"; "nzStep": "nzStep"; "nzTooltipVisible": "nzTooltipVisible"; "nzTooltipPlacement": "nzTooltipPlacement"; "nzDefaultValue": "nzDefaultValue"; "nzTipFormatter": "nzTipFormatter"; }, { "nzOnAfterChange": "nzOnAfterChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJzbGlkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCwgTnVtYmVySW5wdXQgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgTnpTbGlkZXJIYW5kbGVDb21wb25lbnQgfSBmcm9tICcuL2hhbmRsZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTnpTbGlkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zbGlkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBOekV4dGVuZGVkTWFyaywgTnpNYXJrcywgTnpTbGlkZXJIYW5kbGVyLCBOelNsaWRlclNob3dUb29sdGlwLCBOelNsaWRlclZhbHVlIH0gZnJvbSAnLi90eXBpbmdzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56U2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgc2xpZGVyU2VydmljZTtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekRpc2FibGVkOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256RG90czogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uekluY2x1ZGVkOiBCb29sZWFuSW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256UmFuZ2U6IEJvb2xlYW5JbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpWZXJ0aWNhbDogQm9vbGVhbklucHV0O1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9uek1heDogTnVtYmVySW5wdXQ7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX256TWluOiBOdW1iZXJJbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpTdGVwOiBOdW1iZXJJbnB1dDtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfbnpSZXZlcnNlOiBCb29sZWFuSW5wdXQ7XG4gICAgc2xpZGVyOiBFbGVtZW50UmVmPEhUTUxEaXZFbGVtZW50PjtcbiAgICBoYW5kbGVyQ29tcG9uZW50czogUXVlcnlMaXN0PE56U2xpZGVySGFuZGxlQ29tcG9uZW50PjtcbiAgICBuekRpc2FibGVkOiBib29sZWFuO1xuICAgIG56RG90czogYm9vbGVhbjtcbiAgICBuekluY2x1ZGVkOiBib29sZWFuO1xuICAgIG56UmFuZ2U6IGJvb2xlYW47XG4gICAgbnpWZXJ0aWNhbDogYm9vbGVhbjtcbiAgICBuelJldmVyc2U6IGJvb2xlYW47XG4gICAgbnpEZWZhdWx0VmFsdWU/OiBOelNsaWRlclZhbHVlO1xuICAgIG56TWFya3M6IE56TWFya3MgfCBudWxsO1xuICAgIG56TWF4OiBudW1iZXI7XG4gICAgbnpNaW46IG51bWJlcjtcbiAgICBuelN0ZXA6IG51bWJlcjtcbiAgICBuelRvb2x0aXBWaXNpYmxlOiBOelNsaWRlclNob3dUb29sdGlwO1xuICAgIG56VG9vbHRpcFBsYWNlbWVudDogc3RyaW5nO1xuICAgIG56VGlwRm9ybWF0dGVyPzogbnVsbCB8ICgodmFsdWU6IG51bWJlcikgPT4gc3RyaW5nKTtcbiAgICByZWFkb25seSBuek9uQWZ0ZXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxOelNsaWRlclZhbHVlPjtcbiAgICB2YWx1ZTogTnpTbGlkZXJWYWx1ZSB8IG51bGw7XG4gICAgY2FjaGVTbGlkZXJTdGFydDogbnVtYmVyIHwgbnVsbDtcbiAgICBjYWNoZVNsaWRlckxlbmd0aDogbnVtYmVyIHwgbnVsbDtcbiAgICBhY3RpdmVWYWx1ZUluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgdHJhY2s6IHtcbiAgICAgICAgb2Zmc2V0OiBudWxsIHwgbnVtYmVyO1xuICAgICAgICBsZW5ndGg6IG51bGwgfCBudW1iZXI7XG4gICAgfTtcbiAgICBoYW5kbGVzOiBOelNsaWRlckhhbmRsZXJbXTtcbiAgICBtYXJrc0FycmF5OiBOekV4dGVuZGVkTWFya1tdIHwgbnVsbDtcbiAgICBib3VuZHM6IHtcbiAgICAgICAgbG93ZXI6IE56U2xpZGVyVmFsdWUgfCBudWxsO1xuICAgICAgICB1cHBlcjogTnpTbGlkZXJWYWx1ZSB8IG51bGw7XG4gICAgfTtcbiAgICBwcml2YXRlIGRyYWdTdGFydCQ/O1xuICAgIHByaXZhdGUgZHJhZ01vdmUkPztcbiAgICBwcml2YXRlIGRyYWdFbmQkPztcbiAgICBwcml2YXRlIGRyYWdTdGFydF8/O1xuICAgIHByaXZhdGUgZHJhZ01vdmVfPztcbiAgICBwcml2YXRlIGRyYWdFbmRfPztcbiAgICBjb25zdHJ1Y3RvcihzbGlkZXJTZXJ2aWNlOiBOelNsaWRlclNlcnZpY2UsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHBsYXRmb3JtOiBQbGF0Zm9ybSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsOiBOelNsaWRlclZhbHVlIHwgbnVsbCk6IHZvaWQ7XG4gICAgb25WYWx1ZUNoYW5nZShfdmFsdWU6IE56U2xpZGVyVmFsdWUpOiB2b2lkO1xuICAgIG9uVG91Y2hlZCgpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogTnpTbGlkZXJWYWx1ZSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRXZlbnQgaGFuZGxlciBpcyBvbmx5IHRyaWdnZXJlZCB3aGVuIGEgc2xpZGVyIGhhbmRsZXIgaXMgZm9jdXNlZC5cbiAgICAgKi9cbiAgICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZXRWYWx1ZTtcbiAgICBwcml2YXRlIGdldFZhbHVlO1xuICAgIC8qKlxuICAgICAqIENsb25lICYgc29ydCBjdXJyZW50IHZhbHVlIGFuZCBjb252ZXJ0IHRoZW0gdG8gb2Zmc2V0cywgdGhlbiByZXR1cm4gdGhlIG5ldyBvbmUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRWYWx1ZVRvT2Zmc2V0O1xuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIGNsb3Nlc3QgdmFsdWUgdG8gYmUgYWN0aXZhdGVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgc2V0QWN0aXZlVmFsdWVJbmRleDtcbiAgICBwcml2YXRlIHNldEFjdGl2ZVZhbHVlO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0cmFjayBhbmQgaGFuZGxlcycgcG9zaXRpb24gYW5kIGxlbmd0aC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZVRyYWNrQW5kSGFuZGxlcztcbiAgICBwcml2YXRlIG9uRHJhZ1N0YXJ0O1xuICAgIHByaXZhdGUgb25EcmFnTW92ZTtcbiAgICBwcml2YXRlIGdldExvZ2ljYWxWYWx1ZTtcbiAgICBwcml2YXRlIG9uRHJhZ0VuZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdXNlciBpbnRlcmFjdGlvbnMgaGFuZGxlcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIGJpbmREcmFnZ2luZ0hhbmRsZXJzO1xuICAgIHByaXZhdGUgc3Vic2NyaWJlRHJhZztcbiAgICBwcml2YXRlIHVuc3Vic2NyaWJlRHJhZztcbiAgICBwcml2YXRlIHRvZ2dsZURyYWdNb3Zpbmc7XG4gICAgcHJpdmF0ZSB0b2dnbGVEcmFnRGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBmaW5kQ2xvc2VzdFZhbHVlO1xuICAgIHByaXZhdGUgdmFsdWVUb09mZnNldDtcbiAgICBwcml2YXRlIGdldFNsaWRlclN0YXJ0UG9zaXRpb247XG4gICAgcHJpdmF0ZSBnZXRTbGlkZXJMZW5ndGg7XG4gICAgLyoqXG4gICAgICogQ2FjaGUgRE9NIGxheW91dC9yZWZsb3cgb3BlcmF0aW9ucyBmb3IgcGVyZm9ybWFuY2UgKG1heSBub3QgbmVjZXNzYXJ5PylcbiAgICAgKi9cbiAgICBwcml2YXRlIGNhY2hlU2xpZGVyUHJvcGVydHk7XG4gICAgcHJpdmF0ZSBmb3JtYXRWYWx1ZTtcbiAgICAvKipcbiAgICAgKiBTaG93IG9uZSBoYW5kbGUncyB0b29sdGlwIGFuZCBoaWRlIG90aGVycycuXG4gICAgICovXG4gICAgcHJpdmF0ZSBzaG93SGFuZGxlVG9vbHRpcDtcbiAgICBwcml2YXRlIGhpZGVBbGxIYW5kbGVUb29sdGlwO1xuICAgIHByaXZhdGUgZ2VuZXJhdGVNYXJrSXRlbXM7XG59XG4iXX0=