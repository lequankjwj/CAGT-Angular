/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, NgZone, OnChanges, TemplateRef } from '@angular/core';
import { NgClassType, NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable } from 'rxjs';
import { NzShowUploadList, NzUploadFile, NzUploadListType } from './interface';
import * as ɵngcc0 from '@angular/core';
declare type UploadListIconType = '' | 'uploading' | 'thumbnail';
interface UploadListFile extends NzUploadFile {
    isImageUrl?: boolean;
    isUploading?: boolean;
    iconType?: UploadListIconType;
    listItemNameCls?: NgClassType;
    showDownload?: boolean;
}
export declare class NzUploadListComponent implements OnChanges {
    private cdr;
    private doc;
    private ngZone;
    private platform;
    list: UploadListFile[];
    private get showPic();
    locale: NzSafeAny;
    listType: NzUploadListType;
    set items(list: NzUploadFile[]);
    icons: NzShowUploadList;
    onPreview?: (file: NzUploadFile) => void;
    onRemove: (file: NzUploadFile) => void;
    onDownload?: (file: NzUploadFile) => void;
    previewFile?: (file: NzUploadFile) => Observable<string>;
    previewIsImage?: (file: NzUploadFile) => boolean;
    iconRender: TemplateRef<NzSafeAny> | null;
    private genErr;
    private extname;
    isImageUrl(file: NzUploadFile): boolean;
    private getIconType;
    private previewImage;
    private genThumb;
    private listItemNameCls;
    private showDownload;
    private fixData;
    handlePreview(file: NzUploadFile, e: Event): void;
    handleRemove(file: NzUploadFile, e: Event): void;
    handleDownload(file: NzUploadFile): void;
    constructor(cdr: ChangeDetectorRef, doc: NzSafeAny, ngZone: NgZone, platform: Platform);
    detectChanges(): void;
    ngOnChanges(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzUploadListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzUploadListComponent, "nz-upload-list", ["nzUploadList"], { "locale": "locale"; "iconRender": "iconRender"; "items": "items"; "listType": "listType"; "icons": "icons"; "onPreview": "onPreview"; "onRemove": "onRemove"; "onDownload": "onDownload"; "previewFile": "previewFile"; "previewIsImage": "previewIsImage"; }, {}, never, never>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWxpc3QuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInVwbG9hZC1saXN0LmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9naXRodWIuY29tL05HLVpPUlJPL25nLXpvcnJvLWFudGQvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICovXG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgTmdab25lLCBPbkNoYW5nZXMsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NsYXNzVHlwZSwgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56U2hvd1VwbG9hZExpc3QsIE56VXBsb2FkRmlsZSwgTnpVcGxvYWRMaXN0VHlwZSB9IGZyb20gJy4vaW50ZXJmYWNlJztcbmRlY2xhcmUgdHlwZSBVcGxvYWRMaXN0SWNvblR5cGUgPSAnJyB8ICd1cGxvYWRpbmcnIHwgJ3RodW1ibmFpbCc7XG5pbnRlcmZhY2UgVXBsb2FkTGlzdEZpbGUgZXh0ZW5kcyBOelVwbG9hZEZpbGUge1xuICAgIGlzSW1hZ2VVcmw/OiBib29sZWFuO1xuICAgIGlzVXBsb2FkaW5nPzogYm9vbGVhbjtcbiAgICBpY29uVHlwZT86IFVwbG9hZExpc3RJY29uVHlwZTtcbiAgICBsaXN0SXRlbU5hbWVDbHM/OiBOZ0NsYXNzVHlwZTtcbiAgICBzaG93RG93bmxvYWQ/OiBib29sZWFuO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpVcGxvYWRMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGNkcjtcbiAgICBwcml2YXRlIGRvYztcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBwcml2YXRlIHBsYXRmb3JtO1xuICAgIGxpc3Q6IFVwbG9hZExpc3RGaWxlW107XG4gICAgcHJpdmF0ZSBnZXQgc2hvd1BpYygpO1xuICAgIGxvY2FsZTogTnpTYWZlQW55O1xuICAgIGxpc3RUeXBlOiBOelVwbG9hZExpc3RUeXBlO1xuICAgIHNldCBpdGVtcyhsaXN0OiBOelVwbG9hZEZpbGVbXSk7XG4gICAgaWNvbnM6IE56U2hvd1VwbG9hZExpc3Q7XG4gICAgb25QcmV2aWV3PzogKGZpbGU6IE56VXBsb2FkRmlsZSkgPT4gdm9pZDtcbiAgICBvblJlbW92ZTogKGZpbGU6IE56VXBsb2FkRmlsZSkgPT4gdm9pZDtcbiAgICBvbkRvd25sb2FkPzogKGZpbGU6IE56VXBsb2FkRmlsZSkgPT4gdm9pZDtcbiAgICBwcmV2aWV3RmlsZT86IChmaWxlOiBOelVwbG9hZEZpbGUpID0+IE9ic2VydmFibGU8c3RyaW5nPjtcbiAgICBwcmV2aWV3SXNJbWFnZT86IChmaWxlOiBOelVwbG9hZEZpbGUpID0+IGJvb2xlYW47XG4gICAgaWNvblJlbmRlcjogVGVtcGxhdGVSZWY8TnpTYWZlQW55PiB8IG51bGw7XG4gICAgcHJpdmF0ZSBnZW5FcnI7XG4gICAgcHJpdmF0ZSBleHRuYW1lO1xuICAgIGlzSW1hZ2VVcmwoZmlsZTogTnpVcGxvYWRGaWxlKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGdldEljb25UeXBlO1xuICAgIHByaXZhdGUgcHJldmlld0ltYWdlO1xuICAgIHByaXZhdGUgZ2VuVGh1bWI7XG4gICAgcHJpdmF0ZSBsaXN0SXRlbU5hbWVDbHM7XG4gICAgcHJpdmF0ZSBzaG93RG93bmxvYWQ7XG4gICAgcHJpdmF0ZSBmaXhEYXRhO1xuICAgIGhhbmRsZVByZXZpZXcoZmlsZTogTnpVcGxvYWRGaWxlLCBlOiBFdmVudCk6IHZvaWQ7XG4gICAgaGFuZGxlUmVtb3ZlKGZpbGU6IE56VXBsb2FkRmlsZSwgZTogRXZlbnQpOiB2b2lkO1xuICAgIGhhbmRsZURvd25sb2FkKGZpbGU6IE56VXBsb2FkRmlsZSk6IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoY2RyOiBDaGFuZ2VEZXRlY3RvclJlZiwgZG9jOiBOelNhZmVBbnksIG5nWm9uZTogTmdab25lLCBwbGF0Zm9ybTogUGxhdGZvcm0pO1xuICAgIGRldGVjdENoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xufVxuZXhwb3J0IHt9O1xuIl19