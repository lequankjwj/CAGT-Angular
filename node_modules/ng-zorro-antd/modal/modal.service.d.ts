/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { Overlay } from '@angular/cdk/overlay';
import { Injector, OnDestroy } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ConfirmType, ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare class NzModalService implements OnDestroy {
    private overlay;
    private injector;
    private nzConfigService;
    private parentModal;
    private openModalsAtThisLevel;
    private readonly afterAllClosedAtThisLevel;
    get openModals(): NzModalRef[];
    get _afterAllClosed(): Subject<void>;
    readonly afterAllClose: Observable<void>;
    constructor(overlay: Overlay, injector: Injector, nzConfigService: NzConfigService, parentModal: NzModalService);
    create<T, R = NzSafeAny>(config: ModalOptions<T, R>): NzModalRef<T, R>;
    closeAll(): void;
    confirm<T>(options?: ModalOptions<T>, confirmType?: ConfirmType): NzModalRef<T>;
    info<T>(options?: ModalOptions<T>): NzModalRef<T>;
    success<T>(options?: ModalOptions<T>): NzModalRef<T>;
    error<T>(options?: ModalOptions<T>): NzModalRef<T>;
    warning<T>(options?: ModalOptions<T>): NzModalRef<T>;
    private open;
    private removeOpenModal;
    private closeModals;
    private createOverlay;
    private attachModalContainer;
    private attachModalContent;
    private createInjector;
    private confirmFactory;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzModalService, [null, null, null, { optional: true; skipSelf: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NzModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJtb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IE92ZXJsYXkgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBJbmplY3RvciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekNvbmZpZ1NlcnZpY2UgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvY29uZmlnJztcbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOek1vZGFsUmVmIH0gZnJvbSAnLi9tb2RhbC1yZWYnO1xuaW1wb3J0IHsgQ29uZmlybVR5cGUsIE1vZGFsT3B0aW9ucyB9IGZyb20gJy4vbW9kYWwtdHlwZXMnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTnpNb2RhbFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgb3ZlcmxheTtcbiAgICBwcml2YXRlIGluamVjdG9yO1xuICAgIHByaXZhdGUgbnpDb25maWdTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGFyZW50TW9kYWw7XG4gICAgcHJpdmF0ZSBvcGVuTW9kYWxzQXRUaGlzTGV2ZWw7XG4gICAgcHJpdmF0ZSByZWFkb25seSBhZnRlckFsbENsb3NlZEF0VGhpc0xldmVsO1xuICAgIGdldCBvcGVuTW9kYWxzKCk6IE56TW9kYWxSZWZbXTtcbiAgICBnZXQgX2FmdGVyQWxsQ2xvc2VkKCk6IFN1YmplY3Q8dm9pZD47XG4gICAgcmVhZG9ubHkgYWZ0ZXJBbGxDbG9zZTogT2JzZXJ2YWJsZTx2b2lkPjtcbiAgICBjb25zdHJ1Y3RvcihvdmVybGF5OiBPdmVybGF5LCBpbmplY3RvcjogSW5qZWN0b3IsIG56Q29uZmlnU2VydmljZTogTnpDb25maWdTZXJ2aWNlLCBwYXJlbnRNb2RhbDogTnpNb2RhbFNlcnZpY2UpO1xuICAgIGNyZWF0ZTxULCBSID0gTnpTYWZlQW55Pihjb25maWc6IE1vZGFsT3B0aW9uczxULCBSPik6IE56TW9kYWxSZWY8VCwgUj47XG4gICAgY2xvc2VBbGwoKTogdm9pZDtcbiAgICBjb25maXJtPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnM8VD4sIGNvbmZpcm1UeXBlPzogQ29uZmlybVR5cGUpOiBOek1vZGFsUmVmPFQ+O1xuICAgIGluZm88VD4ob3B0aW9ucz86IE1vZGFsT3B0aW9uczxUPik6IE56TW9kYWxSZWY8VD47XG4gICAgc3VjY2VzczxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICBlcnJvcjxUPihvcHRpb25zPzogTW9kYWxPcHRpb25zPFQ+KTogTnpNb2RhbFJlZjxUPjtcbiAgICB3YXJuaW5nPFQ+KG9wdGlvbnM/OiBNb2RhbE9wdGlvbnM8VD4pOiBOek1vZGFsUmVmPFQ+O1xuICAgIHByaXZhdGUgb3BlbjtcbiAgICBwcml2YXRlIHJlbW92ZU9wZW5Nb2RhbDtcbiAgICBwcml2YXRlIGNsb3NlTW9kYWxzO1xuICAgIHByaXZhdGUgY3JlYXRlT3ZlcmxheTtcbiAgICBwcml2YXRlIGF0dGFjaE1vZGFsQ29udGFpbmVyO1xuICAgIHByaXZhdGUgYXR0YWNoTW9kYWxDb250ZW50O1xuICAgIHByaXZhdGUgY3JlYXRlSW5qZWN0b3I7XG4gICAgcHJpdmF0ZSBjb25maXJtRmFjdG9yeTtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19