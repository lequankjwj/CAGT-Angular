/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { AnimationEvent } from '@angular/animations';
import { ConfigurableFocusTrapFactory } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { ChangeDetectorRef, ComponentRef, ElementRef, EmbeddedViewRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { NzConfigService } from 'ng-zorro-antd/core/config';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Subject } from 'rxjs';
import { NzModalRef } from './modal-ref';
import { ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare function throwNzModalContentAlreadyAttachedError(): never;
export declare class BaseModalContainer extends BasePortalOutlet implements OnDestroy {
    protected elementRef: ElementRef;
    protected focusTrapFactory: ConfigurableFocusTrapFactory;
    cdr: ChangeDetectorRef;
    protected render: Renderer2;
    protected overlayRef: OverlayRef;
    protected nzConfigService: NzConfigService;
    config: ModalOptions;
    protected animationType?: string | undefined;
    portalOutlet: CdkPortalOutlet;
    modalElementRef: ElementRef<HTMLDivElement>;
    animationStateChanged: EventEmitter<AnimationEvent>;
    containerClick: EventEmitter<void>;
    cancelTriggered: EventEmitter<void>;
    okTriggered: EventEmitter<void>;
    state: 'void' | 'enter' | 'exit';
    document: Document;
    modalRef: NzModalRef;
    isStringContent: boolean;
    private elementFocusedBeforeModalWasOpened;
    private focusTrap;
    private mouseDown;
    private oldMaskStyle;
    protected destroy$: Subject<unknown>;
    get showMask(): boolean;
    get maskClosable(): boolean;
    constructor(elementRef: ElementRef, focusTrapFactory: ConfigurableFocusTrapFactory, cdr: ChangeDetectorRef, render: Renderer2, overlayRef: OverlayRef, nzConfigService: NzConfigService, config: ModalOptions, document?: NzSafeAny, animationType?: string | undefined);
    onContainerClick(e: MouseEvent): void;
    onMousedown(): void;
    onMouseup(): void;
    onCloseClick(): void;
    onOkClick(): void;
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    attachStringContent(): void;
    getNativeElement(): HTMLElement;
    private animationDisabled;
    private setModalTransformOrigin;
    private savePreviouslyFocusedElement;
    private trapFocus;
    private restoreFocus;
    private setEnterAnimationClass;
    private setExitAnimationClass;
    private setMaskExitAnimationClass;
    private cleanAnimationClass;
    bindBackdropStyle(): void;
    /**
     * Set the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private setContainer;
    /**
     * Reset the container element.
     * @deprecated Not supported.
     * @breaking-change 10.0.0
     */
    private resetContainer;
    private getContainer;
    updateMaskClassname(): void;
    onAnimationDone(event: AnimationEvent): void;
    onAnimationStart(event: AnimationEvent): void;
    startExitAnimation(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BaseModalContainer, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BaseModalContainer, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29udGFpbmVyLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLWNvbnRhaW5lci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9ORy1aT1JSTy9uZy16b3Jyby1hbnRkL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqL1xuaW1wb3J0IHsgQW5pbWF0aW9uRXZlbnQgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENvbmZpZ3VyYWJsZUZvY3VzVHJhcEZhY3RvcnkgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHsgQmFzZVBvcnRhbE91dGxldCwgQ2RrUG9ydGFsT3V0bGV0LCBDb21wb25lbnRQb3J0YWwsIFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50UmVmLCBFbGVtZW50UmVmLCBFbWJlZGRlZFZpZXdSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE56Q29uZmlnU2VydmljZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS9jb25maWcnO1xuaW1wb3J0IHsgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE56TW9kYWxSZWYgfSBmcm9tICcuL21vZGFsLXJlZic7XG5pbXBvcnQgeyBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIHRocm93TnpNb2RhbENvbnRlbnRBbHJlYWR5QXR0YWNoZWRFcnJvcigpOiBuZXZlcjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJhc2VNb2RhbENvbnRhaW5lciBleHRlbmRzIEJhc2VQb3J0YWxPdXRsZXQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBmb2N1c1RyYXBGYWN0b3J5OiBDb25maWd1cmFibGVGb2N1c1RyYXBGYWN0b3J5O1xuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIHJlbmRlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCBvdmVybGF5UmVmOiBPdmVybGF5UmVmO1xuICAgIHByb3RlY3RlZCBuekNvbmZpZ1NlcnZpY2U6IE56Q29uZmlnU2VydmljZTtcbiAgICBjb25maWc6IE1vZGFsT3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgYW5pbWF0aW9uVHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBwb3J0YWxPdXRsZXQ6IENka1BvcnRhbE91dGxldDtcbiAgICBtb2RhbEVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTERpdkVsZW1lbnQ+O1xuICAgIGFuaW1hdGlvblN0YXRlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkV2ZW50PjtcbiAgICBjb250YWluZXJDbGljazogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGNhbmNlbFRyaWdnZXJlZDogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIG9rVHJpZ2dlcmVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgc3RhdGU6ICd2b2lkJyB8ICdlbnRlcicgfCAnZXhpdCc7XG4gICAgZG9jdW1lbnQ6IERvY3VtZW50O1xuICAgIG1vZGFsUmVmOiBOek1vZGFsUmVmO1xuICAgIGlzU3RyaW5nQ29udGVudDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGVsZW1lbnRGb2N1c2VkQmVmb3JlTW9kYWxXYXNPcGVuZWQ7XG4gICAgcHJpdmF0ZSBmb2N1c1RyYXA7XG4gICAgcHJpdmF0ZSBtb3VzZURvd247XG4gICAgcHJpdmF0ZSBvbGRNYXNrU3R5bGU7XG4gICAgcHJvdGVjdGVkIGRlc3Ryb3kkOiBTdWJqZWN0PHVua25vd24+O1xuICAgIGdldCBzaG93TWFzaygpOiBib29sZWFuO1xuICAgIGdldCBtYXNrQ2xvc2FibGUoKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBmb2N1c1RyYXBGYWN0b3J5OiBDb25maWd1cmFibGVGb2N1c1RyYXBGYWN0b3J5LCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCByZW5kZXI6IFJlbmRlcmVyMiwgb3ZlcmxheVJlZjogT3ZlcmxheVJlZiwgbnpDb25maWdTZXJ2aWNlOiBOekNvbmZpZ1NlcnZpY2UsIGNvbmZpZzogTW9kYWxPcHRpb25zLCBkb2N1bWVudD86IE56U2FmZUFueSwgYW5pbWF0aW9uVHlwZT86IHN0cmluZyB8IHVuZGVmaW5lZCk7XG4gICAgb25Db250YWluZXJDbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBvbk1vdXNlZG93bigpOiB2b2lkO1xuICAgIG9uTW91c2V1cCgpOiB2b2lkO1xuICAgIG9uQ2xvc2VDbGljaygpOiB2b2lkO1xuICAgIG9uT2tDbGljaygpOiB2b2lkO1xuICAgIGF0dGFjaENvbXBvbmVudFBvcnRhbDxUPihwb3J0YWw6IENvbXBvbmVudFBvcnRhbDxUPik6IENvbXBvbmVudFJlZjxUPjtcbiAgICBhdHRhY2hUZW1wbGF0ZVBvcnRhbDxDPihwb3J0YWw6IFRlbXBsYXRlUG9ydGFsPEM+KTogRW1iZWRkZWRWaWV3UmVmPEM+O1xuICAgIGF0dGFjaFN0cmluZ0NvbnRlbnQoKTogdm9pZDtcbiAgICBnZXROYXRpdmVFbGVtZW50KCk6IEhUTUxFbGVtZW50O1xuICAgIHByaXZhdGUgYW5pbWF0aW9uRGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBzZXRNb2RhbFRyYW5zZm9ybU9yaWdpbjtcbiAgICBwcml2YXRlIHNhdmVQcmV2aW91c2x5Rm9jdXNlZEVsZW1lbnQ7XG4gICAgcHJpdmF0ZSB0cmFwRm9jdXM7XG4gICAgcHJpdmF0ZSByZXN0b3JlRm9jdXM7XG4gICAgcHJpdmF0ZSBzZXRFbnRlckFuaW1hdGlvbkNsYXNzO1xuICAgIHByaXZhdGUgc2V0RXhpdEFuaW1hdGlvbkNsYXNzO1xuICAgIHByaXZhdGUgc2V0TWFza0V4aXRBbmltYXRpb25DbGFzcztcbiAgICBwcml2YXRlIGNsZWFuQW5pbWF0aW9uQ2xhc3M7XG4gICAgYmluZEJhY2tkcm9wU3R5bGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNvbnRhaW5lciBlbGVtZW50LlxuICAgICAqIEBkZXByZWNhdGVkIE5vdCBzdXBwb3J0ZWQuXG4gICAgICogQGJyZWFraW5nLWNoYW5nZSAxMC4wLjBcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldENvbnRhaW5lcjtcbiAgICAvKipcbiAgICAgKiBSZXNldCB0aGUgY29udGFpbmVyIGVsZW1lbnQuXG4gICAgICogQGRlcHJlY2F0ZWQgTm90IHN1cHBvcnRlZC5cbiAgICAgKiBAYnJlYWtpbmctY2hhbmdlIDEwLjAuMFxuICAgICAqL1xuICAgIHByaXZhdGUgcmVzZXRDb250YWluZXI7XG4gICAgcHJpdmF0ZSBnZXRDb250YWluZXI7XG4gICAgdXBkYXRlTWFza0NsYXNzbmFtZSgpOiB2b2lkO1xuICAgIG9uQW5pbWF0aW9uRG9uZShldmVudDogQW5pbWF0aW9uRXZlbnQpOiB2b2lkO1xuICAgIG9uQW5pbWF0aW9uU3RhcnQoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KTogdm9pZDtcbiAgICBzdGFydEV4aXRBbmltYXRpb24oKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19