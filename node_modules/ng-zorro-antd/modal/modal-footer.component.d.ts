/**
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE
 */
import { EventEmitter, OnDestroy } from '@angular/core';
import { NzI18nService, NzModalI18nInterface } from 'ng-zorro-antd/i18n';
import { NzModalRef } from './modal-ref';
import { ModalButtonOptions, ModalOptions } from './modal-types';
import * as ɵngcc0 from '@angular/core';
export declare class NzModalFooterComponent implements OnDestroy {
    private i18n;
    config: ModalOptions;
    buttonsFooter: boolean;
    buttons: ModalButtonOptions[];
    locale: NzModalI18nInterface;
    readonly cancelTriggered: EventEmitter<void>;
    readonly okTriggered: EventEmitter<void>;
    modalRef: NzModalRef;
    private destroy$;
    constructor(i18n: NzI18nService, config: ModalOptions);
    onCancel(): void;
    onOk(): void;
    /**
     * Returns the value of the specified key.
     * If it is a function, run and return the return value of the function.
     * @deprecated Not support use function type.
     * @breaking-change 10.0.0
     */
    getButtonCallableProp(options: ModalButtonOptions, prop: keyof ModalButtonOptions): boolean;
    /**
     * Run function based on the type and set its `loading` prop if needed.
     * @deprecated Should be set options' value by the user, not library.
     * @breaking-change 10.0.0
     */
    onButtonClick(options: ModalButtonOptions): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NzModalFooterComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NzModalFooterComponent, "div[nz-modal-footer]", ["NzModalFooterBuiltin"], { "modalRef": "modalRef"; }, { "cancelTriggered": "cancelTriggered"; "okTriggered": "okTriggered"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtZm9vdGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJtb2RhbC1mb290ZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2dpdGh1Yi5jb20vTkctWk9SUk8vbmctem9ycm8tYW50ZC9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOekkxOG5TZXJ2aWNlLCBOek1vZGFsSTE4bkludGVyZmFjZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvaTE4bic7XG5pbXBvcnQgeyBOek1vZGFsUmVmIH0gZnJvbSAnLi9tb2RhbC1yZWYnO1xuaW1wb3J0IHsgTW9kYWxCdXR0b25PcHRpb25zLCBNb2RhbE9wdGlvbnMgfSBmcm9tICcuL21vZGFsLXR5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE56TW9kYWxGb290ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgaTE4bjtcbiAgICBjb25maWc6IE1vZGFsT3B0aW9ucztcbiAgICBidXR0b25zRm9vdGVyOiBib29sZWFuO1xuICAgIGJ1dHRvbnM6IE1vZGFsQnV0dG9uT3B0aW9uc1tdO1xuICAgIGxvY2FsZTogTnpNb2RhbEkxOG5JbnRlcmZhY2U7XG4gICAgcmVhZG9ubHkgY2FuY2VsVHJpZ2dlcmVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgcmVhZG9ubHkgb2tUcmlnZ2VyZWQ6IEV2ZW50RW1pdHRlcjx2b2lkPjtcbiAgICBtb2RhbFJlZjogTnpNb2RhbFJlZjtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIGNvbnN0cnVjdG9yKGkxOG46IE56STE4blNlcnZpY2UsIGNvbmZpZzogTW9kYWxPcHRpb25zKTtcbiAgICBvbkNhbmNlbCgpOiB2b2lkO1xuICAgIG9uT2soKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKiBJZiBpdCBpcyBhIGZ1bmN0aW9uLCBydW4gYW5kIHJldHVybiB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgKiBAZGVwcmVjYXRlZCBOb3Qgc3VwcG9ydCB1c2UgZnVuY3Rpb24gdHlwZS5cbiAgICAgKiBAYnJlYWtpbmctY2hhbmdlIDEwLjAuMFxuICAgICAqL1xuICAgIGdldEJ1dHRvbkNhbGxhYmxlUHJvcChvcHRpb25zOiBNb2RhbEJ1dHRvbk9wdGlvbnMsIHByb3A6IGtleW9mIE1vZGFsQnV0dG9uT3B0aW9ucyk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUnVuIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSB0eXBlIGFuZCBzZXQgaXRzIGBsb2FkaW5nYCBwcm9wIGlmIG5lZWRlZC5cbiAgICAgKiBAZGVwcmVjYXRlZCBTaG91bGQgYmUgc2V0IG9wdGlvbnMnIHZhbHVlIGJ5IHRoZSB1c2VyLCBub3QgbGlicmFyeS5cbiAgICAgKiBAYnJlYWtpbmctY2hhbmdlIDEwLjAuMFxuICAgICAqL1xuICAgIG9uQnV0dG9uQ2xpY2sob3B0aW9uczogTW9kYWxCdXR0b25PcHRpb25zKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19