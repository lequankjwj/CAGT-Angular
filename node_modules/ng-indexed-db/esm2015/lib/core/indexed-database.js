/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
import { TransactionModes } from './enums/transaction-modes';
/**
 * IndexedDB client
 */
export class IndexedDatabase {
    /**
     * @param {?} database
     * @param {?} upgraded
     * @param {?=} stores
     */
    constructor(database, upgraded, stores = []) {
        this.database = database;
        this.upgraded = upgraded;
        this.createTables(stores);
    }
    /**
     * If table has been upgrades, generates the recived stores
     * @param {?} tables Tables metadata
     * @return {?}
     */
    createTables(tables) {
        if (this.upgraded) {
            tables.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => this.createTable(item)));
        }
    }
    /**
     * Generates one single sotre
     * @param {?} store
     * @return {?}
     */
    createTable(store) {
        /** @type {?} */
        const keyPath = 'id';
        this.database.createObjectStore(store.name, { keyPath });
    }
    /**
     * Request a list with all store elements
     * @template M
     * @param {?} storeName Store name
     * @return {?}
     */
    list(storeName) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const store = this.store(storeName, TransactionModes.READONLY);
            /** @type {?} */
            const request = store.getAll();
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.next(request.result));
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.error(request.error));
        }));
    }
    /**
     * Request a single object found by the given key
     * @template M
     * @param {?} storeName Store name
     * @param {?} key Predicate key
     * @return {?}
     */
    get(storeName, key) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const store = this.store(storeName, TransactionModes.READONLY);
            /** @type {?} */
            const request = store.get(key);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.next(request.result));
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.error(request.error));
        }));
    }
    /**
     * Request to store an element
     * @template M
     * @param {?} storeName Store name
     * @param {?} data data to store
     * @return {?}
     */
    create(storeName, data) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const store = this.store(storeName, TransactionModes.READWRITE);
            /** @type {?} */
            const request = store.put(data);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.next(data));
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.error(request.error));
        }));
    }
    /**
     * Request to update an element
     * @template M
     * @param {?} storeName Store name
     * @param {?} data data to store
     * @return {?}
     */
    update(storeName, data) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const store = this.store(storeName, TransactionModes.READWRITE);
            /** @type {?} */
            const request = store.put(data);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.next(data));
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.error(request.error));
        }));
    }
    /**
     * Request to delete an element with the given key
     * @param {?} storeName Store name
     * @param {?} key Element key to delete
     * @return {?}
     */
    delete(storeName, key) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const store = this.store(storeName, TransactionModes.READWRITE);
            /** @type {?} */
            const request = store.delete(key);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.next(true));
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            event => observer.error(request.error));
        }));
    }
    /**
     * Find the a store table by the given name
     * @private
     * @param {?} storeName Store name to find
     * @param {?} mode Transaction mode
     * @return {?}
     */
    store(storeName, mode) {
        /** @type {?} */
        const transaction = this.database.transaction(storeName, mode);
        /** @type {?} */
        const store = transaction.objectStore(storeName);
        return store;
    }
}
if (false) {
    /**
     * IndexedBD instance
     * @type {?}
     * @private
     */
    IndexedDatabase.prototype.database;
    /**
     * Indicates if databases has been upgraded
     * @type {?}
     * @private
     */
    IndexedDatabase.prototype.upgraded;
}
//# sourceMappingURL=data:application/json;base64,