/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Observable, forkJoin, timer } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { IndexedDatabase } from '../indexed-database';
export class NgDatabaseFactory {
    constructor() {
        /**
         * Emits an event when all databases recive has been generated
         */
        this.connectionsReady = new BehaviorSubject(false);
        /**
         * Indexed database connection factory
         */
        this.factory = window.indexedDB;
    }
    /**
     * Sends the database metadata to create.
     * Once it has been completed, emits the
     * connectionsReady event
     * @param {?} databases Databases metadata
     * @return {?}
     */
    createConnnections(databases) {
        this.createDataBases(databases)
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => this.connections = response)), switchMap((/**
         * @param {?} response
         * @return {?}
         */
        response => timer(100))))
            .subscribe((/**
         * @return {?}
         */
        () => this.connectionsReady.next(true)));
    }
    /**
     * Find a database connection by name. If there isn't
     * a database name takes the default database name
     * @param {?=} dbName Name of the database alias
     * @return {?}
     */
    getDatabase(dbName) {
        return this.connections[dbName ? dbName : this.defaultConnectionName];
    }
    /**
     * Open a database connection
     * @param {?} dbName name of the database
     * @param {?=} version version of the database
     * @return {?}
     */
    open(dbName, version) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            let upgraded = false;
            /** @type {?} */
            const DBOpenRequest = this.factory.open(dbName, version);
            DBOpenRequest.onupgradeneeded = (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                observer.next({
                    upgraded: true,
                    success: true,
                    result: DBOpenRequest.result
                });
                observer.complete();
                upgraded = true;
            });
            DBOpenRequest.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                if (!upgraded) {
                    observer.next({
                        upgraded: false,
                        success: true,
                        result: DBOpenRequest.result
                    });
                    observer.complete();
                }
            });
            DBOpenRequest.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                observer.error(`Error to connect database ${dbName}`);
                observer.complete();
            });
            DBOpenRequest.onblocked = (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                console.log('blocked');
            });
        }));
    }
    /**
     * Generates an Observable collection of database connections
     * @param {?} databases
     * @return {?}
     */
    createDataBases(databases) {
        /** @type {?} */
        const operators = [];
        /** @type {?} */
        let firstIteration = true;
        /** @type {?} */
        const createConnnection = (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (firstIteration) {
                this.defaultConnectionName = item.name;
                firstIteration = false;
            }
            operators.push(this.createConnection(item.name, item.stores, 1));
        });
        databases.forEach(createConnnection);
        /** @type {?} */
        const mappingResponse = (/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            let data = {};
            response.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                data = Object.assign({}, data, item);
            }));
            return data;
        });
        return forkJoin(operators)
            .pipe(map(mappingResponse));
    }
    /**
     * Generates a sigle database conecction client
     * @private
     * @param {?} dbName
     * @param {?} tables
     * @param {?=} version
     * @return {?}
     */
    createConnection(dbName, tables, version) {
        return this.open(dbName, version)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => ({ [dbName]: new IndexedDatabase(data.result, data.upgraded, tables) }))));
    }
}
NgDatabaseFactory.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * Emits an event when all databases recive has been generated
     * @type {?}
     */
    NgDatabaseFactory.prototype.connectionsReady;
    /**
     * Indexed database connection factory
     * @type {?}
     * @private
     */
    NgDatabaseFactory.prototype.factory;
    /**
     * List of all connections handled by the service
     * @type {?}
     * @private
     */
    NgDatabaseFactory.prototype.connections;
    /**
     * Default connection name
     * @type {?}
     * @private
     */
    NgDatabaseFactory.prototype.defaultConnectionName;
}
/**
 * @record
 */
function OpenConnectionResponse() { }
if (false) {
    /** @type {?} */
    OpenConnectionResponse.prototype.success;
    /** @type {?} */
    OpenConnectionResponse.prototype.upgraded;
    /** @type {?} */
    OpenConnectionResponse.prototype.result;
}
//# sourceMappingURL=data:application/json;base64,