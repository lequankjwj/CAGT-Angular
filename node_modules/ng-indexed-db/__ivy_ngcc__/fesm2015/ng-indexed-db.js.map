{"version":3,"file":"ng-indexed-db.js","sources":["ng:/ng-indexed-db/lib/core/enums/transaction-modes.ts","ng:/ng-indexed-db/lib/core/indexed-database.ts","ng:/ng-indexed-db/lib/core/factory/database-factory.ts","ng:/ng-indexed-db/lib/core/id-generator/id-generator.ts","ng:/ng-indexed-db/lib/core/indexed-db.service.ts","ng:/ng-indexed-db/lib/indexed-db.module.ts"],"names":[],"mappings":"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","sourcesContent":["export enum TransactionModes {\n    READONLY = 'readonly',\n    READWRITE = 'readwrite',\n}\n","import { Observable } from 'rxjs';\n\nimport { TransactionModes } from './enums/transaction-modes';\nimport { NgStore } from './types/store.type';\n/**\n * IndexedDB client\n */\nexport class IndexedDatabase {\n\n  /** IndexedBD instance */\n  private database: IDBDatabase;\n\n  /** Indicates if databases has been upgraded */\n  private upgraded: boolean;\n\n  constructor(\n    database: IDBDatabase,\n    upgraded: boolean,\n    stores: NgStore[] = []\n  ) {\n    this.database = database;\n    this.upgraded = upgraded;\n    this.createTables(stores);\n  }\n  /**\n   * If table has been upgrades, generates the recived stores\n   * @param tables Tables metadata\n   */\n  createTables(tables: NgStore[]) {\n    if (this.upgraded) {\n      tables.forEach(item => this.createTable(item));\n    }\n  }\n  /**\n   * Generates one single sotre\n   * @param storeName Store name\n   */\n  createTable(store: NgStore) {\n    const keyPath = 'id';\n    this.database.createObjectStore(store.name, { keyPath });\n  }\n  /**\n   * Request a list with all store elements\n   * @param storeName Store name\n   */\n  list<M = any>(storeName: string): Observable<M[]> {\n    return new Observable<M[]>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.getAll();\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request a single object found by the given key\n   * @param storeName Store name\n   * @param key Predicate key\n   */\n  get<M = any>(storeName: string, key: any): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.get(key);\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  create<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to update an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  update<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to delete an element with the given key\n   * @param storeName Store name\n   * @param key Element key to delete\n   */\n  delete(storeName: string, key: IDBValidKey): Observable<boolean> {\n    return new Observable<boolean>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.delete(key);\n      request.onsuccess = event => observer.next(true);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Find the a store table by the given name\n   * @param storeName Store name to find\n   * @param mode Transaction mode\n   */\n  private store(storeName: string, mode: TransactionModes): IDBObjectStore {\n    const transaction: IDBTransaction = this.database.transaction(storeName, mode);\n    const store: IDBObjectStore = transaction.objectStore(storeName);\n    return store;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, forkJoin, timer } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\nimport { NgConnection } from '../types/conecction.type';\nimport { NgDataBase } from '../types/database.type';\nimport { NgStore } from '../types/store.type';\nimport { IndexedDatabase } from '../indexed-database';\n\n@Injectable()\nexport class NgDatabaseFactory {\n\n  /** Emits an event when all databases recive has been generated */\n  connectionsReady = new BehaviorSubject<any>(false);\n\n  /** Indexed database connection factory */\n  private factory: IDBFactory = window.indexedDB;\n\n  /** List of all connections handled by the service */\n  private connections: NgConnection;\n\n  /** Default connection name */\n  private defaultConnectionName: string;\n\n  /**\n   * Sends the database metadata to create.\n   * Once it has been completed, emits the\n   * connectionsReady event\n   * @param databases Databases metadata\n   */\n  createConnnections(databases: NgDataBase[]) {\n    this.createDataBases(databases)\n    .pipe(\n      map(response => this.connections = response),\n      switchMap(response => timer(100)),\n    )\n    .subscribe(() => this.connectionsReady.next(true));\n  }\n  /**\n   * Find a database connection by name. If there isn't\n   * a database name takes the default database name\n   * @param dbName Name of the database alias\n   */\n  getDatabase(dbName?: string): IndexedDatabase {\n    return this.connections[dbName ? dbName : this.defaultConnectionName];\n  }\n  /**\n   * Open a database connection\n   * @param dbName name of the database\n   * @param version version of the database\n   */\n  open(dbName: string, version?: number): Observable<OpenConnectionResponse> {\n    return new Observable(observer => {\n      let upgraded = false;\n      const DBOpenRequest: IDBOpenDBRequest = this.factory.open(dbName, version);\n\n      DBOpenRequest.onupgradeneeded = event => {\n        observer.next({\n          upgraded: true,\n          success: true,\n          result: DBOpenRequest.result\n        });\n        observer.complete();\n        upgraded = true;\n      };\n\n      DBOpenRequest.onsuccess = event => {\n        if (!upgraded) {\n          observer.next({\n            upgraded: false,\n            success: true,\n            result: DBOpenRequest.result\n          });\n          observer.complete();\n        }\n      };\n\n      DBOpenRequest.onerror = event => {\n        observer.error(`Error to connect database ${dbName}`);\n        observer.complete();\n      };\n\n      DBOpenRequest.onblocked = event => {\n        console.log('blocked');\n      };\n\n    });\n  }\n  /**\n   * Generates an Observable collection of database connections\n   * @param Databases metadata\n   */\n  createDataBases(databases: NgDataBase[]): Observable<NgConnection> {\n    const operators = [];\n    let firstIteration = true;\n    const createConnnection = (item: NgDataBase) => {\n      if (firstIteration) {\n        this.defaultConnectionName = item.name;\n        firstIteration = false;\n      }\n      operators.push(this.createConnection(item.name, item.stores, 1));\n    };\n    databases.forEach(createConnnection);\n\n    const mappingResponse = response => {\n      let data = {};\n      response.forEach(item => {\n        data = {\n          ...data,\n          ...item\n        };\n      });\n\n      return data;\n    };\n    return forkJoin(operators)\n      .pipe(\n        map(mappingResponse)\n      );\n  }\n  /**\n   * Generates a sigle database conecction client\n   */\n  private createConnection(dbName: string, tables: NgStore[], version?: number): Observable<NgConnection> {\n    return this.open(dbName, version)\n      .pipe(\n        map(data => ({[dbName]: new IndexedDatabase(data.result, data.upgraded, tables)}))\n      );\n  }\n}\n\ninterface OpenConnectionResponse {\n  success: boolean;\n  upgraded: boolean;\n  result: IDBDatabase;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IdGenerator {\n\n  generate(data?: any) {\n    return (new Date()).getTime();\n  }\n\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, skipWhile } from 'rxjs/operators';\n\nimport { NgDataBase } from './types/database.type';\nimport { NgDatabaseFactory } from './factory/database-factory';\nimport { IdGenerator } from './id-generator/id-generator';\n\n\n/** Injection token that gives the databases metadata */\nexport const NG_DATABASES = new InjectionToken<{element: any}>('NG_DATABASES');\n\n/**\n * Service that handles all Indexed Databases and\n * tables requests.\n */\n@Injectable()\nexport class IndexedDB {\n  /**\n   * Indicates if all databases have been created.\n   * Only emits an event when recives a true value.\n   */\n  get onReady() {\n    return this.databaseFactory.connectionsReady\n      .pipe(skipWhile((event: boolean) => !event));\n  }\n\n  constructor(\n    @Inject(NG_DATABASES) private databases: NgDataBase[],\n    private idGenerator: IdGenerator,\n    private databaseFactory: NgDatabaseFactory,\n  ) {\n    this.databaseFactory.createConnnections(this.databases);\n  }\n  /**\n   * Request a list with all elements\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  list<M = any>(storeName: string, databaseName?: string): Observable<M[]> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).list<M>(storeName)\n      )\n    );\n  }\n  /**\n   * Request an element by key\n   * @param storeName Store name\n   * @param key Key value to find the element\n   * @param databaseName Database name\n   */\n  get<M = any>(storeName: string, key: any, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).get<M>(storeName, key)\n      )\n    );\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  create<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    // tslint:disable-next-line: no-string-literal\n    if (!data['id']) { data['id'] = this.idGenerator.generate(); }\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).create<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to update a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  update<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).update<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to delete a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  delete(storeName: string, key: IDBValidKey, databaseName?: string): Observable<boolean> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).delete(storeName, key)\n      )\n    );\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IndexedDB, NG_DATABASES } from './core/indexed-db.service';\n\nimport { NgDatabaseFactory } from './core/factory/database-factory';\nimport { IdGenerator } from './core/id-generator/id-generator';\nimport { NgDataBase } from './core/types/database.type';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [],\n  providers: [\n    IndexedDB,\n    NgDatabaseFactory,\n    IdGenerator,\n  ],\n})\nexport class IndexedDBModule {\n  static forRoot(databases: NgDataBase[] = []): ModuleWithProviders {\n    return {\n      ngModule: IndexedDBModule,\n      providers: [\n        { provide: NG_DATABASES, useValue: databases }\n      ]\n    };\n  }\n}\n"]}