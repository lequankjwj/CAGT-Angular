{"version":3,"file":"ng-indexed-db.js","sources":["ng://ng-indexed-db/lib/core/enums/transaction-modes.ts","ng://ng-indexed-db/lib/core/indexed-database.ts","ng://ng-indexed-db/lib/core/factory/database-factory.ts","ng://ng-indexed-db/lib/core/id-generator/id-generator.ts","ng://ng-indexed-db/lib/core/indexed-db.service.ts","ng://ng-indexed-db/lib/indexed-db.module.ts"],"sourcesContent":["export enum TransactionModes {\n    READONLY = 'readonly',\n    READWRITE = 'readwrite',\n}\n","import { Observable } from 'rxjs';\n\nimport { TransactionModes } from './enums/transaction-modes';\nimport { NgStore } from './types/store.type';\n/**\n * IndexedDB client\n */\nexport class IndexedDatabase {\n\n  /** IndexedBD instance */\n  private database: IDBDatabase;\n\n  /** Indicates if databases has been upgraded */\n  private upgraded: boolean;\n\n  constructor(\n    database: IDBDatabase,\n    upgraded: boolean,\n    stores: NgStore[] = []\n  ) {\n    this.database = database;\n    this.upgraded = upgraded;\n    this.createTables(stores);\n  }\n  /**\n   * If table has been upgrades, generates the recived stores\n   * @param tables Tables metadata\n   */\n  createTables(tables: NgStore[]) {\n    if (this.upgraded) {\n      tables.forEach(item => this.createTable(item));\n    }\n  }\n  /**\n   * Generates one single sotre\n   * @param storeName Store name\n   */\n  createTable(store: NgStore) {\n    const keyPath = 'id';\n    this.database.createObjectStore(store.name, { keyPath });\n  }\n  /**\n   * Request a list with all store elements\n   * @param storeName Store name\n   */\n  list<M = any>(storeName: string): Observable<M[]> {\n    return new Observable<M[]>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.getAll();\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request a single object found by the given key\n   * @param storeName Store name\n   * @param key Predicate key\n   */\n  get<M = any>(storeName: string, key: any): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.get(key);\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  create<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to update an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  update<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to delete an element with the given key\n   * @param storeName Store name\n   * @param key Element key to delete\n   */\n  delete(storeName: string, key: IDBValidKey): Observable<boolean> {\n    return new Observable<boolean>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.delete(key);\n      request.onsuccess = event => observer.next(true);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Find the a store table by the given name\n   * @param storeName Store name to find\n   * @param mode Transaction mode\n   */\n  private store(storeName: string, mode: TransactionModes): IDBObjectStore {\n    const transaction: IDBTransaction = this.database.transaction(storeName, mode);\n    const store: IDBObjectStore = transaction.objectStore(storeName);\n    return store;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, forkJoin, timer } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\nimport { NgConnection } from '../types/conecction.type';\nimport { NgDataBase } from '../types/database.type';\nimport { NgStore } from '../types/store.type';\nimport { IndexedDatabase } from '../indexed-database';\n\n@Injectable()\nexport class NgDatabaseFactory {\n\n  /** Emits an event when all databases recive has been generated */\n  connectionsReady = new BehaviorSubject<any>(false);\n\n  /** Indexed database connection factory */\n  private factory: IDBFactory = window.indexedDB;\n\n  /** List of all connections handled by the service */\n  private connections: NgConnection;\n\n  /** Default connection name */\n  private defaultConnectionName: string;\n\n  /**\n   * Sends the database metadata to create.\n   * Once it has been completed, emits the\n   * connectionsReady event\n   * @param databases Databases metadata\n   */\n  createConnnections(databases: NgDataBase[]) {\n    this.createDataBases(databases)\n    .pipe(\n      map(response => this.connections = response),\n      switchMap(response => timer(100)),\n    )\n    .subscribe(() => this.connectionsReady.next(true));\n  }\n  /**\n   * Find a database connection by name. If there isn't\n   * a database name takes the default database name\n   * @param dbName Name of the database alias\n   */\n  getDatabase(dbName?: string): IndexedDatabase {\n    return this.connections[dbName ? dbName : this.defaultConnectionName];\n  }\n  /**\n   * Open a database connection\n   * @param dbName name of the database\n   * @param version version of the database\n   */\n  open(dbName: string, version?: number): Observable<OpenConnectionResponse> {\n    return new Observable(observer => {\n      let upgraded = false;\n      const DBOpenRequest: IDBOpenDBRequest = this.factory.open(dbName, version);\n\n      DBOpenRequest.onupgradeneeded = event => {\n        observer.next({\n          upgraded: true,\n          success: true,\n          result: DBOpenRequest.result\n        });\n        observer.complete();\n        upgraded = true;\n      };\n\n      DBOpenRequest.onsuccess = event => {\n        if (!upgraded) {\n          observer.next({\n            upgraded: false,\n            success: true,\n            result: DBOpenRequest.result\n          });\n          observer.complete();\n        }\n      };\n\n      DBOpenRequest.onerror = event => {\n        observer.error(`Error to connect database ${dbName}`);\n        observer.complete();\n      };\n\n      DBOpenRequest.onblocked = event => {\n        console.log('blocked');\n      };\n\n    });\n  }\n  /**\n   * Generates an Observable collection of database connections\n   * @param Databases metadata\n   */\n  createDataBases(databases: NgDataBase[]): Observable<NgConnection> {\n    const operators = [];\n    let firstIteration = true;\n    const createConnnection = (item: NgDataBase) => {\n      if (firstIteration) {\n        this.defaultConnectionName = item.name;\n        firstIteration = false;\n      }\n      operators.push(this.createConnection(item.name, item.stores, 1));\n    };\n    databases.forEach(createConnnection);\n\n    const mappingResponse = response => {\n      let data = {};\n      response.forEach(item => {\n        data = {\n          ...data,\n          ...item\n        };\n      });\n\n      return data;\n    };\n    return forkJoin(operators)\n      .pipe(\n        map(mappingResponse)\n      );\n  }\n  /**\n   * Generates a sigle database conecction client\n   */\n  private createConnection(dbName: string, tables: NgStore[], version?: number): Observable<NgConnection> {\n    return this.open(dbName, version)\n      .pipe(\n        map(data => ({[dbName]: new IndexedDatabase(data.result, data.upgraded, tables)}))\n      );\n  }\n}\n\ninterface OpenConnectionResponse {\n  success: boolean;\n  upgraded: boolean;\n  result: IDBDatabase;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IdGenerator {\n\n  generate(data?: any) {\n    return (new Date()).getTime();\n  }\n\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, skipWhile } from 'rxjs/operators';\n\nimport { NgDataBase } from './types/database.type';\nimport { NgDatabaseFactory } from './factory/database-factory';\nimport { IdGenerator } from './id-generator/id-generator';\n\n\n/** Injection token that gives the databases metadata */\nexport const NG_DATABASES = new InjectionToken<{element: any}>('NG_DATABASES');\n\n/**\n * Service that handles all Indexed Databases and\n * tables requests.\n */\n@Injectable()\nexport class IndexedDB {\n  /**\n   * Indicates if all databases have been created.\n   * Only emits an event when recives a true value.\n   */\n  get onReady() {\n    return this.databaseFactory.connectionsReady\n      .pipe(skipWhile((event: boolean) => !event));\n  }\n\n  constructor(\n    @Inject(NG_DATABASES) private databases: NgDataBase[],\n    private idGenerator: IdGenerator,\n    private databaseFactory: NgDatabaseFactory,\n  ) {\n    this.databaseFactory.createConnnections(this.databases);\n  }\n  /**\n   * Request a list with all elements\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  list<M = any>(storeName: string, databaseName?: string): Observable<M[]> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).list<M>(storeName)\n      )\n    );\n  }\n  /**\n   * Request an element by key\n   * @param storeName Store name\n   * @param key Key value to find the element\n   * @param databaseName Database name\n   */\n  get<M = any>(storeName: string, key: any, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).get<M>(storeName, key)\n      )\n    );\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  create<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    // tslint:disable-next-line: no-string-literal\n    if (!data['id']) { data['id'] = this.idGenerator.generate(); }\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).create<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to update a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  update<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).update<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to delete a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  delete(storeName: string, key: IDBValidKey, databaseName?: string): Observable<boolean> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).delete(storeName, key)\n      )\n    );\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IndexedDB, NG_DATABASES } from './core/indexed-db.service';\n\nimport { NgDatabaseFactory } from './core/factory/database-factory';\nimport { IdGenerator } from './core/id-generator/id-generator';\nimport { NgDataBase } from './core/types/database.type';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [],\n  providers: [\n    IndexedDB,\n    NgDatabaseFactory,\n    IdGenerator,\n  ],\n})\nexport class IndexedDBModule {\n  static forRoot(databases: NgDataBase[] = []): ModuleWithProviders {\n    return {\n      ngModule: IndexedDBModule,\n      providers: [\n        { provide: NG_DATABASES, useValue: databases }\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;IACI,UAAW,UAAU;IACrB,WAAY,WAAW;;;;;;;ACF3B;;;AAOA;;;;IAQE,yBACE,QAAqB,EACrB,QAAiB,EACjB,MAAsB;QAAtB,uBAAA,EAAA,WAAsB;QAEtB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KAC3B;;;;;;;;;;IAKD,sCAAY;;;;;IAAZ,UAAa,MAAiB;QAA9B,iBAIC;QAHC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,CAAC,OAAO;;;;YAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAA,EAAC,CAAC;SAChD;KACF;;;;;;;;;;IAKD,qCAAW;;;;;IAAX,UAAY,KAAc;;YAClB,OAAO,GAAG,IAAI;QACpB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;KAC1D;;;;;;;;;;;IAKD,8BAAI;;;;;;IAAJ,UAAc,SAAiB;QAA/B,iBAOC;QANC,OAAO,IAAI,UAAU;;;;QAAM,UAAA,QAAQ;;gBAC3B,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,gBAAgB,CAAC,QAAQ,CAAC;;gBACxD,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE;YAC9B,OAAO,CAAC,SAAS;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAA,CAAA,CAAC;YAC3D,OAAO,CAAC,OAAO;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAA,CAAA,CAAC;SAC1D,EAAC,CAAC;KACJ;;;;;;;;;;;;;IAMD,6BAAG;;;;;;;IAAH,UAAa,SAAiB,EAAE,GAAQ;QAAxC,iBAOC;QANC,OAAO,IAAI,UAAU;;;;QAAI,UAAA,QAAQ;;gBACzB,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,gBAAgB,CAAC,QAAQ,CAAC;;gBACxD,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;YAC9B,OAAO,CAAC,SAAS;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAA,CAAA,CAAC;YAC3D,OAAO,CAAC,OAAO;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAA,CAAA,CAAC;SAC1D,EAAC,CAAC;KACJ;;;;;;;;;;;;;IAMD,gCAAM;;;;;;;IAAN,UAAgB,SAAiB,EAAE,IAAO;QAA1C,iBAOC;QANC,OAAO,IAAI,UAAU;;;;QAAI,UAAA,QAAQ;;gBACzB,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,gBAAgB,CAAC,SAAS,CAAC;;gBACzD,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;YAC/B,OAAO,CAAC,SAAS;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,CAAA,CAAC;YACjD,OAAO,CAAC,OAAO;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAA,CAAA,CAAC;SAC1D,EAAC,CAAC;KACJ;;;;;;;;;;;;;IAMD,gCAAM;;;;;;;IAAN,UAAgB,SAAiB,EAAE,IAAO;QAA1C,iBAOC;QANC,OAAO,IAAI,UAAU;;;;QAAI,UAAA,QAAQ;;gBACzB,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,gBAAgB,CAAC,SAAS,CAAC;;gBACzD,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC;YAC/B,OAAO,CAAC,SAAS;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,CAAA,CAAC;YACjD,OAAO,CAAC,OAAO;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAA,CAAA,CAAC;SAC1D,EAAC,CAAC;KACJ;;;;;;;;;;;;IAMD,gCAAM;;;;;;IAAN,UAAO,SAAiB,EAAE,GAAgB;QAA1C,iBAOC;QANC,OAAO,IAAI,UAAU;;;;QAAU,UAAA,QAAQ;;gBAC/B,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,SAAS,EAAE,gBAAgB,CAAC,SAAS,CAAC;;gBACzD,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC;YACjC,OAAO,CAAC,SAAS;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,CAAA,CAAC;YACjD,OAAO,CAAC,OAAO;;;;YAAG,UAAA,KAAK,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAA,CAAA,CAAC;SAC1D,EAAC,CAAC;KACJ;;;;;;;;;;;;;IAMO,+BAAK;;;;;;;IAAb,UAAc,SAAiB,EAAE,IAAsB;;YAC/C,WAAW,GAAmB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC;;YACxE,KAAK,GAAmB,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC;QAChE,OAAO,KAAK,CAAC;KACd;IACH,sBAAC;CAAA,IAAA;;;;;;;ICzGD;;;;QAIE,qBAAgB,GAAG,IAAI,eAAe,CAAM,KAAK,CAAC,CAAC;;;;QAG3C,YAAO,GAAe,MAAM,CAAC,SAAS,CAAC;KAiHhD;;;;;;;;;;;;;;IAnGC,8CAAkB;;;;;;;IAAlB,UAAmB,SAAuB;QAA1C,iBAOC;QANC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;aAC9B,IAAI,CACH,GAAG;;;;QAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,WAAW,GAAG,QAAQ,GAAA,EAAC,EAC5C,SAAS;;;;QAAC,UAAA,QAAQ,IAAI,OAAA,KAAK,CAAC,GAAG,CAAC,GAAA,EAAC,CAClC;aACA,SAAS;;;QAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAA,EAAC,CAAC;KACpD;;;;;;;;;;;;IAMD,uCAAW;;;;;;IAAX,UAAY,MAAe;QACzB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,MAAM,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC;KACvE;;;;;;;;;;;;IAMD,gCAAI;;;;;;IAAJ,UAAK,MAAc,EAAE,OAAgB;QAArC,iBAoCC;QAnCC,OAAO,IAAI,UAAU;;;;QAAC,UAAA,QAAQ;;gBACxB,QAAQ,GAAG,KAAK;;gBACd,aAAa,GAAqB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;YAE1E,aAAa,CAAC,eAAe;;;;YAAG,UAAA,KAAK;gBACnC,QAAQ,CAAC,IAAI,CAAC;oBACZ,QAAQ,EAAE,IAAI;oBACd,OAAO,EAAE,IAAI;oBACb,MAAM,EAAE,aAAa,CAAC,MAAM;iBAC7B,CAAC,CAAC;gBACH,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBACpB,QAAQ,GAAG,IAAI,CAAC;aACjB,CAAA,CAAC;YAEF,aAAa,CAAC,SAAS;;;;YAAG,UAAA,KAAK;gBAC7B,IAAI,CAAC,QAAQ,EAAE;oBACb,QAAQ,CAAC,IAAI,CAAC;wBACZ,QAAQ,EAAE,KAAK;wBACf,OAAO,EAAE,IAAI;wBACb,MAAM,EAAE,aAAa,CAAC,MAAM;qBAC7B,CAAC,CAAC;oBACH,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB;aACF,CAAA,CAAC;YAEF,aAAa,CAAC,OAAO;;;;YAAG,UAAA,KAAK;gBAC3B,QAAQ,CAAC,KAAK,CAAC,+BAA6B,MAAQ,CAAC,CAAC;gBACtD,QAAQ,CAAC,QAAQ,EAAE,CAAC;aACrB,CAAA,CAAC;YAEF,aAAa,CAAC,SAAS;;;;YAAG,UAAA,KAAK;gBAC7B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aACxB,CAAA,CAAC;SAEH,EAAC,CAAC;KACJ;;;;;;;;;;IAKD,2CAAe;;;;;IAAf,UAAgB,SAAuB;QAAvC,iBA2BC;;YA1BO,SAAS,GAAG,EAAE;;YAChB,cAAc,GAAG,IAAI;;YACnB,iBAAiB;;;;QAAG,UAAC,IAAgB;YACzC,IAAI,cAAc,EAAE;gBAClB,KAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,IAAI,CAAC;gBACvC,cAAc,GAAG,KAAK,CAAC;aACxB;YACD,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;SAClE,CAAA;QACD,SAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;;YAE/B,eAAe;;;;QAAG,UAAA,QAAQ;;gBAC1B,IAAI,GAAG,EAAE;YACb,QAAQ,CAAC,OAAO;;;;YAAC,UAAA,IAAI;gBACnB,IAAI,gBACC,IAAI,EACJ,IAAI,CACR,CAAC;aACH,EAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACb,CAAA;QACD,OAAO,QAAQ,CAAC,SAAS,CAAC;aACvB,IAAI,CACH,GAAG,CAAC,eAAe,CAAC,CACrB,CAAC;KACL;;;;;;;;;;;;IAIO,4CAAgB;;;;;;;;IAAxB,UAAyB,MAAc,EAAE,MAAiB,EAAE,OAAgB;QAC1E,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;aAC9B,IAAI,CACH,GAAG;;;;QAAC,UAAA,IAAI;;YAAI,iBAAE,GAAC,MAAM,IAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,CAAC;SAAE,EAAC,CACnF,CAAC;KACL;;gBAvHF,UAAU;;IAwHX,wBAAC;CAxHD;;;;;;ACVA;IAEA;KAOC;;;;;IAJC,8BAAQ;;;;IAAR,UAAS,IAAU;QACjB,OAAO,CAAC,IAAI,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC;KAC/B;;gBALF,UAAU;;IAOX,kBAAC;CAPD;;;;;;ACFA;;;;AAUA,IAAa,YAAY,GAAG,IAAI,cAAc,CAAiB,cAAc,CAAC;;;;;AAM9E;IAWE,mBACgC,SAAuB,EAC7C,WAAwB,EACxB,eAAkC;QAFZ,cAAS,GAAT,SAAS,CAAc;QAC7C,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAmB;QAE1C,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KACzD;IAXD,sBAAI,8BAAO;;;;;;;;;;QAAX;YACE,OAAO,IAAI,CAAC,eAAe,CAAC,gBAAgB;iBACzC,IAAI,CAAC,SAAS;;;;YAAC,UAAC,KAAc,IAAK,OAAA,CAAC,KAAK,GAAA,EAAC,CAAC,CAAC;SAChD;;;OAAA;;;;;;;;;;;;;IAcD,wBAAI;;;;;;;IAAJ,UAAc,SAAiB,EAAE,YAAqB;QAAtD,iBAMC;QALC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,SAAS;;;QACP,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,IAAI,CAAI,SAAS,CAAC,GAAA,EACxE,CACF,CAAC;KACH;;;;;;;;;;;;;;;IAOD,uBAAG;;;;;;;;IAAH,UAAa,SAAiB,EAAE,GAAQ,EAAE,YAAqB;QAA/D,iBAMC;QALC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,SAAS;;;QACP,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,GAAG,CAAI,SAAS,EAAE,GAAG,CAAC,GAAA,EAC5E,CACF,CAAC;KACH;;;;;;;;;;;;;;IAMD,0BAAM;;;;;;;;IAAN,UAAgB,SAAiB,EAAE,IAAO,EAAE,YAAqB;QAAjE,iBAQC;;QANC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAAE,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAAE;QAC9D,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,SAAS;;;QACP,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,MAAM,CAAI,SAAS,EAAE,IAAI,CAAC,GAAA,EAChF,CACF,CAAC;KACH;;;;;;;;;;;;;;IAMD,0BAAM;;;;;;;;IAAN,UAAgB,SAAiB,EAAE,IAAO,EAAE,YAAqB;QAAjE,iBAMC;QALC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,SAAS;;;QACP,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,MAAM,CAAI,SAAS,EAAE,IAAI,CAAC,GAAA,EAChF,CACF,CAAC;KACH;;;;;;;;;;;;;IAMD,0BAAM;;;;;;;IAAN,UAAO,SAAiB,EAAE,GAAgB,EAAE,YAAqB;QAAjE,iBAMC;QALC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,SAAS;;;QACP,cAAM,OAAA,KAAI,CAAC,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,GAAA,EAC5E,CACF,CAAC;KACH;;gBAhFF,UAAU;;;;4CAYN,MAAM,SAAC,YAAY;gBAtBf,WAAW;gBADX,iBAAiB;;IA6F1B,gBAAC;CAlFD;;;;;;AChBA;IASA;KAmBC;;;;;IARQ,uBAAO;;;;IAAd,UAAe,SAA4B;QAA5B,0BAAA,EAAA,cAA4B;QACzC,OAAO;YACL,QAAQ,EAAE,eAAe;YACzB,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC/C;SACF,CAAC;KACH;;gBAlBF,QAAQ,SAAC;oBACR,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE;wBACT,SAAS;wBACT,iBAAiB;wBACjB,WAAW;qBACZ;iBACF;;IAUD,sBAAC;CAnBD;;;;"}