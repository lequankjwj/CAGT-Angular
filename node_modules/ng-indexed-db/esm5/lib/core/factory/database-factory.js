/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable, forkJoin, timer } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';
import { IndexedDatabase } from '../indexed-database';
var NgDatabaseFactory = /** @class */ (function () {
    function NgDatabaseFactory() {
        /**
         * Emits an event when all databases recive has been generated
         */
        this.connectionsReady = new BehaviorSubject(false);
        /**
         * Indexed database connection factory
         */
        this.factory = window.indexedDB;
    }
    /**
     * Sends the database metadata to create.
     * Once it has been completed, emits the
     * connectionsReady event
     * @param databases Databases metadata
     */
    /**
     * Sends the database metadata to create.
     * Once it has been completed, emits the
     * connectionsReady event
     * @param {?} databases Databases metadata
     * @return {?}
     */
    NgDatabaseFactory.prototype.createConnnections = /**
     * Sends the database metadata to create.
     * Once it has been completed, emits the
     * connectionsReady event
     * @param {?} databases Databases metadata
     * @return {?}
     */
    function (databases) {
        var _this = this;
        this.createDataBases(databases)
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.connections = response; })), switchMap((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return timer(100); })))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this.connectionsReady.next(true); }));
    };
    /**
     * Find a database connection by name. If there isn't
     * a database name takes the default database name
     * @param dbName Name of the database alias
     */
    /**
     * Find a database connection by name. If there isn't
     * a database name takes the default database name
     * @param {?=} dbName Name of the database alias
     * @return {?}
     */
    NgDatabaseFactory.prototype.getDatabase = /**
     * Find a database connection by name. If there isn't
     * a database name takes the default database name
     * @param {?=} dbName Name of the database alias
     * @return {?}
     */
    function (dbName) {
        return this.connections[dbName ? dbName : this.defaultConnectionName];
    };
    /**
     * Open a database connection
     * @param dbName name of the database
     * @param version version of the database
     */
    /**
     * Open a database connection
     * @param {?} dbName name of the database
     * @param {?=} version version of the database
     * @return {?}
     */
    NgDatabaseFactory.prototype.open = /**
     * Open a database connection
     * @param {?} dbName name of the database
     * @param {?=} version version of the database
     * @return {?}
     */
    function (dbName, version) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var upgraded = false;
            /** @type {?} */
            var DBOpenRequest = _this.factory.open(dbName, version);
            DBOpenRequest.onupgradeneeded = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                observer.next({
                    upgraded: true,
                    success: true,
                    result: DBOpenRequest.result
                });
                observer.complete();
                upgraded = true;
            });
            DBOpenRequest.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (!upgraded) {
                    observer.next({
                        upgraded: false,
                        success: true,
                        result: DBOpenRequest.result
                    });
                    observer.complete();
                }
            });
            DBOpenRequest.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                observer.error("Error to connect database " + dbName);
                observer.complete();
            });
            DBOpenRequest.onblocked = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                console.log('blocked');
            });
        }));
    };
    /**
     * Generates an Observable collection of database connections
     * @param Databases metadata
     */
    /**
     * Generates an Observable collection of database connections
     * @param {?} databases
     * @return {?}
     */
    NgDatabaseFactory.prototype.createDataBases = /**
     * Generates an Observable collection of database connections
     * @param {?} databases
     * @return {?}
     */
    function (databases) {
        var _this = this;
        /** @type {?} */
        var operators = [];
        /** @type {?} */
        var firstIteration = true;
        /** @type {?} */
        var createConnnection = (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (firstIteration) {
                _this.defaultConnectionName = item.name;
                firstIteration = false;
            }
            operators.push(_this.createConnection(item.name, item.stores, 1));
        });
        databases.forEach(createConnnection);
        /** @type {?} */
        var mappingResponse = (/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var data = {};
            response.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                data = tslib_1.__assign({}, data, item);
            }));
            return data;
        });
        return forkJoin(operators)
            .pipe(map(mappingResponse));
    };
    /**
     * Generates a sigle database conecction client
     */
    /**
     * Generates a sigle database conecction client
     * @private
     * @param {?} dbName
     * @param {?} tables
     * @param {?=} version
     * @return {?}
     */
    NgDatabaseFactory.prototype.createConnection = /**
     * Generates a sigle database conecction client
     * @private
     * @param {?} dbName
     * @param {?} tables
     * @param {?=} version
     * @return {?}
     */
    function (dbName, tables, version) {
        return this.open(dbName, version)
            .pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _a;
            return (_a = {}, _a[dbName] = new IndexedDatabase(data.result, data.upgraded, tables), _a);
        })));
    };
    NgDatabaseFactory.decorators = [
        { type: Injectable }
    ];
    return NgDatabaseFactory;
}());
export { NgDatabaseFactory };
if (false) {
    /**
     * Emits an event when all databases recive has been generated
     * @type {?}
     */
    NgDatabaseFactory.prototype.connectionsReady;
    /**
     * Indexed database connection factory
     * @type {?}
     * @private
     */
    NgDatabaseFactory.prototype.factory;
    /**
     * List of all connections handled by the service
     * @type {?}
     * @private
     */
    NgDatabaseFactory.prototype.connections;
    /**
     * Default connection name
     * @type {?}
     * @private
     */
    NgDatabaseFactory.prototype.defaultConnectionName;
}
/**
 * @record
 */
function OpenConnectionResponse() { }
if (false) {
    /** @type {?} */
    OpenConnectionResponse.prototype.success;
    /** @type {?} */
    OpenConnectionResponse.prototype.upgraded;
    /** @type {?} */
    OpenConnectionResponse.prototype.result;
}
//# sourceMappingURL=data:application/json;base64,