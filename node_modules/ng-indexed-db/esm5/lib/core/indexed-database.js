/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Observable } from 'rxjs';
import { TransactionModes } from './enums/transaction-modes';
/**
 * IndexedDB client
 */
var /**
 * IndexedDB client
 */
IndexedDatabase = /** @class */ (function () {
    function IndexedDatabase(database, upgraded, stores) {
        if (stores === void 0) { stores = []; }
        this.database = database;
        this.upgraded = upgraded;
        this.createTables(stores);
    }
    /**
     * If table has been upgrades, generates the recived stores
     * @param tables Tables metadata
     */
    /**
     * If table has been upgrades, generates the recived stores
     * @param {?} tables Tables metadata
     * @return {?}
     */
    IndexedDatabase.prototype.createTables = /**
     * If table has been upgrades, generates the recived stores
     * @param {?} tables Tables metadata
     * @return {?}
     */
    function (tables) {
        var _this = this;
        if (this.upgraded) {
            tables.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return _this.createTable(item); }));
        }
    };
    /**
     * Generates one single sotre
     * @param storeName Store name
     */
    /**
     * Generates one single sotre
     * @param {?} store
     * @return {?}
     */
    IndexedDatabase.prototype.createTable = /**
     * Generates one single sotre
     * @param {?} store
     * @return {?}
     */
    function (store) {
        /** @type {?} */
        var keyPath = 'id';
        this.database.createObjectStore(store.name, { keyPath: keyPath });
    };
    /**
     * Request a list with all store elements
     * @param storeName Store name
     */
    /**
     * Request a list with all store elements
     * @template M
     * @param {?} storeName Store name
     * @return {?}
     */
    IndexedDatabase.prototype.list = /**
     * Request a list with all store elements
     * @template M
     * @param {?} storeName Store name
     * @return {?}
     */
    function (storeName) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var store = _this.store(storeName, TransactionModes.READONLY);
            /** @type {?} */
            var request = store.getAll();
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.next(request.result); });
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.error(request.error); });
        }));
    };
    /**
     * Request a single object found by the given key
     * @param storeName Store name
     * @param key Predicate key
     */
    /**
     * Request a single object found by the given key
     * @template M
     * @param {?} storeName Store name
     * @param {?} key Predicate key
     * @return {?}
     */
    IndexedDatabase.prototype.get = /**
     * Request a single object found by the given key
     * @template M
     * @param {?} storeName Store name
     * @param {?} key Predicate key
     * @return {?}
     */
    function (storeName, key) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var store = _this.store(storeName, TransactionModes.READONLY);
            /** @type {?} */
            var request = store.get(key);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.next(request.result); });
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.error(request.error); });
        }));
    };
    /**
     * Request to store an element
     * @param storeName Store name
     * @param data data to store
     */
    /**
     * Request to store an element
     * @template M
     * @param {?} storeName Store name
     * @param {?} data data to store
     * @return {?}
     */
    IndexedDatabase.prototype.create = /**
     * Request to store an element
     * @template M
     * @param {?} storeName Store name
     * @param {?} data data to store
     * @return {?}
     */
    function (storeName, data) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var store = _this.store(storeName, TransactionModes.READWRITE);
            /** @type {?} */
            var request = store.put(data);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.next(data); });
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.error(request.error); });
        }));
    };
    /**
     * Request to update an element
     * @param storeName Store name
     * @param data data to store
     */
    /**
     * Request to update an element
     * @template M
     * @param {?} storeName Store name
     * @param {?} data data to store
     * @return {?}
     */
    IndexedDatabase.prototype.update = /**
     * Request to update an element
     * @template M
     * @param {?} storeName Store name
     * @param {?} data data to store
     * @return {?}
     */
    function (storeName, data) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var store = _this.store(storeName, TransactionModes.READWRITE);
            /** @type {?} */
            var request = store.put(data);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.next(data); });
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.error(request.error); });
        }));
    };
    /**
     * Request to delete an element with the given key
     * @param storeName Store name
     * @param key Element key to delete
     */
    /**
     * Request to delete an element with the given key
     * @param {?} storeName Store name
     * @param {?} key Element key to delete
     * @return {?}
     */
    IndexedDatabase.prototype.delete = /**
     * Request to delete an element with the given key
     * @param {?} storeName Store name
     * @param {?} key Element key to delete
     * @return {?}
     */
    function (storeName, key) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var store = _this.store(storeName, TransactionModes.READWRITE);
            /** @type {?} */
            var request = store.delete(key);
            request.onsuccess = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.next(true); });
            request.onerror = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return observer.error(request.error); });
        }));
    };
    /**
     * Find the a store table by the given name
     * @param storeName Store name to find
     * @param mode Transaction mode
     */
    /**
     * Find the a store table by the given name
     * @private
     * @param {?} storeName Store name to find
     * @param {?} mode Transaction mode
     * @return {?}
     */
    IndexedDatabase.prototype.store = /**
     * Find the a store table by the given name
     * @private
     * @param {?} storeName Store name to find
     * @param {?} mode Transaction mode
     * @return {?}
     */
    function (storeName, mode) {
        /** @type {?} */
        var transaction = this.database.transaction(storeName, mode);
        /** @type {?} */
        var store = transaction.objectStore(storeName);
        return store;
    };
    return IndexedDatabase;
}());
/**
 * IndexedDB client
 */
export { IndexedDatabase };
if (false) {
    /**
     * IndexedBD instance
     * @type {?}
     * @private
     */
    IndexedDatabase.prototype.database;
    /**
     * Indicates if databases has been upgraded
     * @type {?}
     * @private
     */
    IndexedDatabase.prototype.upgraded;
}
//# sourceMappingURL=data:application/json;base64,