import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
import { NgDataBase } from './types/database.type';
import { NgDatabaseFactory } from './factory/database-factory';
import { IdGenerator } from './id-generator/id-generator';
/** Injection token that gives the databases metadata */
import * as ɵngcc0 from '@angular/core';
export declare const NG_DATABASES: InjectionToken<{
    element: any;
}>;
/**
 * Service that handles all Indexed Databases and
 * tables requests.
 */
export declare class IndexedDB {
    private databases;
    private idGenerator;
    private databaseFactory;
    /**
     * Indicates if all databases have been created.
     * Only emits an event when recives a true value.
     */
    readonly onReady: Observable<boolean>;
    constructor(databases: NgDataBase[], idGenerator: IdGenerator, databaseFactory: NgDatabaseFactory);
    /**
     * Request a list with all elements
     * @param storeName Store name
     * @param databaseName Database name
     */
    list<M = any>(storeName: string, databaseName?: string): Observable<M[]>;
    /**
     * Request an element by key
     * @param storeName Store name
     * @param key Key value to find the element
     * @param databaseName Database name
     */
    get<M = any>(storeName: string, key: any, databaseName?: string): Observable<M>;
    /**
     * Request to store an element
     * @param storeName Store name
     * @param databaseName Database name
     */
    create<M = any>(storeName: string, data: M, databaseName?: string): Observable<M>;
    /**
     * Request to update a stored element
     * @param storeName Store name
     * @param databaseName Database name
     */
    update<M = any>(storeName: string, data: M, databaseName?: string): Observable<M>;
    /**
     * Request to delete a stored element
     * @param storeName Store name
     * @param databaseName Database name
     */
    delete(storeName: string, key: IDBValidKey, databaseName?: string): Observable<boolean>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<IndexedDB, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<IndexedDB>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlZC1kYi5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImluZGV4ZWQtZGIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5nRGF0YUJhc2UgfSBmcm9tICcuL3R5cGVzL2RhdGFiYXNlLnR5cGUnO1xuaW1wb3J0IHsgTmdEYXRhYmFzZUZhY3RvcnkgfSBmcm9tICcuL2ZhY3RvcnkvZGF0YWJhc2UtZmFjdG9yeSc7XG5pbXBvcnQgeyBJZEdlbmVyYXRvciB9IGZyb20gJy4vaWQtZ2VuZXJhdG9yL2lkLWdlbmVyYXRvcic7XG4vKiogSW5qZWN0aW9uIHRva2VuIHRoYXQgZ2l2ZXMgdGhlIGRhdGFiYXNlcyBtZXRhZGF0YSAqL1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTkdfREFUQUJBU0VTOiBJbmplY3Rpb25Ub2tlbjx7XG4gICAgZWxlbWVudDogYW55O1xufT47XG4vKipcbiAqIFNlcnZpY2UgdGhhdCBoYW5kbGVzIGFsbCBJbmRleGVkIERhdGFiYXNlcyBhbmRcbiAqIHRhYmxlcyByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSW5kZXhlZERCIHtcbiAgICBwcml2YXRlIGRhdGFiYXNlcztcbiAgICBwcml2YXRlIGlkR2VuZXJhdG9yO1xuICAgIHByaXZhdGUgZGF0YWJhc2VGYWN0b3J5O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiBhbGwgZGF0YWJhc2VzIGhhdmUgYmVlbiBjcmVhdGVkLlxuICAgICAqIE9ubHkgZW1pdHMgYW4gZXZlbnQgd2hlbiByZWNpdmVzIGEgdHJ1ZSB2YWx1ZS5cbiAgICAgKi9cbiAgICByZWFkb25seSBvblJlYWR5OiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuICAgIGNvbnN0cnVjdG9yKGRhdGFiYXNlczogTmdEYXRhQmFzZVtdLCBpZEdlbmVyYXRvcjogSWRHZW5lcmF0b3IsIGRhdGFiYXNlRmFjdG9yeTogTmdEYXRhYmFzZUZhY3RvcnkpO1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgYSBsaXN0IHdpdGggYWxsIGVsZW1lbnRzXG4gICAgICogQHBhcmFtIHN0b3JlTmFtZSBTdG9yZSBuYW1lXG4gICAgICogQHBhcmFtIGRhdGFiYXNlTmFtZSBEYXRhYmFzZSBuYW1lXG4gICAgICovXG4gICAgbGlzdDxNID0gYW55PihzdG9yZU5hbWU6IHN0cmluZywgZGF0YWJhc2VOYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxNW10+O1xuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgYW4gZWxlbWVudCBieSBrZXlcbiAgICAgKiBAcGFyYW0gc3RvcmVOYW1lIFN0b3JlIG5hbWVcbiAgICAgKiBAcGFyYW0ga2V5IEtleSB2YWx1ZSB0byBmaW5kIHRoZSBlbGVtZW50XG4gICAgICogQHBhcmFtIGRhdGFiYXNlTmFtZSBEYXRhYmFzZSBuYW1lXG4gICAgICovXG4gICAgZ2V0PE0gPSBhbnk+KHN0b3JlTmFtZTogc3RyaW5nLCBrZXk6IGFueSwgZGF0YWJhc2VOYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxNPjtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRvIHN0b3JlIGFuIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gc3RvcmVOYW1lIFN0b3JlIG5hbWVcbiAgICAgKiBAcGFyYW0gZGF0YWJhc2VOYW1lIERhdGFiYXNlIG5hbWVcbiAgICAgKi9cbiAgICBjcmVhdGU8TSA9IGFueT4oc3RvcmVOYW1lOiBzdHJpbmcsIGRhdGE6IE0sIGRhdGFiYXNlTmFtZT86IHN0cmluZyk6IE9ic2VydmFibGU8TT47XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCB0byB1cGRhdGUgYSBzdG9yZWQgZWxlbWVudFxuICAgICAqIEBwYXJhbSBzdG9yZU5hbWUgU3RvcmUgbmFtZVxuICAgICAqIEBwYXJhbSBkYXRhYmFzZU5hbWUgRGF0YWJhc2UgbmFtZVxuICAgICAqL1xuICAgIHVwZGF0ZTxNID0gYW55PihzdG9yZU5hbWU6IHN0cmluZywgZGF0YTogTSwgZGF0YWJhc2VOYW1lPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxNPjtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IHRvIGRlbGV0ZSBhIHN0b3JlZCBlbGVtZW50XG4gICAgICogQHBhcmFtIHN0b3JlTmFtZSBTdG9yZSBuYW1lXG4gICAgICogQHBhcmFtIGRhdGFiYXNlTmFtZSBEYXRhYmFzZSBuYW1lXG4gICAgICovXG4gICAgZGVsZXRlKHN0b3JlTmFtZTogc3RyaW5nLCBrZXk6IElEQlZhbGlkS2V5LCBkYXRhYmFzZU5hbWU/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xufVxuIl19