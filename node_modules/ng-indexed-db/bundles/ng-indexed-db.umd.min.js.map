{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ng-indexed-db/lib/core/enums/transaction-modes.ts","ng://ng-indexed-db/lib/core/indexed-database.ts","ng://ng-indexed-db/lib/core/factory/database-factory.ts","ng://ng-indexed-db/lib/core/id-generator/id-generator.ts","ng://ng-indexed-db/lib/core/indexed-db.service.ts","ng://ng-indexed-db/lib/indexed-db.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","IndexedDatabase","database","upgraded","stores","createTables","tables","_this","forEach","item","createTable","store","createObjectStore","name","keyPath","list","storeName","Observable","observer","request","TransactionModes","getAll","onsuccess","event","next","result","onerror","error","get","key","create","data","put","update","delete","mode","transaction","objectStore","NgDatabaseFactory","connectionsReady","BehaviorSubject","factory","window","indexedDB","createConnnections","databases","createDataBases","pipe","map","response","connections","switchMap","timer","subscribe","getDatabase","dbName","defaultConnectionName","open","version","DBOpenRequest","onupgradeneeded","success","complete","onblocked","console","log","operators","firstIteration","push","createConnection","forkJoin","_a","Injectable","IdGenerator","generate","Date","getTime","NG_DATABASES","InjectionToken","IndexedDB","idGenerator","databaseFactory","defineProperty","skipWhile","databaseName","onReady","Inject","args","IndexedDBModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TransactionModes {\n    READONLY = 'readonly',\n    READWRITE = 'readwrite',\n}\n","import { Observable } from 'rxjs';\n\nimport { TransactionModes } from './enums/transaction-modes';\nimport { NgStore } from './types/store.type';\n/**\n * IndexedDB client\n */\nexport class IndexedDatabase {\n\n  /** IndexedBD instance */\n  private database: IDBDatabase;\n\n  /** Indicates if databases has been upgraded */\n  private upgraded: boolean;\n\n  constructor(\n    database: IDBDatabase,\n    upgraded: boolean,\n    stores: NgStore[] = []\n  ) {\n    this.database = database;\n    this.upgraded = upgraded;\n    this.createTables(stores);\n  }\n  /**\n   * If table has been upgrades, generates the recived stores\n   * @param tables Tables metadata\n   */\n  createTables(tables: NgStore[]) {\n    if (this.upgraded) {\n      tables.forEach(item => this.createTable(item));\n    }\n  }\n  /**\n   * Generates one single sotre\n   * @param storeName Store name\n   */\n  createTable(store: NgStore) {\n    const keyPath = 'id';\n    this.database.createObjectStore(store.name, { keyPath });\n  }\n  /**\n   * Request a list with all store elements\n   * @param storeName Store name\n   */\n  list<M = any>(storeName: string): Observable<M[]> {\n    return new Observable<M[]>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.getAll();\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request a single object found by the given key\n   * @param storeName Store name\n   * @param key Predicate key\n   */\n  get<M = any>(storeName: string, key: any): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.get(key);\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  create<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to update an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  update<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to delete an element with the given key\n   * @param storeName Store name\n   * @param key Element key to delete\n   */\n  delete(storeName: string, key: IDBValidKey): Observable<boolean> {\n    return new Observable<boolean>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.delete(key);\n      request.onsuccess = event => observer.next(true);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Find the a store table by the given name\n   * @param storeName Store name to find\n   * @param mode Transaction mode\n   */\n  private store(storeName: string, mode: TransactionModes): IDBObjectStore {\n    const transaction: IDBTransaction = this.database.transaction(storeName, mode);\n    const store: IDBObjectStore = transaction.objectStore(storeName);\n    return store;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, forkJoin, timer } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\nimport { NgConnection } from '../types/conecction.type';\nimport { NgDataBase } from '../types/database.type';\nimport { NgStore } from '../types/store.type';\nimport { IndexedDatabase } from '../indexed-database';\n\n@Injectable()\nexport class NgDatabaseFactory {\n\n  /** Emits an event when all databases recive has been generated */\n  connectionsReady = new BehaviorSubject<any>(false);\n\n  /** Indexed database connection factory */\n  private factory: IDBFactory = window.indexedDB;\n\n  /** List of all connections handled by the service */\n  private connections: NgConnection;\n\n  /** Default connection name */\n  private defaultConnectionName: string;\n\n  /**\n   * Sends the database metadata to create.\n   * Once it has been completed, emits the\n   * connectionsReady event\n   * @param databases Databases metadata\n   */\n  createConnnections(databases: NgDataBase[]) {\n    this.createDataBases(databases)\n    .pipe(\n      map(response => this.connections = response),\n      switchMap(response => timer(100)),\n    )\n    .subscribe(() => this.connectionsReady.next(true));\n  }\n  /**\n   * Find a database connection by name. If there isn't\n   * a database name takes the default database name\n   * @param dbName Name of the database alias\n   */\n  getDatabase(dbName?: string): IndexedDatabase {\n    return this.connections[dbName ? dbName : this.defaultConnectionName];\n  }\n  /**\n   * Open a database connection\n   * @param dbName name of the database\n   * @param version version of the database\n   */\n  open(dbName: string, version?: number): Observable<OpenConnectionResponse> {\n    return new Observable(observer => {\n      let upgraded = false;\n      const DBOpenRequest: IDBOpenDBRequest = this.factory.open(dbName, version);\n\n      DBOpenRequest.onupgradeneeded = event => {\n        observer.next({\n          upgraded: true,\n          success: true,\n          result: DBOpenRequest.result\n        });\n        observer.complete();\n        upgraded = true;\n      };\n\n      DBOpenRequest.onsuccess = event => {\n        if (!upgraded) {\n          observer.next({\n            upgraded: false,\n            success: true,\n            result: DBOpenRequest.result\n          });\n          observer.complete();\n        }\n      };\n\n      DBOpenRequest.onerror = event => {\n        observer.error(`Error to connect database ${dbName}`);\n        observer.complete();\n      };\n\n      DBOpenRequest.onblocked = event => {\n        console.log('blocked');\n      };\n\n    });\n  }\n  /**\n   * Generates an Observable collection of database connections\n   * @param Databases metadata\n   */\n  createDataBases(databases: NgDataBase[]): Observable<NgConnection> {\n    const operators = [];\n    let firstIteration = true;\n    const createConnnection = (item: NgDataBase) => {\n      if (firstIteration) {\n        this.defaultConnectionName = item.name;\n        firstIteration = false;\n      }\n      operators.push(this.createConnection(item.name, item.stores, 1));\n    };\n    databases.forEach(createConnnection);\n\n    const mappingResponse = response => {\n      let data = {};\n      response.forEach(item => {\n        data = {\n          ...data,\n          ...item\n        };\n      });\n\n      return data;\n    };\n    return forkJoin(operators)\n      .pipe(\n        map(mappingResponse)\n      );\n  }\n  /**\n   * Generates a sigle database conecction client\n   */\n  private createConnection(dbName: string, tables: NgStore[], version?: number): Observable<NgConnection> {\n    return this.open(dbName, version)\n      .pipe(\n        map(data => ({[dbName]: new IndexedDatabase(data.result, data.upgraded, tables)}))\n      );\n  }\n}\n\ninterface OpenConnectionResponse {\n  success: boolean;\n  upgraded: boolean;\n  result: IDBDatabase;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IdGenerator {\n\n  generate(data?: any) {\n    return (new Date()).getTime();\n  }\n\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, skipWhile } from 'rxjs/operators';\n\nimport { NgDataBase } from './types/database.type';\nimport { NgDatabaseFactory } from './factory/database-factory';\nimport { IdGenerator } from './id-generator/id-generator';\n\n\n/** Injection token that gives the databases metadata */\nexport const NG_DATABASES = new InjectionToken<{element: any}>('NG_DATABASES');\n\n/**\n * Service that handles all Indexed Databases and\n * tables requests.\n */\n@Injectable()\nexport class IndexedDB {\n  /**\n   * Indicates if all databases have been created.\n   * Only emits an event when recives a true value.\n   */\n  get onReady() {\n    return this.databaseFactory.connectionsReady\n      .pipe(skipWhile((event: boolean) => !event));\n  }\n\n  constructor(\n    @Inject(NG_DATABASES) private databases: NgDataBase[],\n    private idGenerator: IdGenerator,\n    private databaseFactory: NgDatabaseFactory,\n  ) {\n    this.databaseFactory.createConnnections(this.databases);\n  }\n  /**\n   * Request a list with all elements\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  list<M = any>(storeName: string, databaseName?: string): Observable<M[]> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).list<M>(storeName)\n      )\n    );\n  }\n  /**\n   * Request an element by key\n   * @param storeName Store name\n   * @param key Key value to find the element\n   * @param databaseName Database name\n   */\n  get<M = any>(storeName: string, key: any, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).get<M>(storeName, key)\n      )\n    );\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  create<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    // tslint:disable-next-line: no-string-literal\n    if (!data['id']) { data['id'] = this.idGenerator.generate(); }\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).create<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to update a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  update<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).update<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to delete a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  delete(storeName: string, key: IDBValidKey, databaseName?: string): Observable<boolean> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).delete(storeName, key)\n      )\n    );\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IndexedDB, NG_DATABASES } from './core/indexed-db.service';\n\nimport { NgDatabaseFactory } from './core/factory/database-factory';\nimport { IdGenerator } from './core/id-generator/id-generator';\nimport { NgDataBase } from './core/types/database.type';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [],\n  providers: [\n    IndexedDB,\n    NgDatabaseFactory,\n    IdGenerator,\n  ],\n})\nexport class IndexedDBModule {\n  static forRoot(databases: NgDataBase[] = []): ModuleWithProviders {\n    return {\n      ngModule: IndexedDBModule,\n      providers: [\n        { provide: NG_DATABASES, useValue: databases }\n      ]\n    };\n  }\n}\n"]}