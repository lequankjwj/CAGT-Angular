{"version":3,"file":"ng-indexed-db.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://ng-indexed-db/lib/core/enums/transaction-modes.ts","ng://ng-indexed-db/lib/core/indexed-database.ts","ng://ng-indexed-db/lib/core/factory/database-factory.ts","ng://ng-indexed-db/lib/core/id-generator/id-generator.ts","ng://ng-indexed-db/lib/core/indexed-db.service.ts","ng://ng-indexed-db/lib/indexed-db.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TransactionModes {\n    READONLY = 'readonly',\n    READWRITE = 'readwrite',\n}\n","import { Observable } from 'rxjs';\n\nimport { TransactionModes } from './enums/transaction-modes';\nimport { NgStore } from './types/store.type';\n/**\n * IndexedDB client\n */\nexport class IndexedDatabase {\n\n  /** IndexedBD instance */\n  private database: IDBDatabase;\n\n  /** Indicates if databases has been upgraded */\n  private upgraded: boolean;\n\n  constructor(\n    database: IDBDatabase,\n    upgraded: boolean,\n    stores: NgStore[] = []\n  ) {\n    this.database = database;\n    this.upgraded = upgraded;\n    this.createTables(stores);\n  }\n  /**\n   * If table has been upgrades, generates the recived stores\n   * @param tables Tables metadata\n   */\n  createTables(tables: NgStore[]) {\n    if (this.upgraded) {\n      tables.forEach(item => this.createTable(item));\n    }\n  }\n  /**\n   * Generates one single sotre\n   * @param storeName Store name\n   */\n  createTable(store: NgStore) {\n    const keyPath = 'id';\n    this.database.createObjectStore(store.name, { keyPath });\n  }\n  /**\n   * Request a list with all store elements\n   * @param storeName Store name\n   */\n  list<M = any>(storeName: string): Observable<M[]> {\n    return new Observable<M[]>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.getAll();\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request a single object found by the given key\n   * @param storeName Store name\n   * @param key Predicate key\n   */\n  get<M = any>(storeName: string, key: any): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READONLY);\n      const request = store.get(key);\n      request.onsuccess = event => observer.next(request.result);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  create<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to update an element\n   * @param storeName Store name\n   * @param data data to store\n   */\n  update<M = any>(storeName: string, data: M): Observable<M> {\n    return new Observable<M>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.put(data);\n      request.onsuccess = event => observer.next(data);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Request to delete an element with the given key\n   * @param storeName Store name\n   * @param key Element key to delete\n   */\n  delete(storeName: string, key: IDBValidKey): Observable<boolean> {\n    return new Observable<boolean>(observer => {\n      const store = this.store(storeName, TransactionModes.READWRITE);\n      const request = store.delete(key);\n      request.onsuccess = event => observer.next(true);\n      request.onerror = event => observer.error(request.error);\n    });\n  }\n  /**\n   * Find the a store table by the given name\n   * @param storeName Store name to find\n   * @param mode Transaction mode\n   */\n  private store(storeName: string, mode: TransactionModes): IDBObjectStore {\n    const transaction: IDBTransaction = this.database.transaction(storeName, mode);\n    const store: IDBObjectStore = transaction.objectStore(storeName);\n    return store;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, forkJoin, timer } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\n\nimport { NgConnection } from '../types/conecction.type';\nimport { NgDataBase } from '../types/database.type';\nimport { NgStore } from '../types/store.type';\nimport { IndexedDatabase } from '../indexed-database';\n\n@Injectable()\nexport class NgDatabaseFactory {\n\n  /** Emits an event when all databases recive has been generated */\n  connectionsReady = new BehaviorSubject<any>(false);\n\n  /** Indexed database connection factory */\n  private factory: IDBFactory = window.indexedDB;\n\n  /** List of all connections handled by the service */\n  private connections: NgConnection;\n\n  /** Default connection name */\n  private defaultConnectionName: string;\n\n  /**\n   * Sends the database metadata to create.\n   * Once it has been completed, emits the\n   * connectionsReady event\n   * @param databases Databases metadata\n   */\n  createConnnections(databases: NgDataBase[]) {\n    this.createDataBases(databases)\n    .pipe(\n      map(response => this.connections = response),\n      switchMap(response => timer(100)),\n    )\n    .subscribe(() => this.connectionsReady.next(true));\n  }\n  /**\n   * Find a database connection by name. If there isn't\n   * a database name takes the default database name\n   * @param dbName Name of the database alias\n   */\n  getDatabase(dbName?: string): IndexedDatabase {\n    return this.connections[dbName ? dbName : this.defaultConnectionName];\n  }\n  /**\n   * Open a database connection\n   * @param dbName name of the database\n   * @param version version of the database\n   */\n  open(dbName: string, version?: number): Observable<OpenConnectionResponse> {\n    return new Observable(observer => {\n      let upgraded = false;\n      const DBOpenRequest: IDBOpenDBRequest = this.factory.open(dbName, version);\n\n      DBOpenRequest.onupgradeneeded = event => {\n        observer.next({\n          upgraded: true,\n          success: true,\n          result: DBOpenRequest.result\n        });\n        observer.complete();\n        upgraded = true;\n      };\n\n      DBOpenRequest.onsuccess = event => {\n        if (!upgraded) {\n          observer.next({\n            upgraded: false,\n            success: true,\n            result: DBOpenRequest.result\n          });\n          observer.complete();\n        }\n      };\n\n      DBOpenRequest.onerror = event => {\n        observer.error(`Error to connect database ${dbName}`);\n        observer.complete();\n      };\n\n      DBOpenRequest.onblocked = event => {\n        console.log('blocked');\n      };\n\n    });\n  }\n  /**\n   * Generates an Observable collection of database connections\n   * @param Databases metadata\n   */\n  createDataBases(databases: NgDataBase[]): Observable<NgConnection> {\n    const operators = [];\n    let firstIteration = true;\n    const createConnnection = (item: NgDataBase) => {\n      if (firstIteration) {\n        this.defaultConnectionName = item.name;\n        firstIteration = false;\n      }\n      operators.push(this.createConnection(item.name, item.stores, 1));\n    };\n    databases.forEach(createConnnection);\n\n    const mappingResponse = response => {\n      let data = {};\n      response.forEach(item => {\n        data = {\n          ...data,\n          ...item\n        };\n      });\n\n      return data;\n    };\n    return forkJoin(operators)\n      .pipe(\n        map(mappingResponse)\n      );\n  }\n  /**\n   * Generates a sigle database conecction client\n   */\n  private createConnection(dbName: string, tables: NgStore[], version?: number): Observable<NgConnection> {\n    return this.open(dbName, version)\n      .pipe(\n        map(data => ({[dbName]: new IndexedDatabase(data.result, data.upgraded, tables)}))\n      );\n  }\n}\n\ninterface OpenConnectionResponse {\n  success: boolean;\n  upgraded: boolean;\n  result: IDBDatabase;\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class IdGenerator {\n\n  generate(data?: any) {\n    return (new Date()).getTime();\n  }\n\n}\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { switchMap, skipWhile } from 'rxjs/operators';\n\nimport { NgDataBase } from './types/database.type';\nimport { NgDatabaseFactory } from './factory/database-factory';\nimport { IdGenerator } from './id-generator/id-generator';\n\n\n/** Injection token that gives the databases metadata */\nexport const NG_DATABASES = new InjectionToken<{element: any}>('NG_DATABASES');\n\n/**\n * Service that handles all Indexed Databases and\n * tables requests.\n */\n@Injectable()\nexport class IndexedDB {\n  /**\n   * Indicates if all databases have been created.\n   * Only emits an event when recives a true value.\n   */\n  get onReady() {\n    return this.databaseFactory.connectionsReady\n      .pipe(skipWhile((event: boolean) => !event));\n  }\n\n  constructor(\n    @Inject(NG_DATABASES) private databases: NgDataBase[],\n    private idGenerator: IdGenerator,\n    private databaseFactory: NgDatabaseFactory,\n  ) {\n    this.databaseFactory.createConnnections(this.databases);\n  }\n  /**\n   * Request a list with all elements\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  list<M = any>(storeName: string, databaseName?: string): Observable<M[]> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).list<M>(storeName)\n      )\n    );\n  }\n  /**\n   * Request an element by key\n   * @param storeName Store name\n   * @param key Key value to find the element\n   * @param databaseName Database name\n   */\n  get<M = any>(storeName: string, key: any, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).get<M>(storeName, key)\n      )\n    );\n  }\n  /**\n   * Request to store an element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  create<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    // tslint:disable-next-line: no-string-literal\n    if (!data['id']) { data['id'] = this.idGenerator.generate(); }\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).create<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to update a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  update<M = any>(storeName: string, data: M, databaseName?: string): Observable<M> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).update<M>(storeName, data)\n      )\n    );\n  }\n  /**\n   * Request to delete a stored element\n   * @param storeName Store name\n   * @param databaseName Database name\n   */\n  delete(storeName: string, key: IDBValidKey, databaseName?: string): Observable<boolean> {\n    return this.onReady.pipe(\n      switchMap(\n        () => this.databaseFactory.getDatabase(databaseName).delete(storeName, key)\n      )\n    );\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { IndexedDB, NG_DATABASES } from './core/indexed-db.service';\n\nimport { NgDatabaseFactory } from './core/factory/database-factory';\nimport { IdGenerator } from './core/id-generator/id-generator';\nimport { NgDataBase } from './core/types/database.type';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule],\n  exports: [],\n  providers: [\n    IndexedDB,\n    NgDatabaseFactory,\n    IdGenerator,\n  ],\n})\nexport class IndexedDBModule {\n  static forRoot(databases: NgDataBase[] = []): ModuleWithProviders {\n    return {\n      ngModule: IndexedDBModule,\n      providers: [\n        { provide: NG_DATABASES, useValue: databases }\n      ]\n    };\n  }\n}\n"],"names":["Observable","BehaviorSubject","map","switchMap","timer","operators","forkJoin","Injectable","InjectionToken","skipWhile","Inject","NgModule","CommonModule"],"mappings":"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"}