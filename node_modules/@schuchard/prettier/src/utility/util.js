"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const http_1 = require("http");
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const json_utils_1 = require("./json-utils");
var Config;
(function (Config) {
    Config["PackageJsonPath"] = "package.json";
    Config[Config["JsonIndentLevel"] = 4] = "JsonIndentLevel";
})(Config = exports.Config || (exports.Config = {}));
function getLatestNodeVersion(packageName) {
    const DEFAULT_VERSION = 'latest';
    return new Promise((resolve) => {
        return http_1.get(`http://registry.npmjs.org/${packageName}`, (res) => {
            let rawData = '';
            res.on('data', (chunk) => (rawData += chunk));
            res.on('end', () => {
                try {
                    const response = JSON.parse(rawData);
                    const version = response && response['dist-tags'] || {};
                    resolve(buildPackage(packageName, version.latest));
                }
                catch (e) {
                    resolve(buildPackage(packageName));
                }
            });
        }).on('error', () => resolve(buildPackage(packageName)));
    });
    function buildPackage(name, version = DEFAULT_VERSION) {
        return { name, version };
    }
}
exports.getLatestNodeVersion = getLatestNodeVersion;
function getFileAsJson(host, path) {
    const configBuffer = host.read(path);
    if (configBuffer === null) {
        throw new schematics_1.SchematicsException(`Could not find (${path})`);
    }
    const content = configBuffer.toString();
    return core_1.parseJson(content, core_1.JsonParseMode.Loose);
}
exports.getFileAsJson = getFileAsJson;
function addPropertyToPackageJson(tree, context, propertyName, propertyValue) {
    const packageJsonAst = readPackageJson(tree);
    const pkgNode = json_utils_1.findPropertyInAstObject(packageJsonAst, propertyName);
    const recorder = tree.beginUpdate('package.json');
    if (!pkgNode) {
        // outer node missing, add key/value
        json_utils_1.appendPropertyInAstObject(recorder, packageJsonAst, propertyName, propertyValue, Config.JsonIndentLevel);
    }
    else if (pkgNode.kind === 'object') {
        // property exists, update values
        for (let [key, value] of Object.entries(propertyValue)) {
            const innerNode = json_utils_1.findPropertyInAstObject(pkgNode, key);
            if (!innerNode) {
                // script not found, add it
                context.logger.debug(`creating ${key} with ${value}`);
                json_utils_1.insertPropertyInAstObjectInOrder(recorder, pkgNode, key, value, Config.JsonIndentLevel);
            }
            else {
                // script found, overwrite value
                context.logger.debug(`overwriting ${key} with ${value}`);
                const { end, start } = innerNode;
                recorder.remove(start.offset, end.offset - start.offset);
                recorder.insertRight(start.offset, JSON.stringify(value));
            }
        }
    }
    tree.commitUpdate(recorder);
}
exports.addPropertyToPackageJson = addPropertyToPackageJson;
function readPackageJson(tree) {
    const buffer = tree.read(Config.PackageJsonPath);
    if (buffer === null) {
        throw new schematics_1.SchematicsException('Could not read package.json.');
    }
    const content = buffer.toString();
    const packageJson = core_1.parseJsonAst(content, core_1.JsonParseMode.Strict);
    if (packageJson.kind != 'object') {
        throw new schematics_1.SchematicsException('Invalid package.json. Was expecting an object');
    }
    return packageJson;
}
exports.readPackageJson = readPackageJson;
//# sourceMappingURL=util.js.map