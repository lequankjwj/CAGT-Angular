import { AfterViewInit, DoCheck, ElementRef, KeyValueDiffer, KeyValueDiffers, OnInit } from "@angular/core";
import { AbstractControl, ControlValueAccessor, Validator } from "@angular/forms";
import { CurrencyMaskConfig } from "./currency-mask.config";
import { InputHandler } from "./input.handler";
import * as ɵngcc0 from '@angular/core';
export declare const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR: any;
export declare class CurrencyMaskDirective implements AfterViewInit, ControlValueAccessor, DoCheck, OnInit, Validator {
    private currencyMaskConfig;
    private elementRef;
    private keyValueDiffers;
    max: number;
    min: number;
    options: any;
    inputHandler: InputHandler;
    keyValueDiffer: KeyValueDiffer<any, any>;
    optionsTemplate: {
        align: string;
        allowNegative: boolean;
        decimal: string;
        precision: number;
        prefix: string;
        suffix: string;
        thousands: string;
    };
    constructor(currencyMaskConfig: CurrencyMaskConfig, elementRef: ElementRef, keyValueDiffers: KeyValueDiffers);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnInit(): void;
    handleBlur(event: any): void;
    handleClick(event: any): void;
    handleCut(event: any): void;
    handleInput(event: any): void;
    handleKeydown(event: any): void;
    handleKeypress(event: any): void;
    handleKeyup(event: any): void;
    handlePaste(event: any): void;
    isChromeAndroid(): boolean;
    registerOnChange(callbackFunction: Function): void;
    registerOnTouched(callbackFunction: Function): void;
    setDisabledState(value: boolean): void;
    validate(abstractControl: AbstractControl): {
        [key: string]: any;
    };
    writeValue(value: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CurrencyMaskDirective, [{ optional: true; }, null, null]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CurrencyMaskDirective, "[currencyMask]", never, { "options": "options"; "max": "max"; "min": "min"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmVuY3ktbWFzay5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiY3VycmVuY3ktbWFzay5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgRWxlbWVudFJlZiwgS2V5VmFsdWVEaWZmZXIsIEtleVZhbHVlRGlmZmVycywgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgQ3VycmVuY3lNYXNrQ29uZmlnIH0gZnJvbSBcIi4vY3VycmVuY3ktbWFzay5jb25maWdcIjtcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gXCIuL2lucHV0LmhhbmRsZXJcIjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IENVUlJFTkNZTUFTS0RJUkVDVElWRV9WQUxVRV9BQ0NFU1NPUjogYW55O1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ3VycmVuY3lNYXNrRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIERvQ2hlY2ssIE9uSW5pdCwgVmFsaWRhdG9yIHtcbiAgICBwcml2YXRlIGN1cnJlbmN5TWFza0NvbmZpZztcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY7XG4gICAgcHJpdmF0ZSBrZXlWYWx1ZURpZmZlcnM7XG4gICAgbWF4OiBudW1iZXI7XG4gICAgbWluOiBudW1iZXI7XG4gICAgb3B0aW9uczogYW55O1xuICAgIGlucHV0SGFuZGxlcjogSW5wdXRIYW5kbGVyO1xuICAgIGtleVZhbHVlRGlmZmVyOiBLZXlWYWx1ZURpZmZlcjxhbnksIGFueT47XG4gICAgb3B0aW9uc1RlbXBsYXRlOiB7XG4gICAgICAgIGFsaWduOiBzdHJpbmc7XG4gICAgICAgIGFsbG93TmVnYXRpdmU6IGJvb2xlYW47XG4gICAgICAgIGRlY2ltYWw6IHN0cmluZztcbiAgICAgICAgcHJlY2lzaW9uOiBudW1iZXI7XG4gICAgICAgIHByZWZpeDogc3RyaW5nO1xuICAgICAgICBzdWZmaXg6IHN0cmluZztcbiAgICAgICAgdGhvdXNhbmRzOiBzdHJpbmc7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjdXJyZW5jeU1hc2tDb25maWc6IEN1cnJlbmN5TWFza0NvbmZpZywgZWxlbWVudFJlZjogRWxlbWVudFJlZiwga2V5VmFsdWVEaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgaGFuZGxlQmx1cihldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVDbGljayhldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVDdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlSW5wdXQoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaGFuZGxlS2V5ZG93bihldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVLZXlwcmVzcyhldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVLZXl1cChldmVudDogYW55KTogdm9pZDtcbiAgICBoYW5kbGVQYXN0ZShldmVudDogYW55KTogdm9pZDtcbiAgICBpc0Nocm9tZUFuZHJvaWQoKTogYm9vbGVhbjtcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGNhbGxiYWNrRnVuY3Rpb246IEZ1bmN0aW9uKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChjYWxsYmFja0Z1bmN0aW9uOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgdmFsaWRhdGUoYWJzdHJhY3RDb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgICB9O1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=